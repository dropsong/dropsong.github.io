<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dropsong&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://dropsong.github.io/atom.xml" rel="self"/>
  
  <link href="https://dropsong.github.io/"/>
  <updated>2024-10-29T16:14:37.733Z</updated>
  <id>https://dropsong.github.io/</id>
  
  <author>
    <name>dropsong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 高级</title>
    <link href="https://dropsong.github.io/posts/eadf1d9.html"/>
    <id>https://dropsong.github.io/posts/eadf1d9.html</id>
    <published>2024-10-22T12:41:29.000Z</published>
    <updated>2024-10-29T16:14:37.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>内网穿透原理图：</p><p><img src="https://s2.loli.net/2024/10/21/zoUnOfhdAH7kBEx.png" alt="90-1.png"></p><p>但是这种技术妨碍了 ISP 收互联网企业的带宽费用，因此 ISP 不会喜欢这种技术。</p><p>代码：<br><a href="https://github.com/loveofpeach/py_webServer">https://github.com/loveofpeach/py_webServer</a></p><h1 id="GIL（全局解释器锁）"><a href="#GIL（全局解释器锁）" class="headerlink" title="GIL（全局解释器锁）"></a>GIL（全局解释器锁）</h1><p>Python 语言和 GIL 没有关系。仅仅是由于<strong>历史原因</strong>在 Cpython 虚拟机(解释器)，<strong>难以移除</strong> GIL。</p><p>GIL：全局解释器锁。<strong>每个线程在执行的过程都需要先获取 GIL</strong>，保证同一时刻只有一个线程可以执行代码。</p><p>线程释放 GIL 锁的情况： 在 IO 操作等可能会引起阻塞的 system call 之前，可以暂时释放 GIL，但在执行完毕后，必须重新获取 GIL，Python 3.x 使用计时器（执行时间达到阈值后，当前线程释放GIL）或 Python 2.x tickets 计数达到 100</p><p><strong>Python 使用多进程是可以利用多核的 CPU 资源的。</strong></p><p><strong>多线程爬取比单线程性能有提升</strong>，因为遇到 IO 阻塞会自动释放 GIL 锁</p><h1 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h1><ul><li><code>xx</code>: 公有变量</li><li><code>_x</code>: 单前置下划线，私有化属性或方法，<code>from somemodule import *</code> 禁止导入，类对象和子类可以访问</li><li><code>__xx</code>：双前置下划线，避免与子类中的属性命名冲突，无法在外部直接访问（名字重整所以访问不到）</li><li><code>__xx__</code>:双前后下划线，用户名字空间的魔法对象或属性。例如:<code>__init__</code> ，<strong>不要自己发明这样的名字</strong></li><li><code>xx_</code>:单后置下划线，用于避免与 Python 关键词的冲突</li></ul><h1 id="模块导入问题"><a href="#模块导入问题" class="headerlink" title="模块导入问题"></a>模块导入问题</h1><p>不可变类型的全局变量用 from 方式导入的时候，相当于一份拷贝，在一个文件中修改，对另一个文件中的值没有影响。</p><h1 id="多继承的解决方案"><a href="#多继承的解决方案" class="headerlink" title="多继承的解决方案"></a>多继承的解决方案</h1><p>总结：</p><ol><li>使用 <code>super()</code></li><li>使用 <code>*args</code>、<code>**kwargs</code></li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******多继承使用 super().__init__ 发生的状态******&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;parent 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;parent 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs) <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs) <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandson</span>(Son1, Son2):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, gender</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Grandson 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        <span class="comment"># 多继承时，相对于使用类名.__init__方法，要把每个父类全部写一遍</span></span><br><span class="line">        <span class="comment"># 而 super 只用一句话，执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因</span></span><br><span class="line">        <span class="comment"># super(Grandson, self).__init__(name, age, gender)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age, gender)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Grandson 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Grandson.__mro__) <span class="comment">#打印出来顺序是谁，将来调用的就是谁</span></span><br><span class="line">gs = Grandson(<span class="string">&#x27;grandson&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;姓名：&#x27;</span>, gs.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;年龄：&#x27;</span>, gs.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;性别：&#x27;</span>, gs.gender)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******多继承使用 super().__init__ 发生的状态******\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">******多继承使用 super().__init__ 发生的状态******</span></span><br><span class="line"><span class="string">(&lt;class &#x27;__main__.Grandson&#x27;&gt;, &lt;class &#x27;__main__.Son1&#x27;&gt;, &lt;class &#x27;__main__.Son2&#x27;&gt;, &lt;class &#x27;__main__.Parent&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"><span class="string">Grandson 的 init 开始被调用</span></span><br><span class="line"><span class="string">Son1 的 init 开始被调用</span></span><br><span class="line"><span class="string">Son2 的 init 开始被调用</span></span><br><span class="line"><span class="string">parent 的 init 开始被调用</span></span><br><span class="line"><span class="string">parent 的 init 结束被调用</span></span><br><span class="line"><span class="string">Son2 的 init 结束被调用</span></span><br><span class="line"><span class="string">Son1 的 init 结束被调用</span></span><br><span class="line"><span class="string">Grandson 的 init 结束被调用</span></span><br><span class="line"><span class="string">姓名： grandson</span></span><br><span class="line"><span class="string">年龄： 12</span></span><br><span class="line"><span class="string">性别： 男</span></span><br><span class="line"><span class="string">******多继承使用 super().__init__ 发生的状态******</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h1><h2 id="类属性、实例属性"><a href="#类属性、实例属性" class="headerlink" title="类属性、实例属性"></a>类属性、实例属性</h2><p>实例属性属于对象，类属性属于类。</p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Province</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    country = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># 实例属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例对象</span></span><br><span class="line">obj = Province(<span class="string">&#x27;山东省&#x27;</span>)</span><br><span class="line"><span class="comment"># 直接访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br><span class="line"><span class="comment"># 直接访问类属性</span></span><br><span class="line">Province.country</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">山东省</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>实例属性需要通过对象来访，类属性通过类访问。</strong></p><p>类属性在内存中只保存一份，实例属性在每个对象中都要保存一份。</p><h2 id="实例方法、静态方法、类方法"><a href="#实例方法、静态方法、类方法" class="headerlink" title="实例方法、静态方法、类方法"></a>实例方法、静态方法、类方法</h2><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ord_func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义实例方法，至少有一个 self 参数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(self.name)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_func</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义类方法，至少有一个 cls 参数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义静态方法 ，无默认参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = Foo(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用实例方法</span></span><br><span class="line">f.ord_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">Foo.class_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Foo.static_func()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">实例方法</span></span><br><span class="line"><span class="string">类方法</span></span><br><span class="line"><span class="string">静态方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="property-属性"><a href="#property-属性" class="headerlink" title="property 属性"></a>property 属性</h1><p>一种懒人方法，可以不用写括号。</p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am func&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 property 属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am prop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo_obj = Foo()</span><br><span class="line">foo_obj.func() <span class="comment"># 调用实例方法</span></span><br><span class="line">foo_obj.prop <span class="comment"># 调用 property 属性</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am func</span></span><br><span class="line"><span class="string">I am prop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>property 属性可以用来实现只能读不能写的属性。 <del>（想必这就是莽蛇语言的独到之处了吧）</del></p><p>但是也可以有别的方法去写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@property&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.setter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.deleter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price </span><br><span class="line">obj.price = <span class="number">123</span> <span class="comment"># 自动执行 @price.setter 修饰的 price 方法，并将 123 赋值给方法的参数</span></span><br><span class="line"><span class="keyword">del</span> obj.price <span class="comment"># 自动执行 @price.deleter 修饰的 price 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@property</span></span><br><span class="line"><span class="string">@price.setter</span></span><br><span class="line"><span class="string">@price.deleter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用类属性的方式创建 property 属性</strong>时，经典类和新式类无区别：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">reuslt = obj.BAR <span class="comment"># 自动调用 get_bar 方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(reuslt)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">laowang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这种写法可以拓展为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_bar</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;必须两个参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;set value&#x27;</span> + value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deleter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar, set_bar, del_bar, <span class="string">&quot;description...&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.BAR   <span class="comment"># 自动调用第一个参数中定义的方法：get_bar</span></span><br><span class="line">obj.BAR = <span class="string">&quot;alex&quot;</span>  <span class="comment"># 自动调用第二个参数中定义的方法：set_bar 方法，并将“alex”当作参数传入</span></span><br><span class="line">desc = Foo.BAR.__doc__  <span class="comment"># 自动获取第四个参数中设置的值：description...</span></span><br><span class="line"><span class="built_in">print</span>(desc)</span><br><span class="line"><span class="keyword">del</span> obj.BAR  <span class="comment"># 自动调用第三个参数中定义的方法：del_bar 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">getter...</span></span><br><span class="line"><span class="string">setter...</span></span><br><span class="line"><span class="string">description...</span></span><br><span class="line"><span class="string">deleter...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 property 升级 getter 和 setter 方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMoney</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setMoney</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br><span class="line">            <span class="comment"># 定义一个属性，当对这个 money 设置值时调用 setMoney,当获取值时调用 getMoney</span></span><br><span class="line"></span><br><span class="line">    money = <span class="built_in">property</span>(getMoney, setMoney)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span> <span class="comment"># 调用 setMoney 方法</span></span><br><span class="line"><span class="built_in">print</span>(a.money) <span class="comment"># 调用 getMoney 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="魔法属性-call"><a href="#魔法属性-call" class="headerlink" title="魔法属性 call"></a>魔法属性 call</h1><p>对象后面加括号，触发执行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj() <span class="comment"># 执行 __call__&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__call__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>莽蛇语言魅力时刻。</p><h1 id="with-与“上下文管理器”"><a href="#with-与“上下文管理器”" class="headerlink" title="with 与“上下文管理器”"></a>with 与“上下文管理器”</h1><p>场景：应用程序打开某些资源并执行完业务逻辑之后，必须做的一件事就是要关闭（断开）该资源。</p><p><strong>普通版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m1</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;python 之禅&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这样写有一个潜在的问题，如果在调用 write 的过程中，出现了异常进而导致后续代码无法继续执行，close 方法无法被正常调用，因此资源就会一直被该程序占用者释放。那么该如何改进代码呢？</p><p><strong>进阶版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m2</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f.write(<span class="string">&quot;python 之禅&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;oops error&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>缺点是写起来太麻烦。</p><p><strong>高级版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m3</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;Python 之禅&quot;</span>)</span><br></pre></td></tr></table></figure><p>一种更加简洁、优雅的方式就是用 <strong>with 关键字</strong>。类似于 C++ 的 RAII 。</p><p><strong>上下文管理器</strong>的实现和魔法属性 <code>__enter__()</code> 和 <code>__exit__()</code> 有关，和 C++ 原理上差不多，但是碍于 Python 混乱的语法，稍微显得麻烦一点，此处略去。</p><p>实现上下文管理器的另外方式：<br>Python 还提供了一个 contextmanager 的装饰器，更进一步简化了上下文管理器的实现方式。通过 yield 将函数分割成两部分，yield 之前的语句在 <code>__enter__</code> 方法中执行，yield 之后的语句在 <code>__exit__</code> 方法中执行。紧跟在 yield 后面的值是函数的返回值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_open</span>(<span class="params">path, mode</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(path, mode)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">with</span> my_open(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello , the simplest context manager&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="MySQL-知识补充"><a href="#MySQL-知识补充" class="headerlink" title="MySQL 知识补充"></a>MySQL 知识补充</h1><p>绕个弯补充一下，之后会可能会用到。</p><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>例子：</p><p><img src="https://s2.loli.net/2024/10/23/5BrHzRV8aN9pfm3.png" alt="90-2.png"></p><p>用字符串拼接的方式去进行 sql 是非常危险的。</p><p>解决方法，直接传到 <code>execute()</code> 中，不要分两步写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params = [find_name]</span><br><span class="line">count = cs1.execute(<span class="string">&#x27;select * from goods where name=%s&#x27;</span>, params)</span><br></pre></td></tr></table></figure><h2 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h2><p>在生产环境下操作数据库时，绝对不可以使用 root 账户连接，而是创建特定的账户，授予这个账户特定的操作权限。</p><p>MySQL 的账户可以分为以下几种：</p><ul><li>服务实例级账号：启动了一个 mysql，即为一个数据库实例；如果某用户如 root,拥有服务实例级分配的权限，那么该账号就可以删除所有的数据库、连同这些库中的表</li><li>数据库级别账号：对特定数据库执行增删改查的所有操作</li><li>数据表级别账号：对特定表执行增删改查等所有操作</li><li>字段级别的权限：对某些表的特定字段进行操作</li><li>存储程序级别的账号：对存储程序进行增删改查的操作</li></ul><p>注册新用户及之后的一些操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> akashi.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> yanfei           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用 <code>sudo mysql -u yanfei -p</code> 进入之后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> goods            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> miaochuan        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> goods limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                        <span class="operator">|</span> cate_name <span class="operator">|</span> brand_name <span class="operator">|</span> price    <span class="operator">|</span> is_show          <span class="operator">|</span> is_saleoff             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> r510vc <span class="number">15.6</span> 英寸笔记本      <span class="operator">|</span> 笔记本    <span class="operator">|</span> 华硕       <span class="operator">|</span> <span class="number">3399.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> g150th <span class="number">15.6</span> 英寸游戏本      <span class="operator">|</span> 游戏本    <span class="operator">|</span> 雷神       <span class="operator">|</span> <span class="number">8499.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> x550cc <span class="number">15.6</span> 英寸笔记本      <span class="operator">|</span> 笔记本    <span class="operator">|</span> 华硕       <span class="operator">|</span> <span class="number">2799.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> x240 超极本                 <span class="operator">|</span> 超级本    <span class="operator">|</span> 联想       <span class="operator">|</span> <span class="number">4880.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> u330p <span class="number">13.3</span> 英寸超极本       <span class="operator">|</span> 超级本    <span class="operator">|</span> 联想       <span class="operator">|</span> <span class="number">4299.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> goods <span class="keyword">values</span>(<span class="number">6</span>, 非常厉害的笔记本, 笔记本 ,联想, <span class="number">3333.0</span>);</span><br><span class="line">ERROR <span class="number">1142</span> (<span class="number">42000</span>): <span class="keyword">INSERT</span> command denied <span class="keyword">to</span> <span class="keyword">user</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">&#x27;goods&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><h3 id="主机操作"><a href="#主机操作" class="headerlink" title="主机操作"></a>主机操作</h3><p>在主机上配置账户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;192.168.19.129&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"># <span class="number">192.168</span><span class="number">.19</span><span class="number">.129</span> 是从机的 IP</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;192.168.19.129&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>修改 mysql 的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class="line">server-id = 1</span><br><span class="line">expire_logs_days = 1</span><br><span class="line">max_binlog_size = 100M</span><br><span class="line">binlog_do_db = <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>重启 mysql 服务（重启之前确保 test 数据库是存在的）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>查看二进制日志是否生成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="从机操作"><a href="#从机操作" class="headerlink" title="从机操作"></a>从机操作</h3><p>修改 mysql 的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line">expire_logs_days = 10</span><br><span class="line">max_binlog_size = 100M</span><br></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>配置主从库之间的通信：</p><p><img src="https://s2.loli.net/2024/10/24/oICvga6SjksDUmx.png" alt="90-3.png"></p><p>从机上设置从库（129 机）与主库（130 机）进行通信。先把从机的 test 数据库清空，模板：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">MASTER_HOST<span class="operator">=</span><span class="string">&#x27;master_host_name&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;replication_user_name&#x27;</span>,#backup</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;replication_password&#x27;</span>, #<span class="number">123</span></span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;recorded_log_file_name&#x27;</span>, # mysql<span class="operator">-</span>bin<span class="number">.000056</span></span><br><span class="line">MASTER_LOG_POS<span class="operator">=</span>recorded_log_position; # <span class="number">155</span></span><br></pre></td></tr></table></figure><p>作为一个可以参考的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&#x27;192.168.19.130&#x27;,</span><br><span class="line">MASTER_USER=&#x27;backup&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123&#x27;,</span><br><span class="line">MASTER_LOG_FILE=&#x27;mysql-bin.000149&#x27;,</span><br><span class="line">MASTER_LOG_POS=155;</span><br></pre></td></tr></table></figure><p><code>START SLAVE;</code> 开启主从同步线程（关闭用 <code>stop slave</code>）。</p><p><code>show slave status\G</code> ，一个可能的输出是：</p><p><img src="https://s2.loli.net/2024/10/24/reZftIPqCJHKbL2.png" alt="90-4.png"></p><p>针对多个数据库，设置为：</p><p><img src="https://bu.dusays.com/2024/10/24/671a16fe29f2c.png" alt="90-5.png"></p><h1 id="迷你-web-框架"><a href="#迷你-web-框架" class="headerlink" title="迷你 web 框架"></a>迷你 web 框架</h1><p>本节实现一个 mini frame web 框架。功能类似一个迷你的 Django .</p><p><img src="https://s2.loli.net/2024/10/24/5JlHCr97Ten1Nqd.jpg" alt="90-6.jpeg"></p><h2 id="定义-WSGI-接口"><a href="#定义-WSGI-接口" class="headerlink" title="定义 WSGI 接口"></a>定义 WSGI 接口</h2><p>WSGI 接口定义非常简单，它只要求 Web 开发者实现一个函数，就可以响应 HTTP 请求。我们来看一个最简单的 Web 版本的“Hello World!”：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>application()</code> 函数就是符合 WSGI 标准的一个 HTTP 处理函数，它接收两个参数：</p><ul><li><code>environ</code>：一个包含所有 HTTP 请求信息的 dict 对象。</li><li><code>start_response</code>：一个发送 HTTP 响应的函数。</li></ul><p><code>application()</code> 函数必须由 WSGI 服务器来调用。我们现在做的 web 服务器项目，就是一个既能解析静态网页，又能解析动态网页的服务器。</p><p>web 框架传递的字典的一个实际例子（不需要掌握）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;HTTP_ACCEPT_LANGUAGE&#x27;: &#x27;zh-cn&#x27;,</span><br><span class="line">    &#x27;wsgi.file_wrapper&#x27;: &lt;built-infunctionuwsgi_sendfile&gt;,</span><br><span class="line">    &#x27;HTTP_UPGRADE_INSECURE_REQUESTS&#x27;: &#x27;1&#x27;,</span><br><span class="line">    &#x27;uwsgi.version&#x27;: b&#x27;2.0.15&#x27;,</span><br><span class="line">    &#x27;REMOTE_ADDR&#x27;: &#x27;172.16.7.1&#x27;,</span><br><span class="line">    &#x27;wsgi.errors&#x27;: &lt;_io.TextIOWrappername=2mode=&#x27;w&#x27;encoding=&#x27;UTF-8&#x27;&gt;,</span><br><span class="line">    &#x27;wsgi.version&#x27;: (1,0),</span><br><span class="line">    &#x27;REMOTE_PORT&#x27;: &#x27;40432&#x27;,</span><br><span class="line">    &#x27;REQUEST_URI&#x27;: &#x27;/&#x27;,</span><br><span class="line">    &#x27;SERVER_PORT&#x27;: &#x27;8000&#x27;,</span><br><span class="line">    &#x27;wsgi.multithread&#x27;: False,</span><br><span class="line">    &#x27;HTTP_ACCEPT&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span><br><span class="line">    &#x27;HTTP_HOST&#x27;: &#x27;172.16.7.152: 8000&#x27;,</span><br><span class="line">    &#x27;wsgi.run_once&#x27;: False,</span><br><span class="line">    &#x27;wsgi.input&#x27;: &lt;uwsgi._Inputobjectat0x7f7faecdc9c0&gt;,</span><br><span class="line">    &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;,</span><br><span class="line">    &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;,</span><br><span class="line">    &#x27;HTTP_ACCEPT_ENCODING&#x27;: &#x27;gzip,deflate&#x27;,</span><br><span class="line">    &#x27;HTTP_CONNECTION&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">    &#x27;uwsgi.node&#x27;: b&#x27;ubuntu&#x27;,</span><br><span class="line">    &#x27;HTTP_DNT&#x27;: &#x27;1&#x27;,</span><br><span class="line">    &#x27;UWSGI_ROUTER&#x27;: &#x27;http&#x27;,</span><br><span class="line">    &#x27;SCRIPT_NAME&#x27;: &#x27;&#x27;,</span><br><span class="line">    &#x27;wsgi.multiprocess&#x27;: False,</span><br><span class="line">    &#x27;QUERY_STRING&#x27;: &#x27;&#x27;,</span><br><span class="line">    &#x27;PATH_INFO&#x27;: &#x27;/index.html&#x27;,</span><br><span class="line">    &#x27;wsgi.url_scheme&#x27;: &#x27;http&#x27;,</span><br><span class="line">    &#x27;HTTP_USER_AGENT&#x27;: &#x27;Mozilla/5.0(Macintosh;IntelMacOSX10_12_5)AppleWebKit/603.2.4(KHTML,likeGecko)Version/10.1.1Safari/603.2.4&#x27;,</span><br><span class="line">    &#x27;SERVER_NAME&#x27;: &#x27;ubuntu&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>如果请求是不是 html，是动态请求，后缀是 <code>.py</code>，那如何处理呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author luke</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 创建套接字</span></span><br><span class="line">        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 绑定</span></span><br><span class="line">        self.tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">        self.tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">service_client</span>(<span class="params">self, new_socket</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为这个浏览器返回数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求</span></span><br><span class="line">        <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">        <span class="comment"># .....</span></span><br><span class="line">        request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;&gt;&gt;&gt;&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">        request_lines = request.splitlines()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(request_lines)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">        <span class="comment"># get post put del</span></span><br><span class="line">        file_name = <span class="string">&quot;&quot;</span></span><br><span class="line">        ret = re.<span class="keyword">match</span>(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># print(&quot;*&quot;*50, file_name)</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(<span class="string">&quot;.py&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./html&quot;</span> + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;------file not found-----&quot;</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                html_content = f.read()</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">                response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">                <span class="comment"># response += &quot;hahahhah&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="comment"># 将response body发送给浏览器</span></span><br><span class="line">                new_socket.send(html_content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 2.2 如果是以.py结尾，那么就认为是动态资源的请求</span></span><br><span class="line">            header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            body = <span class="string">&quot;hahahah %s &quot;</span> % time.ctime()</span><br><span class="line"></span><br><span class="line">            response = header + body</span><br><span class="line">            <span class="comment"># 发送response给浏览器</span></span><br><span class="line">            new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭套接</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">            new_socket, client_addr = self.tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监听套接字</span></span><br><span class="line">        self.tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行&quot;&quot;&quot;</span></span><br><span class="line">    wsgi_server = WSGIServer()</span><br><span class="line">    wsgi_server.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/25/ClMAvtNXp219oSa.png" alt="90-7.png"></p><p>上面的代码已经接下来的几个版本，参考代码：<br><a href="https://github.com/loveofpeach/py_webServer/tree/master/web_mini_frame">https://github.com/loveofpeach/py_webServer/tree/master/web_mini_frame</a></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>可以在函数里面定义函数，例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">line6</span>(<span class="params">k, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_line</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(k*x+b)</span><br><span class="line">    <span class="keyword">return</span> create_line</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 是 create_line 函数，函数中 k 的值是 1，b 的值是 2</span></span><br><span class="line">l1 = line6(<span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line">l1(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>函数、匿名函数、闭包、对象当做实参时有什么区别？</p><ol><li>匿名函数能够完成基本的<strong>简单功能</strong>，传递是这个函数的引用<strong>只有功能(lambda)</strong></li><li>普通函数能够完成<strong>较为复杂的功能</strong>，传递是这个函数的引用<strong>只有功能</strong></li><li>闭包能够将较为复杂的功能，传递是这个闭包中的<strong>函数以及数据</strong>，因此传递是功能+数据（<strong>相对于对象，占用空间少</strong>）</li><li>对象能够完成最为复杂的功能，传递是<strong>很多数据+很多功能</strong>，因此传递是功能+数据</li></ol><p><strong>闭包引用了外部函数的局部变量，若外部函数的局部变量没有及时释放，会消耗内存。</strong></p><p>闭包中对变量的修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个代码会报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    x = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----x=%d&quot;</span> % x)</span><br><span class="line">        x = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----x=%d&quot;</span> % x)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t1()</span><br></pre></td></tr></table></figure><p>因为我们打印 x 时，没有提前定义，需要在打印之前增加 <code>nonlocal x</code> ，使用外部函数的变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以正常运行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    x = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----x=%d&quot;</span> % x)</span><br><span class="line">        x = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----x=%d&quot;</span> % x)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----1----x=200</span></span><br><span class="line"><span class="string">----2----x=100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h2><p>初创公司有 N 个业务部门，基础平台部门负责提供底层的功能，如：数据库操作、redis 调用、监控 API 等功能。业务部门使用基础功能时，只需调用基础平台提供的功能即可。如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############### 基础平台提供的功能如下 ###############</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br><span class="line"><span class="comment">############### 业务部门 A 调用基础平台提供的功能 ###############</span></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br><span class="line"><span class="comment">############### 业务部门 B 调用基础平台提供的功能 ###############</span></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure><p>目前公司有条不紊的进行着，但是，以前基础平台的开发人员在写代码时候没有关注验证相关的问题，即：基础平台的提供的功能可以被任何人使用。现在需要对基础平台的所有功能<strong>进行重构，为平台提供的所有功能添加验证机制</strong>，即：执行功能前，先进行验证。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>遵循<strong>开放封闭原则</strong>，对拓展开放，对修改闭合。使用装饰器：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">w1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment"># 验证 1</span></span><br><span class="line">        <span class="comment"># 验证 2</span></span><br><span class="line">        <span class="comment"># 验证 3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>实际例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器一定是内部有闭包的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----permission check1----</span></span><br><span class="line"><span class="string">----permission check2----</span></span><br><span class="line"><span class="string">----test1-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>关于一些原理上的细节：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- 开始进行装饰 ---&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 开始进行装饰 ---</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">即使没有调用 test1() ，</span></span><br><span class="line"><span class="string">这段代码也相当于执行了：</span></span><br><span class="line"><span class="string">test1 = set_func(test1)</span></span><br><span class="line"><span class="string">因此会有输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- 开始进行装饰 ---&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">a</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func(a)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1----- %d&#x27;</span> % num)</span><br><span class="line"></span><br><span class="line">test1(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 开始进行装饰 ---</span></span><br><span class="line"><span class="string">----permission check1----</span></span><br><span class="line"><span class="string">----permission check2----</span></span><br><span class="line"><span class="string">----test1----- 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="多个装饰器装饰同一个函数"><a href="#多个装饰器装饰同一个函数" class="headerlink" title="多个装饰器装饰同一个函数"></a>多个装饰器装饰同一个函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---开始进行装饰权限 1 的功能---&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---这是权限验证 1----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_second</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---开始进行装饰权限 2 的功能---&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---这是权限验证 2----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离函数越近的先装饰</span></span><br><span class="line"><span class="meta">@add_first</span></span><br><span class="line"><span class="meta">@add_second</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后装饰的先执行</span></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---开始进行装饰权限 2 的功能---</span></span><br><span class="line"><span class="string">---开始进行装饰权限 1 的功能---</span></span><br><span class="line"><span class="string">---这是权限验证 1----</span></span><br><span class="line"><span class="string">---这是权限验证 2----</span></span><br><span class="line"><span class="string">----test1-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">一种解释：</span></span><br><span class="line"><span class="string">s = add_second(test1)</span></span><br><span class="line"><span class="string">f = add_first(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个更具体的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeBold</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;b&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/b&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeItalic</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;i&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/i&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test1())</span><br><span class="line"><span class="built_in">print</span>(test2())</span><br><span class="line"><span class="built_in">print</span>(test3())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;b&gt;hello world-1&lt;/b&gt;</span></span><br><span class="line"><span class="string">&lt;i&gt;hello world-2&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;b&gt;&lt;i&gt;hello world-3&lt;/i&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器(decorator)功能有很多，具体来说：</p><ol><li>引入日志，在执行某个函数前或者函数后记录日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li><li>等</li></ol><h3 id="被装饰的函数带返回值"><a href="#被装饰的函数带返回值" class="headerlink" title="被装饰的函数带返回值"></a>被装饰的函数带返回值</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;----hahah---&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">foo()</span><br><span class="line">ret=getInfo()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:30:36 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:30:37 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">getInfo called at Sun Oct 27 22:30:37 2024</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，上面的代码没有拿到返回值，应该修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))</span><br><span class="line">        <span class="keyword">return</span> func() <span class="comment"># modified</span></span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;----hahah---&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">foo()</span><br><span class="line">ret=getInfo()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:35:25 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:35:26 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">getInfo called at Sun Oct 27 22:35:26 2024</span></span><br><span class="line"><span class="string">----hahah---</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>一般情况下为了让装饰器更通用，都可以加上 return .</strong></p><h3 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h3><p>装饰器带参数，在原有装饰器的基础上，设置外部变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun_arg</span>(<span class="params">pre=<span class="string">&quot;hello&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, pre))</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> wrapped_func</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的装饰过程</span></span><br><span class="line"><span class="comment"># 1. 调用 timefun_arg(&quot;wangdao&quot;)</span></span><br><span class="line"><span class="comment"># 2. 将步骤 1 得到的返回值，即 time_fun 返回， 然后 time_fun(foo)</span></span><br><span class="line"><span class="comment"># 3. 将 time_fun(foo)的结果返回，即 wrapped_func</span></span><br><span class="line"><span class="comment"># 4. 让 foo = wrapped_fun，即 foo 现在指向 wrapped_func</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&quot;wangdao&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&quot;python&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">too</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am too&quot;</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at wangdao</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at wangdao</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">too called at python</span></span><br><span class="line"><span class="string">I am too</span></span><br><span class="line"><span class="string">too called at python</span></span><br><span class="line"><span class="string">I am too</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>前期提要：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwds</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am call&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am call</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器函数其实是这样一个接口约束，它必须接受一个 callable 对象作为参数，然后返回一个 callable 对象。在 Python 中一般 callable 对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是 callable 的。</p><p>一个具体的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.__func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwds</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am call&#x27;</span>)</span><br><span class="line">        self.__func(*args, **kwds)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am foo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># t = Test(foo)</span></span><br><span class="line"><span class="comment"># t()</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">&#x27;akashi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am call</span></span><br><span class="line"><span class="string">I am foo akashi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="装饰后的注释问题"><a href="#装饰后的注释问题" class="headerlink" title="装饰后的注释问题"></a>装饰后的注释问题</h2><p>问题演示和解决方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Docstring&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example.__name__, example.__doc__) <span class="comment">#wper decorator</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">wper decorator</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_new_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)   </span><span class="comment"># focus this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;I am example1&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example1 function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example1.__name__, example1.__doc__) <span class="comment"># example Docstring</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">example1 I am example1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="迷你-web-框架（续）"><a href="#迷你-web-框架（续）" class="headerlink" title="迷你 web 框架（续）"></a>迷你 web 框架（续）</h1><p>本节概要：<br>之前，去替换 html 模板中的变量时，替换的内容是随意写的，现在要替换的内容是从 mysql 数据库中查出来的，并把装饰器应用到框架里。</p><h2 id="version-6"><a href="#version-6" class="headerlink" title="version 6"></a>version 6</h2><p>在之前的 version 5 基础上，作如下改变。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mini_frame.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author luke</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">URL_FUNC_DICT = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">        URL_FUNC_DICT[url] = func</span><br><span class="line">        <span class="comment"># def call_func(*args, **kwargs):</span></span><br><span class="line">            <span class="comment"># return func(*args, **kwargs)</span></span><br><span class="line">        <span class="comment"># return call_func</span></span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.py&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/index.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这是实际要从数据库里边查出来</span></span><br><span class="line">    my_stock_info = <span class="string">&quot;哈哈哈，我是本月最佳员工。。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.py&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/center.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;这里是从mysql查询出来的数据。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="comment"># 由mini_frame框架添加响应码和头部</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)])</span><br><span class="line">    file_name = environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="comment"># file_name = &quot;/index.py&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> URL_FUNC_DICT[file_name]() <span class="comment"># 加括号是为了执行</span></span><br></pre></td></tr></table></figure><p>修改要点：</p><ul><li>使用字典替换 if 判断</li><li>使用装饰器实现路由功能</li></ul><h2 id="伪静态、静态、动态"><a href="#伪静态、静态、动态" class="headerlink" title="伪静态、静态、动态"></a>伪静态、静态、动态</h2><p>目前开发的网站其实都是动态网站，只是 URL 上有些区别，一般 URL 分为静态 URL、动态 URL、伪静态 URL 。</p><p><strong>静态 URL</strong> 类似于 <code>/news/2012-5-18/110.html</code> ，一般称为真静态 URL，每个网页<strong>有真实的物理路径</strong>，也就是真实存在服务器里的。</p><ul><li>网站打开速度快</li><li>网址结构比较友好，利于记忆</li><li>如果是中大型网站，则产生的页面特别多，不好管理</li><li>有利于 SEO</li></ul><p><strong>动态 URL</strong> 类似于 <code>/NewsMore.asp?id=5</code> 或者 <code>/DaiKuan.php?id=17</code> ，带有？号的 URL，一般称为动态网址，每个 URL 只是一个<strong>逻辑地址</strong>，并不是真实物理存在服务器硬盘里的。</p><ul><li>适合中大型网站，修改页面很方便</li><li>因为要进行运算，所以打开速度稍慢，不过这个可以忽略不计，服务器缓存技术可以解决该问题</li><li>URL 结构稍稍复杂，不利于记忆</li><li>搜索引擎已经能够很好地理解动态 URL，所以对 SEO 没有什么减分的影响（特别复杂的 URL 结构除外）</li></ul><p><strong>伪静态 URL</strong> 类似于 <code>/course/74.html</code> ，和真静态 URL 类似。通过伪静态规则把动态 URL 伪装成静态网址，也是<strong>逻辑地址</strong>，不存在物理地址。</p><ul><li>URL 比较友好，利于记忆</li><li>适合大中型网站，是个折中方案</li><li>设置麻烦，服务器要支持重写规则</li><li>增加服务器负担，速度变慢（虽然可以忽略）</li><li>可能造成动态 URL 和静态 URL 都被搜索引擎收录（可以用 robots 禁止掉动态地址）</li></ul><p>关于伪静态规则，一个具体的例子：</p><p><img src="https://bu.dusays.com/2024/10/28/671f575ce315f.png" alt="90-8.png"></p><h2 id="version-7"><a href="#version-7" class="headerlink" title="version 7"></a>version 7</h2><p>实现伪静态，作如下修改。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mini_frame.py</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">URL_FUNC_DICT = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># URL_FUNC_DICT[&quot;/index.py&quot;] = index</span></span><br><span class="line">        URL_FUNC_DICT[url] = func</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def call_func(*args, **kwargs):</span></span><br><span class="line">    <span class="comment">#   return func(*args, **kwargs)</span></span><br><span class="line">    <span class="comment"># return call_func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.html&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/index.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;哈哈哈哈 这是你的本月名称.....&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.html&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/center.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;这里是从mysql查询出来的数据。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">env, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    file_name = env[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="comment"># file_name = &quot;/index.py&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if file_name == &quot;/index.py&quot;:</span></span><br><span class="line">    <span class="comment">#     return index()</span></span><br><span class="line">    <span class="comment"># elif file_name == &quot;/center.py&quot;:</span></span><br><span class="line">    <span class="comment">#     return center()</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return &#x27;Hello World! 我爱你中国....&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func = URL_FUNC_DICT[file_name]</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">        <span class="comment"># return URL_FUNC_DICT[file_name]()</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产生了异常：%s&quot;</span> % <span class="built_in">str</span>(ret)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web_server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># import dynamic.mini_frame</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, port, app, static_path</span>):</span><br><span class="line">        <span class="comment"># 1. 创建套接字</span></span><br><span class="line">        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 绑定</span></span><br><span class="line">        self.tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, port))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">        self.tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">        self.application = app</span><br><span class="line">        self.static_path = static_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">service_client</span>(<span class="params">self, new_socket</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为这个客户端返回数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">        <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">        <span class="comment"># .....</span></span><br><span class="line">        request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;&gt;&gt;&gt;&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line">        <span class="keyword">if</span> request:</span><br><span class="line">            request_lines = request.splitlines()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span>*<span class="number">20</span>)</span><br><span class="line">            <span class="built_in">print</span>(request_lines)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">            <span class="comment"># get post put del</span></span><br><span class="line">            file_name = <span class="string">&quot;&quot;</span></span><br><span class="line">            ret = re.<span class="keyword">match</span>(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># print(&quot;*&quot;*50, file_name)</span></span><br><span class="line">                <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">            <span class="comment"># 2.1 如果请求的资源不是以.html结尾，那么就认为是静态资源（css/js/png，jpg等）</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(self.static_path + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    response = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;------file not found-----&quot;</span></span><br><span class="line">                    new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    html_content = f.read()</span><br><span class="line">                    f.close()</span><br><span class="line">                    <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">                    response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                    <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">                    <span class="comment"># response += &quot;hahahhah&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">                    new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                    <span class="comment"># 将response ic.mini_frame.applicationbody发送给浏览器</span></span><br><span class="line">                    new_socket.send(html_content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 2.2 如果是以.py结尾，那么就认为是动态资源的请求</span></span><br><span class="line"></span><br><span class="line">                env = <span class="built_in">dict</span>()  <span class="comment"># 这个字典中存放的是web服务器要传递给 web框架的数据信息</span></span><br><span class="line">                env[<span class="string">&#x27;PATH_INFO&#x27;</span>] = file_name</span><br><span class="line">                <span class="comment"># &#123;&quot;PATH_INFO&quot;: &quot;/index.py&quot;&#125;</span></span><br><span class="line">                <span class="comment"># body = dynamic.mini_frame.application(env, self.set_response_header)</span></span><br><span class="line">                body = self.application(env, self.set_response_header)</span><br><span class="line"></span><br><span class="line">                header = <span class="string">&quot;HTTP/1.1 %s\r\n&quot;</span> % self.status</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> temp <span class="keyword">in</span> self.headers:</span><br><span class="line">                    header += <span class="string">&quot;%s:%s\r\n&quot;</span> % (temp[<span class="number">0</span>], temp[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">                response = header+body</span><br><span class="line">                <span class="comment"># 发送response给浏览器</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭套接</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_response_header</span>(<span class="params">self, status, headers</span>):</span><br><span class="line">        self.status = status</span><br><span class="line">        self.headers = [(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;mini_web v8.8&quot;</span>)]</span><br><span class="line">        self.headers += headers</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">            new_socket, client_addr = self.tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监听套接字</span></span><br><span class="line">        self.tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])  <span class="comment"># 7890</span></span><br><span class="line">            frame_app_name = sys.argv[<span class="number">2</span>]  <span class="comment"># mini_frame:application</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;端口输入错误。。。。。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照以下方式运行:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 xxxx.py 7890 mini_frame:application&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mini_frame:application</span></span><br><span class="line">    ret = re.<span class="keyword">match</span>(<span class="string">r&quot;([^:]+):(.*)&quot;</span>, frame_app_name)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        frame_name = ret.group(<span class="number">1</span>)  <span class="comment"># mini_frame</span></span><br><span class="line">        app_name = ret.group(<span class="number">2</span>)  <span class="comment"># application</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照以下方式运行:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 xxxx.py 7890 mini_frame:application&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./web_server.conf&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        conf_info = <span class="built_in">eval</span>(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此时 conf_info是一个字典里面的数据为：</span></span><br><span class="line">    <span class="comment"># &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;static_path&quot;:&quot;./static&quot;,</span></span><br><span class="line">    <span class="comment">#     &quot;dynamic_path&quot;:&quot;./dynamic&quot;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sys.path.append(conf_info[<span class="string">&#x27;dynamic_path&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># import frame_name ---&gt;找frame_name.py</span></span><br><span class="line">    frame = <span class="built_in">__import__</span>(frame_name)  <span class="comment"># 返回值标记这 导入的这个模板</span></span><br><span class="line">    app = <span class="built_in">getattr</span>(frame, app_name)  <span class="comment"># 此时app就指向了 dynamic/mini_frame模块中的application这个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(app)</span></span><br><span class="line"></span><br><span class="line">    wsgi_server = WSGIServer(port, app, conf_info[<span class="string">&#x27;static_path&#x27;</span>])</span><br><span class="line">    wsgi_server.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>本次修改总结：<br>将字典里存放的 key 作了修改。另外模板里的 html 文件也作了相应修改（没有展示），将链接指向了 <code>/index.html</code> 和 <code>/center.html</code> 。</p><h2 id="version-8"><a href="#version-8" class="headerlink" title="version 8"></a>version 8</h2><p>从数据库查询数据，替换模板中的变量。</p><p>准备数据的过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database stock_db charset<span class="operator">=</span>utf8;</span><br><span class="line">use stock_db</span><br><span class="line">source <span class="operator">/</span>home<span class="operator">/</span>zhiyue<span class="operator">/</span>Downloads<span class="operator">/</span>stock_db.sql</span><br></pre></td></tr></table></figure><p>（这个 sql 文件不重要，我们这里只是演示）</p><p>表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> focus;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> note_info                <span class="operator">|</span> info_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 你确定要买这个？         <span class="operator">|</span>      <span class="number">36</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 利好                     <span class="operator">|</span>      <span class="number">37</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span>                          <span class="operator">|</span>      <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span>                          <span class="operator">|</span>      <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span>                          <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> info limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> code   <span class="operator">|</span> short        <span class="operator">|</span> chg    <span class="operator">|</span> turnover <span class="operator">|</span> price <span class="operator">|</span> highs <span class="operator">|</span> <span class="type">time</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">000007</span> <span class="operator">|</span> 全新好       <span class="operator">|</span> <span class="number">10.01</span><span class="operator">%</span> <span class="operator">|</span> <span class="number">4.40</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">16.05</span> <span class="operator">|</span> <span class="number">14.60</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">000036</span> <span class="operator">|</span> 华联控股     <span class="operator">|</span> <span class="number">10.04</span><span class="operator">%</span> <span class="operator">|</span> <span class="number">10.80</span><span class="operator">%</span>   <span class="operator">|</span> <span class="number">11.29</span> <span class="operator">|</span> <span class="number">10.26</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">000039</span> <span class="operator">|</span> 中集集团     <span class="operator">|</span> <span class="number">1.35</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">1.78</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">18.07</span> <span class="operator">|</span> <span class="number">18.06</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="number">000050</span> <span class="operator">|</span> 深天马A      <span class="operator">|</span> <span class="number">4.38</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">4.65</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">22.86</span> <span class="operator">|</span> <span class="number">22.02</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-07</span><span class="number">-19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="number">000056</span> <span class="operator">|</span> 皇庭国际     <span class="operator">|</span> <span class="number">0.39</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">0.65</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">12.96</span> <span class="operator">|</span> <span class="number">12.91</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现在，我们希望实现如下的效果：</p><p><img src="https://s2.loli.net/2024/10/28/opfrBlOsIAw29Ge.png" alt="90-9.png"></p><p>代码参见：<br><strong>这里有一个 version8 的 url</strong></p><h2 id="version-9"><a href="#version-9" class="headerlink" title="version 9"></a>version 9</h2><p>让路由支持正则，实现增删改功能。</p><p><strong>这里有一个 url</strong></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] -%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始使用 log 功能</span></span><br><span class="line">logging.debug(<span class="string">&#x27;这是 loggging debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是 loggging info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是 loggging a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是 an loggging error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是 loggging critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:9] - WARNING: 这是 loggging a warning message</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:10] - ERROR: 这是 an loggging err or message</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:11] - CRITICAL: 这是 loggging critical message</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>写到文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING,</span><br><span class="line">                    filename=<span class="string">&#x27;log.txt&#x27;</span>,</span><br><span class="line">                    filemode=<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] -%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始使用 log 功能</span></span><br><span class="line">logging.debug(<span class="string">&#x27;这是 loggging debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是 loggging info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是 loggging a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是 an loggging error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是 loggging critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><p>既把日志输出到控制台，又写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 第一步，创建一个 logger</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO) <span class="comment"># Log 等级总开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步，创建一个 handler，用于写入日志文件</span></span><br><span class="line">logfile = <span class="string">&#x27;./log.txt&#x27;</span></span><br><span class="line">fh = logging.FileHandler(logfile, mode=<span class="string">&#x27;a&#x27;</span>) <span class="comment"># open 的打开模式这里可以进行参考</span></span><br><span class="line">fh.setLevel(logging.DEBUG) <span class="comment"># 输出到 file 的 log 等级的开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步，再创建一个 handler，用于输出到控制台</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.WARNING) <span class="comment"># 输出到 console 的 log 等级的开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步，定义 handler 的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&quot;</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步，将 logger 添加到 handler 里面</span></span><br><span class="line">logger.addHandler(fh)</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">logger.debug(<span class="string">&#x27;这是 logger debug message&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;这是 logger info message&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;这是 logger warning message&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;这是 logger error message&#x27;</span>)</span><br><span class="line">logger.critical(<span class="string">&#x27;这是 logger critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h1><p>C, C++ 中无此设计。</p><p>我们想做一个类，这个类是用代码生成的。</p><h2 id="类也是对象"><a href="#类也是对象" class="headerlink" title="类也是对象"></a>类也是对象</h2><p>类的本质仍然是一个对象，于是可以做如下操作：</p><ol><li>将它赋值给一个变量</li><li>拷贝它</li><li>为它增加属性</li><li>将它作为函数参数进行传递</li></ol><p>下面展示自由的 Python 语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectCreator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_object = ObjectCreator()</span><br><span class="line"><span class="built_in">print</span>(my_object)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ObjectCreator) <span class="comment"># 你可以打印一个类，因为它其实也是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line">echo(ObjectCreator)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ObjectCreator.new_attribute = <span class="string">&#x27;foo&#x27;</span> <span class="comment"># 你可以为类增加属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把类名给一个变量</span></span><br><span class="line">val = ObjectCreator</span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_object))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ObjectCreator))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;__main__.ObjectCreator object at 0x7f15b9e8b050&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>创建类出来的那个类，叫<strong>元类</strong>。</p><h2 id="使用-type-创建类"><a href="#使用-type-创建类" class="headerlink" title="使用 type 创建类"></a>使用 type 创建类</h2><p>type 还有一种完全不同的功能，动态地创建类。</p><p>type 可以接受一个类的描述作为参数，然后返回一个类。（要知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在 Python 中是为了保持向后兼容性）</p><p>用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(类名, 由父类名称组成的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Test2 = <span class="built_in">type</span>(<span class="string">&#x27;Test2&#x27;</span>, (), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(Test2)</span><br><span class="line"></span><br><span class="line">Foo = <span class="built_in">type</span>(<span class="string">&#x27;Foo&#x27;</span>, (), &#123;<span class="string">&#x27;bar&#x27;</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(Foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line">FooChild = <span class="built_in">type</span>(<span class="string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(FooChild.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有方法的类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo_bar</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">#让 FooChild 类中的 echo_bar 属性，指向了上面定义的函数</span></span><br><span class="line">FooChild = <span class="built_in">type</span>(<span class="string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;<span class="string">&#x27;echo_bar&#x27;</span>: echo_bar&#125;) </span><br><span class="line"></span><br><span class="line">my_foo = FooChild()</span><br><span class="line">my_foo.echo_bar()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Test2&#x27;&gt;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个更完整的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_b</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.num)</span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_static</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----haha-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_class</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(cls.num)</span><br><span class="line"></span><br><span class="line">B = <span class="built_in">type</span>(<span class="string">&quot;B&quot;</span>, (A,), &#123;<span class="string">&quot;print_b&quot;</span>: print_b, <span class="string">&quot;print_static&quot;</span>: print_static,<span class="string">&quot;print_class&quot;</span>: print_class&#125;)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.print_b()</span><br><span class="line">b.print_static()</span><br><span class="line">b.print_class()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">----haha-----</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="metaclass-属性"><a href="#metaclass-属性" class="headerlink" title="metaclass 属性"></a>metaclass 属性</h2><p>当我们写下如下的代码时：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Python 做了如下的操作：</p><ol><li>Foo 中有 <code>__metaclass__</code> 这个属性吗？如果是，Python 会通过 <code>__metaclass__</code> 创建一个名字为 Foo 的类(对象)</li><li>如果 Python 没有找到 <code>__metaclass__</code>，它会继续在 Bar（父类）中寻找 <code>__metaclass__</code> 属性，并尝试做和前面同样的操作。</li><li>如果 Python 在任何父类中都找不到 <code>__metaclass__</code> ，它就会在模块层次中去寻找 <code>__metaclass__</code> ，并尝试做同样的操作。</li><li>如果还是找不到 <code>__metaclass__</code> ,Python 就会用内置的 type 来创建这个类对象。</li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 效果：将 Foo 的属性 bar 改成了 BAR</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upper_attr</span>(<span class="params">class_name, class_parents, class_attr</span>):</span><br><span class="line">    <span class="comment">#遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">    new_attr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name,value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">            new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用 type 来创建一个类，这里的返回值给了 Foo</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=upper_attr):</span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>))</span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bip</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码中 metaclass 是用了一个函数，接下来使用一个类：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpperAttrMetaClass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></span><br><span class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></span><br><span class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></span><br><span class="line">    <span class="comment"># 你很少用到__new__，除非你希望能够控制对象的创建</span></span><br><span class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class="line">    <span class="comment"># 如果你希望的话，你也可以在__init__中做些事情</span></span><br><span class="line">    <span class="comment"># 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name, class_parents, class_attr</span>):</span><br><span class="line">        <span class="comment"># 遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">        new_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法 1：通过&#x27;type&#x27;来做类对象的创建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法 2：复用 type.__new__方法</span></span><br><span class="line">        <span class="comment"># 这就是基本的 OOP 编程，没什么魔法</span></span><br><span class="line">        <span class="comment"># return type.__new__(cls, class_name, class_parents, new_attr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 的用法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=UpperAttrMetaClass):</span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>))</span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bip</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。” （Python 界的领袖 Tim Peters）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网穿透&quot;&gt;&lt;a href=&quot;#内网穿透&quot; class=&quot;headerlink&quot; title=&quot;内网穿透&quot;&gt;&lt;/a&gt;内网穿透&lt;/h1&gt;&lt;p&gt;内网穿透原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/10/21/zoUnO</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://dropsong.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://dropsong.github.io/tags/python/"/>
    
    <category term="内网穿透" scheme="https://dropsong.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://dropsong.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Django Note</title>
    <link href="https://dropsong.github.io/posts/7d130280.html"/>
    <id>https://dropsong.github.io/posts/7d130280.html</id>
    <published>2024-10-10T16:24:01.000Z</published>
    <updated>2024-10-26T13:49:01.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端开发简介"><a href="#后端开发简介" class="headerlink" title="后端开发简介"></a>后端开发简介</h1><p>后端开发框架：</p><ul><li>Java: Spring</li><li>Python: Django, Flask, tornado</li></ul><p>MVC 框架（核心思想：解耦。）:</p><p><img src="https://s2.loli.net/2024/10/10/GfHtKgrUdCQk8Sc.png" alt="89-1.png"></p><p>Web MVC 框架模块功能：</p><p><img src="https://s2.loli.net/2024/10/10/BrizRKn6gotuUyw.png" alt="89-2.png"></p><p>M: Model，模型，和数据库进行交互。<br>V: View，视图，产生 html 页面。<br>C: Controller，控制器，接收请求，进行处理，与 M 和 V 进行交互，返回应答。</p><p>Django 一般前后端不分离，虽然也可以分离。</p><p>Django 遵循 MVC 思想，但是有自己的一个名词，叫做 <strong>MVT</strong>。Django 遵循<strong>快速开发</strong>和 <strong>DRY(Do not repeat yourself)</strong> 原则，不要自己去重复一些工作。</p><p>MVT 各部分功能：</p><p><img src="https://s2.loli.net/2024/10/10/WsMHqjhKFTuibCl.png" alt="89-3.png"></p><p>M: Model，模型，和 MVC 中 M 功能相同，和数据库进行交互。<br>V: View，视图，和 MVC 中 C 功能相同，接收请求，进行处理，与 M 和 T 进行交互，返回应答。<br>T: Template，模板，和 MVC 中 V 功能相同，产生 html 页面。</p><h1 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h1><p>虚拟环境是真实 python 环境的复制版本。</p><p>在虚拟环境中使用的 python 是复制的 python，安装 python 包也是安装在复制的 python 中。</p><p>安装虚拟环境工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-venv</span><br></pre></td></tr></table></figure><p>创建虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv myenv</span><br></pre></td></tr></table></figure><p>激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure><p>想退出虚拟环境，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>退出了虚拟环境，如何再次进入？首先，导航到虚拟环境所在的目录。</p><p>在该目录下，运行以下命令来激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure><p>现在，尝试在虚拟环境里面下载东西。注意，<strong>即使配置了翻墙工具，虚拟环境中的 pip 请求可能无法正确通过代理</strong>。解决方案（port 需要视情况改动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>安装完成后，我们可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>查看内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">cat</span> requirements.txt </span><br><span class="line">jieba==0.42.1</span><br></pre></td></tr></table></figure><p>这个 txt 文件的作用是，我们<strong>可以使用它方便地创建需要的环境</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>在虚拟环境中安装 Django :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==4.2 --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><h2 id="创建-Django-项目"><a href="#创建-Django-项目" class="headerlink" title="创建 Django 项目"></a>创建 Django 项目</h2><p>注意：创建应用必须先进入虚拟环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(myenv) zhiyue@168:~/myenv$ django-admin startproject day1010</span><br><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">ls</span></span><br><span class="line">bin  day1010  include  lib  lib64  pyvenv.cfg</span><br><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">cd</span> day1010/</span><br><span class="line">(myenv) zhiyue@168:~/myenv/day1010$ tree</span><br><span class="line">.</span><br><span class="line">├── day1010</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br><span class="line"></span><br><span class="line">2 directories, 6 files</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>__init__.py</code>: 说明 day1010 是一个 python 包。</li><li><code>settings.py</code>: 项目的配置文件。</li><li><code>urls.py</code>: 进行 url 路由的配置。</li><li><code>wsgi.py</code>: （对接某种类似协议的东西）web 服务器和 Django 交互的入口。</li><li><code>manage.py</code>: 项目的管理文件。</li></ul><h2 id="创建-Django-应用"><a href="#创建-Django-应用" class="headerlink" title="创建 Django 应用"></a>创建 Django 应用</h2><p><img src="https://s2.loli.net/2024/10/10/OP9r4ZyjRi8nbdT.png" alt="89-4.png"></p><p>一个项目由很多个应用组成的，每一个应用完成一个功能模块。</p><p>注意，创建应用时需要先进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp booktest</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2024/10/10/ljF6Sv4J9boyq1x.png" alt="89-5.png"></p><p>对于 booktest 文件夹下的文件：</p><ul><li><code>__init__.py</code>: 说明目录是一个 Python 模块。</li><li><code>models.py</code>: 写和数据库项目的内容，设计模型类。</li><li><code>views.py</code>: 接收请求，进行处理，与 M 和 T 进行交互，返回应答。定义处理函数，<strong>视图函数</strong>。</li><li><code>tests.py</code>: <strong>写测试代码的文件</strong>。</li><li><code>admin.py</code>: 网站后台管理相关的文件。</li><li><code>migrations</code>: （作用后面讲解）</li></ul><h2 id="应用注册"><a href="#应用注册" class="headerlink" title="应用注册"></a>应用注册</h2><p>建立应用和项目之间的联系，需要对应用进行注册。</p><p>在 day1010/settings.py 中 INSTALLED_APPS 下添加应用的名称就可以完成安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest&#x27;</span>,   <span class="comment"># 新增内容</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>在开发阶段，为了能够快速预览到开发的效果，django 提供了一个纯 python 编写的轻量级 web 服务器，仅在开发阶段使用。</p><p>运行服务器的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><h1 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p><img src="https://s2.loli.net/2024/10/10/2rmv4jLbWOHYfDk.png" alt="89-6.png"></p><p>ORM 框架帮我们把类和数据表进行了映射，可以让我们<strong>通过类和类对象操作它所对应的表格（数据库）中的数据</strong>。ORM 框架还可以<strong>根据我们设计的类自动生成数据库中的表格</strong>，省去了我们自己建表的过程。</p><p>使用 django 进行数据库开发的步骤如下：</p><ol><li>在 <code>models.py</code> 中定义模型类</li><li>迁移去数据库中看表是否生成</li><li>通过类和对象完成数据增删改查操作</li></ol><h2 id="模型类设计"><a href="#模型类设计" class="headerlink" title="模型类设计"></a>模型类设计</h2><p>在 models.py 中定义模型类如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br></pre></td></tr></table></figure><h2 id="模型类生成表"><a href="#模型类生成表" class="headerlink" title="模型类生成表"></a>模型类生成表</h2><p>生成迁移文件，根据模型类生成创建表的迁移文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure><p>Django 框架根据我们设计的模型类生成了迁移文件，在迁移文件中可以看到 fields 列表中每一个元素跟 BookInfo 类属性名以及属性的类型是一致的。同时我们发现多了一个 id 项，这一项是 Django 框架帮我们自动生成的，在创建表的时候 id 就会作为对应表的主键列，并且主键列自动增长。</p><p>执行迁移，根据第一步生成的迁移文件在数据库中创建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>执行迁移命令后，Django 框架会读取迁移文件自动帮我们在数据库中生成对应的表格。</p><p>Django 默认采用 sqlite3 数据库，db.sqlite3 就是 Django 框架帮我们自动生成的数据库文件。 sqlite3 是一个很小的数据库，通常用在手机中，它跟 mysql 一样，我们也可以通过 sql 语句来操作它。</p><p>在 vscode 安装 SQLite Viewer 插件，可以查看此文件。</p><p><img src="https://s2.loli.net/2024/10/10/EQVHzKtcAwdiy4Z.png" alt="89-7.png"></p><p>上面生成的表的名字叫做 booktest_bookinfo，booktest 是应用的名字，bookinfo 是模型类的名字。</p><h2 id="通过模型类操作数据表"><a href="#通过模型类操作数据表" class="headerlink" title="通过模型类操作数据表"></a>通过模型类操作数据表</h2><p>进入项目 shell 的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><p>在 shell 终端中演示的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import BookInfo</span><br><span class="line">&gt;&gt;&gt; b = BookInfo()</span><br><span class="line">&gt;&gt;&gt; b.btitle = <span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">&gt;&gt;&gt; from datetime import <span class="built_in">date</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data = <span class="built_in">date</span>(2022,11,11)</span><br><span class="line">&gt;&gt;&gt; b.save()</span><br></pre></td></tr></table></figure><p>注意我之前把 date 拼成了 data ，神智不清了一会。现在将错就错。</p><p><img src="https://s2.loli.net/2024/10/10/VAqcK67UHxRe2j9.png" alt="89-8.png"></p><p><code>b.save()</code> 之后才会将数据保存进数据库。</p><p>查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import BookInfo</span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(<span class="built_in">id</span>=1)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;BookInfo: BookInfo object (1)&gt;</span><br><span class="line">&gt;&gt;&gt; b.btitle</span><br><span class="line"><span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data</span><br><span class="line">datetime.date(2022, 11, 11)</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from datetime import <span class="built_in">date</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data = <span class="built_in">date</span>(1999,9,9)</span><br><span class="line">&gt;&gt;&gt; b.save()</span><br></pre></td></tr></table></figure><p>刷新，可以看到数据已经被修改。</p><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b.delete()</span><br><span class="line">(1, &#123;<span class="string">&#x27;booktest.BookInfo&#x27;</span>: 1&#125;)</span><br></pre></td></tr></table></figure><p>刷新，可以看到数据已经被删除。</p><p>现在，在 <code>models.py</code> 中设计一个新的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>可以看到生成了一张新表。</p><p>重新在 BookInfo 中插入一条数据，可以看到 id =2 ，过程略。</p><p>在 heroinfo 中插入数据，并尝试关联两张表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import HeroInfo</span><br><span class="line">&gt;&gt;&gt; h = HeroInfo()</span><br><span class="line">&gt;&gt;&gt; h.hname = <span class="string">&#x27;雷电将军&#x27;</span></span><br><span class="line">&gt;&gt;&gt; h.hcomment = <span class="string">&#x27;梦想一心&#x27;</span></span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(<span class="built_in">id</span> = 2)</span><br><span class="line">&gt;&gt;&gt; h.hbook = b</span><br><span class="line">&gt;&gt;&gt; h.save()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/11/5x3KcaMz6fX4GBC.png" alt="89-9.png"></p><p>查询操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: HeroInfo object (1)&gt;, &lt;HeroInfo: HeroInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()[0]</span><br><span class="line">&lt;HeroInfo: HeroInfo object (1)&gt;</span><br><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()[0].hname</span><br><span class="line"><span class="string">&#x27;雷电将军&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="关联操作"><a href="#关联操作" class="headerlink" title="关联操作"></a>关联操作</h2><p>省流：由一查多，由多查一。</p><p>目前的数据库：</p><p><img src="https://s2.loli.net/2024/10/11/NJsOQkcw5C2uEyK.jpg" alt="89-10.jpeg"></p><p>查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; h.hbook.btitle</span><br><span class="line"><span class="string">&#x27;三哼经&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(btitle = <span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">... )</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;BookInfo: BookInfo object (2)&gt;</span><br><span class="line">&gt;&gt;&gt; b.bpub_data</span><br><span class="line">datetime.date(2022, 11, 11)</span><br><span class="line">&gt;&gt;&gt; b.heroinfo_set.all()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: HeroInfo object (1)&gt;, &lt;HeroInfo: HeroInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; b.heroinfo_set.all()[0].hname</span><br><span class="line"><span class="string">&#x27;雷电将军&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h1><p>假设我们要设计一个新闻网站，我们需要编写展示给用户的页面，网页上展示的新闻信息是从哪里来的呢？<strong>是从数据库中查找到新闻的信息，然后把它展示在页面上</strong>。但是我们的网站上的新闻每天都要更新，这就意味着对数据库的增、删、改、查操作，那么我们需要每天写 sql 语句操作数据库吗? 这样会非常繁琐，所以我们可以设计一个页面，通过对这个页面的操作来实现对新闻数据库的增删改查。那么问题来了，老板说我们需要在建立一个新网站，是不是还要设计一个页面来实现对新网站数据库的增删改查操作？但是这样的页面有很大的重复性，那有没有一种方法能够很快生成管理数据库表的页面呢？有，那就是 <strong>Django 的后台管理</strong>。Django 能够根据定义的模型类自动地生成管理页面。使用 Django 的管理模块，需要按照如下步骤操作：</p><ol><li>管理界面本地化</li><li>创建管理员</li><li>注册模型类</li><li>自定义管理页面</li></ol><p><strong>本地化</strong>，打开 day1010/settings.py ，找到语言编码、时区的设置项，将内容改为如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>创建管理员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>根据提示操作即可。</p><p>启动 server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中进入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin/</span><br></pre></td></tr></table></figure><p>注册模型类：<br>登录后台管理后，默认没有我们创建的应用中定义的模型类，需要在自己应用中的 admin.py 文件中注册，才可以在后台管理中看到，并进行增删改查操作。</p><p>在 booktest/admin.py 中，编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo)</span><br><span class="line">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure><p>到浏览器中刷新页面，可以看到模型类 BookInfo 和 HeroInfo 的管理了。</p><p>出现如下问题：</p><p><img src="https://s2.loli.net/2024/10/11/sEUmehQlTLP2idf.png" alt="89-11.png"></p><p>为什么没有直接显示书名呢？因为是 str(object) 的返回值。我们可以重写 str 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>在列表页只显示出了 BookInfo object，对象的其它属性并没有列出来，查看非常不方便。Django 提供了<strong>自定义管理页面的功能</strong>，比如列表页要显示哪些值。</p><p>修改 booktest/admin.py 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_data&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;hname&#x27;</span>, <span class="string">&#x27;hgender&#x27;</span>, <span class="string">&#x27;hcomment&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br><span class="line">admin.site.register(HeroInfo, HeroInfoAdmin)</span><br></pre></td></tr></table></figure><p>刷新，发现功能实现。</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>什么是视图：<br>一个 url 首先到达路由（这里的“路由”和计算机网络中的“路由”概念不同），路由会分配到对应的视图函数，不同的网址路由会分配到不同的视图函数。</p><h2 id="定义视图函数"><a href="#定义视图函数" class="headerlink" title="定义视图函数"></a>定义视图函数</h2><p>视图就是一个 Python 函数，被定义在 views.py 中。</p><p>打开 booktest/views.py 文件，定义视图 index 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="url-配置语法"><a href="#url-配置语法" class="headerlink" title="url 配置语法"></a>url 配置语法</h2><p>一个简单的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, index) <span class="comment"># 仅做教学示例</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>回到主页，浏览器显示 <code>hello python</code> 。</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>模板不仅仅是一个 html 文件。</p><h2 id="模板文件的使用"><a href="#模板文件的使用" class="headerlink" title="模板文件的使用"></a>模板文件的使用</h2><p>创建模板文件夹，名字为 templates,与 booktest 在同一个路径级别。</p><p>在 <code>settings.py</code> 中，添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&#x27;templates&#x27;</span>],  <span class="comment"># 添加</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 templates 下新建一个 index.html，并写入如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个模板文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对 <code>views.py</code> 和 <code>urls.py</code> 作如下改动：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader,RequestContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> myrender(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myrender</span>(<span class="params">request, template_path, context_dict=&#123;&#125;</span>):</span><br><span class="line">    <span class="comment"># 1.加载模板文件, 模板对象</span></span><br><span class="line">    temp = loader.get_template(template_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.定义模板上下文:给模板文件传递数据，模板渲染:产生标准的 html 内容</span></span><br><span class="line">    res_html = temp.render(context_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.返回给浏览器</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res_html)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>刷新页面，可以看到效果。</p><p>现在，对 <code>index.html</code> 作如下修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个模板文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    使用模板变量：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实我们是不需要 myrender 的，上面写 myrender 的目的是为了理解 render 帮我们做了什么。我们可以直接改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment"># from django.template import loader,RequestContext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def myrender(request, template_path, context_dict=&#123;&#125;):</span></span><br><span class="line"><span class="comment">#     # 1.加载模板文件, 模板对象</span></span><br><span class="line"><span class="comment">#     temp = loader.get_template(template_path)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 2.定义模板上下文:给模板文件传递数据，模板渲染:产生标准的 html 内容</span></span><br><span class="line"><span class="comment">#     res_html = temp.render(context_dict)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 3.返回给浏览器</span></span><br><span class="line"><span class="comment">#     return HttpResponse(res_html)</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/11/U4qJVb6eMDzPnQS.png" alt="89-12.png"></p><h2 id="模板文件进阶用法"><a href="#模板文件进阶用法" class="headerlink" title="模板文件进阶用法"></a>模板文件进阶用法</h2><p>下面实现了一个 for 循环，直接看例子，简洁明了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;showbooks.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br></pre></td></tr></table></figure><p>在 templates 文件夹下新增 <code>showbooks.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/13/Ld3Ow1I6RPq8A97.png" alt="89-13.png"></p><p>现在，我们尝试实现更高级的功能：把这两个文本做成超链接，点开之后可以查看详情。</p><p>为了做成超链接，首先要修改 <code>showbooks.html</code> 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/books/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; book.btitle &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>urls.py</code> 中增加路由信息：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>,views.detail)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们将 detail 函数设计为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, bid</span>):</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    heros = book.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;detail.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>:book, <span class="string">&#x27;heros&#x27;</span>:heros&#125;)</span><br></pre></td></tr></table></figure><p>最后，<code>detail.html</code> 内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图书详情<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">英雄信息如下： <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for hero in heros %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123;hero.hname&#125;&#125; --- &#123;&#123;hero.hcomment&#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 没有英雄信息 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2024/10/13/fRB2y3ucMYCFrwV.jpg" alt="89-14.jpeg"></p><p><code>&#123;% empty %&#125;</code> 有什么用？我们删除”应龙“的数据，然后点击”三哼经“的链接，就会显示”没有英雄信息“。</p><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><p>现在我们将 sqlite 切换为 mysql.</p><p>在 settings.py 中修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;test2&#x27;</span>,            <span class="comment"># 使用的数据库的名字,数据库必须手动创建</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,             <span class="comment"># 链接 mysql 的用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;jtsws&#x27;</span>,        <span class="comment"># 用户对应的密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,        <span class="comment"># 指定 mysql 数据库所在电脑 ip</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,               <span class="comment"># mysql 服务的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装（我不确定这两个是否有用，有可能你只需要执行接下来的一个命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pkg-config python3-dev default-libmysqlclient-dev build-essential</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p>相关讨论参见：<br><a href="https://stackoverflow.com/questions/76585758/mysqlclient-cannot-install-via-pip-cannot-find-pkg-config-name-in-ubuntu">https://stackoverflow.com/questions/76585758/mysqlclient-cannot-install-via-pip-cannot-find-pkg-config-name-in-ubuntu</a></p><p>生成迁移文件、执行迁移：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>我们可以看到，test2（原本为空）中多出了很多 table :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_test2            |</span><br><span class="line">+----------------------------+</span><br><span class="line">| auth_group                 |</span><br><span class="line">| auth_group_permissions     |</span><br><span class="line">| auth_permission            |</span><br><span class="line">| auth_user                  |</span><br><span class="line">| auth_user_groups           |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| booktest_bookinfo          |</span><br><span class="line">| booktest_heroinfo          |</span><br><span class="line">| django_admin_log           |</span><br><span class="line">| django_content_type        |</span><br><span class="line">| django_migrations          |</span><br><span class="line">| django_session             |</span><br><span class="line">+----------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from booktest_bookinfo</span><br><span class="line">    -&gt; ;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>为了演示方便，我们接下来仍然使用 sqlite.</p><h1 id="更多细节的演示"><a href="#更多细节的演示" class="headerlink" title="更多细节的演示"></a>更多细节的演示</h1><p>btw, 不使用 SQLite Viewer 了，使用更强大的 vscode 插件 SQLite3 Editor(by yy0931).</p><p>实现效果：</p><p><img src="https://s2.loli.net/2024/10/14/skaq6OMjwcblXZH.png" alt="89-15.png"></p><p>点击“新增”会新增一本指定的书《C 语言开发宝典》（同时数据库中也删除）；点击书名背后的删除会删除该书（同时数据库中也删除）。</p><p><code>models.py</code> 更新为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line">    <span class="comment"># 阅读量，default 是在 django 的逻辑层（模型类层），而不是数据库中</span></span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格,最大位数为 10,小数为 2</span></span><br><span class="line">    bprice = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>修改 models 文件后需要重新 migrate.</p><p>修改 <code>showbooks.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/create&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/books/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; book.btitle &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span>---<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/delete&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最后，<code>views.py</code> 中也要添加相应的逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;showbooks.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, bid</span>):</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    heros = book.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;detail.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>:book, <span class="string">&#x27;heros&#x27;</span>:heros&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;新增一本图书&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.创建 BookInfo 对象</span></span><br><span class="line">    b = BookInfo()</span><br><span class="line">    b.btitle = <span class="string">&#x27;C 语言开发宝典&#x27;</span></span><br><span class="line">    b.bpub_data = date(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2.保存进数据库</span></span><br><span class="line">    b.save()</span><br><span class="line">    <span class="comment"># 3.返回应答,让浏览器再访问/books,重定向</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/books&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">request, bid</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;删除点击的图书&#x27;&#x27;&#x27;</span></span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    book.delete()</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/books&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="字段属性和选项"><a href="#字段属性和选项" class="headerlink" title="字段属性和选项"></a>字段属性和选项</h1><h2 id="模型类属性命名限制"><a href="#模型类属性命名限制" class="headerlink" title="模型类属性命名限制"></a>模型类属性命名限制</h2><ul><li>不能是 python 的保留关键字。</li><li>不允许使用连续的下划线，这是由 django 的查询方式决定的。比如 <code>Books__Info</code> 是不可以的。</li><li>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：<br><code>属性名=models.字段类型(选项)</code></li></ul><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p>官方文档：<br><a href="https://docs.djangoproject.com/en/4.2/ref/models/fields/#field-types">https://docs.djangoproject.com/en/4.2/ref/models/fields/#field-types</a></p><p>使用时需要引入 django.db.models 包，几个常用的如下：</p><ul><li><code>AutoField</code> 自动增长的 IntegerField，通常不用指定，不指定时 Django 会自动创建属性名为 id 的自动增长属性。</li><li><code>BooleanField</code> 布尔字段，值为 True 或 False。</li><li><code>NullBooleanField</code> 支持 Null、True、False 三种值。</li><li><code>CharField(max_length=最大长度)</code> 字符串。参数 max_length 表示最大字符个数。</li><li><code>TextField</code> 大文本字段，一般超过 4000 个字符时使用。</li><li><code>IntegerField</code> 整数。</li><li><code>DecimalField(max_digits=None,decimal_places=None)</code> 十进制浮点数。参数 max_digits 表示总位。参数 decimal_places 表示小数位数。（精度较高，建议用这个）</li><li><code>FloatField</code> 浮点数。参数同上（精度不够）。</li><li><code>DateField</code>、<code>TimeField</code>、<code>DateTimeField</code></li><li><code>FileField</code> 上传文件字段。</li><li><code>ImageField</code> 继承于 FileField，对上传的内容进行校验，确保是有效的图片。</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>通过选项实现对字段的约束。</p><p>官网可查：<br><a href="https://docs.djangoproject.com/en/4.2/ref/models/fields/">https://docs.djangoproject.com/en/4.2/ref/models/fields/</a></p><p>对比： null 是数据库范畴的概念，blank 是后台管理页面表单验证范畴的。</p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><p>通过 <code>模型类.objects</code> 属性可以调用如下函数，实现对模型类对应的数据表的查询。</p><p><code>get</code> 函数：</p><ul><li>返回表中满足条件的<strong>一条且只能有一条</strong>数据</li><li>返回值是一个模型类对象</li><li>参数中写查询条件<ul><li>如果查到多条数据，则抛异常 MultipleObjectsReturned</li><li>查询不到数据，则抛异常 DoesNotExist</li></ul></li></ul><p><code>all</code> 函数：</p><ul><li>返回模型类对应表格中的所有数据</li><li><strong>返回值是 QuerySet 类型</strong></li><li>查询集，可以拿出来进行遍历</li></ul><p><code>filter</code> 函数：</p><ul><li>返回满足条件的数据</li><li><strong>返回值是QuerySet类型</strong></li><li>参数写查询条件</li></ul><p><code>exclude</code> 函数：</p><ul><li>返回不满足条件的数据</li></ul><p><code>order_by</code> 函数：</p><ul><li>对查询结果进行排序</li><li>返回值是 QuerySet</li><li>参数中写根据哪些字段进行排序</li></ul><p>下面展示一些例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; c = BookInfo.objects.filter(bcomment=34)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;]&gt;</span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(btitle__contains=<span class="string">&#x27;传&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(btitle__endswith=<span class="string">&#x27;部&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 天龙八部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>空查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刚刚给这本书加了点价格</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b= BookInfo.objects.filter(bprice__isnull=False)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><p>范围查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(id__in = [1,3,5])</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><p>比较查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(id__gt=3)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;, &lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><h2 id="F-对象"><a href="#F-对象" class="headerlink" title="F 对象"></a>F 对象</h2><p>作用：用于对象属性之间的比较。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db.models import F</span><br><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.filter(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>))</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; BookInfo.objects.filter(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>)*2)</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><p>没有问题：</p><p><img src="https://s2.loli.net/2024/10/14/g7o4pfNcIY9CP5B.png" alt="89-16.png"></p><h2 id="Q-对象"><a href="#Q-对象" class="headerlink" title="Q 对象"></a>Q 对象</h2><p>作用：用于查询时条件之间的逻辑关系。not、and、or，可以对 Q 对象进行 <code>&amp;|~</code> 操作（和 C 语言对应的运算符）。</p><p>我们改变一下演示的方式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F,Q</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 练习 Q 对象</span></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">filter</span>(Q(id__gt=<span class="number">2</span>) &amp; Q(bread__gt=<span class="number">19</span>)))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"><span class="comment"># 后略</span></span><br></pre></td></tr></table></figure><p>访问 /index2 , 我们可以在终端中的一堆打印信息中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QuerySet [&lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>作用：对查询结果进行聚合操作。</p><p>我们在 <code>views.py</code> 中演示：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum,Count,Max,Min,Avg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_aggregate</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">all</span>().aggregate(Count(<span class="string">&#x27;id&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.aggregate(Sum(<span class="string">&#x27;bread&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># count() 的特殊待遇</span></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">all</span>().count())</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.count())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>).count())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时 <code>urls.py</code> 中添加路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate), <span class="comment"># 新增</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>页面 <code>http://127.0.0.1:8000/aggregate/</code> 返回 ok；终端中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;id__count&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;bread__sum&#x27;: 126&#125;</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p>在 <code>models.py</code> 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsType</span>(models.Model):</span><br><span class="line">    <span class="comment"># 类型名</span></span><br><span class="line">    type_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表类型下面的信息</span></span><br><span class="line">    type_news = models.ManyToManyField(<span class="string">&#x27;NewsInfo&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新闻类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># 新闻标题</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 发布时间</span></span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 信息内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 关系属性, 代表信息所属的类型,注意不能和上面的同时开启</span></span><br><span class="line">    <span class="comment">#news_type = models.ManyToManyField(&#x27;NewsType&#x27;)</span></span><br></pre></td></tr></table></figure><p>多对多会生成三张表。</p><p>迁移之后，查看数据库：</p><p><img src="https://s2.loli.net/2024/10/15/GJAsV9pK1RW4fCh.jpg" alt="89-17.jpeg"></p><p>建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; n = NewsType()</span><br><span class="line">&gt;&gt;&gt; n.type_name = <span class="string">&#x27;IT&#x27;</span></span><br><span class="line">&gt;&gt;&gt; n.save()</span><br><span class="line">&gt;&gt;&gt; n = NewsType()</span><br><span class="line">&gt;&gt;&gt; n.type_name = <span class="string">&#x27;考研&#x27;</span></span><br><span class="line">&gt;&gt;&gt; n.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;408上热搜&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content  = <span class="string">&#x27;计算机卷疯了&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;金毛师王兴趣转移&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content  = <span class="string">&#x27;将诺贝尔奖挂在嘴边&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;神秘男子在武当山接引雷劫&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content = <span class="string">&#x27;雷击木附近出现神秘舍利子&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br></pre></td></tr></table></figure><p>在第三张表中添加多对多关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n = NewsType.objects.get(<span class="built_in">id</span> = 1)</span><br><span class="line">&gt;&gt;&gt; n.type_news.add(2)</span><br><span class="line">&gt;&gt;&gt; n.type_news.remove(2)</span><br></pre></td></tr></table></figure><p>（现在第三张表为空）</p><p>第二种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n 还是之前的 n</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; i = NewsInfo.objects.filter(id__lt=3)</span><br><span class="line">&gt;&gt;&gt; i</span><br><span class="line">&lt;QuerySet [&lt;NewsInfo: NewsInfo object (1)&gt;, &lt;NewsInfo: NewsInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; n.type_news.set(i)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/15/aqFfydDXNmPZAE8.png" alt="89-18.png" title="虽然这个文章对应的 tag 不是我想要的（恼）"></p><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p><img src="https://s2.loli.net/2024/10/15/n5PbIvTj7BJOtia.png" alt="89-19.png"></p><h1 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h1><p><img src="https://s2.loli.net/2024/10/15/E3CZHYVfk57UOeJ.png" alt="89-20.png"></p><p>我们设计一个类：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>迁移之后，我们尝试在表中导入数据（<a href="https://drive.google.com/file/d/1dsSPiALc3Ccnq4rhEkJQUDe5poou98l5/view?usp=drive_link">一个 sql 文件</a>）。</p><p>安装 sqlite3 命令行工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sqlite3</span><br></pre></td></tr></table></figure><p>进入虚拟环境，进入包含 db.sqlite3(即 django 自带的那个数据库) 的目录。</p><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 db.sqlite3</span><br></pre></td></tr></table></figure><p>执行上面的命令后，会进入 SQLite 命令行中。</p><p>在 SQLite 命令行中，运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.read /home/zhiyue/Downloads/area.sql</span><br></pre></td></tr></table></figure><p>可能会出现 “database is locked” 错误，因为 SQLite 数据库文件被锁定。这个时候可以多试几次上面的命令，会补全的。</p><p>一睹芳容：</p><p><img src="https://s2.loli.net/2024/10/15/NrxVcQmKeFyS9Lh.png" alt="89-21.png"></p><p>上面这张图也可以帮助理解什么叫自关联。</p><p>编写模板页面 <code>area.html</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自关联案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前地区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; area.atitle &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级地区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; parent.atitle &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>下级地址<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for child in children %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; child.atitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写 views 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">areas</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取广州市的上级地区和下级地区&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取广州市的信息</span></span><br><span class="line">    area = Areas.objects.get(atitle=<span class="string">&#x27;广州市&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.查询广州市的上级地区</span></span><br><span class="line">    parent = area.aParent</span><br><span class="line">    <span class="comment"># 3.查询广州市的下级地址</span></span><br><span class="line">    children = area.areas_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;area.html&#x27;</span>, &#123;<span class="string">&#x27;area&#x27;</span>:area,<span class="string">&#x27;parent&#x27;</span>:parent, <span class="string">&#x27;children&#x27;</span>:children&#125;)</span><br></pre></td></tr></table></figure><p>最后，配置 urls.</p><p>效果：</p><p><img src="https://s2.loli.net/2024/10/15/Eqh3etBNQnIYfJR.png" alt="89-22.png"></p><h1 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h1><p><code>BookInfo.objects.all()-&gt;objects</code> 是一个什么东西呢？</p><ul><li>objects 是 Django 帮我自动生成的管理器对象，通过这个管理器可以实现对数据的查询。</li></ul><p>objects 是 <code>models.Manger</code> 类的一个对象，是 <code>models.Model</code> 的一个属性。</p><p>自定义管理器之后 Django 不再帮我们生成默认的 objects 管理器。</p><p>下面我们尝试<strong>自定义模型管理器类</strong>。</p><p><strong>需求</strong>：<br>我们要实现软删除。并非在数据库中删除数据，而是将 isDelete 字段设为 1 ，这样的字段不会在 all 查询中被查询到。</p><p>在 <code>models.py</code> 中新增管理器类，然后在 BookInfo 类中重写 objects.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoManager</span>(models.Manager):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;图书模型管理器类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.改变原有查询的结果集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类的 all 方法，获取所有数据</span></span><br><span class="line">        books = <span class="built_in">super</span>().<span class="built_in">all</span>() <span class="comment"># QuerySet</span></span><br><span class="line">        <span class="comment"># 2.对 books 中的数据进行过滤</span></span><br><span class="line">        books = books.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 返回 books</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># override 了 objects </span></span><br><span class="line">    objects = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>我们将《C语言开发宝典》的 isDelete 设为 1，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 天龙八部&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><p><strong>需求</strong>：<br>我们希望改进新增数据的方法，之前在命令行里一个一个敲非常麻烦。</p><p>这里我直接更新一版 <code>models.py</code> ，新增的功能在里面了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoManager</span>(models.Manager):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;图书模型管理器类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.改变原有查询的结果集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类的 all 方法，获取所有数据</span></span><br><span class="line">        books = <span class="built_in">super</span>().<span class="built_in">all</span>() <span class="comment"># QuerySet</span></span><br><span class="line">        <span class="comment"># 2.对 books 中的数据进行过滤</span></span><br><span class="line">        books = books.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 返回 books</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_book</span>(<span class="params">self, btitle, bpub_data</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;添加一本图书&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 1.创建一个图书对象</span></span><br><span class="line">        <span class="comment"># 获取 self 所在的模型类</span></span><br><span class="line">        model_class = self.model</span><br><span class="line">        book = model_class()</span><br><span class="line">        <span class="comment"># book = BookInfo()</span></span><br><span class="line">        book.btitle = btitle</span><br><span class="line">        book.bpub_data = bpub_data</span><br><span class="line">        <span class="comment"># 2.添加进数据库</span></span><br><span class="line">        book.save()</span><br><span class="line">        <span class="comment"># 3.返回 book</span></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line">    <span class="comment"># 阅读量，default 是在 django 的逻辑层（模型类层），而不是数据库中</span></span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格,最大位数为 10,小数为 2</span></span><br><span class="line">    bprice = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override 了 objects </span></span><br><span class="line">    objects = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsType</span>(models.Model):</span><br><span class="line">    <span class="comment"># 类型名</span></span><br><span class="line">    type_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表类型下面的信息</span></span><br><span class="line">    type_news = models.ManyToManyField(<span class="string">&#x27;NewsInfo&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新闻类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.type_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># 新闻标题</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 发布时间，自动添加</span></span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 信息内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 关系属性, 代表信息所属的类型,注意不能和上面的同时开启</span></span><br><span class="line">    <span class="comment">#news_type = models.ManyToManyField(&#x27;NewsType&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>新增功能之后，可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; from datetime import date</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.create_book(&#x27;日月前事&#x27;, date(2019, 1, 1))</span><br><span class="line">&lt;BookInfo: 日月前事&gt;</span><br></pre></td></tr></table></figure><p>在数据库中，可以看到这本书已经添加了进去。</p><h1 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h1><p>Django 默认生成的表名： <code>应用名小写_模型类名小写</code> 。</p><p>元选项可以更改表名。</p><p>例如，我们<strong>在 BookInfo 模型类中</strong>增加如下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;bookinfo&#x27;</span> <span class="comment"># 指定模型类对应表名</span></span><br></pre></td></tr></table></figure><h1 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h1><p>我们设计一个 404 页面。需要在 <code>settings.py</code> 中把 DEBUG 改为 FALSE. 然后：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOST=[<span class="string">&#x27;*&#x27;</span>] <span class="comment"># 允许绑定的 IP 地址列表</span></span><br></pre></td></tr></table></figure><p>404 页面设计如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404 - 找不到页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://img.netbian.com/file/2017/0326/64aab4ae3e632dbcbf9223995c654317.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">3em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ffcc00</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404   页面未找到<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>找不到页面   &#123;&#123; request_path &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>返回主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们仍回到 DEBUG 模式。</p><h1 id="捕获-url-参数"><a href="#捕获-url-参数" class="headerlink" title="捕获 url 参数"></a>捕获 url 参数</h1><p>官方文档：<br><a href="https://docs.djangoproject.com/en/4.2/topics/http/urls/">https://docs.djangoproject.com/en/4.2/topics/http/urls/</a></p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;articles/2003/&quot;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&quot;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&quot;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&quot;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>官方文档里写的很清楚了，不再搬运。</p><h1 id="设计登录页面"><a href="#设计登录页面" class="headerlink" title="设计登录页面"></a>设计登录页面</h1><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>设计一个 <code>login.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login_check/&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),  <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check), <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 暂时先这样，这里打了断点</span></span><br></pre></td></tr></table></figure><p>填写数据后点击登录按钮：</p><p><img src="https://bu.dusays.com/2024/10/16/670f7d7fbf8f7.png" alt="89-23.png"></p><p><strong>避免 CSRF 报错的方法是注释掉 settings 中的校验</strong>。</p><ul><li>仅出于演示目的。实际上线时为了安全，不能这样做。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示目的</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="HttpReqeust-对象"><a href="#HttpReqeust-对象" class="headerlink" title="HttpReqeust 对象"></a>HttpReqeust 对象</h2><p>服务器接收到 http 协议的请求后，会根据报文创建 HttpRequest 对象，这个对象不需要我们创建，直接使用服务器构造好的对象就可以。<strong>视图的第一个参数必须是 HttpRequest 对象</strong>，在 <code>django.http</code> 模块中定义了 HttpRequest 对象的API。</p><p><strong>属性</strong>：</p><ul><li><strong>path</strong>: 一个字符串，表示请求的页面的完整路径，不包含域名和参数部分</li><li><strong>method</strong>: 一个字符串，表示请求使用的 HTTP 方法，常用值包括：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DETELE</code><ul><li>在浏览器中<strong>发出地址请求</strong>采用 get 方式，如超链接</li><li>在浏览器中点击表单的提交按钮发起请求，如果表单的 method 设置为 post, 则为 post 请求</li></ul></li><li>encoding: 一个字符串，表示提交的数据的编码方式<ul><li>这个属性是可写的</li></ul></li><li><strong>GET</strong>: QueryDict 类型对象，类似于字典，包含 get 请求方式的所有参数</li><li><strong>POST</strong>: QueryDict 类型对象，类似于字典，包含 post 请求方式的所有参数</li><li>FILES: 一个类似于字典的对象，包含所有的上传文件</li><li>COOKIES: 一个标准的 Python 字典，包含所有的 cookie，键和值都为字符串</li><li>session: 一个既可读又可写的类似于字典的对象，表示当前的会话，只有当 Django 启用会话的支持时才可用，详细内容见”状态保持”</li></ul><p>关于 GET 和 POST 的更多细节：</p><p><img src="https://bu.dusays.com/2024/10/16/670f87f1e19c6.jpeg" alt="89-24.jpeg"></p><p>用调试模式演示一下。打上断点，在浏览器输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/login/?a=10&amp;b=20&amp;c=python</span><br></pre></td></tr></table></figure><p>（实际上 <code>?</code> 前面的 <code>/</code> 可能要去掉？它好像是之后生成的，存疑）</p><p>我们可以看到 GET 拿到了这些数据：</p><p><img src="https://s2.loli.net/2024/10/16/9xNKVGcXbdOmwkf.png" alt="89-25.png"></p><h2 id="HttpResponse-对象"><a href="#HttpResponse-对象" class="headerlink" title="HttpResponse 对象"></a>HttpResponse 对象</h2><p>视图在接收请求并处理后，必须返回 HttpResponse 对象或子对象。</p><p><strong>属性</strong>：</p><ul><li><strong>content：表示返回的内容</strong></li><li>charset：表示 response 采用的编码字符集，默认为 utf-8</li><li><strong>status_code：返回的 HTTP 响应状态码</strong></li><li>content-type：指定返回数据的的 MIME 类型，默认为’text/html’</li></ul><h2 id="实战（续）"><a href="#实战（续）" class="headerlink" title="实战（续）"></a>实战（续）</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># num = 1</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username+<span class="string">&#x27;:&#x27;</span>+password)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在前端点击提交按钮后，后端的终端显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf:asdf</span><br><span class="line"></span><br><span class="line"># 这是我设置的用户名和密码</span><br></pre></td></tr></table></figure><p>演示一个简单的逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>异步的 javascript。在不全部加载某一个页面的情况下，<strong>对页面进行局部的刷新</strong>，ajax 请求都在后台。</p><p>图片，css 文件，js 文件都是静态文件。</p><p><img src="https://s2.loli.net/2024/10/16/2cRjOHI67U8YNpZ.png" alt="89-26.png"></p><p>大致流程：</p><ol><li>发起 ajax 请求：jquery(某个老旧的前端框架) 发起</li><li>执行相应的视图函数，返回 json 内容</li><li>执行相应的回调函数。通过判断 json 内容，进行相应处理。</li></ol><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>在 templates 文件夹下新建 <code>test_ajax.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax 页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定 btnAjax 的 click 事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#123;#alert(1)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnAjax&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/ajax_handle&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;dataType&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;async&#x27;</span>: <span class="literal">false</span>, <span class="comment">// 同步的 ajax 请求</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">success</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 进行处理</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// &#123;#alert(2)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">res</span> == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&#x27;#message&#x27;</span>).<span class="title function_">show</span>().<span class="title function_">html</span>(<span class="string">&#x27;提示信息&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#123;#alert(3)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#message</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnAjax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax 请求&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建立 templates 的同级文件夹 static, 下面再设 js 文件夹。将 <a href="https://code.jquery.com/jquery-1.12.4.min.js">jquery-1.12.4.min.js</a> 放入其中。</p><p>在 <code>views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示 ajax 页面&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_ajax.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时在 <code>urls.py</code> 中配置好路由。</p><p>在 settings 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)] <span class="comment"># 静态文件的保存目录</span></span><br></pre></td></tr></table></figure><p>这时运行，会提示 ajax_handle 404 Not Found，合理。</p><p>在 <code>views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect, JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ajax_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ajax 请求处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 返回的 json 数据 &#123;&#x27;res&#x27;:1&#125;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle)</span><br></pre></td></tr></table></figure><p>运行，在点击按钮后，页面不加载的情况下，按钮下方多出了红色的字“提示信息”。</p><p><img src="https://s2.loli.net/2024/10/16/OR6Qxi47VjENcey.png" alt="89-27.png"></p><p>关于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;async&#x27;: false, // 同步的 ajax 请求</span><br></pre></td></tr></table></figure><p>这句代码，打开这个开关，在 html 文件中打开调试代码的注释，再运行。可以看到弹出窗口的消息提示顺序从“123”变成了“132”。</p><h2 id="Ajax-登录案例"><a href="#Ajax-登录案例" class="headerlink" title="Ajax 登录案例"></a>Ajax 登录案例</h2><p>尝试用 ajax 做一个登录：若用户输入错误，则不刷新页面，提示错误。</p><p>增加路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login_ajax&#x27;</span>, views.login_ajax),</span><br></pre></td></tr></table></figure><p>设计视图：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login_ajax.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设计 html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax 登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnLogin&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 1.获取用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">                username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">                password = $(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.发起 post ajax 请求，/login_ajax_check, 携带用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;url&#x27;</span>:<span class="string">&#x27;/login_ajax_check/&#x27;</span>, <span class="comment">// 当是 post 请求时默认多写一个/让 urls 匹配保持一致</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;username&#x27;</span>:username,<span class="string">&#x27;password&#x27;</span>:password&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;dataType&#x27;</span>: <span class="string">&#x27;json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">success</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 登录成功 &#123;&#x27;res&#x27;:1&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 登录失败 &#123;&#x27;res&#x27;:0&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">res</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#errmsg&#x27;</span>).<span class="title function_">show</span>().<span class="title function_">html</span>(<span class="string">&#x27; 用 户 名 或 密码错误&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 跳转到首页</span></span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;/index&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#errmsg</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnLogin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errmsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设计登录校验：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_ajax_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ajax 登录校验&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取用户名和密码</span></span><br><span class="line">    username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.进行校验,返回 json 数据</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="comment"># 用户名密码正确</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">        <span class="comment"># return redirect(&#x27;/index&#x27;) ajax 请求在后台，不要返回页面或者重定向，这样是不行的，一定要返回 Json！</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 用户名或密码错误</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p>不用忘了配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br></pre></td></tr></table></figure><p>运行，成功。</p><h1 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h1><p>http 协议是<strong>无状态</strong>的。下一次去访问一个页面时并不知道上一次对这个页面做了什么。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p><img src="https://s2.loli.net/2024/10/17/852LAXTSzUHIMV1.png" alt="89-28.png"></p><p>cookie 的特点：</p><ol><li>以<strong>键值对</strong>方式进行存储。</li><li>通过浏览器访问一个网站时，会将浏览器存储的跟网站相关的<strong>所有 cookie 信息</strong>发送给该网站的服务器。<code>request.COOKIES</code></li><li>cookie 是基于<strong>域名安全</strong>的。</li><li>cookie 是有<strong>过期时间</strong>的，如果不指定，默认关闭浏览器之后 cookie 就会过期。</li></ol><p>典型应用：记住用户名，网站的广告推送。</p><p>说明：这些广告推送的商品是基于你曾经在淘宝上点击的商品类别等条件筛选出来的，看上去这是在凤凰网上访问淘宝网的 Cookie，但是事实不是这样的，一般是采用 iframe 标签嵌套一个淘宝的广告页面到凤凰网的页面上，所以淘宝的 Cookie 并没有被凤凰网读取到，而是依然交给淘宝网读取的，可以通过”开发者工具”查看元素，如下图：</p><p><img src="https://bu.dusays.com/2024/10/17/670fe9eec2816.png" alt="89-29.png"></p><h3 id="Cookie-基本使用"><a href="#Cookie-基本使用" class="headerlink" title="Cookie 基本使用"></a>Cookie 基本使用</h3><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br></pre></td></tr></table></figure><p>在 <code>views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;设置 cookie 信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    response = HttpResponse(<span class="string">&#x27;设置 cookie&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置一个 cookie 信息,名字为 num, 值为 2</span></span><br><span class="line">    response.set_cookie(<span class="string">&#x27;num&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#下面是设置 cookie 在两周之后过期</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;num&#x27;, 2, max_age=14*24*3600)</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;num&#x27;, 1,expires=datetime.now()+timedelta(days=14))</span></span><br><span class="line">    <span class="comment"># 返回 response</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>运行，访问 <code>/set_cookie</code> 页面之后，再去该网站的其他页面，都可以在 F12 中看到多了我们自己添加的 cookie.</p><p>获取 cookie:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 cookie 的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 取出 cookie num 的值</span></span><br><span class="line">    num = request.COOKIES[<span class="string">&#x27;num&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure><p>同时配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br></pre></td></tr></table></figure><h3 id="记住用户名案例"><a href="#记住用户名案例" class="headerlink" title="记住用户名案例"></a>记住用户名案例</h3><p>如果在前面的 <code>login.html</code> 我们勾选了记住用户名，那么如何实现下次 login 的时候，用户名在里边呢？</p><p>在 <code>views.py</code> 中对原来的函数作如下修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行，可以发现实现效果。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="https://s2.loli.net/2024/10/17/OX7iBcUT1EkLm8d.png" alt="89-30.png"></p><p>session 存储在服务器端。在服务器端进行状态保持的方案就是 Session .</p><p><strong>session 的特点</strong>：</p><ol><li>session 是以<strong>键值对</strong>进行存储的。</li><li>session 依赖于 cookie。唯一的标识码 sessionid 保存在 cookie 中。</li><li>session 也是有过期时间，如果不指定，默认两周就会过期。</li><li>session 与 cookie 的差异，cookie 无论保存什么值进去，取出来都是字符串，session 保存进去什么类型，取出来就是什么类型。</li></ol><p>Django 项目默认启用 Session，可以在 MIDDLEWARE 配置里找到。</p><p>设置 SESSION_ENGINE 项，指定 Session 数据存储的方式，可以存储在数据库、django 的缓存、Redis 等。</p><p><strong>默认存储方式</strong>，存储在数据库中，如下设置可以写，也可以不写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.db&#x27;</span><br></pre></td></tr></table></figure><p><strong>存储在缓存中</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cache&#x27;</span><br></pre></td></tr></table></figure><p><strong>混合存储</strong>，优先从本机内存中存取，如果没有则从数据库中存取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cached_db&#x27;</span><br></pre></td></tr></table></figure><p>如果存储在数据库中，需要在项 INSTALLED_APPS 中安装 Session 应用。</p><h3 id="依赖于-Cookie"><a href="#依赖于-Cookie" class="headerlink" title="依赖于 Cookie"></a>依赖于 Cookie</h3><p>在使用 Session 后，会在 Cookie 中存储一个 sessionid 的数据，每次请求时浏览器都会将这个数据发给服务器，服务器在接收到 sessionid 后，会根据这个值找出这个请求者的 Session。</p><p>存储 Session 时，键与 Cookie 中的 sessionid 相同，值是开发人员设置的键值对信息，进行了 base64 编码，过期时间由开发人员设置。</p><h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_session</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;设置 session&#x27;&#x27;&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;yomiya&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;age&#x27;</span>] = <span class="number">17</span></span><br><span class="line">    <span class="comment"># request.session.set_expiry(5)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;设置 session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 session&#x27;&#x27;&#x27;</span></span><br><span class="line">    username = request.session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    age = request.session[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(username+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(age))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),</span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check),</span><br><span class="line">    path(<span class="string">&#x27;test_ajax/&#x27;</span>, views.test_ajax),</span><br><span class="line">    path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax/&#x27;</span>, views.login_ajax),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br><span class="line">    path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br><span class="line">    path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line">    path(<span class="string">&#x27;set_session/&#x27;</span>, views.set_session), <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;get_session/&#x27;</span>, views.get_session), <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问 /set_session , 在 F12 中可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionid=xsjm51tmhguylsknjf53nvvzsf83hgui;</span><br></pre></td></tr></table></figure><p>与数据库中的一致，同时数据库中 session_data 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJxVjDsOgzAQRO_iOrLW2HhJyvQ5A1rWayAfW-JToCh3j5EoknJm3ry3amldhnadZWrHoC7KqNNv1xE_JO1DuFPqs-aclmns9I7oY531LQd5Xg_2TzDQPJQ3NghWjDccHfuavQC4M9mGEDxLtAiurkMHleFKIDj0ZCMRVIwSyRbprkv0kmLb8mvcqHTUl2jw8wWmp0Dd:1t1I46:CMmhgMpr67_q-bZvtptryM6HddKavAQEW83ZsPD4TQI</span><br></pre></td></tr></table></figure><p>访问 /get_session, 浏览器显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yomiya:17</span><br></pre></td></tr></table></figure><p>清除 session：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def clear_session(request):</span></span><br><span class="line"><span class="comment">#     &#x27;&#x27;&#x27;清除 session 信息&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     # request.session.clear()</span></span><br><span class="line"><span class="comment">#     # request.session.flush()</span></span><br><span class="line"><span class="comment">#     return HttpResponse(&#x27;清除成功&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="记住用户登录状态案例"><a href="#记住用户登录状态案例" class="headerlink" title="记住用户登录状态案例"></a>记住用户登录状态案例</h3><p>需求：已登录的用户在访问 /login 时，直接访问首页，不需要再输入用户名和密码。</p><p>修改 <code>views.py</code> 中的 login、login_check 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 判断用户是否登录</span></span><br><span class="line">    <span class="keyword">if</span> request.session.has_key(<span class="string">&#x27;islogin&#x27;</span>):</span><br><span class="line">    <span class="comment"># 用户已登录, 跳转到首页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        request.session[<span class="string">&#x27;islogin&#x27;</span>] = <span class="literal">True</span> <span class="comment"># add</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="cookie-和-session-的应用场景"><a href="#cookie-和-session-的应用场景" class="headerlink" title="cookie 和 session 的应用场景"></a>cookie 和 session 的应用场景</h2><p>cookie: 记住用户名。<strong>安全性要求不高</strong>。</p><p>session: 涉及到<strong>安全性要求比较高</strong>的数据。如用户名、余额、等级、验证码等。</p><p>深度延伸，如果用户禁用 cookie，如何使用 session :<br><a href="https://www.cnblogs.com/ceceliahappycoding/p/10544075.html">https://www.cnblogs.com/ceceliahappycoding/p/10544075.html</a></p><h1 id="模板进阶"><a href="#模板进阶" class="headerlink" title="模板进阶"></a>模板进阶</h1><h2 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_var</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模板变量&#x27;&#x27;&#x27;</span></span><br><span class="line">    my_dict = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;字典键值&#x27;</span>&#125;</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 定义模板上下文</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;my_dict&#x27;</span>:my_dict, <span class="string">&#x27;my_list&#x27;</span>:my_list, <span class="string">&#x27;book&#x27;</span>:book&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_var.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure><p>templates 文件夹下 <code>test_var.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学习模板变量<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    使用字典属性:&#123;&#123; my_dict.title &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    使用列表元素:&#123;&#123; my_list.1 &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    使用对象属性:&#123;&#123; book.btitle &#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后配置路由。转到浏览器对于路径可以看到效果。</p><h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><p>可以通过 <code>&#123;&#123; forloop.counter &#125;&#125;</code> 得到 for 循环遍历到了第几次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if 条件 %&#125;</span><br><span class="line">&#123;% elif 条件 %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：进行比较操作时，比较操作符两边必须有空格。</strong></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>格式：<strong>模板变量｜过滤器：参数</strong></p><p>在 templates 文件夹下新建 <code>test_filters.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">&#123;% load filters %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        &#123;% if book.id|mod %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>&#123;&#123; book.id &#125;&#125;--&#123;&#123; book.btitle|length &#125;&#125;--&#123;&#123; book.bpub_data|date:&#x27;Y 年-m 月-d 日&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;--&#123;&#123; book.bpub_data &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">default 过滤器:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content|default:&#x27;没有数据&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建 <code>templatetags/filters.py</code> 文件，其中 templatetags 文件夹与 <code>models.py</code> 文件同级。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filters.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="comment"># 过滤器其实就是 python 函数</span></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Library 类的对象</span></span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义的过滤器函数，至少有一个参数，最多两个</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;判断 num 是否为偶数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_val</span>(<span class="params">num, val</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;判断 num 是否能被 val 整除&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num%val == <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_filters</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_filters.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>:books&#125;)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p><strong>注意配置自定义过滤器不会自动加载，必须重启 Django 服务</strong>。</p><p>效果：</p><p><img src="https://s2.loli.net/2024/10/17/s6MqLU4Qau5TXbw.png" alt="89-31.png"></p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p><strong>模板继承是为了重用 html 页面内容</strong>。比如很多网站的头部导航条和底部版权版权信息不变的。</p><p><img src="https://s2.loli.net/2024/10/17/fagkvYymUP1wV7C.png" alt="89-32.png"></p><p>在 templates 文件夹下创建 <code>base.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;父模板文件&#123;% endblock title %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>导航条<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block b1 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父模板 b1 块中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock b1 %&#125;</span><br><span class="line">&#123;% block b2 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父模板 b2 块中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock b2 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_template_inhert</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;base.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>在 templates 文件夹下创建 <code>child.html</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">&#123;% block title %&#125;子模板文件&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block b1 %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    &lt;h1&gt;这是子模板 b1 块中的内容&lt;/h1&gt;</span><br><span class="line">&#123;% endblock b1 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block b2 %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    &lt;h1&gt;这是子模板 b2 块中的内容&lt;/h1&gt;</span><br><span class="line">&#123;% endblock b2 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_template_inhert</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return render(request, &quot;base.html&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;child.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行即可对比前后效果。</p><h2 id="html-转义"><a href="#html-转义" class="headerlink" title="html 转义"></a>html 转义</h2><p>增加 <code>html_escape.html</code> 页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html 转义<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">html 转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">使用 safe 过滤器关闭转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content|safe &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">使用 autoescape 关闭转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">    &#123;&#123; content &#125;&#125;</span><br><span class="line">    &#123;&#123; content &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">模板硬编码中的字符串默认不会经过转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; test|default:&#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27; &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">手动进行转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; test|default:&#x27;<span class="symbol">&amp;lt;</span>h1<span class="symbol">&amp;gt;</span>hello<span class="symbol">&amp;lt;</span>/h1<span class="symbol">&amp;gt;</span>&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加视图函数 html_escape:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">html_escape</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;html 转义&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;html_escape.html&#x27;</span>,&#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/17/ASMt8urZjh729ys.png" alt="89-33.png"></p><h1 id="csrf-攻击"><a href="#csrf-攻击" class="headerlink" title="csrf 攻击"></a>csrf 攻击</h1><p>CSRF 全拼为 Cross Site Request Forgery，译为跨站请求伪造。CSRF 指攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF 能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><p><img src="https://bu.dusays.com/2024/10/17/67111b92bfa6d.png" alt="89-34.png"></p><p>接下来我们演示这一攻击。</p><p>设计一个修改密码的页面 <code>change_pwd.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改密码页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/change_pwd_action/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;% csrf_token %&#125; --&gt;</span></span><br><span class="line">    新密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;change_pwd.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd_action</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模拟修改密码处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取新密码</span></span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.返回一个应答</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;修改密码为:%s&#x27;</span>%pwd)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>这个时候，我们修改密码，可以成功。</p><p>但是这个时候，假如有一个猥琐黑客，直接访问了 <code>/change_pwd_action</code> ，就可以通过一些手段修改我们的密码，怎么办？</p><p>答案是凉拌。</p><p>不过还好，Django 框架为我们提供了预防这种攻击的方法。</p><p>在 settings 中打开 CsrfViewMiddleware :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>, <span class="comment"># 打开</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个时候，再回到 <code>/change_pwd</code> 修改密码，就会被阻止。</p><p>我们把之前 <code>change_pwd.html</code> 的注释打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改密码页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/change_pwd_action/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    新密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候就可以成功修改了！</p><p>防御的大致原理是，只有在本页面发出的请求可以访问到 <code>/change_pwd_action</code> 。</p><p><img src="https://s2.loli.net/2024/10/18/FptNwV4iG6loxT1.jpg" alt="89-35.jpeg"></p><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><p>在用户注册、登录页面，为了<strong>防止暴力请求</strong>，可以加入验证码功能，如果验证码错误，则不需要继续处理，可以减轻业务服务器、数据库服务器的压力。</p><p>安装 Pillow :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow --proxy=&quot;http://127.0.0.1:7897&quot;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /verify_code</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="comment"># from django.utils.six import BytesIO #django 3 以后丢弃了</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 引入随机函数模块</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="comment"># 定义变量，用于画面的背景色、宽、高 RGB</span></span><br><span class="line">    bgcolor = (random.randrange(<span class="number">20</span>, <span class="number">100</span>), random.randrange(<span class="number">20</span>, <span class="number">100</span>), <span class="number">255</span>)</span><br><span class="line">    width = <span class="number">100</span></span><br><span class="line">    height = <span class="number">25</span></span><br><span class="line">    <span class="comment"># 创建画面对象</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), bgcolor)</span><br><span class="line">    <span class="comment"># 创建画笔对象</span></span><br><span class="line">    draw = ImageDraw.Draw(im)</span><br><span class="line">    <span class="comment"># 调用画笔的 point()函数绘制噪点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">        xy = (random.randrange(<span class="number">0</span>, width), random.randrange(<span class="number">0</span>, height))</span><br><span class="line">        fill = (random.randrange(<span class="number">0</span>, <span class="number">255</span>), <span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        draw.point(xy, fill=fill)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义验证码的备选值</span></span><br><span class="line">    str1 = <span class="string">&#x27;ABCD123EFGHIJK456LMNOPQRS789TUVWXYZ0&#x27;</span></span><br><span class="line">    <span class="comment"># 随机选取 4 个值作为验证码</span></span><br><span class="line">    rand_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rand_str += str1[random.randrange(<span class="number">0</span>, <span class="built_in">len</span>(str1))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造字体对象，ubuntu 的字体路径为“/usr/share/fonts/truetype/freefont”</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&#x27;FreeMono.ttf&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">    <span class="comment"># 构造字体颜色</span></span><br><span class="line">    fontcolor = (<span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>), random.randrange(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 绘制 4 个字</span></span><br><span class="line">    draw.text((<span class="number">5</span>, <span class="number">2</span>), rand_str[<span class="number">0</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">25</span>, <span class="number">2</span>), rand_str[<span class="number">1</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">50</span>, <span class="number">2</span>), rand_str[<span class="number">2</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">75</span>, <span class="number">2</span>), rand_str[<span class="number">3</span>], font=font, fill=fontcolor)</span><br><span class="line">    <span class="comment"># 释放画笔</span></span><br><span class="line">    <span class="keyword">del</span> draw</span><br><span class="line">    <span class="comment"># 存入 session，用于做进一步验证</span></span><br><span class="line">    request.session[<span class="string">&#x27;verifycode&#x27;</span>] = rand_str</span><br><span class="line">    <span class="comment"># 内存文件操作</span></span><br><span class="line">    <span class="keyword">import</span> io</span><br><span class="line">    buf = io.BytesIO()</span><br><span class="line">    <span class="comment"># 将图片保存在内存中，文件类型为 png</span></span><br><span class="line">    im.save(buf, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将内存中的图片数据返回给客户端，MIME 类型为图片 png</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(buf.getvalue(), <span class="string">&#x27;image/png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>修改 <code>login.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login_check/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/verify_code&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vcode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改一些逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># # 判断用户是否登录</span></span><br><span class="line">    <span class="comment"># if request.session.has_key(&#x27;islogin&#x27;):</span></span><br><span class="line">    <span class="comment"># # 用户已登录, 跳转到首页</span></span><br><span class="line">    <span class="comment">#     return HttpResponseRedirect(&#x27;/index&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取用户输入验证码</span></span><br><span class="line">    vcode1 = request.POST.get(<span class="string">&#x27;vcode&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取 session 中保存的验证码</span></span><br><span class="line">    vcode2 = request.session.get(<span class="string">&#x27;verifycode&#x27;</span>)</span><br><span class="line">    <span class="comment"># 进行验证码校验</span></span><br><span class="line">    <span class="keyword">if</span> vcode1 != vcode2:</span><br><span class="line">        <span class="comment"># 验证码错误</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        request.session[<span class="string">&#x27;islogin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在可以实现效果：验证码不通过则无法登录。</p><h1 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h1><p>当某一个 url 配置的地址发生变化时，页面上使用反向解析生成地址的位置不需要发生变化。</p><p>新建 <code>url_reverse.html</code> 页面，里边加入首页超链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_reverse</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;url_reverse.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>如果我们修改 <code>urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index),  <span class="comment"># 去掉</span></span><br><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index), <span class="comment"># 改为</span></span><br></pre></td></tr></table></figure><p>则原来能用的链接都失效了。</p><p>将 <code>url_reverse.html</code> 修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    url 反向解析生成 index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    /show_args/1/2:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;/show_args/1/2&quot;&gt;/show_args/1/2&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    动态产生/show_args/1/2:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;&#123;% url &#x27;show_args&#x27; 1 2 %&#125;&quot;&gt;/show_args/1/2&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /show_kwargs/3/4:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;/show_kwargs/3/4&quot;&gt;/show_kwargs/3/4&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    动态产生/show_kwargs/3/4:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;&#123;% url &#x27;show_kwargs&#x27; c=3 d=4 %&#125;&quot;&gt;/show_kwargs/3/4&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时在 <code>urls.py</code> 中新增（修改）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index), <span class="comment"># 原本</span></span><br><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>), <span class="comment"># 改为</span></span><br><span class="line"></span><br><span class="line">path(<span class="string">&#x27;show_args/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;show_kwargs/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_args</span>(<span class="params">request, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span>(a) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_kwargs</span>(<span class="params">request, c, d</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span>(c) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(d))</span><br></pre></td></tr></table></figure><p>效果，第一个链接不可以访问，第二个可以：</p><p><img src="https://s2.loli.net/2024/10/18/YCvVmOidxRwPteF.png" alt="89-36.png"></p><p><strong>下面我们做一些更复杂的操作。</strong></p><p>在 booktest 文件夹下新增 <code>urls.py</code> . 注意现在我们有两个 <code>urls.py</code> :</p><ul><li><code>day1010/day1010/urls.py</code> （旧）</li><li><code>day1010/booktest/urls.py</code> （新）</li></ul><p>在 <code>day1010/day1010/urls.py</code>（旧）中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index1/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),</span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check),</span><br><span class="line">    path(<span class="string">&#x27;test_ajax/&#x27;</span>, views.test_ajax),</span><br><span class="line">    path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax/&#x27;</span>, views.login_ajax),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br><span class="line">    path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br><span class="line">    path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line">    path(<span class="string">&#x27;set_session/&#x27;</span>, views.set_session),</span><br><span class="line">    path(<span class="string">&#x27;get_session/&#x27;</span>, views.get_session),</span><br><span class="line">    <span class="comment"># path(&#x27;clear_session/&#x27;, views.clear_session),</span></span><br><span class="line">    path(<span class="string">&#x27;test_var/&#x27;</span>, views.test_var),</span><br><span class="line">    path(<span class="string">&#x27;test_filters/&#x27;</span>, views.test_filters),</span><br><span class="line">    path(<span class="string">&#x27;test_template_inhert/&#x27;</span>, views.test_template_inhert),</span><br><span class="line">    path(<span class="string">&#x27;html_escape/&#x27;</span>, views.html_escape),</span><br><span class="line">    path(<span class="string">&#x27;change_pwd/&#x27;</span>, views.change_pwd),</span><br><span class="line">    path(<span class="string">&#x27;change_pwd_action/&#x27;</span>, views.change_pwd_action),</span><br><span class="line">    path(<span class="string">&#x27;verify_code/&#x27;</span>, views.verify_code),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;url_reverse/&#x27;</span>, views.url_reverse),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include((<span class="string">&#x27;booktest.urls&#x27;</span>,<span class="string">&#x27;booktest&#x27;</span>),namespace = <span class="string">&#x27;booktest&#x27;</span>)),  <span class="comment"># 将那个文件的内容合并过来</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>day1010/booktest/urls.py</code>（新）中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;show_args/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;show_kwargs/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>url_reverse.html</code> 中打开注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    url 反向解析生成 index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /show_args/1/2:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_args/1/2&quot;</span>&gt;</span>/show_args/1/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    动态产生/show_args/1/2:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;booktest:show_args&#x27; 1 2 %&#125;&quot;</span>&gt;</span>/show_args/1/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    /show_kwargs/3/4:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_kwargs/3/4&quot;</span>&gt;</span>/show_kwargs/3/4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    动态产生/show_kwargs/3/4:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;booktest:show_kwargs&#x27; c=3 d=4 %&#125;&quot;</span>&gt;</span>/show_kwargs/3/4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在这些链接都可以访问：</p><p><img src="https://bu.dusays.com/2024/10/18/6711f1f5d9db6.png" alt="89-37.png"></p><p>现在，对 <code>day1010/booktest/urls.py</code>（新）作修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面加了 1</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;show_args1/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;show_kwargs1/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再次运行，结果：</p><p><img src="https://bu.dusays.com/2024/10/18/6711f3bec195a.png" alt="89-38.png"></p><h1 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h1><p>在 static 文件夹下新增 images 文件夹，里面放入 <code>amber.png</code></p><p>templates 文件夹下新增 <code>static_test.html</code> 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>静态文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/images/amber.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/abc/images/amber.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">动态获取 STATIC_URL,拼接静态文件路径:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/amber.png&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_test</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;static_test.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置路由（老方法）。</p><p>结果：</p><p><img src="https://s2.loli.net/2024/10/18/q39OQKGMDYWRgxU.png" alt="89-39.png"></p><p>可以看到，中间那张无法加载。</p><p>如果在 settings 中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;static/&#x27;</span> <span class="comment"># del</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;abc/&#x27;</span> <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>那么结果变成：第一张无法加载，其他可以加载。</p><p><strong>体现了动态获取 STATIC_URL 的好处</strong>。</p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p><strong>中间件函数</strong>是 django 框架给我们预留的函数接口，让我们可以干预请求和应答的过程。</p><p><img src="https://s2.loli.net/2024/10/18/eXdmK8HBNoaFgt6.png" alt="89-40.png" title="面向切面编程 AOP"></p><p>需求：现在我们需要禁掉一些有恶意行为的 IP 访问网站。</p><p>一种方法，我们可以使用装饰器模式，在每一个视图函数前加装饰器：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXCLUDE_IPS = [<span class="string">&#x27; 192.168.0.108&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blocked_ips</span>(<span class="params">view_func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取浏览器端的 ip 地址</span></span><br><span class="line">        user_ip = request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> EXCLUDE_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;Forbidden&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> view_func(request, *view_args, **view_kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@blocked_ips</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是这样有一个问题，如果要禁止某个 IP 访问所有页面，我们需要对所有的视图函数加装饰器。这样非常麻烦（提问：是否通过 vim 操作并不麻烦）。</p><p>第二个思路是使用中间件。</p><p>在 ./booktest/ 下新建 <code>myMiddleware.py</code> 文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockedIPSMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, get_response </span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;中间件类&#x27;&#x27;&#x27;</span></span><br><span class="line">    EXCLUDE_IPS = [<span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数调用之前会调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        user_ip = request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> BlockedIPSMiddleware.EXCLUDE_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;Forbidden&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;中间件类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, get_response </span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---init---&#x27;</span>)</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;产生 request 对象之后，url 匹配之前调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_request----&#x27;</span>)</span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;process_request me&#x27;)</span></span><br><span class="line">        response=self.get_response(request)</span><br><span class="line">        <span class="comment"># 视图函数调用之后，内容返回浏览器之前</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------response------&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;url 匹配之后，视图函数调用之前调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_view----&#x27;</span>)</span><br><span class="line">        <span class="comment"># view 视图函数没有得到执行，但是还是要走 process_response</span></span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;process_view&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionTest1Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数发生异常时调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_exception1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exception)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionTest2Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数发生异常时调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_exception2----&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 settings 中注册：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest.myMiddleware.BlockedIPSMiddleware&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>重启服务，发现无法访问（因为本机地址被禁了）。</p><h1 id="后台管理（续）"><a href="#后台管理（续）" class="headerlink" title="后台管理（续）"></a>后台管理（续）</h1><p>一些零碎的知识点。</p><p><code>admin.py</code> 新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型管理类&#x27;&#x27;&#x27;</span></span><br><span class="line">    list_per_page = <span class="number">10</span> <span class="comment"># 指定每页显示 10 条数据</span></span><br><span class="line">    <span class="comment">#方法名也可以作为一列进行显示</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>]</span><br><span class="line">    actions_on_bottom = <span class="literal">True</span> <span class="comment"># 底部显示动作窗口</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment">#顶部不显示动作窗口</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页右侧过滤栏</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Areas, AreaInfoAdmin)</span><br></pre></td></tr></table></figure><p>在 <code>models.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.atitle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.aParent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.aParent.atitle</span><br><span class="line"></span><br><span class="line">    parent.short_description = <span class="string">&#x27;父级地区名称&#x27;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/18/PG3DNO1cRiortyK.png" alt="89-41.png"></p><p>目前的这个管理页面的新增功能有点弱，作修改。</p><p><code>admin.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaStackedInline</span>(admin.StackedInline):</span><br><span class="line">    <span class="comment"># 写多类的名字</span></span><br><span class="line">    model = Areas</span><br><span class="line">    extra = <span class="number">2</span> <span class="comment">#下面新增位置显示数目，默认显示 3 个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型管理类&#x27;&#x27;&#x27;</span></span><br><span class="line">    list_per_page = <span class="number">10</span> <span class="comment"># 指定每页显示 10 条数据</span></span><br><span class="line">    <span class="comment">#方法名也可以作为一列进行显示</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>]</span><br><span class="line">    actions_on_bottom = <span class="literal">True</span> <span class="comment"># 底部显示动作窗口</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment">#顶部不显示动作窗口</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页右侧过滤栏</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># add</span></span><br><span class="line">    fields = [<span class="string">&#x27;aParent&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>] </span><br><span class="line">    inlines = [AreaStackedInline] <span class="comment">#以块的形式</span></span><br></pre></td></tr></table></figure><p>感觉没什么用。</p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p>新建文件夹 <code>./static/media</code> .</p><p>在 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_ROOT=os.path.join(BASE_DIR,<span class="string">&#x27;static/media&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 <code>./booktest/models.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PicTest</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;上传图片&#x27;&#x27;&#x27;</span></span><br><span class="line">    goods_pic = models.ImageField(upload_to=<span class="string">&#x27;booktest&#x27;</span>)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./booktest/admin.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo,Areas,PicTest</span><br><span class="line"></span><br><span class="line">admin.site.register(PicTest)</span><br></pre></td></tr></table></figure><p>在后台管理页面可以直接上传图片了。由于我们的配置，图片会被存放在 <code>./static/media/booktest/</code> 下面。</p><p>在数据库中，可以看到存储的是一个路径：</p><p><img src="https://s2.loli.net/2024/10/19/OFfqDl8ugwBrbHm.png" alt="89-42.png"></p><p>新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> PicTest</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pic_show</span>(<span class="params">request</span>):</span><br><span class="line">    pic=PicTest.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    context=&#123;<span class="string">&#x27;pic&#x27;</span>:pic&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;pic_show.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><p>在 <code>./templates/</code> 下新增 <code>pic_show.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/media/&#123;&#123; pic.goods_pic &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./day1010/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;pic_show/&#x27;</span>, views.pic_show),</span><br></pre></td></tr></table></figure><p>在 <code>./templates/</code> 下新增 <code>upload_pic.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload_handle/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./booktest/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /show_upload</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示上传图片页面&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;upload_pic.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>接下来编写 upload_handle 的逻辑。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1010 <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;上传图片处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取上传文件的处理对象</span></span><br><span class="line">    pic = request.FILES[<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.创建一个文件</span></span><br><span class="line">    save_path = <span class="string">&#x27;%s/booktest/%s&#x27;</span>%(settings.MEDIA_ROOT,pic.name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 3.获取上传文件的内容并写到创建的文件中</span></span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> pic.chunks():</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.在数据库中保存上传记录</span></span><br><span class="line">    PicTest.objects.create(goods_pic=<span class="string">&#x27;booktest/%s&#x27;</span>%pic.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.返回</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>此时，<code>/show_upload/</code> 页面可以正常工作。</p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>在 <code>./templates/</code> 下新建 <code>show_area.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in areas %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./booktest/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_area</span>(<span class="params">request</span>):</span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;show_area.html&#x27;</span>,&#123;<span class="string">&#x27;areas&#x27;</span>: areas&#125;)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>运行，在浏览器中查看。这个显示太长了，我们希望进行分页。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_area</span>(<span class="params">request, pindex=<span class="number">1</span></span>):</span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 分页,每页显示 10 条</span></span><br><span class="line">    paginator = Paginator(areas, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 获取第 pindex 页的内容</span></span><br><span class="line">    pindex = <span class="built_in">int</span>(pindex)</span><br><span class="line">    <span class="comment"># page 是 Page 类的实例对象</span></span><br><span class="line">    page = paginator.page(pindex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;show_area.html&#x27;</span>,&#123;<span class="string">&#x27;page&#x27;</span>: page&#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>show_area.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% for pindex in page.paginator.page_range %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- &#123;# 判断是否是当前页 #&#125; --&gt;</span></span><br><span class="line">    &#123;% if pindex == page.number %&#125;</span><br><span class="line">        &#123;&#123; pindex &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; pindex &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;show_area/&#x27;</span>, views.show_area), <span class="comment"># do not remove</span></span><br><span class="line">path(<span class="string">&#x27;show_area/&lt;int:pindex&gt;&#x27;</span>, views.show_area),</span><br></pre></td></tr></table></figure><p>运行，可以进行正常的分页、翻页操作。</p><p>增加“上一页” “下一页” 功能，修改 <code>show_area.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 判断是否有上一页 --&gt;</span></span><br><span class="line">&#123;% if page.has_previous %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; page.previous_page_number &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for pindex in page.paginator.page_range %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- &#123;# 判断是否是当前页 #&#125; --&gt;</span></span><br><span class="line">    &#123;% if pindex == page.number %&#125;</span><br><span class="line">        &#123;&#123; pindex &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; pindex &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 判断是否有下一页 --&gt;</span></span><br><span class="line">&#123;% if page.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; page.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/19/8MzOvGBADSr9VZK.png" alt="89-43.png"></p><h1 id="省市县选择案例"><a href="#省市县选择案例" class="headerlink" title="省市县选择案例"></a>省市县选择案例</h1><p>这部分内容其实偏前端。</p><p>新建 <code>./templates/areas.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>收件地址选择<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发起一个 ajax 请求 /prov，获取所有省级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取信息,使用 get</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 涉及到信息修改,使用 post</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;/prov&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">            res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 prov 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">            prov = $(<span class="string">&#x27;#prov&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            for(i=0; i&lt;res.length; i++)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                id = res[i][0]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                atitle = res[i][1]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                option_str = &#x27;&lt;option value=&quot;&#x27;+id + &#x27;&quot;&gt;&#x27;+ atitle+ &#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // 向 prov 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                prov.append(option_str)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+ <span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 向 prov 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                prov.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定 prov 下拉列表框的 change 事件，获取省下面的市的信息</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#prov&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起一个 ajax 请求 /city，获取省下面市级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取点击省的 id</span></span></span><br><span class="line"><span class="language-javascript">            prov_id=$(<span class="variable language_">this</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&#x27;/city/&#x27;</span>+prov_id, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">                res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 city 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                city = $(<span class="string">&#x27;#city&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 city 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                city.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择市---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis = $(<span class="string">&#x27;#dis&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择县---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历取值添加到 city 下拉列表框中</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 向 city 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                    city.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定 city 下拉列表框的 change 事件，获取市下面的县的信息</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#city&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起一个 ajax 请求 /dis，获取市下面县级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取点击市的 id</span></span></span><br><span class="line"><span class="language-javascript">            city_id=$(<span class="variable language_">this</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&#x27;/dis/&#x27;</span>+city_id, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">                res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis = $(<span class="string">&#x27;#dis&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择县---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历取值添加到 dis 下拉列表框中</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+<span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 向 dis 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                    dis.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;prov&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择省---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择市---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;dis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择县---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>视图函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">areas</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;省市县选中案例&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;areas.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prov</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取所有省级地区的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取所有省级地区的信息</span></span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 2.变量 areas 并拼接出 json 数据：atitle id</span></span><br><span class="line">    areas_list = []</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</span><br><span class="line">        areas_list.append((area.<span class="built_in">id</span>, area.atitle))</span><br><span class="line">    <span class="comment"># 3.返回数据</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;data&#x27;</span>:areas_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">city</span>(<span class="params">request, pid=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 pid 的下级地区的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取 pid 对应地区的下级地区</span></span><br><span class="line">    <span class="comment"># area = AreaInfo.objects.get(id=pid)</span></span><br><span class="line">    <span class="comment"># areas = area.areainfo_set.all()</span></span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__id=pid)</span><br><span class="line">    <span class="comment"># 2.变量 areas 并拼接出 json 数据：atitle id</span></span><br><span class="line">    areas_list = []</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</span><br><span class="line">        areas_list.append((area.<span class="built_in">id</span>, area.atitle))</span><br><span class="line">    <span class="comment"># 3.返回数据,返回给前端，对方得到的是数组</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;data&#x27;</span>: areas_list&#125;)</span><br></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">path(<span class="string">&#x27;prov/&#x27;</span>,views.prov),</span><br><span class="line">path(<span class="string">&#x27;city/&lt;int:pid&gt;&#x27;</span>,views.city),</span><br><span class="line">path(<span class="string">&#x27;dis/&lt;int:pid&gt;&#x27;</span>,views.city),</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://s2.loli.net/2024/10/19/y5aszKWZI4JC1re.png" alt="89-44.png"></p><p>上一级区域选择之后，到下一级菜单中会自动显示该区域的下级单位。</p><p>实际上此类功能现在一般交由第三方处理。</p><h1 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h1><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-tinymce --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>在 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tinymce&#x27;</span>,     <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>继续在 settings 中增加配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TINYMCE_DEFAULT_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;theme&#x27;</span>: <span class="string">&#x27;silver&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;width&#x27;</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>./day1010/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;tinymce/&#x27;</span>,include(<span class="string">&#x27;tinymce.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>在 <code>./booktest/models.py</code> 新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tinymce.models <span class="keyword">import</span> HTMLField</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfo</span>(models.Model):</span><br><span class="line">    gcontent=HTMLField()</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./booktest/admin.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo,Areas,PicTest,GoodsInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">admin.site.register(GoodsInfo,GoodsInfoAdmin)</span><br></pre></td></tr></table></figure><p>可以在后台管理页面看到效果：</p><p><img src="https://s2.loli.net/2024/10/19/rVazPwmZcn36hSF.png" alt="89-45.png"></p><p>如何在前台看到呢？</p><p>新建 <code>./templates/show.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>展示富文本编辑器内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">id:&#123;&#123;g.id&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;%autoescape off%&#125;</span><br><span class="line">&#123;&#123;g.gcontent&#125;&#125;</span><br><span class="line">&#123;%endautoescape%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123;g.gcontent|safe&#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">request</span>):</span><br><span class="line">    goods=GoodsInfo.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">    context=&#123;<span class="string">&#x27;g&#x27;</span>:goods&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;show.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><p>配置路由。运行成功。</p><p>如何在前台使用这个富文本编辑器呢？ <del>关于这个，小编也很好奇呢</del></p><p>本文章的示例代码参见：<br><a href="https://github.com/loveofpeach/py_webServer/tree/master/day1010">https://github.com/loveofpeach/py_webServer/tree/master/day1010</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;后端开发简介&quot;&gt;&lt;a href=&quot;#后端开发简介&quot; class=&quot;headerlink&quot; title=&quot;后端开发简介&quot;&gt;&lt;/a&gt;后端开发简介&lt;/h1&gt;&lt;p&gt;后端开发框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: Spring&lt;/li&gt;
&lt;li&gt;Python: Dja</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Django" scheme="https://dropsong.github.io/tags/Django/"/>
    
    <category term="后端" scheme="https://dropsong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="sqlite" scheme="https://dropsong.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>承德行</title>
    <link href="https://dropsong.github.io/posts/a854c4ab.html"/>
    <id>https://dropsong.github.io/posts/a854c4ab.html</id>
    <published>2024-10-03T13:43:49.000Z</published>
    <updated>2024-10-07T03:23:20.085Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>const zd = 北漂日记::Z_2<br>const_list = {F, M, B, Z, zd}</p></div><p>前两天和 zd 去了承德。</p><p>我们首先在唐山取车，稍作停留就直接上高速，向承德进发。</p><p>承德是一座很有看头的城市，清王朝在这里留下了浓墨重彩的一笔。某著名热河蛮子，网红马督公，拍过一期关于承德的节目，用来当做电子榨菜再合适不过。</p><p>城市零星地散落在山峦之中，高速公路好像切中肯綮一般，变幻成桥梁和隧道在燕山山脉中肆意穿行。</p><p>山对人类是很亲切的，但是为什么呢？我想象自己是造物主，现在要为人类设出一片天地。最开始，是一片超平坦的世界。然后，我要隆起为山，凹陷为谷，花草风月、飞禽走兽填其中。于是我得到答案，山对人类是很亲切的，有了山，大地就从一个需要匍匐的对象，变成可以拥抱的了。</p><p>承德的人文、自然的景观相距很远，我们时间有限，就只打算看看人文的部分。</p><p>赶到时已是晚上，于是在宾馆安顿下，简单出去走了走。</p><p><img src="https://bu.dusays.com/2024/10/03/66feaa8de961c.jpg" alt="88-1"></p><p>这张照片也发给了领妹，得到一个“很绚”的评价。</p><p>第二天早上觅食的时候，偶遇世纪初集市：</p><p><img src="https://bu.dusays.com/2024/10/03/66feabe171d2e.jpg" alt="88-2.jpg"></p><p>避暑山庄：</p><p><img src="https://bu.dusays.com/2024/10/03/66feac53365b5.jpg" alt="88-3.jpg" title="著名的错别字"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac6aa83c0.jpg" alt="88-3dot5.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac69ea4d5.jpg" alt="88-4.jpg" title="小布达拉宫"></p><p><img src="https://bu.dusays.com/2024/10/07/6703540c5a854.jpg" alt="88-5.jpg" title="小长城"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac76839e3.jpg" alt="88-6.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac7034f95.jpg" alt="88-7.jpg"></p><p>避暑山庄的山路大巴，司机开起来非常有自信。</p><p>山庄的小长城上，可以远眺外八庙，其中最惹眼的就是小布达拉宫。</p><p>下午去了小布达拉宫：</p><p><img src="https://bu.dusays.com/2024/10/03/66feadb1ae1d4.jpg" alt="88-8.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feadb0e0d3e.jpg" alt="88-9.jpg" title="天葬台"></p><p><img src="https://bu.dusays.com/2024/10/03/66feadb662854.jpg" alt="88-10.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feada54b40c.jpg" alt="88-11.jpg" title="金顶"></p><p>晚上，搭了高铁离开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;const zd = 北漂日记::Z_2&lt;br&gt;const_list = {F, M, B, Z, zd}&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;前两天和 zd 去了承德。&lt;/p&gt;
&lt;p&gt;我们首先在唐山取车，稍作停留就直接上</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://dropsong.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>以前的事（一）</title>
    <link href="https://dropsong.github.io/posts/c96740b0.html"/>
    <id>https://dropsong.github.io/posts/c96740b0.html</id>
    <published>2024-09-29T02:34:20.000Z</published>
    <updated>2024-10-29T16:37:16.282Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a18620b319bf89b34026d587acfbaf46dcfef3642eb2f5fbe34d80febc3a1225"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="在此输入密码">在此输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章被密码保护。</summary>
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="private2" scheme="https://dropsong.github.io/tags/private2/"/>
    
  </entry>
  
  <entry>
    <title>Python 进阶</title>
    <link href="https://dropsong.github.io/posts/85b8f708.html"/>
    <id>https://dropsong.github.io/posts/85b8f708.html</id>
    <published>2024-09-19T04:40:27.000Z</published>
    <updated>2024-10-10T16:35:10.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><p>这里是 Python 的一些零碎知识点。</p><p>多值参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age = <span class="number">18</span>, gender = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># (2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True&#125;</span></span><br></pre></td></tr></table></figure><p>另外，了解元组和字典的拆包（自行查找资料）。</p><p><code>if __name__ == &quot;__main__&quot;</code> 是什么？</p><blockquote><p>该语句下面缩进的内容在<code>python xxx.py</code>时会执行，而在<code>import xxx</code>时不会执行。</p></blockquote><p><strong>类属性</strong>，类似于 C++ 中的<strong>类的静态成员</strong>。</p><p><strong>类方法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod   </span><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_tool_cnt</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;工具对象总数： %d&quot;</span> % cls.count)</span><br></pre></td></tr></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>实现起来比 C++ 简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    instance = <span class="literal">None</span>    <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建对象，分配空间&quot;</span>)</span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, music_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;播放器初始化&quot;</span>)</span><br><span class="line">        self.music_name = music_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">player1 = MusicPlayer(<span class="string">&#x27;弯弯的月亮&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(player1.music_name)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer(<span class="string">&#x27;竹楼情歌&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(player2.music_name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(player1)</span><br><span class="line"><span class="built_in">print</span>(player2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">创建对象，分配空间</span></span><br><span class="line"><span class="string">播放器初始化</span></span><br><span class="line"><span class="string">弯弯的月亮</span></span><br><span class="line"><span class="string">播放器初始化</span></span><br><span class="line"><span class="string">竹楼情歌</span></span><br><span class="line"><span class="string">&lt;__main__.MusicPlayer object at 0x7f4c18f16790&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MusicPlayer object at 0x7f4c18f16790&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="观其大略"><a href="#观其大略" class="headerlink" title="观其大略"></a>观其大略</h2><p>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下（伪代码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型 1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型 2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型 <span class="number">3</span>, 错误类型 <span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型 3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无论是否有异常，都会执行的代码&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h2><p>当函数执行出现异常，会将异常传递给函数的调用一方。如果传递到主程序，仍然没有异常处理，程序才会被终止。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    <span class="keyword">return</span> demo1() <span class="comment"># 利用异常的传递性，在主程序捕获异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(demo2())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输入整数：abc</span></span><br><span class="line"><span class="string">未知错误 invalid literal for int() with base 10: &#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="抛出-raise-异常"><a href="#抛出-raise-异常" class="headerlink" title="抛出 raise 异常"></a>抛出 raise 异常</h2><p>应用场景：<br>在开发中，除了代码执行出错 Python 解释器会抛出异常之外，还可以<strong>根据应用程序特有的业务需求主动抛出异常。</strong></p><p>示例：<br>提示用户输入密码，如果长度少于 8，抛出异常。当前函数只负责提示用户输入密码，如果密码长度不正确，需要其他的函数进行额外处理，因此可以抛出异常，由其他需要处理的函数捕获异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>():</span><br><span class="line"></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主动抛出异常&quot;</span>)</span><br><span class="line">    ex = Exception(<span class="string">&quot;密码长度不够&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(input_password())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入密码：123</span></span><br><span class="line"><span class="string">主动抛出异常</span></span><br><span class="line"><span class="string">密码长度不够</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入密码：1234234545</span></span><br><span class="line"><span class="string">1234234545</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>让自定义异常像通用异常一样使用（若链接内容不可访问，可去 archive.ph 查找）：<br><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html">https://python3-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html</a></p><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><p>原则：每一个文件都可以被导入。</p><p>一个独立的 Python 文件就是一个模块。在导入文件时，文件中所有没有任何缩进的代码，都会被执行一遍。因此需要配合 <code>__name__</code> 属性使用。</p><p><strong>包是一个包含多个模块的特殊目录。</strong> 目录下有一个特殊的文件 <code>__init__.py</code></p><p>在外界使用包中的模块：</p><p><img src="https://s2.loli.net/2024/09/16/6hNBfD2TYicIrqP.png" alt="86-1.png"></p><p>如果希望自己开发的模块，分享给其他人，可以按照以下步骤操作：</p><ol><li>制作发布压缩包<ol><li>创建 <code>setup.py</code></li><li>构建模块</li><li>生成发布压缩包</li></ol></li><li>安装模块</li></ol><p>创建 <code>setup.py</code>：</p><p><img src="https://s2.loli.net/2024/09/16/2NuGxiRUlYeVAwH.png" alt="86-2.png"></p><p>构建模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py build</span><br></pre></td></tr></table></figure><p>生成发布压缩包（注意：要制作哪个版本的模块，就使用哪个版本的解释器执行）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py sdist</span><br></pre></td></tr></table></figure><p>安装模块（示例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf wd_message-1.0.tar.gz</span><br><span class="line">cd wd_message-1.0</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>卸载模块（直接从安装目录下，把安装模块的目录删除就可以）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/lib/python3.6/dist-packages/</span><br><span class="line">sudo rm -r wd_message*</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>没什么好记录的，大致和 Cpp 差不多。</p><p>展示目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dir_dfs</span>(<span class="params">path, width</span>):</span><br><span class="line">    file_list = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*width + filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path+<span class="string">&#x27;/&#x27;</span>+filename):</span><br><span class="line">            dir_dfs(path+<span class="string">&#x27;/&#x27;</span>+filename, width+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dir_dfs(<span class="string">&#x27;.&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="手撕红黑树"><a href="#手撕红黑树" class="headerlink" title="手撕红黑树"></a>手撕红黑树</h1><p>之前文章里写过平衡二叉树（虽然没写完），一些旋转操作的思路是通的。</p><div class="row"><iframe src="https://drive.google.com/file/d/1CYtVFas-RN0-FShGuYp9paXW_fWPQ9fD/preview" style="width:100%; height:550px"></iframe></div><h1 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h1><p>游戏素材在本小节末尾放出。</p><p>验证是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pygame.examples.aliens</span><br></pre></td></tr></table></figure><p>游戏中的坐标系：</p><p><img src="https://s2.loli.net/2024/09/19/KjPf6Dv53UNyoSi.png" alt="86-3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init() <span class="comment"># 使用其他模块之前，必须先 init</span></span><br><span class="line"></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">100</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">125</span>)  <span class="comment"># 描述矩形区域</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的原点 %d %d&quot;</span> % (hero_rect.x, hero_rect.y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的尺寸 %d %d&quot;</span> % (hero_rect.width, hero_rect.height))</span><br><span class="line"><span class="comment"># size 属性会返回矩形区域的 (宽, 高) 元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d %d&quot;</span> % hero_rect.size)</span><br><span class="line"></span><br><span class="line">pygame.quit() <span class="comment"># 卸载所有 pygame 模块</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pygame 2.6.0 (SDL 2.28.4, Python 3.12.1)</span></span><br><span class="line"><span class="string">Hello from the pygame community. https://www.pygame.org/contribute.html</span></span><br><span class="line"><span class="string">英雄的原点 100 500</span></span><br><span class="line"><span class="string">英雄的尺寸 120 125</span></span><br><span class="line"><span class="string">120 125</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>初始化游戏显示窗口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.set_mode()</span><br></pre></td></tr></table></figure><p>刷新屏幕内容显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.update()</span><br></pre></td></tr></table></figure><p>set_mode 方法：</p><ul><li>作用：创建游戏显示窗口</li><li>resolution 指定屏幕的 宽 和 高，默认创建的窗口大小和屏幕大小一致</li><li>flags 参数指定屏幕的附加选项，例如是否全屏等等，默认不需要传递</li><li>depth 参数表示颜色的位数，默认自动匹配</li><li><strong>返回值</strong>：暂时可以理解为游戏的屏幕，游戏的元素 都需要被绘制到游戏的屏幕上</li><li><strong>注意</strong>：必须使用变量记录 set_mode 方法的返回结果！因为：后续所有的图像绘制都基于这个返回结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_mode(resolution=(<span class="number">0</span>,<span class="number">0</span>), flags=<span class="number">0</span>, depth=<span class="number">0</span>) -&gt; Surface</span><br></pre></td></tr></table></figure><p>图像、游戏循环、游戏时钟、监听事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line">pygame.init() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像数据</span></span><br><span class="line">bg = pygame.image.load(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"><span class="comment"># blit 绘制图像</span></span><br><span class="line">screen.blit(bg, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主角小飞机</span></span><br><span class="line">hero = pygame.image.load(<span class="string">&quot;./images/me1.png&quot;</span>)</span><br><span class="line">screen.blit(hero, (<span class="number">150</span>,<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新屏幕</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时钟对象</span></span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录小飞机的初始位置</span></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">150</span>, <span class="number">300</span>, <span class="number">102</span>, <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 指定代码执行的频率</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 捕获事件</span></span><br><span class="line">    event_list = pygame.event.get()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(event_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(event_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> event_list:</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;游戏退出&quot;</span>)</span><br><span class="line">            pygame.quit()</span><br><span class="line">            exit() <span class="comment"># 直接终止当前正在执行的程序</span></span><br><span class="line"></span><br><span class="line">    hero_rect.y -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(hero_rect.bottom &lt; <span class="number">0</span>):</span><br><span class="line">        hero_rect.y = <span class="number">700</span></span><br><span class="line"></span><br><span class="line">    screen.blit(bg, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    screen.blit(hero, hero_rect)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure><p>在刚刚完成的案例中，图像加载、位置变化、绘制图像都需要程序员编写代码分别处理，为了简化开发步骤，pygame 提供了两个类：</p><ul><li><code>pygame.sprite.Sprite</code> 存储图像数据 image 和 位置 rect 的对象</li><li><code>pygame.sprite.Group</code></li></ul><p><strong>精灵</strong>：</p><ol><li>在游戏开发中，通常把显示图像的对象叫做精灵 Sprite</li><li>精灵有两个重要的属性<ol><li><code>image</code> 要显示的图像</li><li><code>rect</code> 图像要显示在屏幕的位置</li></ol></li><li>默认的 <code>update()</code> 方法什么也没做。<strong>子类可以重写此方法</strong>，在每次刷新屏幕时，更新精灵位置</li><li><strong>注意</strong>：<code>pygame.sprite.Sprite</code> 并没有提供 image 和 rect 两个属性。需要程序员从 pygame.sprite.Sprite 派生子类，并在子类的初始化方法中，设置 image 和 rect 属性。</li></ol><p><strong>精灵组</strong>：</p><ol><li>一个<strong>精灵组</strong>可以包含多个<strong>精灵</strong>对象</li><li>调用<strong>精灵组</strong>对象的 <code>update()</code> 方法可以自动调用<strong>组内每一个精灵</strong>的 <code>update()</code> 方法</li><li>调用精灵组对象的 <code>draw</code> 方法可以将组内每一个精灵的 image 绘制在 rect 位置</li><li><strong>注意</strong>：仍然需要调用 <code>pygame.display.update()</code> 才能在屏幕看到最终结果</li></ol><p>背景交替滚动的实现思路：</p><p><img src="https://s2.loli.net/2024/09/19/wyk6DFBh5iMOHGI.png" alt="86-4.png"></p><p>pygame 提供了两个非常方便的方法实现碰撞检测：</p><ul><li><code>pygame.sprite.groupcollide()</code> <strong>两个精灵组</strong>中所有精灵的碰撞检测</li><li><code>pygame.sprite.spritecollide()</code> 判断<strong>某个精灵</strong>和指定精灵组中的精灵的碰撞</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupcollide(group1, group2, dokill1, dokill2, collided = <span class="literal">None</span>) -&gt; Sprite_dict</span><br><span class="line"><span class="comment"># 如果将 dokill 设置为 True，则发生碰撞的精灵将被自动移除</span></span><br><span class="line"><span class="comment"># collided 参数是用于计算碰撞的回调函数，如果没有指定，则每个精灵必须有一个 rect 属性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spritecollide(sprite, group, dokill, collided = <span class="literal">None</span>) -&gt; Sprite_list</span><br><span class="line"><span class="comment"># 如果将 dokill 设置为 True，则 指定精灵组 中 发生碰撞的精灵将被自动移除</span></span><br><span class="line"><span class="comment"># collided 参数是用于计算碰撞的回调函数，如果没有指定，则每个精灵必须有一个 rect 属性</span></span><br><span class="line"><span class="comment"># 返回 精灵组 中跟 精灵 发生碰撞的 精灵列表</span></span><br></pre></td></tr></table></figure><p>整体的代码相当简洁，共两个代码文件和若干素材文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plane_sprites.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏幕大小的常量对象</span></span><br><span class="line">SCREEN_RECT = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">700</span>)</span><br><span class="line"><span class="comment"># 刷新的帧率</span></span><br><span class="line">FRAME_PER_SEC = <span class="number">15</span></span><br><span class="line"><span class="comment"># 创建敌机的定时器常量，为事件定义不同名字的常量，从而能够区分，从24算起</span></span><br><span class="line">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class="line"><span class="comment"># 英雄发射子弹事件，为事件定义不同名字的常量，从而能够区分</span></span><br><span class="line">HERO_FIRE_EVENT = pygame.USEREVENT + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image_name, speed=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义对象的属性</span></span><br><span class="line">        self.image = pygame.image.load(image_name)</span><br><span class="line">        self.rect = self.image.get_rect() <span class="comment"># 自动获取图像的尺寸</span></span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在屏幕的垂直方向上移动</span></span><br><span class="line">        self.rect.y += self.speed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Background</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, is_alt=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class="line">        <span class="keyword">if</span> is_alt:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类的方法实现</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否移出屏幕，如果移出屏幕，将图像设置到屏幕的上方</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/enemy1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 指定敌机的初始随机速度 1 ~ 3</span></span><br><span class="line">        self.speed = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 指定敌机的初始随机位置</span></span><br><span class="line">        self.rect.bottom = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        max_x = SCREEN_RECT.width - self.rect.width  <span class="comment">#减去自身宽度</span></span><br><span class="line">        self.rect.x = random.randint(<span class="number">0</span>, max_x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，保持垂直方向的飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            <span class="comment"># print(&quot;飞出屏幕，需要从精灵组删除...&quot;)</span></span><br><span class="line">            <span class="comment"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;敌机挂了 %s&quot; % self.rect)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法，设置image&amp;speed</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/me1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 设置英雄的初始位置</span></span><br><span class="line">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class="line">        self.rect.bottom = SCREEN_RECT.bottom - <span class="number">120</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 创建子弹的精灵组</span></span><br><span class="line">        self.bullets = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 英雄在水平方向移动</span></span><br><span class="line">        self.rect.x += self.speed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 控制英雄不能离开屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class="line">            self.rect.right = SCREEN_RECT.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发射子弹...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 1. 创建子弹精灵</span></span><br><span class="line">            bullet = Bullet()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 设置精灵的位置</span></span><br><span class="line">            bullet.rect.bottom = self.rect.y - i * <span class="number">20</span></span><br><span class="line">            bullet.rect.centerx = self.rect.centerx</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 将精灵添加到精灵组</span></span><br><span class="line">            self.bullets.add(bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/bullet1.png&quot;</span>, -<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断子弹是否飞出屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.bottom &lt; <span class="number">0</span>:</span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子弹被销毁...&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plane_main.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> plane_sprites <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaneGame</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏初始化&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 创建游戏的窗口</span></span><br><span class="line">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class="line">        <span class="comment"># 2. 创建游戏的时钟</span></span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        <span class="comment"># 3. 调用私有方法，精灵和精灵组的创建,也是初始化</span></span><br><span class="line">        self.__create_sprites()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 设置定时器事件 - 创建敌机　设定敌机的刷新时间为1s，</span></span><br><span class="line">        <span class="comment"># 英雄子弹事件的刷新频率为0.5秒</span></span><br><span class="line">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class="number">1000</span>)</span><br><span class="line">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__create_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建背景精灵和精灵组</span></span><br><span class="line">        bg1 = Background()</span><br><span class="line">        bg2 = Background(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建敌机的精灵组</span></span><br><span class="line">        self.enemy_group = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建英雄的精灵和精灵组</span></span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 1. 设置刷新帧率</span></span><br><span class="line">            self.clock.tick(FRAME_PER_SEC)</span><br><span class="line">            <span class="comment"># 2. 事件监听</span></span><br><span class="line">            self.__event_handler()</span><br><span class="line">            <span class="comment"># 3. 碰撞检测</span></span><br><span class="line">            self.__check_collide()</span><br><span class="line">            <span class="comment"># 4. 更新/绘制精灵组</span></span><br><span class="line">            self.__update_sprites()</span><br><span class="line">            <span class="comment"># 5. 更新显示</span></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__event_handler</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断是否退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == CREATE_ENEMY_EVENT:</span><br><span class="line">                <span class="comment"># print(&quot;敌机出场...&quot;)</span></span><br><span class="line">                <span class="comment"># 创建敌机精灵</span></span><br><span class="line">                enemy = Enemy()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将敌机精灵添加到敌机精灵组</span></span><br><span class="line">                self.enemy_group.add(enemy)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == HERO_FIRE_EVENT:</span><br><span class="line">                self.hero.fire()</span><br><span class="line">            <span class="comment"># elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:</span></span><br><span class="line">            <span class="comment">#     print(&quot;向右移动...&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用键盘提供的方法获取键盘按键 - 按键元组</span></span><br><span class="line">        keys_pressed = pygame.key.get_pressed()</span><br><span class="line">        <span class="comment"># 判断元组中对应的按键索引值 1</span></span><br><span class="line">        <span class="keyword">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class="line">            self.hero.speed = <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class="line">            self.hero.speed = -<span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hero.speed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_collide</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 子弹摧毁敌机</span></span><br><span class="line">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 敌机撞毁英雄</span></span><br><span class="line">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断列表时候有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(enemies) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 让英雄牺牲</span></span><br><span class="line">            self.hero.kill()</span><br><span class="line">            m = <span class="string">&quot;./sound/use_bomb.wav&quot;</span></span><br><span class="line">            pygame.mixer.music.load(m)</span><br><span class="line">            pygame.mixer.music.play()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 结束游戏</span></span><br><span class="line">            PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        self.back_group.update()</span><br><span class="line">        self.back_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.enemy_group.update()</span><br><span class="line">        self.enemy_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero_group.update()</span><br><span class="line">        self.hero_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero.bullets.update()</span><br><span class="line">        self.hero.bullets.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__game_over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pygame.quit()</span><br><span class="line">        exit()  <span class="comment">#进程结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建游戏对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    game = PlaneGame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动游戏</span></span><br><span class="line">    game.start_game()</span><br></pre></td></tr></table></figure><p>其中，<a href="https://drive.google.com/file/d/1rCyISM2Y4d4EBlUiZn0DUdHfP-PNMIVD/view?usp=drive_link">图片素材、音频素材</a>被放在 images 和 sound 文件夹下，被组织在上面两份代码的同级目录下。</p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><p>查看或配置网卡信息（ifconfig）：</p><p><img src="https://s2.loli.net/2024/09/20/YGLRkjzsNTeniZh.png" alt="86-5.png"></p><p>路由查看：route 可以查看路由。<code>route -n</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">内核 IP 路由表</span><br><span class="line">目标           网关          子网掩码</span><br><span class="line">0.0.0.0       192.168.19.2  0.0.0.0</span><br><span class="line">169.254.0.0   0.0.0.0       255.255.0.0</span><br><span class="line">192.168.19.0  0.0.0.0       255.255.255.0</span><br></pre></td></tr></table></figure><p><code>0.0.0.0</code> 代表任意目的地，网关就是转发数据的设备。</p><p><strong>怎样查看端口及谁使用了端口？</strong></p><ul><li>用 <code>netstat -an</code> 查看端口状态</li><li><code>sudo lsof -i [tcp/udp]:2425</code> 必须是 root 才能查看</li><li><code>sudo lsof -i tcp:22</code> 查看哪一个进程用了这个端口</li><li><code>ps -elf |grep udp_server</code> 查看某个进程是否还在</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 通信流程：</p><p><img src="https://s2.loli.net/2024/09/21/PAR6358lEycF4wo.png" alt="86-6.png"></p><p>port 的形象理解：</p><p><img src="https://s2.loli.net/2024/09/21/PtQ1jET79kDBm5w.png" alt="86-7.png"></p><p>看一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">s.bind(addr) <span class="comment"># 失败直接抛出异常</span></span><br><span class="line">temp = s.recvfrom(<span class="number">100</span>) <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">1</span>])</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>运行这段代码，然后在终端中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ netstat -an|grep 7656</span><br><span class="line">udp        0      0 192.168.31.106:7656     0.0.0.0:* </span><br></pre></td></tr></table></figure><p>终止运行（则查找不到了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ netstat -an|grep 7656</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">c.sendto(<span class="string">b&#x27;hello&#x27;</span>, dest_addr) <span class="comment"># 必须发送字节流</span></span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><p>在两个终端中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 server.py</span><br><span class="line">python3 client.py </span><br><span class="line">b&#x27;hello&#x27;</span><br><span class="line">(&#x27;192.168.31.106&#x27;, 33817)</span><br></pre></td></tr></table></figure><p>发送中文、全双工：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">s.bind(addr) <span class="comment"># 失败直接抛出异常</span></span><br><span class="line">data, c_addr = s.recvfrom(<span class="number">100</span>) <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(c_addr)</span><br><span class="line">s.sendto(<span class="string">&#x27;?？??？？&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>), c_addr)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line"><span class="comment"># c.sendto(b&#x27;hello&#x27;, dest_addr) # 必须发送字节流</span></span><br><span class="line">c.sendto(<span class="string">&#x27;zui &amp; 罚&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>), dest_addr) <span class="comment"># 必须发送字节流</span></span><br><span class="line">data , _ = c.recvfrom(<span class="number">100</span>) <span class="comment"># _ 表示我们不想要</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">c.close() <span class="comment"># 关闭时端口会释放</span></span><br></pre></td></tr></table></figure><p>终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 server.py </span><br><span class="line">zui &amp; 罚</span><br><span class="line">(&#x27;192.168.31.106&#x27;, 58158)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 client.py </span><br><span class="line">?？??？？</span><br></pre></td></tr></table></figure><p>当 UDP <code>recvfrom</code> 函数内填的大小，小于 client 发来的数据的大小时，<strong>Windows 会报错，Linux 会截断数据。</strong></p><p><code>sendto</code> 和 <code>recvfrom</code> 次数对等。</p><p>相关的命令总结：</p><ul><li>查看 ip <code>ifconfig</code></li><li>查看路由 <code>route -n</code></li><li>端口状态<ul><li><code>netstat -an|grep 端口</code></li><li>端口正在被哪个进程使用 <code>sudo lsof -i udp:2000</code></li></ul></li><li>进程查看 <code>ps -elf|grep 进程名字</code></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>可以查看之前的笔记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行 send, recv 操作</span></span><br><span class="line">    handle_c_fd.send(<span class="string">&#x27;我是服务器&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    data = c.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    c.send(<span class="string">&#x27;我是客户端&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>其实之前的笔记中，代码的变量命名容易造成误解，这里的更好。</p><p>演示 TCP 特性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行 send, recv 操作</span></span><br><span class="line">    handle_c_fd.send(<span class="string">&#x27;abcdefghij&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;192.168.31.106&#x27;, 57226)</span></span><br><span class="line"><span class="string">客户端消息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    data = c.recv(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = c.recv(<span class="number">5</span>) <span class="comment"># TCP 可以，而 UDP 不行的操作</span></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    c.send(<span class="string">&#x27;客户端消息&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">abcde</span></span><br><span class="line"><span class="string">fghij</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>下面我们实现一个简易的文件下载器（实际上它可以发送 txt, jpg 等格式的文件）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_content</span>(<span class="params">file_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取文件的内容&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有下载的文件:%s&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照如下方式运行：python3 xxx.py 7890&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 运行方式为 python3 xxx.py 7890</span></span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 socket</span></span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">&#x27;192.168.31.106&#x27;</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>) <span class="comment"># 接收 1024 个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对方请求下载的文件名为:%s&quot;</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以 rb 方式打开，所以 file_content 中的数据已经是二进制的格式，因此不需要 encode 编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = <span class="string">&#x27;192.168.31.106&#x27;</span></span><br><span class="line">    server_port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入服务器 port:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要下载的文件名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">    recv_data = <span class="string">b&quot;&quot;</span>  <span class="comment"># 用于存储接收到的所有数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = tcp_client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 每次接收 1024 字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 如果没有数据，跳出循环</span></span><br><span class="line">        recv_data += chunk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;[接收]&quot;</span>+file_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意：<br><strong>若一次性接收数据，网络传输的数据量不一定能一次性到达。</strong> 即使将接收缓冲区的大小设置为 1024<em>40000，仍可能出现问题。这是因为 TCP 数据传输的机制不是一次性发送所有数据（尤其在网络延迟或带宽有限的情况下），实际上，数据是以小块的形式分批到达的。<em>*因此需要循环接收数据，直到完整地接收到文件的全部内容。</em></em></p><p>提问：<strong>TCP 为什么要三次握手？</strong><br><strong>省流</strong>：两次握手不足够，会造成 server 死锁。（可以分两种情况解释）<br><strong>详细</strong>：<br>假设我们设计为两次握手。<br>（一）<br>A(client) 机要连到 B(server) 机，但连接信息在网络中延误了。<br>于是A 机重新发送，这次 B 收到了，于是 B 发信息回 A，两机建立连接。传输完毕后，断开连接。<br>但此时，一开始的连接信息到达 B 机，于是 B 机发信息给 A，此时 B 机就认为已和 A 建立连接，B 机就等待 A 传数据过来，永远地等待在 recv 接口上。发生死锁。<br>（二）<br>C 给 S 发送一个连接请求分组，S 收到此分组，并发送确认应答分组。按照两次握手的协定，S 认为连接已经建立，可以开始发送数据分组。<br>但是，S 的应答分组在传输中丢失。<br>C 不知道 S 是否已准备好，不知道 S 建议什么样的序列号，不知道 S 是否收到自己的连接请求分组。在这种情况下，C 认为连接还未建立成功，将忽略 S 发来的任何数据分组，只等待连接确认应答分组。而 S 在发出的数据分组超时后，重复发送同样的分组。这样就形成了死锁。</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>安装 wireshark ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install wireshark</span><br></pre></td></tr></table></figure><p>windows 和 macos 安装比较容易，linux 安装参考：<br><a href="https://www.wireshark.org/docs/wsug_html_chunked/ChapterBuildInstall.html">https://www.wireshark.org/docs/wsug_html_chunked/ChapterBuildInstall.html</a></p><p>在 Debian 系统下运行 Wireshark 时遇到 “permission denied” 问题，通常是由于普通用户没有足够的权限捕获网络接口上的数据包。Wireshark 需要更高的权限来访问网络设备。</p><p>在安装过程中，系统会询问是否允许非 root 用户捕获数据包。选择“是”。</p><p><strong>将当前用户添加到 wireshark 组</strong>  </p><p>Wireshark 使用 wireshark 组来管理捕获数据包的权限。将当前用户添加到 wireshark 组中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG wireshark <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>然后，重新登录以使组更改生效，或运行以下命令刷新当前会话的用户组信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp wireshark</span><br></pre></td></tr></table></figure><p><strong>重新配置 dumpcap 权限</strong></p><p>Wireshark 使用一个名为 dumpcap 的工具来捕获数据包。需要确保它拥有合适的权限，以便普通用户可以使用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/bin/dumpcap</span><br><span class="line">sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p>运行以下命令来确认 dumpcap 具有正确的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getcap</span> /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p>输出应该类似于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/dumpcap = cap_net_admin,cap_net_raw+eip</span><br></pre></td></tr></table></figure><p>现在应该可以在普通用户模式下正常运行 Wireshark 而不会遇到“permission denied”错误。直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark</span><br></pre></td></tr></table></figure><h2 id="TCP-数据报头"><a href="#TCP-数据报头" class="headerlink" title="TCP 数据报头"></a>TCP 数据报头</h2><p>四次挥手（这个图只是为了展示 ACK 在哪）：</p><p><img src="https://s2.loli.net/2024/09/23/wtdNAQm2C9OovKc.png" alt="86-8.png"></p><p>ACK 位置 1 表明确认号是合法的。如果 ACK 为 0，那么数据报不包含确认信息，确认字段被省略。</p><p><img src="https://s2.loli.net/2024/09/23/TZe42h98uqtJXMW.png" alt="86-9.png"></p><p>SYN：用于建立连接。当 SYN=1 时，表示发起一个连接请求。</p><p>FIN：用于释放连接。当 FIN=1 时，表明此报文段的发送端的数据已发送完成，并要求释放连接。</p><h2 id="UDP-代替-TCP"><a href="#UDP-代替-TCP" class="headerlink" title="UDP 代替 TCP"></a>UDP 代替 TCP</h2><p>相比而言，UDP 能传输更多的数据（一种典型情况：1472 &gt; 1460），这在经济上的好处是显而易见的（带宽很贵）；另外，UDP 在无线环境下表现比 TCP 更好。因此有不少用 UDP 代替 TCP 的研究。</p><p>可以使用 UDP 模仿 TCP ，但是需要程序员自己设计应用层协议，实现相关功能，缓存、加序列号、重传等。</p><h2 id="CS、BS-模式"><a href="#CS、BS-模式" class="headerlink" title="CS、BS 模式"></a>CS、BS 模式</h2><p>CS 模式： client/server 模式。</p><ul><li>客户端位于目标主机上可以保证性能，将数据缓存至客户端本地，从而<strong>提高数据传输效率</strong>。</li><li>一般来说客户端和服务器程序由一个开发团队创作，所以他们之间所<strong>采用的协议相对灵活</strong>。</li><li>客户端和服务器都需要有一个开发团队来完<br>成开发。<strong>工作量将成倍提升，开发周期较长</strong>。</li><li>从用户角度出发，需要将客户端安插至用户主机上，对<strong>用户主机的安全性构成威胁</strong>。</li></ul><p>BS 模式： browser/server 模式。</p><ul><li>没有独立的客户端，使用标准浏览器作为客户端，其<strong>工作开发量较小</strong>。</li><li><strong>移植性非常好，不受平台限制</strong>。</li><li>由于使用第三方浏览器，因此<strong>网络应用支持受限</strong>。</li><li>没有客户端放到对方主机上，<strong>缓存数据不尽如人意，从而传输数据量受到限制</strong>。</li><li>采用标准 http 协议进行通信，<strong>协议选择不灵活</strong>。</li></ul><h2 id="tcp-长连接和短连接"><a href="#tcp-长连接和短连接" class="headerlink" title="tcp 长连接和短连接"></a>tcp 长连接和短连接</h2><p>TCP 短连接：</p><ol><li>client 向 server 发起连接请求</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，此时双方任何一个都可以发起 close 操作</li></ol><p>TCP 长连接：</p><ol><li>client 向 server 发起连接</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，连接不关闭</li><li>后续读写操作…</li><li>长时间操作之后 client 发起关闭请求</li></ol><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>使用 epoll 实现的小型对话程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 handle_c_fd, sys.stdin</span></span><br><span class="line">    epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==handle_c_fd.fileno():</span><br><span class="line">                data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>() <span class="comment"># server 说话，发给对方</span></span><br><span class="line">                handle_c_fd.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line"></span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 c, sys.stdin</span></span><br><span class="line">    epolL.register(c.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==c.fileno():</span><br><span class="line">                data = c.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data: </span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>()</span><br><span class="line">                c.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>改进，client 断开还可以再次连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    epolL.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上、注册</span></span><br><span class="line">                handle_c_fd, c_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(c_addr)</span><br><span class="line">                epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i==handle_c_fd.fileno():</span><br><span class="line">                data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    epolL.unregister(handle_c_fd.fileno())</span><br><span class="line">                    handle_c_fd.close()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>() <span class="comment"># server 说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError: <span class="comment"># 按 ctrl+d 让 server 断开</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;I want to go.&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                handle_c_fd.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line"></span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 c, sys.stdin</span></span><br><span class="line">    epolL.register(c.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==c.fileno():</span><br><span class="line">                data = c.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data: </span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>()</span><br><span class="line">                c.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>现在我们实现一个聊天室，client 程序保持不变，server 端的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    epolL.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line">    client_list = []  <span class="comment"># 糟糕的 ds 选择</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上、注册</span></span><br><span class="line">                handle_c_fd, c_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(c_addr)</span><br><span class="line">                client_list.append(handle_c_fd)</span><br><span class="line">                epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                remove_client = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">for</span> client <span class="keyword">in</span> client_list:</span><br><span class="line">                    <span class="keyword">if</span> client.fileno()==i:</span><br><span class="line">                        data = client.recv(<span class="number">100</span>)</span><br><span class="line">                        <span class="keyword">if</span> data:</span><br><span class="line">                            <span class="keyword">for</span> others <span class="keyword">in</span> client_list:</span><br><span class="line">                                <span class="keyword">if</span> others <span class="keyword">is</span> client:</span><br><span class="line">                                    <span class="keyword">pass</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    others.send(data)</span><br><span class="line">                        <span class="keyword">else</span>: <span class="comment"># 断开了就记录一下   ||   糟糕的 ds 选择</span></span><br><span class="line">                            remove_client = client</span><br><span class="line">                <span class="keyword">if</span> remove_client:</span><br><span class="line">                    client_list.remove(remove_client)</span><br><span class="line">                    epolL.unregister(remove_client.fileno())</span><br><span class="line">                    remove_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><p><strong>端口复用</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>btw, <code>send()</code> 函数可选 <code>MSG_DONTWAIT</code> 参数，效果是：即使对方没法接受这次要发送的全部信息（缓冲区不够用了），也强行发送，多余部分直接截断。</p><h2 id="协议设计"><a href="#协议设计" class="headerlink" title="协议设计"></a>协议设计</h2><p>考虑这样的场景：我们需要持续发送多个文件。</p><p>这会带来一个问题，这些多个文件在传输过程中，会以字节流的形式变成：</p><p>文件名1 + 文件1内容 + 文件名2 + 文件2内容 + …</p><p>这样我们就没办法区分出各个内容了，这种现象叫做<strong>沾包</strong>。</p><p>为此，我们需要设计协议。一个自然的想法是：<br>（长度）&amp;（内容）+（长度）&amp;（内容）+ …</p><p>会用到这张表：</p><p><img src="https://s2.loli.net/2024/09/26/ScK8TUrLysADXB5.png" alt="86-10.png"></p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">train_content = <span class="string">&#x27;爱上地方传奇&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">train_head = <span class="built_in">len</span>(train_content)</span><br><span class="line"><span class="built_in">print</span>(train_head)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(train_head))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, train_head) <span class="comment"># I 表示整型数</span></span><br><span class="line"><span class="built_in">print</span>((train_head_bytes))</span><br><span class="line"></span><br><span class="line">b = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">b&#x27;\x12\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个简单的小例子，注意这个例子里很多问题没有处理，比如并没有循环接数据（这样就没法接受大一点的文件），再比如没有考虑代码复用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server 进行文件发送</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_init</span>():</span><br><span class="line">    s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_file</span>():</span><br><span class="line">    file_name = <span class="string">&#x27;adf.txt&#x27;</span></span><br><span class="line">    s = tcp_init()</span><br><span class="line">    handle_c_fd, client_addr = s.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先发火车头（比喻）</span></span><br><span class="line">    file_name_bytes = file_name.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(file_name_bytes))</span><br><span class="line">    handle_c_fd.send(train_head_bytes + file_name_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再发文件内容</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    file_content = f.read()</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(file_content))</span><br><span class="line">    handle_c_fd.send(train_head_bytes + file_content)</span><br><span class="line">    f.close()</span><br><span class="line">    handle_c_fd.close()</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_file()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">tcp_client_socket.connect(addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次先读 4 个字节的火车头</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_name = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;aaa&#x27;</span>+file_name.decode(<span class="string">&#x27;utf8&#x27;</span>), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接文件的长度及内容</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_content = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f.write(file_content)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><h1 id="网盘设计（一）"><a href="#网盘设计（一）" class="headerlink" title="网盘设计（一）"></a>网盘设计（一）</h1><p>这是最初的一版，也是最简单的一版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s_listen = <span class="literal">None</span> <span class="comment"># 用来 listen 的 socket 对象</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        c_fd, c_addr = self.s_listen.accept()</span><br><span class="line">        user = User(c_fd)</span><br><span class="line">        user.deal_command()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    每个 User 对象对应一个客户端</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_c_fd</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.handle_c_fd = handle_c_fd</span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.handle_c_fd.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.handle_c_fd.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.handle_c_fd.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&#x27; &#x27;</span>*<span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.client:socket = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure><p>上面代码尚有功能未实现（其实就是核心的上传下载功能，不过这个在之前的代码里面有，可以直接拿过来），仅作示例。</p><h1 id="多进程编程"><a href="#多进程编程" class="headerlink" title="多进程编程"></a>多进程编程</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><code>top</code> 命令的前两行输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top - 16:46:57 up  1:58,  1 user,  load average: 1.51, 0.91, 0.91</span><br><span class="line">Tasks: 300 total,   1 running, 299 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><p>平均负载（load average），一般对于单个 cpu 来说，负载在 0～1.00 之间是正常的，超过 1.00 须引起注意。在多核 cpu 中，系统平均负载不应该高于 cpu 核心的总数。</p><p>buffers 与 cached 区别：buffers 指的是<strong>块设备的读写缓冲区</strong>，cached 指的是<strong>页面缓存</strong>。</p><p><strong>查看当前窗口启动的任务情况</strong>：</p><ul><li><code>python 1.while 死循环.py &amp;</code> 让进程后台运行</li><li><code>bg</code> 让暂停的进程在后台运行</li><li><code>fg</code> 拉到前台</li><li><code>jobs</code> 看后台任务</li></ul><p><strong>设置定时任务</strong>：</p><ul><li><code>crontab –e</code> 设置当前用户定时任务</li><li><code>vim /etc/crontab</code> 设置定时任务</li><li><code>crontab -l</code> 查看当前自己设置的定时任务</li></ul><p>多进程的简单演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----2----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----1----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Process 语法结构 <code>Process(group , target , name , args , kwargs)</code></p><ul><li><code>target</code> 如果传递了函数的引用，可以让这个子进程就执行这里的代码</li><li><code>args</code> 给 target 指定的函数传递的参数，以元组的方式传递</li><li><code>kwargs</code> 给 target 指定的函数传递命名参数，keyword 参数</li></ul><p>Process 创建的实例对象的常用方法：</p><ul><li><code>start()</code> 启动子进程实例（创建子进程）</li><li><code>is_alive()</code> 判断进程子进程是否还在活着</li><li><code>join([timeout])</code> 是否等待子进程执行结束，或等待多少秒 — <strong>回收子进程尸体</strong></li><li><code>terminate()</code> 不管任务是否完成，立即终止子进程</li></ul><p>获取 pid :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是父进程 pid = 6079</span></span><br><span class="line"><span class="string">我是子进程 pid = 6080</span></span><br><span class="line"><span class="string">子进程结束</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>给子进程指定的函数传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name, age, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程 &#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name, age, kwargs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc, args=(<span class="string">&#x27;xiongda&#x27;</span>, <span class="number">5</span>), kwargs=&#123;<span class="string">&#x27;408&#x27;</span>:<span class="number">120</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">子进程 xiongda 5 &#123;&#x27;408&#x27;: 120&#125;</span></span><br><span class="line"><span class="string">我是父进程</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>孤儿进程：父进程退出（kill 杀死父进程），子进程变为孤儿。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 6586</span><br><span class="line">我是子进程 pid = 6587</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhiyue@168:~$ ps -elf|grep test</span><br><span class="line">0 S zhiyue      6586    6574  0  80   0 -  5369 do_wai 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">1 S zhiyue      6587    6586  0  80   0 -  5369 hrtime 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">0 S zhiyue      6671    6646  0  80   0 -  2356 pipe_r 10:35 pts/3    00:00:00 grep test</span><br><span class="line">zhiyue@168:~$ kill -9 6586</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 6586</span><br><span class="line">我是子进程 pid = 6587</span><br><span class="line">Killed</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhiyue@168:~$ ps -elf|grep test</span><br><span class="line">1 S zhiyue      6587    1068  0  80   0 -  5369 hrtime 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">0 S zhiyue      6733    6646  0  80   0 -  2356 pipe_r 10:36 pts/3    00:00:00 grep test</span><br></pre></td></tr></table></figure><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>僵尸进程：子进程退出，父进程在忙碌，没有回收它，要避免僵尸。</p><p>Python 进程变为僵尸进程后，名字会改变。可以使用 <code>top</code> 查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>terminal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 7283</span><br><span class="line">我是子进程 pid = 7284</span><br><span class="line">子进程结束</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="是否共享全局变量"><a href="#是否共享全局变量" class="headerlink" title="是否共享全局变量"></a>是否共享全局变量</h2><p>子进程创建是父进程的复制品，资源是独立使用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work1 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    nums.append(<span class="number">33</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work1 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work2 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=work1)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;parent &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line">    p = Process(target=work2)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 11308</span></span><br><span class="line"><span class="string">work1 [11, 22, 33]</span></span><br><span class="line"><span class="string">parent [11, 22]</span></span><br><span class="line"><span class="string">work2 11309</span></span><br><span class="line"><span class="string">[11, 22]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>Process 之间有时需要通信，操作系统提供了很多机制来实现进程间的通信（例如管道，共享内存）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># q.put(4)  队列满了后，再放会阻塞</span></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="comment"># print(q.get())  队列空了后，再取会阻塞</span></span><br></pre></td></tr></table></figure><p><code>put()</code> 可以带参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">&#x27;消息4&#x27;</span>, <span class="literal">True</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;消息队列已满，现有消息数量：%s&#x27;</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">消息队列已满，现有消息数量：3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">最后一行会等待两秒才打印</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">&#x27;消息4&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;消息队列已满，现有消息数量：%s&#x27;</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">消息队列已满，现有消息数量：3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">最后一行会立即输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>推荐的方式：先判断消息列队是否已满，再写入；读取消息时，先判断消息列队是否为空，再读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">&quot;消息 4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(q.get_nowait())</span><br></pre></td></tr></table></figure><p>下面实际演示两个进程间的通信：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)</span><br><span class="line">    pw = Process(target=writer, args=(q,))</span><br><span class="line">    pr = Process(target=reader, args=(q,))</span><br><span class="line"></span><br><span class="line">    pw.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Put A to queue...</span></span><br><span class="line"><span class="string">Put B to queue...</span></span><br><span class="line"><span class="string">Get A from queue.</span></span><br><span class="line"><span class="string">Put C to queue...</span></span><br><span class="line"><span class="string">Get B from queue.</span></span><br><span class="line"><span class="string">Get C from queue.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h1><p>Python 已经帮我们做好了 dirty work, 建议爽用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">msg</span>):</span><br><span class="line">    t_start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 开始执行,进程号为%d&quot;</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成 0~1 之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(msg,<span class="string">&quot;执行完毕，耗时%0.2f&quot;</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    po = Pool(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">        <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">        po.apply_async(worker, (i,))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----start----&quot;</span>)</span><br><span class="line">    po.close() <span class="comment"># 关闭进程池，关闭后 po 不再接收新的请求</span></span><br><span class="line">    po.join() <span class="comment"># 等待 po 中所有子进程执行完成，必须放在 close 语句之后</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----start----</span></span><br><span class="line"><span class="string">0 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">1 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">2 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">0 执行完毕，耗时0.24</span></span><br><span class="line"><span class="string">3 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">3 执行完毕，耗时0.02</span></span><br><span class="line"><span class="string">4 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">2 执行完毕，耗时0.61</span></span><br><span class="line"><span class="string">5 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">1 执行完毕，耗时0.70</span></span><br><span class="line"><span class="string">6 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">6 执行完毕，耗时0.63</span></span><br><span class="line"><span class="string">7 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">5 执行完毕，耗时0.89</span></span><br><span class="line"><span class="string">8 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">7 执行完毕，耗时0.29</span></span><br><span class="line"><span class="string">9 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">4 执行完毕，耗时1.55</span></span><br><span class="line"><span class="string">9 执行完毕，耗时0.74</span></span><br><span class="line"><span class="string">8 执行完毕，耗时1.43</span></span><br><span class="line"><span class="string">-----end-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>进程池中的 Queue</strong>：<br>如果要使用 Pool 创建进程，就需要使用 <code>multiprocessing.Manager()</code> 中的 <code>Queue()</code> ，而不是 <code>multiprocessing.Queue()</code> 。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 import 中的 Queue 为 Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reader 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reader 从 Queue 获取到消息：%s&quot;</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;writer 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;wangdao&quot;</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) start&quot;</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue() <span class="comment"># 使用 Manager 中的 Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 先让上面的任务向 Queue 存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line"></span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) End&quot;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(9168) start</span></span><br><span class="line"><span class="string">writer 启动(9174),父进程为(9168)</span></span><br><span class="line"><span class="string">reader 启动(9175),父进程为(9168)</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：w</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：n</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：g</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：d</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：o</span></span><br><span class="line"><span class="string">(9168) End</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>一种很类似于考研应试的加锁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----- in work1, g_num is %d -----&#x27;</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----- in work2, g_num is %d -----&#x27;</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mutex = threading.Lock()</span><br><span class="line">    t1 = threading.Thread(target=work1, args=(<span class="number">10000000</span>,))</span><br><span class="line">    t2 = threading.Thread(target=work2, args=(<span class="number">10000000</span>,))</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----- in work1, g_num is 19992828 ---------- in work2, g_num is 20000000 -----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 个线程对同一个全局变量操作之后的最终结果是:20000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="可迭代、迭代器、生成器"><a href="#可迭代、迭代器、生成器" class="headerlink" title="可迭代、迭代器、生成器"></a>可迭代、迭代器、生成器</h1><p>可迭代的：类中只重写了 <code>__iter__</code> 内置方法，就是可迭代的，这个方法要求返回一个迭代器。</p><p>迭代器：类中重写了 <code>__iter__</code> ，还需要重写 <code>__next__</code> 。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.container = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.container.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 只要重写了 __iter__ 方法，就会变成可迭代的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        myiterator = MyIter(self)</span><br><span class="line">        <span class="keyword">return</span> myiterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mylist</span>):</span><br><span class="line">        self.mylist:MyList = mylist</span><br><span class="line">        <span class="comment"># current 记录当前访问到的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        current = self.current</span><br><span class="line">        self.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> current &lt; <span class="built_in">len</span>(self.mylist.container):</span><br><span class="line">            <span class="keyword">return</span> self.mylist.container[current]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(<span class="number">666</span>)</span><br><span class="line">    mylist.add(<span class="number">667</span>)</span><br><span class="line">    mylist.add(<span class="number">668</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(mylist, Iterable))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># myiter = iter(mylist)</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">666</span></span><br><span class="line"><span class="string">667</span></span><br><span class="line"><span class="string">668</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以采用更简便的语法，即<strong>生成器(generator)</strong>。生成器是一类特殊的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>G</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7fe8669f9630</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><code>yield</code> 的作用：把当前上下文（寄存器的状态）保存起来，返回一个值——它后面跟的那个值。下次执行 next 操作，会从上次 yield 保存的现场位置继续执行。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fi</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        <span class="comment"># 这个语法太自由了，给我楞了一下</span></span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">F = fi(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/0929work/test.py&quot;, line 19, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(F))</span></span><br><span class="line"><span class="string">          ^^^^^^^</span></span><br><span class="line"><span class="string">StopIteration: done</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>又或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fi</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        <span class="comment"># 这个语法太自由了，给我楞了一下</span></span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">F = fi(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> F:</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 1 1 2 3 5 8 13 21 34</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>含有 <code>yield</code> 的函数称为生成器。</p><p>我们除了可以使用 <code>next()</code> 函数来唤醒生成器继续执行外，还可以使用 <code>send()</code> 函数来唤醒执行。使用 <code>send()</code> 函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">        temp = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">f.send(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">f.send(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">haha</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">haha</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>协程（Coroutine），又称微线程，纤程。</p><p>协程是 Python 中另一种实现多任务的方式，只不过比线程需要的资源更少。通过<strong>保存、恢复 CPU 上下文</strong>的机制，可以在合适的时机把一个协程切换到另一个协程。</p><p><img src="https://s2.loli.net/2024/09/30/zsdLqWB3Ai62F8T.png" alt="86-11.png"></p><p>协程通过 <code>yield</code> 在用户态保存上下文，操作系统不感知。</p><p>实现多任务时，<strong>线程切换从系统层面远不止保存和恢复 CPU 上下文这么简单</strong>。操作系统为了程序运行的高效性每个线程都有<strong>自己的缓存 Cache</strong> 等数据，操作系统还会支持这些数据的恢复操作。所以线程的切换非常耗性能（相对协程来说）。但是协程的切换只是单纯地操作 CPU 的上下文，所以<strong>一秒钟切换个上百万次系统都抗的住</strong>。</p><p>模拟协程的机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work1---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work2---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">next</span>(w1)</span><br><span class="line">        <span class="built_in">next</span>(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">...（省略）...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h2><p>为了更好使用协程来完成多任务，python 中的 greenlet 模块对其封装，从而使得切换任务变的更加简单。</p><p>Debian 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-greenlet</span><br></pre></td></tr></table></figure><p>这只是一个功能非常初级的包，仅做演示目的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---A--&quot;</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---B--&quot;</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2) </span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到 gr1 中运行</span></span><br><span class="line">gr1.switch()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">(后略)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h2><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>greenlet 虽然实现了协程，但还需要人工切换，太麻烦。gevent 是一个比 greenlet 更强大的并且能够自动切换任务的模块。</p><p>其原理是当一个 greenlet 遇到 IO（访问网络、文件操作等）操作时，就自动切换到其他的 greenlet。等到 IO 操作完成，再适时切换回来继续执行。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>可以看到，3 个 greenlet 是依次运行而不是交替运行。</p><p>gevent 切换执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment"># 用来模拟一个耗时操作，注意不是 time 模块中的 sleep</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="monkey-补丁"><a href="#monkey-补丁" class="headerlink" title="monkey 补丁"></a>monkey 补丁</h3><p>先看一下没有补丁的情况（使用了<code>time.sleep()</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>打上补丁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all() <span class="comment"># 将程序中用到的耗时操作的代码，换为 gevent 中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果不唯一</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>猴子补丁作用：<br>monkey patch 是在执行时动态替换，通常是在 startup 的时候。用过 gevent 就会知道，会在最开头的地方 <code>gevent.monkey.patch_all()</code>，把标准库中的 <code>thread</code>、<code>socket</code> 等给替换掉。这样我们在<strong>后面使用 socket 的时候能够跟寻常一样使用，无需改动代码，就可以将它变成非堵塞的</strong>。</p><h2 id="官方的-asyncio"><a href="#官方的-asyncio" class="headerlink" title="官方的 asyncio"></a>官方的 asyncio</h2><p>文档： <a href="https://docs.python.org/zh-cn/3.12/library/asyncio-task.html">https://docs.python.org/zh-cn/3.12/library/asyncio-task.html</a></p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一行之后等待了一会才打印第二行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>对比下面两份代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">say_after</span>(<span class="params">delay, what</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">started at 15:43:57</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">finished at 15:44:00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">say_after</span>(<span class="params">delay, what</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task1 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    task2 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待直到两个任务都完成</span></span><br><span class="line">    <span class="comment"># （会花费约 2 秒钟。）</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">started at 15:49:46</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">finished at 15:49:48</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，预期的输出显示代码段的运行时间比之前快了 1 秒。</p><h2 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_downLoad</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET: %s&#x27;</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d bytes received from %s.&#x27;</span> % (<span class="built_in">len</span>(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.baidu.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.cskaoyan.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.qq.com/&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET: http://www.baidu.com/</span></span><br><span class="line"><span class="string">GET: http://www.cskaoyan.com/</span></span><br><span class="line"><span class="string">GET: http://www.qq.com/</span></span><br><span class="line"><span class="string">122235 bytes received from http://www.qq.com/.</span></span><br><span class="line"><span class="string">412916 bytes received from http://www.baidu.com/.</span></span><br><span class="line"><span class="string">46781 bytes received from http://www.cskaoyan.com/.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从上能够看到，收到数据的先后顺序不一定与发送顺序相同，这体现了异步，即不确定什么时候会收到数据，顺序不一定。</p><h1 id="网盘设计（二）"><a href="#网盘设计（二）" class="headerlink" title="网盘设计（二）"></a>网盘设计（二）</h1><p>增加了下载功能，改为循环收发的设计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s_listen = <span class="literal">None</span> <span class="comment"># 用来 listen 的 socket 对象</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        c_fd, c_addr = self.s_listen.accept()</span><br><span class="line">        user = User(c_fd)</span><br><span class="line">        user.deal_command()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    每个 User 对象对应一个客户端</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_c_fd</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.handle_c_fd = handle_c_fd</span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.handle_c_fd.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.handle_c_fd.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.handle_c_fd.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&#x27; &#x27;</span>*<span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="comment"># 向客户端发送文件</span></span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        file_size = os.stat(fileName).st_size <span class="comment"># 发送文件大小</span></span><br><span class="line">        <span class="comment"># print(&#x27;ohla&#x27;)</span></span><br><span class="line">        <span class="comment"># print(file_size)</span></span><br><span class="line">        self.send_train(struct.pack(<span class="string">&#x27;I&#x27;</span>, file_size))</span><br><span class="line">        <span class="comment"># print(&#x27;server here&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        f = <span class="built_in">open</span>(fileName, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            file_content = f.read(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> file_content:</span><br><span class="line">                self.handle_c_fd.send(file_content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 将 client 发来的文件保存在 server 上</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cycle_recv</span>(<span class="params">somefd, file, fileSize</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> total &lt; fileSize:</span><br><span class="line">        data = somefd.recv(<span class="number">10000</span>)</span><br><span class="line">        file.write(data)</span><br><span class="line">        total += <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.client:socket = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):  <span class="comment"># 从 server 那里拿文件</span></span><br><span class="line">        <span class="comment"># 先接文件的大小</span></span><br><span class="line">        file_size = struct.unpack(<span class="string">&#x27;I&#x27;</span>, self.recv_train())[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(&#x27;client recved size:&#x27;)</span></span><br><span class="line">        <span class="comment"># print(file_size)</span></span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(&#x27;client here&#x27;)</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;[接受]&#x27;</span> + fileName, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        cycle_recv(self.client, f, file_size)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure><p>进一步改进的思路：</p><p><img src="https://s2.loli.net/2024/10/03/Tea6NxFmBAcLyXD.png" alt="86-12.png"></p><p><img src="https://s2.loli.net/2024/10/03/BbNXm7lYjaDO5Fc.png" alt="86-13.png"></p><p>还可以考虑增加功能：</p><ul><li>用户名、密码存储在数据库中</li><li>秒传（某用户上传其他用户已经上传过的内容不会重复存一份）</li></ul><h1 id="阻塞模式、非阻塞模式"><a href="#阻塞模式、非阻塞模式" class="headerlink" title="阻塞模式、非阻塞模式"></a>阻塞模式、非阻塞模式</h1><p>本小节内容由 AIGC 改编。</p><p><strong>阻塞模式（Blocking Mode）</strong>：<br>这是套接字的默认行为。在阻塞模式下，诸如 <code>recv()</code> 或 <code>accept()</code> 等操作会一直等待，直到有数据到达或操作完成为止。比如，服务器等待客户端的连接请求时，<code>accept()</code> 会阻塞，直到有客户端连接上。</p><p><strong>非阻塞模式（Non-Blocking Mode）</strong>：</p><ul><li>在非阻塞模式下，诸如 <code>recv()</code>、<code>send()</code>、<code>accept()</code> 等操作如果不能立即完成，就会抛出一个 <code>BlockingIOError</code> 异常。程序可以继续做其他事情，而不是在等待某个操作完成。</li><li>非阻塞模式通常用于需要处理多个连接的服务器，如那些使用 <code>select()</code> 或 <code>poll()</code> 的服务器架构。非阻塞模式的使用场景：高并发服务器、异步 I/O 等。</li></ul><p><strong>示例代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 TCP 套接字</span></span><br><span class="line">tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定地址和端口</span></span><br><span class="line">tcp_server_tcp.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听连接</span></span><br><span class="line">tcp_server_tcp.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为非阻塞模式</span></span><br><span class="line">tcp_server_tcp.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环，处理多个客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_socket, addr = tcp_server_tcp.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Accepted connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">        <span class="comment"># 如果没有客户端连接，继续执行其他任务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No incoming connections, doing other work...&quot;</span>)</span><br><span class="line">        <span class="comment"># 可以在这里做其他的事情</span></span><br></pre></td></tr></table></figure><p>我们在前面已经看到，有些代码可以在没有显式设置非阻塞的情况下使用 <code>epoll</code> 进行事件驱动的处理，但让我们仔细探讨一下<strong>为什么在某些情况下使用非阻塞模式仍然有其必要性</strong>，以及在某些代码中为什么不需要。</p><p><code>select.epoll()</code> 是 Linux 下的一种高级 I/O 多路复用机制，适用于高并发场景。<code>epoll</code> 本质上是事件驱动的，它能够监视多个文件描述符（如套接字、标准输入等），并在这些描述符有事件发生时通知程序，因此并不需要手动设置套接字为非阻塞。</p><ul><li><code>epoll.poll(-1)</code> 会阻塞并等待，直到有事件（如客户端发来的数据或服务器端的输入）发生。</li><li>当 <code>epoll</code> 监控到文件描述符上有可用的事件时，才会返回并让你处理数据。这种机制下，套接字的操作在正常情况下不会被阻塞，因为事件驱动会确保只有在数据准备好时才进行 I/O 操作。</li></ul><p><strong>为什么在这种情况下不需要非阻塞模式：</strong></p><p><code>epoll</code> 自己会处理套接字的事件，因此不需要套接字是非阻塞的。程序会在 <code>epoll.poll()</code> 返回时知道哪个文件描述符有事件发生，并且这些事件都准备好了进行处理（如 <code>recv()</code> 或 <code>send()</code>），所以它本质上已经是一种避免阻塞的机制。</p><p><strong>非阻塞模式的使用场景：</strong></p><p>虽然这里不需要手动设置非阻塞模式，但在一些不使用 <code>epoll</code> 或 <code>select</code> 的代码中，设置非阻塞的好处包括：</p><ul><li><p><strong>单独处理 I/O</strong>：如果不使用 <code>epoll</code> 或 <code>select</code>，并且需要继续处理其他任务时，可以通过将套接字设置为非阻塞避免等待 I/O。</p></li><li><p><strong>配合异步框架</strong>：在使用异步编程时（如 <code>asyncio</code>），套接字通常会被设置为非阻塞模式，允许事件循环继续处理其他事件而不是被某个套接字阻塞住。</p></li><li><p><strong>处理多个客户端</strong>：在不使用 <code>select</code> 或 <code>epoll</code> 时，服务器如果采用阻塞模式处理 I/O，就只能一次处理一个客户端。如果设置为非阻塞模式，则可以轮询处理多个客户端的请求。</p></li></ul><p><strong>为什么在 <code>epoll</code> 中不需要显式设置非阻塞：</strong></p><p>使用 <code>epoll</code> 监听文件描述符时，<code>epoll</code> 是事件驱动的，调用 <code>recv()</code> 或 <code>send()</code> 之类的操作时，事件已经准备好，因此不需要再通过设置套接字为非阻塞来避免阻塞操作。</p><p><strong>如果要结合非阻塞和 <code>epoll</code>：</strong></p><p>在某些情况下（如需要非阻塞的连接处理时），仍然可以结合两者使用。例如，如果想在其他地方做一些操作而不想等某个文件描述符就绪，就可以设置非阻塞。</p><h1 id="HTTP-协议头部解析"><a href="#HTTP-协议头部解析" class="headerlink" title="HTTP 协议头部解析"></a>HTTP 协议头部解析</h1><p>一些基本知识可以在网上找找，F12 打开看看就行。</p><p>当请求头没有 content-length 时，怎么知道请求体结束了？</p><p>http 的 header 和 body 之间是空行分割的，又因为每个头部项是以 <code>\r\n</code> 作为结束符，所以，数据流中是以 <code>\r\n\r\n</code> 来分割解析请求头（响应头）与请求体（响应体）的。如下图所示：</p><p><img src="https://bu.dusays.com/2024/10/05/6700b725a936f.png" alt="86-14.png"></p><p><strong>怎么知道（请求体）响应体结束了呢？</strong> http 协议规定，响应头的字段 content-length 用来表示响应体长度大小，但是，有可能发送请求头时，并不能知道完整的响应体长度（<strong>比如当响应数据太大，服务端流式处理的情况</strong>），这时需要设置请求头 Transfer-Encoding: chunked，使用数据块的方式传输，数据块格式如下图所示：</p><p><img src="https://bu.dusays.com/2024/10/05/6700b725b5cfa.png" alt="86-15.png"></p><p>HTTP 请求的类型（挑了几个重要的）：</p><ul><li><code>GET</code> 查询</li><li><code>POST</code> 新增</li><li><code>PUT</code> 修改</li><li><code>DELETE</code> 删除</li></ul><p>下面制作一个最简单的 web server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 为了确保端口复用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2. 绑定</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">&quot;192.168.31.106&quot;</span>, <span class="number">7890</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">http_head=new_socket.recv(<span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(http_head.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">response +=<span class="string">&#x27;&lt;html&gt;&lt;h1&gt;hello world&lt;/h1&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">new_socket.send(response.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 192.168.31.106:7890</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">DNT: 1</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浏览器的显示：一级标题 hello world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意需要在浏览器打开 <code>192.168.31.106:7890</code>（本机 IP 和对应的端口号）。</p><p>HTTP响应码总结（如果挂了可去 archive.org 查找）：<br><a href="https://zhuanlan.zhihu.com/p/66062179">https://zhuanlan.zhihu.com/p/66062179</a></p><p>概览：</p><p><img src="https://s2.loli.net/2024/10/05/RKOoHAgPds21Vj5.png" alt="86-16.png"></p><p>改进这个 web server :<br><a href="https://github.com/loveofpeach/py_webServer">https://github.com/loveofpeach/py_webServer</a></p><h1 id="Python-连接-MySQL"><a href="#Python-连接-MySQL" class="headerlink" title="Python 连接 MySQL"></a>Python 连接 MySQL</h1><h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>debian12 中已经安装了 MariaDB，它会与 MySQL 发生冲突。</p><p>使用以下命令卸载 MariaDB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove --purge mariadb-server mariadb-client mariadb-common mariadb-server-core mariadb-client-core</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt autoclean</span><br></pre></td></tr></table></figure><p>安装 MySQL :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>安装 pymysql:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pymysql</span><br></pre></td></tr></table></figure><p>大功告成！</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>一个简单有效的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,database=<span class="string">&#x27;akashi&#x27;</span>,user =<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor() <span class="comment"># 操作对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 insert 语句，并返回受影响的行数：添加一条数据</span></span><br><span class="line">    <span class="comment"># 增加</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;insert into goods(name, cate_name, brand_name, price, is_show, is_saleoff) values(&quot;redmibook&quot;, &quot;笔记本&quot;, &quot;xiaomi&quot;, 112, true, true)&#x27;</span>)</span><br><span class="line">    <span class="comment">#打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;insert into goods(name, cate_name, brand_name, price, is_show, is_saleoff) values(&quot;honor_book&quot;, &quot;笔记本&quot;, &quot;huawei&quot;, 111, true, true)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 更新</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(&#x27;update goods_cates set name=&quot;机械硬盘&quot; where name=&quot;硬盘&quot;&#x27;)</span></span><br><span class="line">    <span class="comment"># # 删除</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(&#x27;delete from goods_cates where id=6&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交之前的操作，如果之前已经之执行过多次的 execute，那么就都进行提交</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    <span class="comment"># 关闭 Connection 对象</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p><p>查询一行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,database=<span class="string">&#x27;akashi&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 select 语句，并返回受影响的行数：查询一条数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;select id,name from goods where id&gt;=4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询到%d 条数据:&quot;</span> % count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="comment"># 获取查询的结果</span></span><br><span class="line">        result = cs1.fetchone()</span><br><span class="line">        <span class="comment"># 打印查询的结果</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取查询的结果</span></span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p><p>查询多行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,database=<span class="string">&#x27;akashi&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 select 语句，并返回受影响的行数：查询一条数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;select id,name from goods where id&gt;=4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询到%d 条数据:&quot;</span> % count)</span><br><span class="line"></span><br><span class="line">    result = cs1.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零碎知识&quot;&gt;&lt;a href=&quot;#零碎知识&quot; class=&quot;headerlink&quot; title=&quot;零碎知识&quot;&gt;&lt;/a&gt;零碎知识&lt;/h1&gt;&lt;p&gt;这里是 Python 的一些零碎知识点。&lt;/p&gt;
&lt;p&gt;多值参数:&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络编程" scheme="https://dropsong.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="python" scheme="https://dropsong.github.io/tags/python/"/>
    
    <category term="红黑树" scheme="https://dropsong.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="抓包" scheme="https://dropsong.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
    <category term="多进程" scheme="https://dropsong.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="进程池" scheme="https://dropsong.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="协程" scheme="https://dropsong.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
    <category term="HTTP协议" scheme="https://dropsong.github.io/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>前端入门</title>
    <link href="https://dropsong.github.io/posts/a9230f8f.html"/>
    <id>https://dropsong.github.io/posts/a9230f8f.html</id>
    <published>2024-09-08T08:23:52.000Z</published>
    <updated>2024-10-10T16:28:47.361Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考了 <a href="https://www.bilibili.com/video/BV11N4y187ZE/?p=8">清华大学电子系科协软件部2023暑期培训</a> ，在此表示感谢。</p><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><div class="row"><iframe src="https://drive.google.com/file/d/1eHQt8GRlUnP-PG_YLotn4NEfifspqC_y/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>HTML  1<br>CSS  4<br>JavaScript  6</p></blockquote><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, time</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">counter1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">1</span>, <span class="number">4000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">2</span>, <span class="number">4000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">3</span>, <span class="number">4000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">counter2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">4</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">count</span>(<span class="number">6</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">counter1</span>();</span><br><span class="line"><span class="title function_">counter2</span>();</span><br></pre></td></tr></table></figure><p>使用 nodejs 运行，运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>一些奇妙的例子（这些文件过于古老，我删除了一些不能用的）：<br><a href="https://github.com/loveofpeach/JS_Examples">https://github.com/loveofpeach/JS_Examples</a></p><h1 id="ToDoList-项目"><a href="#ToDoList-项目" class="headerlink" title="ToDoList 项目"></a>ToDoList 项目</h1><p>一个简单的小项目。</p><p>下面先补充一些小知识。内边距、外边距：</p><p><img src="https://s2.loli.net/2024/09/11/sWRg7MabUwoPAHm.jpg" alt="85-1.jpg"></p><p>html 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;添加一个任务...&quot;</span> <span class="attr">id</span>=<span class="string">&quot;task-input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;add-btn&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tasks&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pending-tasks&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>未完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 未完成任务列表区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;completed-tasks&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 已完成任务列表区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;delbutton&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;delete-btn&quot;</span>&gt;</span>删除已完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;simple.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">display</span>: flex;             <span class="comment">/* 弹性布局 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;   <span class="comment">/* 水平方向居中对齐 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;       <span class="comment">/* 在垂直方向居中对齐 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;      <span class="comment">/* 圆角 */</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;  <span class="comment">/* 子元素（输入框和按钮）会在容器内两端对齐 */</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;  <span class="comment">/* 光标变成小手*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkorange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tasks</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pending-tasks</span>, <span class="selector-class">.completed-tasks</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pending-tasks</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff726f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.completed-tasks</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#79e376</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delbutton</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delbutton</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delbutton</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调整任务项中的文字样式 */</span></span><br><span class="line"><span class="selector-class">.pending-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>, <span class="selector-class">.completed-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;  <span class="comment">/* 深灰色字体，保持网页一致风格 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;  <span class="comment">/* 留出与复选框的间距 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 复选框样式 */</span></span><br><span class="line"><span class="selector-class">.pending-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span>, <span class="selector-class">.completed-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已完成任务的样式 */</span></span><br><span class="line"><span class="selector-class">.completed-tasks</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;  <span class="comment">/* 已完成任务添加删除线 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;  <span class="comment">/* 颜色变浅，表明任务已完成 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面中的元素</span></span><br><span class="line"><span class="keyword">const</span> taskInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;task-input&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> addTaskBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;add-btn&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> incompleteTasks = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.pending-tasks&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> completedTasks = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.completed-tasks&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> clearCompletedBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete-btn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击加号按钮时，添加任务</span></span><br><span class="line">addTaskBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> taskText = taskInput.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (taskText.<span class="title function_">trim</span>() === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请输入任务内容&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的任务项 &lt;li&gt;</span></span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建勾选框 &lt;input type=&quot;checkbox&quot;&gt;</span></span><br><span class="line">    <span class="keyword">const</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    checkbox.<span class="property">type</span> = <span class="string">&quot;checkbox&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建任务文字节点 &lt;span&gt;</span></span><br><span class="line">    <span class="keyword">const</span> taskLabel = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    taskLabel.<span class="property">textContent</span> = taskText;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当勾选框被点击时，将任务移动到“已完成”</span></span><br><span class="line">    checkbox.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">checked</span>) &#123;</span><br><span class="line">            completedTasks.<span class="title function_">appendChild</span>(li);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            incompleteTasks.<span class="title function_">appendChild</span>(li);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将勾选框和任务文字添加到任务项中</span></span><br><span class="line">    li.<span class="title function_">appendChild</span>(checkbox);</span><br><span class="line">    li.<span class="title function_">appendChild</span>(taskLabel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将任务项添加到“未完成”列表</span></span><br><span class="line">    incompleteTasks.<span class="title function_">appendChild</span>(li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空输入框</span></span><br><span class="line">    taskInput.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击“删除已完成”按钮时，移除已完成任务列表中的任务项</span></span><br><span class="line">clearCompletedBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取所有已完成任务的子元素 (li) 并删除它们</span></span><br><span class="line">    <span class="keyword">const</span> completedTaskItems = completedTasks.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    completedTaskItems.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">task</span>) &#123;</span><br><span class="line">        task.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最终效果（视频就不录了）：</p><p><img src="https://s2.loli.net/2024/09/11/nv5IatyboRPG2Yw.png" alt="85-2.png"></p><p>互联网产品开发流程及开发岗位：</p><p><img src="https://s2.loli.net/2024/10/09/rvfoKCjGd9enT7Y.png" alt="85-3.png"></p><p>可以当作手册查询的 html, css, js 网站：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></p><h1 id="NODEJS"><a href="#NODEJS" class="headerlink" title="NODEJS"></a>NODEJS</h1><p>pdf</p><p>异步的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;this is 1.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果发生错误，打印错误并退出</span></span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文件写入成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;file has been created successfully.&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Dose this happen after file?&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用 nodejs 运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dose this happen after file?</span><br><span class="line">file has been created successfully.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文参考了 &lt;a href=&quot;https://www.bilibili.com/video/BV11N4y187ZE/?p=8&quot;&gt;清华大学电子系科协软件部2023暑期培训&lt;/a&gt; ，在此表示感谢。&lt;/p&gt;
&lt;h1 id=&quot;快速上手&quot;&gt;&lt;a href=&quot;#快速上手&quot; clas</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="前端" scheme="https://dropsong.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>手写数字识别</title>
    <link href="https://dropsong.github.io/posts/1d11fe8c.html"/>
    <id>https://dropsong.github.io/posts/1d11fe8c.html</id>
    <published>2024-09-06T04:49:32.000Z</published>
    <updated>2024-09-06T15:19:12.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>原理部分，移步之前的文章 <a href="https://loveofpeach.github.io/posts/6f3f8819.html">人工智能导论</a> 。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> MNIST</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="comment"># 构造函数，self 类似于 C++ 中的 this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 多少层、每层多少节点可以调</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">64</span>, <span class="number">32</span>)</span><br><span class="line">        self.fc4 = torch.nn.Linear(<span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">        self.fc5 = torch.nn.Linear(<span class="number">32</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播</span></span><br><span class="line">        x = torch.nn.functional.relu(self.fc1(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc2(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc4(x))</span><br><span class="line">        x = torch.nn.functional.log_softmax(self.fc5(x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_loader</span>(<span class="params">is_train</span>):</span><br><span class="line">    <span class="comment"># 可以把这个 tensor 简单理解为一个多维数组</span></span><br><span class="line">    to_tensor = transforms.Compose([transforms.ToTensor()])</span><br><span class="line">    data_set = MNIST(<span class="string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> DataLoader(data_set, batch_size=<span class="number">15</span>, shuffle=<span class="literal">True</span>) <span class="comment"># 一个批次包含 15 张图片，数据打乱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">test_data, net</span>):</span><br><span class="line">    n_correct = <span class="number">0</span></span><br><span class="line">    n_total = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 验证或测试模型时，不需要计算梯度，只关心模型的预测结果。因此关闭梯度计算</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data:</span><br><span class="line">            outputs = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))</span><br><span class="line">            <span class="keyword">for</span> i, output <span class="keyword">in</span> <span class="built_in">enumerate</span>(outputs):</span><br><span class="line">                <span class="keyword">if</span> torch.argmax(output) == y[i]: <span class="comment"># argmax 计算一个数列中最大值的序号</span></span><br><span class="line">                    n_correct += <span class="number">1</span></span><br><span class="line">                n_total += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n_correct / n_total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 导入训练集和测试集</span></span><br><span class="line">    train_data = get_data_loader(is_train=<span class="literal">True</span>)</span><br><span class="line">    test_data = get_data_loader(is_train=<span class="literal">False</span>)</span><br><span class="line">    net = Net()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始网络的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下接近于固定写法</span></span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line">    <span class="comment"># 有时需在一个数据集上反复训练神经网络，提高数据集的利用率，每一个轮次就是一个 epoch</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> train_data:</span><br><span class="line">            net.zero_grad()  <span class="comment"># 初始化</span></span><br><span class="line">            output = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))  <span class="comment"># 正向传播</span></span><br><span class="line">            <span class="comment"># nll_loss 对数损失函数，是为了匹配前面 log_softmax 中的对数运算</span></span><br><span class="line">            loss = torch.nn.functional.nll_loss(output, y)  <span class="comment"># 计算差值</span></span><br><span class="line">            loss.backward()    <span class="comment"># 反向误差传播</span></span><br><span class="line">            optimizer.step()   <span class="comment"># 优化网络参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;epoch&quot;</span>, epoch, <span class="string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n, (x, _)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_data):</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        predict = torch.argmax(net.forward(x[<span class="number">0</span>].view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)))</span><br><span class="line">        plt.figure(n)</span><br><span class="line">        plt.imshow(x[<span class="number">0</span>].view(<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">        plt.title(<span class="string">&quot;prediction: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(predict)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h1><p>以下 AIGC 。</p><h2 id="nn-Linear"><a href="#nn-Linear" class="headerlink" title="nn.Linear"></a>nn.Linear</h2><p><code>torch.nn.Linear</code> 是 PyTorch 中用于创建全连接层（也称为线性层或仿射层）的类。这个层的主要功能是将输入数据与一个权重矩阵相乘，并加上一个偏置向量。它可以用来构建神经网络的全连接层。</p><p><strong><code>torch.nn.Linear</code> 返回的是一个线性层对象，它本质上是一个可调用的对象</strong>（即可以像函数一样调用它）。将一个输入张量传递给这个线性层时，它会对输入进行线性变换，并返回一个新的张量。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个线性层</span></span><br><span class="line">linear = nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设我们有一个批次大小为 10 的输入数据，每个输入是 784 维的（即 28x28 的图像展平）</span></span><br><span class="line">x = torch.randn(<span class="number">10</span>, <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过线性层</span></span><br><span class="line">output = linear(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.shape)  <span class="comment"># 输出张量的形状是 (10, 64)</span></span><br></pre></td></tr></table></figure><h2 id="log-softmax"><a href="#log-softmax" class="headerlink" title="log_softmax"></a>log_softmax</h2><p><code>log_softmax</code> 对输出<strong>归一化</strong>。它是 <code>softmax</code> 函数的对数版本，通常用于多分类任务的神经网络输出层。</p><p><code>softmax</code> 将一个实数向量转换为概率分布，输出的每个值在 0 到 1 之间，并且和为 1 。公式为：</p><script type="math/tex; mode=display">\text{softmax}(x_i) = \frac{e^{x_i}}{\sum_{j} e^{x_j}}</script><p>其中 $x_i$ 是输入向量的第 $i$ 个元素，$\sum_{j} e^{x_j}$ 是所有输入值的指数和。</p><p><code>log_softmax</code> 是 <code>softmax</code> 函数的对数形式，公式为：</p><script type="math/tex; mode=display">\begin{aligned}\text{logsoftmax}(x_i) &= \log\left(\frac{e^{x_i}}{\sum_{j} e^{x_j}}\right)  \\&= x_i - \log\left(\sum_{j} e^{x_j}\right)\end{aligned}</script><p>先 <code>softmax</code> 再取对数，容易出现数值不稳定的问题，尤其是当数值非常小时，可能导致数值下溢。而 <code>log_softmax</code> 在内部将这两个操作结合起来计算，避免了这种数值不稳定。</p><p>在多分类任务中，交叉熵损失函数常常与 <code>log_softmax</code> 一起使用。具体来说，PyTorch 中的 <code>torch.nn.functional.nll_loss</code> （负对数似然损失）要求输入的是对数概率，而不是直接的概率。<code>log_softmax</code> 的输出正好符合 <code>nll_loss</code> 的输入要求。</p><h2 id="nll-loss"><a href="#nll-loss" class="headerlink" title="nll_loss"></a>nll_loss</h2><p><code>nll_loss</code> 用于计算模型输出的对数概率与目标标签之间的差异。它的核心思想是通过最小化负对数似然来使模型的预测与真实标签更接近。</p><p>在代码中，输出经过 <code>log_softmax</code>，给出每个类别的对数概率，<code>nll_loss</code> 则计算这些对数概率与真实标签的匹配程度。通过最小化这个损失，模型能够逐渐学会正确分类。</p><p>假设模型的输出是一个概率分布，<code>nll_loss</code> 对应的公式为：</p><script type="math/tex; mode=display">L = -\frac{1}{N} \sum_{i=1}^{N} \log(p(y_i))</script><p>其中：</p><ul><li>$ N $ 是样本的数量，</li><li>$ p(y_i) $ 是模型对样本 $ i $ 的正确类别 $ y_i $ 的预测概率（经过 <code>log_softmax</code> 后已经是对数概率），</li><li>$ L $ 是最终的平均损失值。</li></ul><h2 id="get-data-loader"><a href="#get-data-loader" class="headerlink" title="get_data_loader"></a>get_data_loader</h2><p><code>get_data_loader</code> 函数用于加载 MNIST 数据集，并返回一个 PyTorch 的 <code>DataLoader</code> 对象。<code>DataLoader</code> 是 PyTorch 中的一个重要组件，用于批量化处理数据集，以便在训练或测试时高效地加载和使用数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to_tensor = transforms.Compose([transforms.ToTensor()])</span><br></pre></td></tr></table></figure><p><code>transforms</code> 是 <code>torchvision</code> 提供的工具，用于对图像进行预处理。<code>transforms.Compose</code> 是一个将多个变换组合在一起的函数，这里只用了一个变换 <code>transforms.ToTensor()</code>。</p><p><code>transforms.ToTensor()</code> 将 PIL 图像或 NumPy 数组转换为 PyTorch 的张量（tensor），并将像素值缩放到 <code>[0, 1]</code> 之间。MNIST 数据集中原始像素值是 <code>0</code> 到 <code>255</code>，而 <code>ToTensor()</code> 会自动将其归一化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> DataLoader(data_set, batch_size=<span class="number">15</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>DataLoader</code> 是 PyTorch 中用于处理和批量化数据集的工具。它会将 <code>data_set</code>（MNIST 数据集）分批次加载，每次返回指定数量的数据。具体参数解释如下：</p><ul><li><strong><code>batch_size=15</code></strong>：指定每个批次包含 15 张图片。在训练神经网络时，通常不使用整个数据集，而是将数据集分成多个批次（batch），在每个批次上执行前向传播和反向传播。</li><li><strong><code>shuffle=True</code></strong>：表示每个 epoch 开始时，打乱数据集。打乱数据可以提高模型训练的随机性，防止模型过拟合于数据的特定顺序。</li></ul><h2 id="x-view-1-28-28"><a href="#x-view-1-28-28" class="headerlink" title="x.view(-1, 28*28)"></a>x.view(-1, 28*28)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputs = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))</span><br></pre></td></tr></table></figure><p><code>x.view(-1, 28*28)</code> 这部分将输入数据 <code>x</code> 进行重塑（reshape）。MNIST 数据集中的每张图片原本是 28x28 的二维图像张量，但全连接层要求输入的一维张量。因此需要将图片从 28x28 展平为一个一维的 784 维向量（<code>28 * 28 = 784</code>）。</p><ul><li><code>x</code> 是一个四维张量，形状为 <code>(batch_size, 1, 28, 28)</code>，其中 <code>batch_size</code> 是当前批次的大小。</li><li><code>view()</code> 是 PyTorch 中的一个张量重塑函数。<code>x.view(-1, 28*28)</code> 的作用是将 <code>x</code> 重塑为形状 <code>(batch_size, 28*28)</code> 的二维张量。<ul><li><code>-1</code> 表示自动推断维度，PyTorch 会根据其他维度的大小来推断 <code>batch_size</code>，即这个维度的大小保持不变。</li></ul></li></ul><p>例如，如果 <code>x</code> 的形状为 <code>(15, 1, 28, 28)</code>，表示批次大小为 15，每张图片大小为 28x28，则 <code>x.view(-1, 28*28)</code> 会将 <code>x</code> 转换为 <code>(15, 784)</code> 的二维张量。</p><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p><code>enumerate()</code> 是 Python 内置函数，它允许在循环中同时获得<strong>索引</strong>和<strong>元素</strong>。对于 <code>outputs</code> 来说，<code>enumerate(outputs)</code> 会返回每个样本的索引和对应的输出值。</p><ul><li><code>i</code> 是当前迭代的索引，表示第 <code>i</code> 个样本。</li><li><code>output</code> 是 <code>outputs</code> 中第 <code>i</code> 个样本的输出，即一个 10 维的张量，包含了该样本对 10 个类别的预测概率。</li></ul><h2 id="optimizer"><a href="#optimizer" class="headerlink" title="optimizer"></a>optimizer</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><p><code>torch.optim.Adam</code> 是 PyTorch 中实现的 Adam 优化器。Adam（Adaptive Moment Estimation）是一种常用的优化算法，结合了<strong>动量法</strong>和<strong>RMSProp</strong> 优化器的优点，它通过自适应地调整学习率来加快训练速度，且在处理稀疏梯度问题时表现很好。</p><p><code>net.parameters()</code> 是一个函数，返回神经网络模型 <code>Net</code> 的所有可训练参数。每个神经网络层（如线性层 <code>fc1</code>, <code>fc2</code> 等）都会包含其自己的参数（权重和偏置），这些参数会随着训练过程逐渐优化。</p><p>通过 <code>net.parameters()</code>，优化器能够访问和更新这些参数。</p><p><code>lr</code> 是学习率（learning rate）的缩写，表示每次参数更新的步长。在梯度下降过程中，学习率决定了模型的权重如何调整：</p><ul><li><strong>较小的学习率</strong>（如 <code>0.0001</code>）会导致训练速度变慢，但更精确。</li><li><strong>较大的学习率</strong>（如 <code>0.1</code>）会导致训练速度加快，但可能不稳定，甚至无法收敛。</li></ul><p>在这个例子中，学习率设为 <code>0.001</code>，是一个常见的选择。Adam 优化器对学习率相对不那么敏感，它能根据数据的特性自适应地调整每个参数的学习率，所以通常这个值不需要调得太精细。</p><h1 id="实用拓展"><a href="#实用拓展" class="headerlink" title="实用拓展"></a>实用拓展</h1><p>现在我们想要实现这样的功能：<br>由用户绘制一个数字，利用刚刚训练出的模型，识别这是什么数字。</p><p>这个功能在逻辑上并不困难，但是一些代码细节会稍显繁琐。</p><p>比如，我们采样鼠标左键，但由于不可避免的时间间隔，会画出一些离散的点。但模型是采用连续笔画的图像训练的，这些离散的点无法得到正确的识别结果。因此，需要对这些点插值。但这带来了进一步的问题，有些数字，例如 4，有两个笔画，我们不能在第一笔末尾的点、第二笔开始的点之间插值。简单的解决方案是，设置一个时间阈值。</p><p>再比如，笔画的粗细可能会对识别结果有影响。当然，这可以说是模型本身的问题，但如果你不想再死磕这个模型，可以简单地调整绘画窗口中笔画的粗细。</p><p>下面放出代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handwrite.py</span></span><br><span class="line"><span class="comment"># 这份代码用于训练模型</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> MNIST</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="comment"># 构造函数，self 类似于 C++ 中的 this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 多少层、每层多少节点可以调</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc4 = torch.nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播</span></span><br><span class="line">        x = torch.nn.functional.relu(self.fc1(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc2(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.nn.functional.log_softmax(self.fc4(x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_loader</span>(<span class="params">is_train</span>):</span><br><span class="line">    <span class="comment"># 可以把这个 tensor 简单理解为一个多维数组</span></span><br><span class="line">    to_tensor = transforms.Compose([transforms.ToTensor()])</span><br><span class="line">    data_set = MNIST(<span class="string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> DataLoader(data_set, batch_size=<span class="number">15</span>, shuffle=<span class="literal">True</span>) <span class="comment"># 一个批次包含 15 张图片，数据打乱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">test_data, net</span>):</span><br><span class="line">    n_correct = <span class="number">0</span></span><br><span class="line">    n_total = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 验证或测试模型时，不需要计算梯度，只关心模型的预测结果。因此关闭梯度计算</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data:</span><br><span class="line">            outputs = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))</span><br><span class="line">            <span class="keyword">for</span> i, output <span class="keyword">in</span> <span class="built_in">enumerate</span>(outputs):</span><br><span class="line">                <span class="keyword">if</span> torch.argmax(output) == y[i]: <span class="comment"># argmax 计算一个数列中最大值的序号</span></span><br><span class="line">                    n_correct += <span class="number">1</span></span><br><span class="line">                n_total += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n_correct / n_total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 导入训练集和测试集</span></span><br><span class="line">    train_data = get_data_loader(is_train=<span class="literal">True</span>)</span><br><span class="line">    test_data = get_data_loader(is_train=<span class="literal">False</span>)</span><br><span class="line">    net = Net()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始网络的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下接近于固定写法</span></span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line">    <span class="comment"># 有时需在一个数据集上反复训练神经网络，提高数据集的利用率，每一个轮次就是一个 epoch</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> train_data:</span><br><span class="line">            net.zero_grad()  <span class="comment"># 初始化</span></span><br><span class="line">            output = net.forward(x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>))  <span class="comment"># 正向传播</span></span><br><span class="line">            <span class="comment"># nll_loss 对数损失函数，是为了匹配前面 log_softmax 中的对数运算</span></span><br><span class="line">            loss = torch.nn.functional.nll_loss(output, y)  <span class="comment"># 计算差值</span></span><br><span class="line">            loss.backward()    <span class="comment"># 反向误差传播</span></span><br><span class="line">            optimizer.step()   <span class="comment"># 优化网络参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;epoch&quot;</span>, epoch, <span class="string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (n, (x, _)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_data):</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        predict = torch.argmax(net.forward(x[<span class="number">0</span>].view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)))</span><br><span class="line">        plt.figure(n)</span><br><span class="line">        plt.imshow(x[<span class="number">0</span>].view(<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">        plt.title(<span class="string">&quot;prediction: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(predict)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练结束后保存模型</span></span><br><span class="line">    torch.save(net.state_dict(), <span class="string">&#x27;handwrite_model.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型已保存为 handwrite_model.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handwriteWork.py</span></span><br><span class="line"><span class="comment"># 这份代码实现了窗口功能</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageOps</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="comment"># 构造函数，self 类似于 C++ 中的 this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 多少层、每层多少节点可以调</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc4 = torch.nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  <span class="comment"># 前向传播</span></span><br><span class="line">        x = torch.nn.functional.relu(self.fc1(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc2(x))</span><br><span class="line">        x = torch.nn.functional.relu(self.fc3(x))</span><br><span class="line">        x = torch.nn.functional.log_softmax(self.fc4(x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手写数字绘制类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandwrittenDigitApp</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line">        self.model = model</span><br><span class="line">        self.root = Tk()</span><br><span class="line">        self.canvas = Canvas(self.root, width=<span class="number">280</span>, height=<span class="number">280</span>, bg=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        self.canvas.pack()</span><br><span class="line">        self.canvas.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, self.paint)  <span class="comment"># 鼠标左键按下时绘图</span></span><br><span class="line">        Button(self.root, text=<span class="string">&quot;Predict&quot;</span>, command=self.predict).pack()</span><br><span class="line">        Button(self.root, text=<span class="string">&quot;Clear&quot;</span>, command=self.clear_canvas).pack()  <span class="comment"># 清空画布</span></span><br><span class="line">        self.last_x, self.last_y = <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># 上一次绘制的坐标</span></span><br><span class="line">        self.last_time = <span class="literal">None</span>  <span class="comment"># 上一次鼠标移动的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, event</span>):</span><br><span class="line">        x, y = event.x, event.y</span><br><span class="line">        current_time = time.time()  <span class="comment"># 获取当前时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.last_x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.last_y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            time_interval = current_time - self.last_time  <span class="comment"># 计算时间间隔</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> time_interval &lt; <span class="number">0.3</span>:  <span class="comment"># 如果时间间隔小于 0.5 秒，执行插值</span></span><br><span class="line">                <span class="comment"># 插值绘制</span></span><br><span class="line">                self.interpolate_line(self.last_x, self.last_y, x, y)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制当前点</span></span><br><span class="line">        self.canvas.create_oval(x, y, x+<span class="number">6</span>, y+<span class="number">6</span>, fill=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新上一次坐标和时间</span></span><br><span class="line">        self.last_x, self.last_y = x, y</span><br><span class="line">        self.last_time = current_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interpolate_line</span>(<span class="params">self, x1, y1, x2, y2</span>):</span><br><span class="line">        <span class="comment"># 插值算法，计算两点间的插值，连接两点</span></span><br><span class="line">        distance = <span class="built_in">max</span>(<span class="built_in">abs</span>(x2 - x1), <span class="built_in">abs</span>(y2 - y1))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, distance):</span><br><span class="line">            xi = x1 + (x2 - x1) * i / distance</span><br><span class="line">            yi = y1 + (y2 - y1) * i / distance</span><br><span class="line">            self.canvas.create_oval(xi, yi, xi+<span class="number">6</span>, yi+<span class="number">6</span>, fill=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_canvas</span>(<span class="params">self</span>):</span><br><span class="line">        self.canvas.delete(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        self.last_x, self.last_y = <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># 重置坐标</span></span><br><span class="line">        self.last_time = <span class="literal">None</span>  <span class="comment"># 重置时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 将画布内容转换为图像</span></span><br><span class="line">        self.canvas.postscript(file=<span class="string">&quot;digit.ps&quot;</span>)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="string">&quot;digit.ps&quot;</span>).convert(<span class="string">&quot;L&quot;</span>)  <span class="comment"># 将 PS 文件转换为灰度图像</span></span><br><span class="line">        img.save(<span class="string">&quot;digit.png&quot;</span>)  <span class="comment"># 保存为 PNG 格式</span></span><br><span class="line">    </span><br><span class="line">        img = img.resize((<span class="number">28</span>, <span class="number">28</span>))  <span class="comment"># 缩放为 28x28</span></span><br><span class="line">        img = ImageOps.invert(img)  <span class="comment"># 反转颜色，使手写字为黑色</span></span><br><span class="line">        img_tensor = torch.tensor(np.array(img)).<span class="built_in">float</span>().view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)  <span class="comment"># 转为张量</span></span><br><span class="line">        output = self.model(img_tensor)  <span class="comment"># 使用模型预测</span></span><br><span class="line">        prediction = torch.argmax(output)  <span class="comment"># 获取预测结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Predicted digit:&quot;</span>, prediction.item())</span><br><span class="line">        self.show_prediction(prediction.item())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_prediction</span>(<span class="params">self, prediction</span>):</span><br><span class="line">        <span class="comment"># 显示预测结果</span></span><br><span class="line">        result_window = Toplevel(self.root)</span><br><span class="line">        result_window.title(<span class="string">&quot;Prediction&quot;</span>)</span><br><span class="line">        Label(result_window, text=<span class="string">f&quot;Predicted digit: <span class="subst">&#123;prediction&#125;</span>&quot;</span>, font=(<span class="string">&quot;Helvetica&quot;</span>, <span class="number">24</span>)).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.root.mainloop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练好的模型加载和应用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 加载训练好的模型</span></span><br><span class="line">    net = Net()</span><br><span class="line">    net.load_state_dict(torch.load(<span class="string">&#x27;handwrite_model.pth&#x27;</span>, weights_only=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动手写绘制应用</span></span><br><span class="line">    app = HandwrittenDigitApp(net)</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;原理部分，移步之前的文章 &lt;a href=&quot;https://loveofpeach.github.io/posts/6f3f8819.htm</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="神经网络" scheme="https://dropsong.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>差分隐私</title>
    <link href="https://dropsong.github.io/posts/b192ad14.html"/>
    <id>https://dropsong.github.io/posts/b192ad14.html</id>
    <published>2024-08-21T07:18:00.000Z</published>
    <updated>2024-08-21T11:06:05.111Z</updated>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://programming-dp.com/cn/cover.html">https://programming-dp.com/cn/cover.html</a></p><p>下面的 pdf 只是该链接内容的备份。</p><div class="row"><iframe src="https://drive.google.com/file/d/1P8igo5soJ2e0rkt8RTkpfvZQE9_RxDC3/preview" style="width:100%; height:550px"></iframe></div><p>下面给出我的总结：</p><div class="row"><iframe src="https://drive.google.com/file/d/1x2oFa-AhAugSnRbmYkmxTVSOcXFTYrYy/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录：</strong><br>概述  1<br>去标识、k-匿名性  5<br>差分隐私  10<br>敏感度  20<br>近似差分隐私  23<br>局部敏感度  33<br>差分隐私变体  36</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考： &lt;a href=&quot;https://programming-dp.com/cn/cover.html&quot;&gt;https://programming-dp.com/cn/cover.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面的 pdf 只是该链接内容的备份。&lt;/p&gt;


	&lt;di</summary>
      
    
    
    
    <category term="算法" scheme="https://dropsong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="差分隐私" scheme="https://dropsong.github.io/tags/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>量子计算笔记</title>
    <link href="https://dropsong.github.io/posts/fc58f357.html"/>
    <id>https://dropsong.github.io/posts/fc58f357.html</id>
    <published>2024-08-13T08:07:27.000Z</published>
    <updated>2024-09-01T15:00:18.791Z</updated>
    
    <content type="html"><![CDATA[<p>省流：只学了前两章，不学了。</p><h1 id="教材-PDF"><a href="#教材-PDF" class="headerlink" title="教材 PDF"></a>教材 PDF</h1><p>使用的教材是 Quantum Computation and Quantum Information (10th Anniversary Edition) .</p><p>主要笔记都画在教材的 pdf 上了（很大）<del>，等什么时候学完了那个 pdf (?) 再把它放出来</del>。</p><div class="row"><iframe src="https://drive.google.com/file/d/15OCxHsglHicS35auOV4S9op1qMH1mUKU/preview" style="width:100%; height:550px"></iframe></div><p>这个 pdf 是有目录的，可以下载下来查看。</p><h1 id="批注"><a href="#批注" class="headerlink" title="批注"></a>批注</h1><p>下面是一些写不到 pdf 上的批注（『这里空白太小了我写不下』）。可能会比较杂乱。</p><h2 id="希尔伯特空间"><a href="#希尔伯特空间" class="headerlink" title="希尔伯特空间"></a>希尔伯特空间</h2><p>快速了解（若链接挂了可去 archive.ph 查找）：</p><p><a href="https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/">https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/</a></p><p>在此感谢作者。</p><h2 id="“伴随”概念澄清"><a href="#“伴随”概念澄清" class="headerlink" title="“伴随”概念澄清"></a>“伴随”概念澄清</h2><p>在本科教授的线性代数、量子计算涉及的数学这两者中，都有“伴随”的概念，但它们实际上是不同的数学概念。</p><p>1） <strong>矩阵的代数余子式和转置定义的“伴随矩阵”</strong></p><p>在经典线性代数中，<a href="https://zh.wikipedia.org/wiki/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5">伴随矩阵（adjugate matrix 或 classical adjoint）</a>指的是矩阵的代数余子式矩阵的转置。</p><p>伴随矩阵在计算矩阵的逆时起到重要作用：</p><script type="math/tex; mode=display">A^{-1} = \frac{1}{\det(A)} \text{adj}(A)</script><p>2） <strong>在量子力学或泛函分析中的“伴随”或“厄米共轭”</strong></p><p>在量子力学和泛函分析中，<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E5%B0%94%E7%B1%B3%E7%89%B9%E4%BC%B4%E9%9A%8F">“伴随”（adjoint）</a>通常指的是算子 $ A $ 的 Hermitian adjoint，记作 $ A^\dagger $。</p><p>另外：经典线性代数中的“伴随”，并非是泛函分析中的“伴随”在实数空间上的特殊情况。</p><h2 id="adjoint-和共轭转置"><a href="#adjoint-和共轭转置" class="headerlink" title="adjoint 和共轭转置"></a>adjoint 和共轭转置</h2><p>adjoint 的定义在 pdf 第 69 页。</p><p>下面推导它们等价。</p><p>由对偶向量的计算方法：</p><script type="math/tex; mode=display">\langle v | A | w \rangle = (\overline{v})^T A w</script><p>由 adjoint 的定义，将 2.32 式子中的 $A^\dagger |v \rangle$ 整体视作一个向量：</p><script type="math/tex; mode=display">\langle v | A | w \rangle = \langle A^\dagger v | w \rangle</script><p>右边的内积可以表示为：</p><script type="math/tex; mode=display">\langle A^\dagger v | w \rangle = (\overline{A^\dagger v})^T w</script><p>等式要求两边相等，所以：</p><script type="math/tex; mode=display">(\overline{v})^T A w = (\overline{A^\dagger v})^T w</script><p>由于这对任意的 $ w $ 都成立，必然有：</p><script type="math/tex; mode=display">(\overline{v})^T A = (\overline{A^\dagger v})^T</script><p>将其进一步展开，我们有（不难验证 $\overline{A\alpha}=\overline{A}\overline{\alpha}$ ，其中 A 是矩阵，$\alpha$ 是向量）：</p><script type="math/tex; mode=display">(\overline{v})^T A = (\overline{v})^T (\overline{A^\dagger})^T</script><p>因此：</p><script type="math/tex; mode=display">A = (\overline{A^\dagger})^T</script><p>即：</p><script type="math/tex; mode=display">A^\dagger = (\overline{A})^T</script><h2 id="酉矩阵是方阵"><a href="#酉矩阵是方阵" class="headerlink" title="酉矩阵是方阵"></a>酉矩阵是方阵</h2><p>酉矩阵一定是方阵。</p><p>酉矩阵 $ U $ 满足 $ U^\dagger U = U U^\dagger = I $，其中 $ U^\dagger $ 是 $ U $ 的共轭转置矩阵，$ I $ 是单位矩阵。</p><p>如果 $ U $ 是 $ m \times n $ 的矩阵，则 $ U^\dagger $ 是 $ n \times m $ 的矩阵。那么，$ U^\dagger U $ 是一个 $ n \times n $ 的方阵，而 $ UU^\dagger $ 是一个 $ m \times m $ 的方阵。不满足酉矩阵的定义。</p><h2 id="对标准正交基进行酉变换"><a href="#对标准正交基进行酉变换" class="headerlink" title="对标准正交基进行酉变换"></a>对标准正交基进行酉变换</h2><p>对一组标准正交基进行酉变换，得到的新基仍然是标准正交基。</p><p>在一个希尔伯特空间中，$\{ |e_i\rangle \}$ 是标准正交基，意味着对于任意的 $i$ 和 $j$，有：</p><script type="math/tex; mode=display">\langle e_i | e_j \rangle = \delta_{ij}</script><p>设 $\{ |e_i\rangle \}$ 是原来的标准正交基，在经过酉变换 $U$ 后，得到的新基为 $\{ |e’_i\rangle \}$，其中 $ |e’_i\rangle = U |e_i\rangle $。我们需要证明这组新基依然是标准正交基。</p><p>酉变换保持内积（pdf 71页）：</p><script type="math/tex; mode=display">\langle e'_i | e'_j \rangle = \langle U e_i | U e_j \rangle = \langle e_i | e_j \rangle</script><p>所以：</p><script type="math/tex; mode=display">\langle e'_i | e'_j \rangle = \delta_{ij}</script><p>因此新基 $\{ |e’_i\rangle \}$ 也是一组标准正交基。</p><h2 id="酉阵的外积表示"><a href="#酉阵的外积表示" class="headerlink" title="酉阵的外积表示"></a>酉阵的外积表示</h2><p>pdf 第 71 页上方。</p><script type="math/tex; mode=display">\begin{aligned}U & = \sum_{ij} \langle w_j|U|v_i \rangle|w_j\rangle \langle v_i| \\  & = \sum_{ij} \langle w_j|w_i \rangle|w_j\rangle \langle v_i| \\  & = \sum_{ij} \delta_{ij} |w_j \rangle \langle v_i| \\  & = \sum_{i} |w_j \rangle \langle v_i| \\\end{aligned}</script><p>注意，用到了 pdf 上的一个条件，翻到对应的页数即可找到。</p><h2 id="谱分解"><a href="#谱分解" class="headerlink" title="谱分解"></a>谱分解</h2><p><strong>相似对角化</strong>是指，对于一个方阵 $ A $，如果存在一个可逆矩阵 $ P $ 和一个对角矩阵 $ D $，使得 $ A = PDP^{-1} $，那么矩阵 $ A $ 就是可相似对角化的。这里的对角矩阵 $ D $ 的对角元素就是 $ A $ 的特征值。</p><p><strong>特征分解（Eigendecomposition）</strong>，又称<strong>谱分解（Spectral decomposition）</strong> 是将矩阵分解为由其特征值和特征向量表示的矩阵之积的方法。</p><p>谱分解用于描述正交对角化。在谱分解中，特别是在对称矩阵（实数域上）或酉矩阵（复数域上）的情况下，一个矩阵 $ A $ 可以被分解为 $ A = U \Lambda U^ \dagger $，其中 $ U $ 是一个正交矩阵或酉矩阵，$ \Lambda $ 是一个对角矩阵，且对角元素是 $ A $ 的特征值。</p><p><strong>谱分解是一种特定的相似对角化，适用于特定类型的矩阵。</strong></p><p>正交阵是酉阵的特殊情况。</p><p>谱分解通常表示为矩阵的乘法形式，如 $ M = U \Lambda U^\dagger $。然而，<strong>谱分解可以进一步表达为每个特征值与其对应的特征向量的外积之和。</strong></p><p>具体来说，对于一个 $ n \times n $ 的 Normal 矩阵 $ M $，它的谱分解可以写成：</p><script type="math/tex; mode=display">M = \sum_{i=1}^n \lambda_i \mathbf{v}_i \mathbf{v}_i^\dagger</script><p>这里：</p><ul><li>$ \lambda_i $ 是 $ M $ 的第 $ i $ 个特征值。</li><li>$ \mathbf{v}_i $ 是与特征值 $ \lambda_i $ 对应的特征向量。</li><li>$ \mathbf{v}_i^\dagger $ 是 $ \mathbf{v}_i $ 的共轭转置。</li></ul><p>以 $ M = \begin{pmatrix} 2 &amp; 1 \\ 1 &amp; 2 \end{pmatrix} $ 为例，其特征值和特征向量如下：</p><ul><li>$ \lambda_1 = 3 $， $ \mathbf{v}_1 = \frac{1}{\sqrt{2}} \begin{pmatrix} 1 \\ 1 \end{pmatrix} $</li><li>$ \lambda_2 = 1 $， $ \mathbf{v}_2 = \frac{1}{\sqrt{2}} \begin{pmatrix} 1 \\ -1 \end{pmatrix} $</li></ul><p>它的谱分解可以写成：</p><script type="math/tex; mode=display">M = 3 \cdot \mathbf{v}_1 \mathbf{v}_1^\dagger + 1 \cdot \mathbf{v}_2 \mathbf{v}_2^\dagger</script><p>这种和式形式有助于理解矩阵在特征向量空间中的作用。</p><p><strong>为什么之前的乘积形式可以改写为和的形式？</strong></p><p>将 $ U $ 和 $ U^\dagger $ 分块：</p><script type="math/tex; mode=display">U = \begin{pmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{pmatrix}</script><script type="math/tex; mode=display">U^\dagger = \begin{pmatrix} \mathbf{v}_1^\dagger \\ \mathbf{v}_2^\dagger \\ \vdots \\ \mathbf{v}_n^\dagger \end{pmatrix}</script><p>其中，$ U $ 的列向量 $ \mathbf{v}_i $ 形成一个标准正交基。</p><p>于是：</p><script type="math/tex; mode=display">M = \begin{pmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{pmatrix} \begin{pmatrix} \lambda_1 & 0 & \cdots & 0 \\ 0 & \lambda_2 & \cdots & 0 \\ \vdots & \vdots & \ddots & \vdots \\ 0 & 0 & \cdots & \lambda_n \end{pmatrix} \begin{pmatrix} \mathbf{v}_1^\dagger \\ \mathbf{v}_2^\dagger \\ \vdots \\ \mathbf{v}_n^\dagger \end{pmatrix}</script><p>由矩阵乘法：</p><script type="math/tex; mode=display">M = \lambda_1 \mathbf{v}_1 \mathbf{v}_1^\dagger + \lambda_2 \mathbf{v}_2 \mathbf{v}_2^\dagger + \cdots + \lambda_n \mathbf{v}_n \mathbf{v}_n^\dagger</script><p>简写为：</p><script type="math/tex; mode=display">M = \sum_{i=1}^n \lambda_i \mathbf{v}_i \mathbf{v}_i^\dagger</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;省流：只学了前两章，不学了。&lt;/p&gt;
&lt;h1 id=&quot;教材-PDF&quot;&gt;&lt;a href=&quot;#教材-PDF&quot; class=&quot;headerlink&quot; title=&quot;教材 PDF&quot;&gt;&lt;/a&gt;教材 PDF&lt;/h1&gt;&lt;p&gt;使用的教材是 Quantum Computation and Q</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://dropsong.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="量子计算" scheme="https://dropsong.github.io/tags/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计笔记</title>
    <link href="https://dropsong.github.io/posts/9e907e48.html"/>
    <id>https://dropsong.github.io/posts/9e907e48.html</id>
    <published>2024-07-29T16:37:26.000Z</published>
    <updated>2024-07-30T03:19:48.626Z</updated>
    
    <content type="html"><![CDATA[<p>欠的债，迟早是要还的。</p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><div class="row"><iframe src="https://drive.google.com/file/d/1AEBHpJU_MAPPvbQ-g--lK0Q5CrzoxBvd/preview" style="width:100%; height:550px"></iframe></div><blockquote><p>目录：</p><p>1 概率论的基本概念<br>3 概率的概念、古典概型和几何概型<br>6 条件概率、乘法定理、全概率公式、贝叶斯公式、事件的独立性<br>12 离散型随机变量及其分布律<br>15 随机变量的分布函数<br>16 连续型随机变量及概率密度<br>22 一维随机变量函数的分布<br>25 二维随机变量的相关概念<br>28 边缘分布和条件分布<br>31 相互独立的随机变量<br>34 多维随机变量函数的分布<br>41 数学期望、方差<br>52 协方差、相关系数<br>54 二维正态分布的性质<br>56 大数定律、中心极限定理<br>59 统计量的数字特征<br>62 抽样分布<br>68 点估计的方法<br>74 估计量的评选标准</p></blockquote><h1 id="区间估计和假设检验"><a href="#区间估计和假设检验" class="headerlink" title="区间估计和假设检验"></a>区间估计和假设检验</h1><p>未完待续。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欠的债，迟早是要还的。&lt;/p&gt;
&lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h1&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;https://dr</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="概率论" scheme="https://dropsong.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    <category term="数理统计" scheme="https://dropsong.github.io/tags/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>人工智能导论</title>
    <link href="https://dropsong.github.io/posts/6f3f8819.html"/>
    <id>https://dropsong.github.io/posts/6f3f8819.html</id>
    <published>2024-07-03T13:16:36.000Z</published>
    <updated>2024-09-01T14:51:36.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><div class="table-container"><table><thead><tr><th style="text-align:left">人工智能程序</th><th style="text-align:left">通常计算机程序</th></tr></thead><tbody><tr><td style="text-align:left">主要是<strong>符号</strong>处理</td><td style="text-align:left">主要是<strong>数字</strong>处理</td></tr><tr><td style="text-align:left"><strong>启发式搜索</strong></td><td style="text-align:left">依靠<strong>算法</strong></td></tr><tr><td style="text-align:left">控制结构和知识域<strong>相分</strong></td><td style="text-align:left">信息和控制联结在<strong>一起</strong></td></tr><tr><td style="text-align:left">易于修改、更新和改变</td><td style="text-align:left">难以修改</td></tr><tr><td style="text-align:left"><strong>允许不正确</strong>的答案</td><td style="text-align:left">要求<strong>正确的</strong>回答</td></tr><tr><td style="text-align:left">AI程序：<strong>干什么</strong></td><td style="text-align:left">传统程序：<strong>干些什么及如何干</strong></td></tr></tbody></table></div><p>AI 概览：</p><p><img src="https://s2.loli.net/2024/07/03/bV5jKDqWYnBHiZS.png" alt="80-1.png"></p><p>AI、机器学习、深度学习的关系：</p><p><img src="https://bu.dusays.com/2024/07/03/668542c0e08db.png" alt="80-2.png"></p><p><img src="https://s2.loli.net/2024/07/03/y4JTQjUlhdPKftY.png" alt="80-3.png"></p><p>三大学派：符号主义、连接主义、行为主义。</p><p><strong>符号主义（逻辑主义、心理学派、计算机学派）</strong></p><ul><li>原理：物理符号系统假设和有限合理性假设</li><li>起源：源于数理逻辑</li><li>基本思想<ul><li>人的认知基元是符号，智能和知识可用符号表示，认知过程即符号操作过程，擅长抽象思维。</li><li>人是一个物理符号系统，计算机也是一个物理符号系统，因此，能用计算机来模拟人的智能行为。</li><li>知识是信息的一种形式，是构成智能的基础。人工智能的核心问题是知识表示、知识推理。</li><li><img src="https://s2.loli.net/2024/07/03/g6Jr8otqR4DnTiE.png" alt="80-4.png"></li><li>启发式程序、专家系统、知识工程</li></ul></li></ul><p><strong>连接主义（生理学派）</strong></p><ul><li>原理：神经网络及神经网络间的连接机制和学习算法</li><li>起源：源于仿生学，特别是人脑模型的研究</li><li>基本思想<ul><li>认识的基本元素是神经元，认识过程是大量神经元的并行活动，擅长形象思维。</li><li>人脑不同于电脑，并提出连接主义的大脑工作模式，用于取代符号操作的电脑工作模式。</li><li><img src="https://s2.loli.net/2024/07/03/ZuGbtIgvWSicOxP.png" alt="80-5.png"></li></ul></li></ul><p><strong>行为主义（进化主义、控制论学派）</strong></p><ul><li>原理：控制论及感知-动作型控制系统</li><li>起源：源于控制论</li><li>基本思想<ul><li>智能取决于感知和行动，提出智能行为的“感知-动作”模式。</li><li>智能不需要知识、表示和推理；人工智能可以像人类智能一样逐步进化；智能行为只能在现实世界中与周围环境进行交互作用而表现出来。</li><li><img src="https://s2.loli.net/2024/07/03/Tmw8Loh2BAtVkRx.png" alt="80-6.png"></li></ul></li></ul><p><strong>三大学派比较</strong>：</p><p><img src="https://s2.loli.net/2024/07/03/ZOA5g7RtHN6QEM4.png" alt="80-7.png"></p><h1 id="搜索技术"><a href="#搜索技术" class="headerlink" title="搜索技术"></a>搜索技术</h1><h2 id="搜索问题"><a href="#搜索问题" class="headerlink" title="搜索问题"></a>搜索问题</h2><p>搜索方式的分类：</p><ul><li>回溯搜索</li><li>盲目搜索（深度优先、宽度优先）</li><li>启发式搜索（<code>A</code>算法→<code>A*</code>算法→<code>A*</code>算法的改进）</li></ul><p>传教士和野人问题：<br>问题可以转化为<strong>状态空间的搜索问题</strong>：</p><ul><li>用在河的左岸的传教士人数、野人人数和船的情况表示问题</li><li>初始状态用三元组表示为（3，3，1）</li><li>结束状态为（0，0，0）</li><li>中间状态为（2，2，0）、（3，2，1）、（3，0，0）…… 等，每个三元组对应了三维空间上的一个点</li></ul><p><strong>表示方法 — 状态空间表示法</strong></p><ul><li><strong>状态</strong>用来表示系统状态,事实等叙述型知识的一组变量或数组<br>$Q = [q_1, q_2, …, q_n]^t$</li><li><strong>操作</strong>是用来表示引起状态变化的过程型知识的一组关系或函数<br>$F:\{f_1, f_2, …, f_m\}$</li><li><strong>状态空间(State Space)</strong> 是利用状态变量和操作符号，表示系统或问题的有关知识的符号体系<br>四元组 $(S, O, S_0, G):$<br>$S$ 状态集合<br>$O$ 操作算子集合<br>$S_0$ 初始状态，$S_0 \subset S$<br>$G$ 目的状态，$G \subset S$，（可是若干具体状态，也可是满足某些性质的路径信息描述）<br><strong>从S0结点到G结点的路径被称为求解路径。</strong></li><li><strong>状态空间的一个解</strong>是一有限操作算子序列，它使初始状态转为目标状态<br>$S_0 \xrightarrow{O_1} S_1 \xrightarrow{O_2} S_2 \xrightarrow{O_3} \cdots \xrightarrow{O_k} G$<br>其中 O1，…，Ok 即为状态空间的一个解（解往往不是唯一的）</li></ul><p>如何在一个较大的问题空间中，只搜索较小的范围，就找到问题的解呢？</p><p>对于大空间问题，搜索策略要考虑组合爆炸的问题。</p><p><strong>盲目搜索</strong>，未利用问题的知识，采用固定的方式生成状态的方法。</p><p><strong>启发式搜索</strong>，利用问题的知识，缩小问题的搜索范围，选择那些最有可能在（最优）解路径上的状态优先搜索，以尽快地找到问题的（最优）解。</p><h2 id="回溯策略"><a href="#回溯策略" class="headerlink" title="回溯策略"></a>回溯策略</h2><p><strong>考虑一个经典问题：N 皇后。</strong></p><p>我们可以用 dfs 的方法寻找解，但是效率不高。有什么改进的思路吗？</p><ul><li>回溯有时不是上一步造成的，有可能是更早的那一步造成的——多步回溯</li><li>找到回溯的原因，在开始就避免回溯——需要引入一些相关信息</li><li>当然相关信息的引入不应造成搜索负担的巨大加重，否则得不偿失</li></ul><p><img src="https://s2.loli.net/2024/07/04/oNBmg2RPncKG9Xz.png" alt="80-8.png"></p><p>如此一来，相比于固定排序的搜索树（没有引入知识），动态排序的搜索树（引入知识）的回溯次数大大减少。</p><p>回溯搜索算法改进（？）：</p><ul><li>推广的回溯算法可应用于一般问题的求解，但这两个算法只描述了回溯一层的情况，即第 n 层递归调用失败，则控制退回到（n－1）层</li><li>深层搜索失败往往在于浅层原因，因此也可以利用启发信息，分析失败的原因，再回溯到合适的层次上，即<strong>多层回溯策略</strong>，目前已有一些系统使用了这种策略</li></ul><h2 id="图搜索策略"><a href="#图搜索策略" class="headerlink" title="图搜索策略"></a>图搜索策略</h2><p>问题的引出：</p><ul><li>回溯搜索：只保留从初始状态到当前状态的一条路径<ul><li>节省空间，但已搜索部分不能被以后使用</li></ul></li><li>图搜索：保留所有已经搜索过的路径<ul><li>搜索过的路径被保留</li><li>利用相关知识，可以进行启发式搜索</li></ul></li><li>图搜索策略是实现从一个隐含图中生成出一部分确实含有一个目标节点的显式表示子图的搜索过程</li></ul><p>略：一般的图搜索算法、dfs、bfs</p><h3 id="启发式图搜索"><a href="#启发式图搜索" class="headerlink" title="启发式图搜索"></a>启发式图搜索</h3><p>利用知识来引导搜索，减少搜索范围，降低问题复杂度。</p><p>启发信息的强度</p><ul><li>强：降低搜索量，但可能找不到最优解</li><li>弱：工作量较大，可能退化为盲目搜索，但找到最优解的概率相对较大</li></ul><h3 id="A-算法"><a href="#A-算法" class="headerlink" title="A* 算法"></a>A* 算法</h3><p>算法流程（如果链接挂了可在 archive.ph 中查看）：</p><p><a href="https://paul.pub/a-star-algorithm/">https://paul.pub/a-star-algorithm/</a></p><p>很多介绍 A* 的文章只是讲了 how ，而没有讲 why ，少数讲 why 的博主恐怕在一些细节上也和自己和解了。为此，找一下原始的论文是必要的：</p><div class="row"><iframe src="https://drive.google.com/file/d/1aRpKPbJ1qMwoRRWjSso47WKvTp5PKScE/preview" style="width:100%; height:550px"></iframe></div><p>很好论文，解决了我多年的疑惑：</p><ul><li>如果 h(n) 始终小于等于节点 n 到终点的代价，则 A* 算法保证一定能够找到最短路径。为什么？</li><li>另外一个小细节：f(n) 是单调不减的，这意味着一旦节点从优先队列中被移出并处理，它的最优路径已经被找到，因为任何从此节点出发的新路径不会比已经找到的路径更优。</li></ul><p>练习：</p><ul><li><a href="https://www.luogu.com.cn/problem/P5507">P5507 机关</a>：A*</li><li><a href="https://www.luogu.com.cn/problem/P2324">SCOI2005 骑士精神</a>：IDA*</li></ul><h2 id="与或图搜索问题"><a href="#与或图搜索问题" class="headerlink" title="与或图搜索问题"></a>与或图搜索问题</h2><div class="row"><iframe src="https://drive.google.com/file/d/1ZC5ytKk3EpBHKfzWS6vl2-mvyWvtw1pZ/preview" style="width:100%; height:550px"></iframe></div><blockquote><p>目录：<br>与或图搜索  2<br>博弈树搜索（MINI-MAX、α-β剪枝）  10<br>蒙特卡洛树搜索  25</p></blockquote><p>一些视频资料：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1AK411M7BB&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV14Z4y1A7J3&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1JD4y1Q7mV&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h1 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>选取知识表示的方法的因素</strong>：</p><ul><li>表示范围是否广泛<ul><li>要求表示内容范围广泛<ul><li>数理逻辑表示是一种广泛的知识表示办法，如果单纯用数字表示，则范围就有限</li></ul></li></ul></li><li>是否适于推理<ul><li>人工智能只能处理适合推理的知识表示<ul><li>数学模型适合推理，普通的数据库只能供浏览检索，但不适合推理</li></ul></li></ul></li><li>是否适于计算机处理<ul><li>计算机只能处理离散的、量化的字节流。用文字表述的知识和连续形式表示的知识（如微分方程）不适合计算机处理</li></ul></li><li>是否有高效的算法<ul><li>考虑到实用的性能，必须有高效的求解算法，知识表示才有意义</li></ul></li><li>能否表示不精确知识<ul><li>自然界的信息具有先天的模糊性和不精确性，能否表示不精确知识也是考虑的重要因素</li><li>许多知识表示方法往往要经过改造，如确定性方法、主观贝叶斯方法等对证据和规则引入了不确定性度量，就是为了表达不精确的知识</li></ul></li><li>能否模块化</li><li>知识和元知识能否用统一的形式表示<ul><li>知识和元知识是属于不同层次的知识，使用统一的表示方法可以使知识处理简单</li></ul></li><li><p>是否加入启发信息</p><ul><li>在已知的前提下，如何最快的推得所需的结论，以及如何才能推得最佳的结论，我们的认识往往是不精确的。因此，往往需要在元知识（控制知识）加入一些控制信息，也就是通常所说的启发信息</li></ul></li><li><p>过程性表示还是说明性表示</p><ul><li>说明性知识表示涉及细节少，抽象程度高，因此可靠性好，修改方便，但执行效率低</li><li>过程性知识表示的优缺点与说明性知识表示相反</li></ul></li><li>表示方法是否自然<ul><li>一般要尽量在表示方法的自然和使用效率之间取得平衡。例如，对于推理来说，PROLOG 比高级语言如 Visual C++ 自然，但显然牺牲了效率</li></ul></li></ul><p>同构与同态：</p><p><img src="https://bu.dusays.com/2024/07/17/6697d113cd9f8.png" alt="80-9.png"></p><p><strong>表示观</strong>是对于“什么是表示”这一基本问题的不同理解和采用的方法论，即指导知识表示的思想观点称为表示观。</p><p>人工智能领域关于知识表示的观点的<strong>争论焦点</strong>是常识的处理、表示与推理的关系等问题。</p><p><strong>认识论表示观</strong>：认为表示是对自然世界的表述，表示自身不显示任何智能行为。其唯一的作用就是携带知识。这意味着表示可以独立于启发式来研究。</p><p><strong>本体论（D.Lenta提出）</strong>：认为表示是对自然世界的一种近似，它规定了看待自然世界的方式。即一个约定的集合。表示只是描述了关心的一部分，逼真是不可能的。本体论主要解决的问题是：</p><ul><li>表示需对世界的某个部分给与特别的注意（聚集），而对世界的另外部分衰减，以求达到有效求解。</li><li>对世界可以采用不同的方式来记述。注重的不是“其语言形式，而是其内容”。此内容不是某些特定领域的特殊的专家知识，而是自然世界中那些具有普通意义的一般知识。</li><li>计算效率无疑是表示的核心问题之一。即有效地知识组织及与领域有关的启发式知识是其提高计算效率的手段。</li><li>推理是表示观中不可缺少的一部分。表示研究应与启发式搜索联系起来。认为不考虑推理的纯粹表示是不存在的。</li></ul><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><h3 id="逻辑表示法"><a href="#逻辑表示法" class="headerlink" title="逻辑表示法"></a>逻辑表示法</h3><p>逻辑表示法的例子：</p><p><img src="https://bu.dusays.com/2024/07/21/669cc5b6232ef.png" alt="80-10.png"></p><p>图片示例：</p><p><img src="https://s2.loli.net/2024/07/21/KNMO48VQH3RLUqp.png" alt="80-11.png"></p><h3 id="产生式规则表示法"><a href="#产生式规则表示法" class="headerlink" title="产生式规则表示法"></a>产生式规则表示法</h3><div class="row"><iframe src="https://drive.google.com/file/d/1RgISIhsiBYFPGJIB6gGe1riGEGX0BV5W/preview" style="width:100%; height:550px"></iframe></div><h3 id="语义网络表示法"><a href="#语义网络表示法" class="headerlink" title="语义网络表示法"></a>语义网络表示法</h3><p>语义网络表示法和产生式表示法及谓词逻辑表示法之间有着对应的表示能力。</p><p>表示形式：</p><ul><li>谓词逻辑表示法，Relation（Object1，Object2）</li><li>语义网络表示法为（Object1，Relation，Object2）</li><li>语义网络中连接弧上的语义关系对应于逻辑表示法中的谓词关系</li></ul><p>一些例子：</p><p><img src="https://s2.loli.net/2024/07/21/g8rQ3GCadWH7xj4.png" alt="80-12.png"></p><p>语义网络推理，<strong>相应的推理方法还不完善。</strong> 语义网络的推理过程主要有两种：</p><ul><li>继承</li><li>匹配</li></ul><h3 id="框架表示法"><a href="#框架表示法" class="headerlink" title="框架表示法"></a>框架表示法</h3><p>省流：刻板印象、模板、…</p><p><img src="https://s2.loli.net/2024/07/21/lIEq4viYLdzSuHJ.png" alt="80-13.png"></p><h3 id="脚本表示法"><a href="#脚本表示法" class="headerlink" title="脚本表示法"></a>脚本表示法</h3><p>脚本表示法是框架的特殊形式。</p><p>例子，医院的脚本：</p><blockquote><p><strong>开场条件：</strong></p><ol><li>病人有病。</li><li>病人的病需要找医生诊治。</li><li>病人有钱。</li><li>病人能够去医院。</li></ol><p><strong>角色：</strong> 病人、医生、护士。</p><p><strong>道具：</strong> 医院、挂号室、椅子、桌子、药方、药房、钱、药。</p><p><strong>场景：</strong><br>场景1 进入医院<br>（1）  人走进医院<br>（2）  病人挂号<br>（3）  病人在椅子上坐下等待看病<br>场景2  看病<br>（1）  病人进入医生的办公室<br>（2）  病人向医生所说病状<br>（3）  医生向病人解释病情<br>（4）  医生给病人开药方<br>场景3  交费<br>（1）  病人到交费处<br>（2）  病人递交药方<br>（3）  病人交钱<br>（4）  病人取回药方及收据<br>场景4  取药<br>（1）  病人到药房<br>（2）  病人递交药方<br>（3）  病人取药<br>场景5 离开<br>（1）  病人离开医院</p><p><strong>结果：</strong><br>1．病人看病了，明白了自己的病是怎么回事<br>2．病人花了钱，买了药<br>3．医生付出了劳动<br>4．医院的药品少了</p></blockquote><p>特点：</p><ul><li>比语义网络、框架等呆板</li><li>知识表达范围很窄</li><li>不适用于表达各种知识，但对实现构思好的特定知识非常有效</li></ul><h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p>什么是知识图谱？</p><ul><li>知识图谱是 Google 用于增强其搜索引擎功能的知识库（Google 知识图谱，5 亿对象，35 亿事实关系）。</li><li>从学术的角度，<strong>“知识图谱本质上是语义网络（Semantic Network）的知识库”</strong>。</li><li>从实际应用的角度出发，可以简单地把知识图谱理解成<strong>多关系图（Multi-relational Graph）</strong>。<ul><li>多关系图一般包含多种类型的节点和多种类型的边</li><li>节点：概念、实体</li><li>边：关系</li></ul></li></ul><p>知识图谱旨在以结构化的形式描述客观世界中存在的概念、实体及其间的复杂关系。</p><ul><li>概念：对客观事物的概念化表示，如人、动物、组织机构</li><li>实体：客观世界中的具体事务，画家达芬奇、作品蒙娜丽莎</li><li>关系：描述概念、实体之间客观存在的关联</li></ul><p>一些具体表现：</p><ul><li>传统搜索引擎会返回包含用户搜索关键词的页面</li><li>知识图谱会返回<strong>知识卡片（Knowledge card）</strong>，为用户查询或返回答案中所包含的概念或实体提供详细的结构化摘要<br><img src="https://s2.loli.net/2024/07/22/Mo3g2fP75uBQYZy.png" alt="80-14.png"></li></ul><p>知识图谱经历了由人工和群体智慧构建，到面向互联网利用机器学习和信息抽取技术自动获取的过程。</p><p>维基百科是利用群体智能建立的互联网上至今最大的知识资源。</p><p>知识图谱的应用：</p><p><img src="https://s2.loli.net/2024/07/22/QHdFvaNWloMiDT1.png" alt="80-15.png"></p><h1 id="逻辑推理"><a href="#逻辑推理" class="headerlink" title="逻辑推理"></a>逻辑推理</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><strong>演绎推理：</strong></p><ul><li>从全称判断推出特称判断或单称判断的过程，即从一般到个别的推理</li><li>演绎推理中最常用的形式是<strong>三段论</strong>法（大前提、小前提、结论）</li><li>例如：<ul><li>所有的推理系统都是智能系统——一般的知识</li><li>专家系统是推理系统——个体的判断</li><li>所以，专家系统是智能系统——新判断    </li></ul></li><li>演绎推理没有增加新的知识</li></ul><p><strong>归纳推理：</strong></p><ul><li>从足够多的事例中归纳出一般性结论的推理过程，是一种<strong>从个别到一般的推理过程</strong></li><li>常用的归纳推理有<strong>简单枚举法</strong>和<strong>类比法</strong><ul><li><strong>枚举法归纳推理</strong>是由已观察到的事物都有某属性，而没有观察到相反的事例，从而推出某类事物都有某属性，推理过程为：<ul><li>S1 是 P，S2 是 P，…，Sn 是 P，<br>（S1,S2, …,Sn 是 S 类中的个别事物，在枚举中兼容）<br>  推出 S 都是  P </li></ul></li><li>枚举法归纳推理分<strong>完全归纳推理</strong>与<strong>不完全归纳推理</strong>。完全归纳推理是必然性推理，不完全推理得出的结论不具有必然性。</li><li>在两个或两类事物在许多属性上都相同的基础上，推出它们在其它属性上也相同，是<strong>类比法归纳推理</strong>。</li><li>类比法归纳可形式化地表示为：<br>A 具有属性a,b,c,d,e；B 具有属性a,b,c,d；推出 B 也具有属性e 。</li><li>类比法的可靠程度决定于两个或两类事物的相同属性与推出的那个属性之间的相关程度，相关程度越高，则类比法的可靠性就越高</li></ul></li><li>归纳推理增加了知识（在机器学习部分称为归纳学习）</li></ul><p><strong>默认推理</strong></p><ul><li>又称<strong>缺省推理</strong>，是在知识不完全的情况下假设某些条件已经具备，所进行的推理。</li><li>如：在条件A已成立的情况下，如果没有足够的证据能证明条件B不成立，则就默认B是成立的，并在此默认的前提下进行推理，推导出某个结论。</li><li>如果到某一时刻发现原先所作的默认不正确，则要撤消所作的默认以及由此默认推出的所有结论，重新按新情况进行推理。</li></ul><h2 id="归结原理"><a href="#归结原理" class="headerlink" title="归结原理"></a>归结原理</h2><p>Robinson 的归结原理使得自动定理证明得以实现。归结推理方法是机器定理证明的主要方法。</p><div class="row"><iframe src="https://drive.google.com/file/d/1VsMFwZ5a0ZdOAVsMRdMRaB0GNQqeVdRM/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>1 命题逻辑的归结法<br>10 谓词逻辑归结基础（SKolem标准型、子句集）<br>30 归结原理（置换、归结式、“快乐学生”问题）<br>50 归结过程的控制策略（删除、支撑集、语义、线性、单元、输入）</p></blockquote><h1 id="不确定性推理"><a href="#不确定性推理" class="headerlink" title="不确定性推理"></a>不确定性推理</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>不确定性包括<strong>证据</strong>的不确定性和<strong>知识</strong>的不确定性。</p><p>证据通常有两类：<strong>初始事实</strong>、推理过程中产生的<strong>中间结果</strong>。</p><p>证据的不确定性用 C(E) 表示。</p><p>在规则中，E 是规则的前提即证据，H 是该规则的结论，也可以是其它规则的证据。</p><ul><li>规则的不确定性：用一个数值 f(E，H) 表示，称为<strong>规则强度</strong>。</li></ul><p>在不精确推理中，由于知识和证据都具有不确定性，而且知识所要求的不确定性程度与证据实际具有的不确定性程度不一定相同，因而就出现了“怎样才算匹配成功？”的问题。</p><p>可以设计一个算法用来计算匹配双方<strong>相似的程度</strong>，另外再指定一个<strong>相似的限度</strong>，用来衡量匹配双方相似的程度是否落在指定的限度内。</p><p><strong>不确定性的更新和传播：</strong><br>在推理过程中如何考虑知识不确定性的动态积累和传递？</p><p>推理树：</p><p><img src="https://s2.loli.net/2024/07/23/wHcWI12nh9aN3gR.png" alt="80-16.png"></p><h2 id="确定性方法（可信度方法）"><a href="#确定性方法（可信度方法）" class="headerlink" title="确定性方法（可信度方法）"></a>确定性方法（可信度方法）</h2><p>MYCIN 系统研制过程中产生的不确定推理方法（然而这个名字有点误导性）。</p><p>规则 A→B，其可信度 CF(B,A)，有 -1 ≤ CF(B, A) ≤ 1</p><script type="math/tex; mode=display">CF(B,A)=\begin{cases} \frac{P(B|A)-P(B)}{1-P(B)},  & \text{if }P(B|A) \ge P(B) \\\frac{P(B|A)-P(B)}{P(B)}, & \text{if } P(B|A) \lt P(B)\end{cases}</script><p>CF(B, A)表示的意义：证据为真时</p><ul><li>相对于 P(～B) = 1 - P(B) 来说，A 对 B 为真的支持程度。即 A 发生更支持 B 发生，此时 CF(B, A) ≥ 0</li><li>相对于 P(B) 来说，A 对 B 为真的不支持程度。即 A 发生不支持 B 发生，此时 CF(B, A) &lt; 0 </li></ul><p>CF(B, A)的特殊值：</p><ul><li>CF(B, A) = 1，前提真，结论必真</li><li>CF(B, A) = -1，前提真，结论必假</li><li>CF(B, A) = 0 ，前提真假与结论无关</li></ul><p><strong>实际应用中 CF(B, A) 的值由专家确定，并不是由P(B|A), P(B)计算得到的。</strong></p><p>证据 A 的可信度表示为 CF(A)，-1 ≤ CF( A) ≤ 1 .</p><p>特殊值：</p><ul><li>CF(A) = 1，    前提肯定真</li><li>CF(A) = -1，   前提肯定假</li><li>CF(A) = 0，       对前提一无所知</li><li>CF(A) ＞ 0， 表示A以CF(A)程度为真</li><li>CF(A) ＜ 0， 表示A以CF(A)程度为假</li></ul><p>实际使用时：</p><ul><li><strong>初始证据</strong>的 CF 值由专家根据经验提供</li><li><strong>其它证据</strong>的 CF 通过规则进行推理计算得到</li></ul><p><strong>“与”的计算</strong>：     A1 ∧ A2 →B<br>CF(A1 ∧ A2) = min { CF(A1), CF(A2) }</p><p><strong>“或”的计算</strong>：    A1 ∨ A2 →B<br>CF(A1 ∨ A2) = max { CF(A1), CF(A2) } </p><p><strong>“非”的计算：</strong><br>CF(～A) = -CF(A) </p><p><strong>由 A，A →B，求 B</strong>：<br>CF(B) = max{ 0, CF(A) } · CF(B,A)<br>（ CF(A) ＜ 0 时可以不算，即为“0”）</p><p><strong>合成</strong>：由 $CF_1(B)$、$CF_2(B)$，求 CF(B) </p><script type="math/tex; mode=display">CF(B) = \begin{cases} CF_1(B)+CF_2(B)-CF_1(B)CF_2(B),  & CF_1(B) \ge 0, CF_2(B) \ge 0\\CF_1(B)+CF_2(B)+CF_1(B)CF_2(B), & CF_1(B) \lt 0, CF_2(B) \lt 0\\CF_1(B)+CF_2(B), & CF_1(B)CF_2(B) \lt 0\end{cases}</script><p>注意：以上公式<strong>不满足组合交换性</strong>，即：计算结果与各条规则采用的先后顺序有关。</p><p>MYCIN 规定证据的<strong>可信度 CF(A)&lt;0.2 时，就认为该证据引入的规则不可使用。</strong></p><p>EMYCIN 系统（MYCIN 发展而成）对 CF1(B) 和 CF2(B) 符号不同时，进行了修正： </p><script type="math/tex; mode=display">CF(B) = \begin{cases} CF_1(B)+CF_2(B)-CF_1(B)CF_2(B),  & CF_1(B) \ge 0, CF_2(B) \ge 0\\CF_1(B)+CF_2(B)+CF_1(B)CF_2(B), & CF_1(B) \lt 0, CF_2(B) \lt 0\\\frac{CF_1(B)+CF_2(B)}{1-\text{min}\{|CF_1(B)|, |CF_2(B)| \}} , & CF_1(B)CF_2(B) \lt 0\end{cases}</script><p><strong>结论更新：</strong><br>已经有一个先验的结论可信度，如何由规则更新这个可信度？</p><p>结论更新的三种情况：<br><img src="https://s2.loli.net/2024/07/31/kzcJFGyiX87eAs2.png" alt="80-17.png"></p><h2 id="主观-Bayes"><a href="#主观-Bayes" class="headerlink" title="主观 Bayes"></a>主观 Bayes</h2><p>该方法首先应用于地矿勘探系统 PROSPECTOR 中。</p><p>在这种方法中，引入了两个数值 <strong>（LS,LN）</strong> ：</p><ul><li>前者体现规则成立的充分性，后者则表现了规则成立的必要性</li><li>LS 表征的是 A 的发生对 B 发生的影响程度</li><li>LN 表征的是 A 的不发生对 B 发生的影响程度</li><li><strong>实际应用中，采用专家给定的 LS, LN 值</strong></li></ul><h3 id="证据的不确定性"><a href="#证据的不确定性" class="headerlink" title="证据的不确定性"></a>证据的不确定性</h3><p>几率函数 O(A) 表示证据 A 的不确定性：</p><script type="math/tex; mode=display">O(A) = \frac{P(A)}{1-P(A)} = \begin{cases} 0  & \text{A is false} \\\infty  & \text{A is true} \\(0,\infty) & \text{uncertain}\end{cases}</script><p>几率函数与概率函数形式不同，但是变化相同：<strong>当A为真的程度越大（P(A)越大），几率函数的值也越大。</strong></p><p>在推理过程中需要概率函数值时，可用等式：</p><script type="math/tex; mode=display">P(A) = \frac{O(A)}{1+O(A)}</script><p>特殊值：</p><ul><li>P(X) = 0, O(X) = 0</li><li>P(X) = 0.5, O(X) = 1</li><li>P(X) = 1, O(X) = inf</li></ul><h3 id="规则的不确定性"><a href="#规则的不确定性" class="headerlink" title="规则的不确定性"></a>规则的不确定性</h3><p>规则：A→B</p><script type="math/tex; mode=display">P(B|A) = \frac{P(A|B)P(B)}{P(A)}</script><script type="math/tex; mode=display">P(\lnot B|A) = \frac{P(A|\lnot B)P(\lnot B)}{P(A)}</script><p>两式相除：</p><script type="math/tex; mode=display">\frac{P(B|A)}{P(\lnot B|A)} = \frac{P(A|B)P(B)}{P(A|\lnot B)P(\lnot B)}</script><p>记：</p><script type="math/tex; mode=display">\frac{P(A|B)}{P(A|\lnot B)} = LS</script><p>又因为：</p><script type="math/tex; mode=display">O(B) = \frac{P(B)}{P(\lnot B)} \qquad O(B|A) = \frac{P(B|A)}{P(\lnot B|A)}</script><p>整理得：</p><script type="math/tex; mode=display">O(B|A) = LS \cdot O(B)</script><p><strong>LS 的含义</strong>：</p><ul><li>LS 表示 A 真对 B 的影响程度</li><li>LS = ∞ 时，P(~B|A)=0，P(B|A)=1</li><li>说明 A 对于 B 是逻辑充分的，即规则成立是充分的</li><li>LS 称作<strong>充分似然率因子</strong></li></ul><script type="math/tex; mode=display">LS = \frac{O(B|A)}{O(B)} = \frac{P(B|A)/P(\lnot B|A)}{P(B)/P(\lnot B)}</script><p>LS 表示 A 存在对 B 发生的影响度：</p><ul><li>LS = 1，O(B|A) = O(B)，A 对 B 无影响</li><li>LS &gt; 1，O(B|A) &gt; O(B)，A 支持 B</li><li>LS &lt; 1，O(B|A) &lt; O(B)，A 不支持 B</li></ul><p>由类似的推导过程：</p><script type="math/tex; mode=display">P(B|\lnot A) = \frac{P(\lnot A|B)P(B)}{P(\lnot A)}</script><script type="math/tex; mode=display">P(\lnot B|\lnot A) = \frac{P(\lnot A|\lnot B)P(\lnot B)}{P(\lnot A)}</script><p>两式相除：</p><script type="math/tex; mode=display">\frac{P(B|\lnot A)}{P(\lnot B| \lnot A)} = \frac{P(\lnot A|B)P(B)}{P(\lnot A| \lnot B)P(\lnot B)}</script><p>记：</p><script type="math/tex; mode=display">\frac{P(\lnot A|B)}{P(\lnot A| \lnot B)} = LN</script><p>又因为：</p><script type="math/tex; mode=display">O(B) = \frac{P(B)}{P(\lnot B)} \qquad O(B|\lnot A) = \frac{P(B|\lnot A)}{P(\lnot B|\lnot A)}</script><p>整理得：</p><script type="math/tex; mode=display">O(B|\lnot A) = LN \cdot O(B)</script><p>LN 的含义：</p><ul><li>LN 表示 A 假(即不存在)对 B 的影响程度</li><li>LN = 0 时，P(B|~A)=0</li><li>说明 A 对于 B 是逻辑必要的，即规则成立是必要性</li><li>LN 称作<strong>必要似然率因子</strong></li></ul><script type="math/tex; mode=display">LN = \frac{O(B|\lnot A)}{O(B)} = \frac{P(B|\lnot A)/P(\lnot B|\lnot A)}{P(B)/P(\lnot B)}</script><p>LN 表示 A 不存在对 B 发生的影响度：</p><ul><li>LN = 1，O(B|~A) = O(B)，~A对B无影响</li><li>LN &gt; 1，O(B|~A) &gt; O(B)，~A支持B</li><li>LN &lt; 1，O(B|~A) &lt; O(B)，~A不支持B</li></ul><p>LS、LN 的关系：<br><strong>LN≥0，LS≥0，且 LN 和 LS 彼此不独立。</strong></p><p>简单的验证：</p><script type="math/tex; mode=display">LS = \frac{P(A|B)}{P(A|\lnot B)}\qquad LN = \frac{P(\lnot A|B)}{P(\lnot A| \lnot B)}</script><p>当 LS &gt; 1 时：</p><script type="math/tex; mode=display">P(A|B)>P(A|\lnot B)</script><p>故有：</p><script type="math/tex; mode=display">LN = \frac{1-P(A|B)}{1-P(A|\lnot B)}<1</script><p>事实上，LS 和 LN 必处于下面三种情况之一：</p><ul><li>LS &gt; 1, LN &lt; 1</li><li>LS &lt; 1, LN &gt; 1</li><li>LS = LN = 1</li></ul><p><img src="https://s2.loli.net/2024/07/31/RVHhLNKy2jWSnsB.png" alt="80-18.png"></p><p>LS、LN 的示例：</p><blockquote><p>“如果有石英矿，则必有钾矿带”。<br>LS=300, LN=0.2</p><p>这意味着：<br>发现石英矿，对判断发现钾矿带非常有利。而没有发现石英矿，并不暗示一定没有钾矿带。如果 LN &lt;&lt; 1，则没有发现石英矿时，强烈暗示钾矿带不存在。</p></blockquote><h3 id="推理计算"><a href="#推理计算" class="headerlink" title="推理计算"></a>推理计算</h3><p>给定先验几率、规则 LS 和 LN，怎样计算后验几率呢？</p><p><strong>1）</strong> A 必出现或必不出现时，即 P(A)=1 或 P(A)=0 时</p><script type="math/tex; mode=display">O(B|A) = LS \cdot O(B)</script><script type="math/tex; mode=display">O(B|\lnot A) = LN \cdot O(B)</script><p><strong>2）</strong> A 不是必出现或必不出现时，即 P(A)≠1 且 P(A)≠0 时</p><p><img src="https://s2.loli.net/2024/08/01/wxhtucPaoHR8ZJG.png" alt="80-19.png"></p><p>由全概率公式推得：</p><script type="math/tex; mode=display">P(B|A') = P(B|A)P(A|A')+P(B|\lnot A)P(\lnot A|A')</script><p>对于上面的式子，先考虑三种特殊情况：</p><p><strong>『1』</strong> P(A|A’) = 1 时（证据 A’ 出现，证据 A 必然出现）</p><script type="math/tex; mode=display">\begin{aligned}P(B|A') & = P(B|A) \\        & = \frac{P(B|A)}{P(B|A)+P(\lnot B|A)} \\        & = \frac{P(B|A)P(A)}{P(B|A)P(A)+P(\lnot B|A)P(A)} \\        & = \frac{P(AB)}{P(AB)+P(\lnot BA)} \\        & = \frac{P(AB)}{P(AB)+P(A|\lnot B)(1-P(B))} \\        & = \frac{P(A|B)P(B)/P(A|\lnot B)}{P(A|B)P(B)/P(A|\lnot B)+1-P(B)} \\        & = \frac{LS \cdot P(B)}{(LS-1) \cdot P(B)+1}\end{aligned}</script><p><strong>『2』</strong> P(A|A’) = 0 时（证据 A’ 出现，证据 A 必然不出现）</p><p>类似地可以得到：</p><script type="math/tex; mode=display">P(B|A') = P(B|\lnot A) = \frac{LN \cdot P(B)}{(LN-1) \cdot P(B)+1}</script><p><strong>『3』</strong> P(A|A’) = P(A) 时</p><p>显然有：</p><script type="math/tex; mode=display">P(B| A') = P(B)</script><p><strong>综上『』</strong>，得到以下特殊值：</p><script type="math/tex; mode=display">P(B| A') = \begin{cases}\frac{LS \cdot P(B)}{(LS-1) \cdot P(B)+1}, & \text {P(A|A')=1} \\\frac{LN \cdot P(B)}{(LN-1) \cdot P(B)+1}, &\text{P(A|A')=0} \\P(B), &\text{P(A|A')=P(A)}\end{cases}</script><p>在其他位置，使用插值计算：</p><p><img src="https://s2.loli.net/2024/08/01/mIjMNJxkBdnXUEq.png" alt="80-20.png"></p><p>证据的组合、结论的合成：</p><p><img src="https://s2.loli.net/2024/08/01/m4RlxZNfeK8BwhA.png" alt="80-21.png"></p><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>机器学习就是让机器（计算机）来模拟和实现人类的学习功能。</p><p>基本术语和概念：</p><ul><li><strong>数据集、训练集、测试集</strong><br><img src="https://s2.loli.net/2024/08/05/5o1MeumFAfdh7W4.png" alt="80-22.png"></li><li><strong>泛化能力、误差（训练误差、泛化误差）、欠拟合、过拟合</strong><ul><li>泛化能力好：对于新的未知数据，也能很好地预测结果。</li><li>过拟合：模型可以非常完美地拟合现有数据，但是对于新的数据，拟合效果不好。</li></ul></li><li>常见的机器学习任务<ul><li>分类</li><li>回归：线性回归、逻辑回归</li></ul></li><li>混淆矩阵<br><img src="https://s2.loli.net/2024/08/05/seyDVPGltc83pFg.png" alt="80-23.png"></li></ul><p>机器学习按<strong>是否有指导</strong>进行分类：</p><ul><li>监督学习</li><li>无监督学习</li><li>半监督学习</li><li>强化学习</li></ul><p><img src="https://s2.loli.net/2024/08/06/l2sJZhnWqjzkQVE.png" alt="80-24.png"></p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>长这样：</p><p><img src="https://s2.loli.net/2024/08/06/jGxvRt9JeYuNOHb.png" alt="80-25.png"></p><p>决策树学习的过程实际上是在构造决策树。<br>学习前提是必须有一组训练实例。<br>学习结果是根据训练实例构造的决策树。<br>学习完成后，就可以利用这棵决策树对未知事物进行分类。</p><p>可以利用多种算法构造决策树：</p><ul><li><code>ID 3</code></li><li><code>C4.5</code></li><li><code>CART</code></li><li><code>CHAID</code> </li></ul><p>ID3 算法是昆兰（J.R.Quinlan）于 1979 年提出的一种以<strong>信息熵的下降速度</strong>作为属性选择标准的一种学习算法。其输入是一个用来描述各种已知类别的例子集，学习结果是一棵用于进行分类的决策树。</p><p><strong>信息熵（information entropy）</strong>，是对信息源整体不确定性的度量。</p><p>The core idea of information theory is that the “informational value” of a communicated message depends on the degree to which the content of the message is surprising. If a highly likely event occurs, the message carries very little information. On the other hand, if a highly unlikely event occurs, the message is much more informative. For instance, the knowledge that some particular number will not be the winning number of a lottery provides very little information, because any particular chosen number will almost certainly not win. However, knowledge that a particular number will win a lottery has high informational value because it communicates the occurrence of a very low probability event.</p><p>The information content, also called the <i>surprisal</i> or <i>self-information</i>, of an event $E$ is a function which increases as the probability $p(E)$ of an event decreases. When $p(E)$ is close to 1, the surprisal of the event is low, but if $p(E)$ is close to 0, the surprisal of the event is high. This relationship is described by the function :</p><script type="math/tex; mode=display">\log (\frac{1}{P(E)})</script><p>Hence, we can define the information, or surprisal, of an event $E$ by :</p><script type="math/tex; mode=display">I(E)=−\log _2(p(E))</script><p>依据 Boltzmann’s H-theorem，香农把随机变量 X 的熵值 $\text{H}$（希腊字母Eta）定义如下：</p><script type="math/tex; mode=display">\text{H} (X) = E[I(X)] = E[-\log p(X)]</script><p>其中 E 为期望函数。</p><p>当取自有限的样本时，熵的公式可以表示为：</p><script type="math/tex; mode=display">\text{H} (X) = - \sum_{i} P(x_i)\log _b P(x_i)</script><p>当 b = 2 时，熵的单位是 bit .</p><p><strong>加权信息熵</strong>：<br>根据某种方法对样本 S 作一个划分：</p><script type="math/tex; mode=display">S_1, S_2, \cdots , S_r</script><p>则划分后的加权信息熵为：</p><script type="math/tex; mode=display">\sum _{t=1}^r \frac{|S_t|}{|S|} \text{H} (S_t)</script><p>假设 S 中的样本有 m 个属性，其属性集为 X={x1, x2,…,xm}，每个属性 xi 都有不同的取值（xi 取值的个数有 ri 种），根据这个 xi 的取值对样本 S 作划分，则可以记为：</p><script type="math/tex; mode=display">\text{H} (S, x_i) = \sum _{t=1}^{r_i} \frac{|S_t|}{|S|} \text{H} (S_t)</script><p>其中 $S_t$ 为 $x_i = t$ 时的样本子集。</p><p>选取不同的属性进行划分，$\text{H} (S, x_i)$ 的值可能不同。记</p><script type="math/tex; mode=display">G(S, x_i) = \text{H} (S) - \text{H} (S, x_i)</script><p>称为<strong>信息增益（information gain）</strong>。</p><p>ID3 算法的学习过程，实际上是一个以整个样本集为根节点，以信息增益最大为原则，选择条件属性进行扩展，逐步构造出决策树的过程。</p><p>一个粗略但简单的理解：寻找一个最优的划分。</p><p>例子：</p><p><img src="https://s2.loli.net/2024/08/10/8GUDRfLJKbsIn2e.png" alt="80-26.png"></p><h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><p>遗传算法（GA）模拟自然界优胜劣汰的进化现象，把搜索空间映射为遗传空间，把可能的解编码成一个向量——染色体，向量的每个元素称为基因。 通过不断计算各染色体的适应值，选择最好的染色体，获得最优解。</p><p><img src="https://s2.loli.net/2024/08/21/ewz1HWJra4huK8f.png" alt="80-27.png"></p><p>例子：</p><p><img src="https://bu.dusays.com/2024/08/21/66c5b6262dd53.png" alt="80-28.png"></p><p>交叉、变异：</p><p><img src="https://s2.loli.net/2024/08/21/bNopUsOPtXEhrRn.png" alt="80-29.png"></p><p>遗传算法可用于 TSP 问题，具体细节略。</p><h2 id="SVM、KNN"><a href="#SVM、KNN" class="headerlink" title="SVM、KNN"></a>SVM、KNN</h2><p>支持向量机（support vector machine，SVM）是一个二分类模型，它的基本模型是定义在特征空间上的间隔最大的线性分类器。SVM还包括核技巧，这使它成为本质上的非线性分类器。支持向量机的学习算法是求解凸二次优化的最优化算法。</p><p><img src="https://s2.loli.net/2024/08/21/Rf18v9mY4leLoit.png" alt="80-30.png"></p><p>K 最近邻（K-Nearest Neighbor，KNN）分类算法的思路是：如果一个样本在特征空间中的 K 个最相似（即特征空间中最邻近）的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><p><img src="https://s2.loli.net/2024/08/21/9yFbAOjewurDEzp.webp" alt="80-31.png"></p><h2 id="超参数、验证集"><a href="#超参数、验证集" class="headerlink" title="超参数、验证集"></a>超参数、验证集</h2><p>学习模型中一般有两种参数，一种参数是可以从学习中得到，还有一种无法数据里面得到，只能靠人的经验来设定，这类参数就叫做<strong>超参数</strong>。</p><p>模型超参数举例：</p><ul><li>神经网络的学习速率、迭代次数、批次大小、激活函数、神经元的数量</li><li>支持向量机的 C 和 σ</li><li>K 近邻中的 K</li></ul><p>超参数搜索的一般过程：</p><ul><li>将数据集分成训练集、验证集、测试集。</li><li>在训练集上根据模型的性能指标对模型参数进行优化。</li><li>在验证集上根据模型的性能指标对模型超参数进行搜索。</li><li>在步骤2和步骤3交替迭代进行，最终确定模型的参数和超参数，并在测试集中评价模型的优劣。</li></ul><p>超参数搜索算法：网格搜索、随机搜素、智能搜素、…</p><p>交叉验证：用来验证分类器的性能的一种统计分析方法，基本思想是把在某种意义下将原始数据进行分组，一部分作为训练集，另一部分作为验证集，首先用训练集对分类器进行训练，再利用验证集来测试训练得到的模型，以此作为评价分类器的性能指标。</p><p>k-折交叉验证（K-CV）：</p><ul><li>将原始数据分成k组（一般是均分）。</li><li>将每个子集数据分别做一次验证集，其余的k-1组子集数据作为训练集，这样会得到k个模型。</li><li>用这k个模型最终的验证集的分类准确率的平均数作为此K-CV下分类器的性能指标。</li></ul><h1 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>人工神经网络(Artificial Neural Network, ANN)，是一种旨在模仿人脑结构及其功能的信息处理系统。</p><p>神经元是神经网络的基本处理单元，科学研究过程中一般是用一个多输入/多输出的非线性器件来模拟生物神经细胞的：</p><p><img src="https://s2.loli.net/2024/08/27/ktN3uOoPJlbEx7f.png" alt="80-32.png"></p><p>在 M-P 模型中：</p><script type="math/tex; mode=display">Y=\text{sign}[\sum_{i=1}^n x_iw_i-\theta]</script><p>$x_i$ 表示神经元的输入，$w_i$ 表示输入的对应权值，即信号源神经元与该神经元的连接强度，Y 为神经元的输出，$\theta$ 表示神经元的阈值。</p><p>深度学习一般指深度神经网络，这里的深度指神经网络的层数较多。</p><p><img src="https://s2.loli.net/2024/08/27/wLY7B4uCVxeNHp2.png" alt="80-33.png"></p><p>激活函数设计一般需要考虑的因素：</p><ul><li>非线性</li><li>连续可微性</li><li>有界性</li><li>单调性</li><li>平滑性</li><li>原点附近近似 Identity</li></ul><p>基本模型：</p><p><img src="https://s2.loli.net/2024/08/29/jsG7I5pnaFHitvW.png" alt="80-34.png"></p><h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><p>感知器基于 M-P 神经元模型。该模型由一个可调整权重的神经元(线性组合器)和一个硬限幅器组成。输入的加权和施加于硬限幅器，硬限幅器当其输入为正时输出为+1，输入为负时输出为-1（也可以是其他情况，具体由激活函数决定）。</p><p>一个基本感知器，用超平面将 n 维空间分为两个决策区域，超平面由线性分隔函数定义：</p><script type="math/tex; mode=display">\sum_{i=1}^n x_iw_i-\theta =0</script><p><strong>用于分类任务的感知器训练算法：</strong></p><blockquote><p><strong>步骤1</strong>：初始化。设置权重w1, w2, … , wn和阈值 $\theta$ 的初值。初始权重可以随意赋值，取值范围通常为 [-0.5, 0.5] ，然后通过训练样本调整。<br><strong>步骤2</strong>：激活。通过用输入x1(p), x2(p), … ,xn(p)以及期望输出 $Y_d(p)$ 来激活感知器。迭代 p 时的实际输出为：</p><script type="math/tex; mode=display">Y(p) = \text{step} [\sum_{i=1}^n x_i(p) w_i(p)-\theta]</script><p>其中，n 为感知器输入的数量，step 为阶跃激活函数。<br><strong>步骤3</strong>：权重训练。修改感知器的权重为：</p><script type="math/tex; mode=display">w_i(p+1)= w_i(p)+ \Delta w_i(p)</script><p>其中， $\Delta w_i(p)=\alpha x_i(p)e(p)$ . e(p) 为误差。<br><strong>步骤4</strong>：迭代。迭代 p 加 1，回到步骤 2，重复以上过程直至收敛。</p></blockquote><p>例子：</p><p><img src="https://s2.loli.net/2024/08/29/MbziVv8mXSfRyQT.png" alt="80-35.png"></p><p>感知器仅能学习线性分割函数，单层感知器只能解决线性分类问题。XOR 问题中无法找到一条合适的线进行分类。</p><p><img src="https://s2.loli.net/2024/08/29/wciCtaYqWGQepk4.jpg" alt="80-36.jpg"></p><p>多层感知器可以解决非线性分类问题。</p><p>可以通过在网络中加入一个或多个隐藏层来克服线性模型的限制，使其能处理更普遍的函数关系类型。</p><p>最简单的方法是将许多全连接层堆叠在一起。每一层都输出到上面的层，直到生成最后的输出。我们可以把前 L−1 层看作表示，把最后一层看作线性预测器。这种架构通常称为<strong>多层感知机（multilayer perceptron）</strong>，通常缩写为 MLP。</p><p><img src="https://s2.loli.net/2024/08/29/av3ZbfgGWhxYnqd.png" alt="80-37.png"></p><h2 id="梯度下降、损失函数"><a href="#梯度下降、损失函数" class="headerlink" title="梯度下降、损失函数"></a>梯度下降、损失函数</h2><p>当训练样例线性不可分时，我们无法找到一个超平面，令感知器完美分类训练样例，但是我们可以近似的分类它们，而允许一些小小的分类错误。怎样让这个错误最小呢，首先要参数化描述这个错误，这就是损失函数（误差函数），它反映了感知器目标输出和实际输出之间的错误。最常用的误差函数为 L2 误差：</p><script type="math/tex; mode=display">E(w) = \frac{1}{2} \sum_{d \in D} (t_d - o_d)^2</script><p>其中，d 为训练样例，D 为训练样例集，$t_d$ 为目标输出，$o_d$ 为实际输出。</p><p><img src="https://s2.loli.net/2024/08/29/DsAN2V3LhxyfiOX.png" alt="80-38.png"></p><p>梯度下降算法：</p><ul><li>全局梯度下降算法</li><li>随机梯度下降算法</li><li>Mini-Batch 梯度下降算法</li></ul><h2 id="BP-网络"><a href="#BP-网络" class="headerlink" title="BP 网络"></a>BP 网络</h2><p>BP 网络学习的网络基础是具有多层前馈结构的 BP 网络。为讨论方便，采用如下所示的三层 BP 网络。</p><p><img src="https://s2.loli.net/2024/08/31/SXHWIuEBPcaU14h.png" alt="80-39.png"></p><p>对上述三层 BP 网络，分别用 i,j,k 表示输入层、隐含层、输出层节点，且以下符号表示：</p><ul><li>$O_i$, $O_j$, $O_k$ 分别表示输入层节点 i、隐含层节点 j，输出层节点 k 的输出；</li><li>$I_i$, $I_j$ ,$I_k$ 分别表示输入层节点 i、隐含层节点 j，输出层节点 k 的输入；</li><li>$w_{ij}$, $w_{jk}$ 分别表示从输入层节点 i 到隐含层节点 j ，从隐含层节点 j 输出层节点 k 的输入节点 j 的连接权值；</li><li>$θ_j$ 、$θ_k$ 分别表示隐含层节点 j、输出层节点 k 的阈值。</li></ul><p>计算过程和之前大体相当。</p><p>BP 网络的激发函数通常采用连续可微的函数，例如 sigmoid 函数：</p><script type="math/tex; mode=display">f(x) = \frac{1}{1+e^{-x}}</script><p>其一阶导数为：</p><script type="math/tex; mode=display">f'(x) = f(x) [1-f(x)]</script><p>BP 网络学习过程是一个对给定训练模式，利用传播公式，沿着减小误差的方向不断调整网络联结权值和阈值的过程。</p><p>设样本集中的第 r 个样本，其输出层结点 k 的期望输出用 $d_{rk}$ 表示，实际输出用 $y_{rk}$ 表示。其中，$d_{rk}$ 由训练模式给出，且</p><script type="math/tex; mode=display">y_{rk} = O_{rk}</script><p>如果仅针对单个输入样本，其实际输出与期望输出的误差为 </p><script type="math/tex; mode=display">E = \frac{1}{2} \sum_{k=1}^l (d_k - y_k)^2</script><p>上述误差定义是针对单个训练样本的误差计算公式，它适用于网络的顺序学习方式。若采用批处理学习方式，需要定义其总体误差。假设样本集中有 R 个样本，则对整个样本集的总体误差定义为：</p><script type="math/tex; mode=display">E_R = \sum_{r=1}^R E_r = \frac{1}{2} \sum_{r=1}^R \sum_{k=1}^l (d_{rk} - y_{rk})^2</script><p>针对顺序学习方式，其联结权值的调整公式为 </p><script type="math/tex; mode=display">w_{jk}(t+1) = w_{jk}(t) + \Delta w_{jk}</script><p>式中，$w_{jk}(t)$ 和 $w_{jk}(t+1)$ 分别是第 t 次迭代和 t+1 次迭代时，从结点 j 到结点 k 的联结权值；$\Delta w_{jk}$ 是联结权值的变化量。</p><p>在开始推导之前，补充一点知识：</p><div class="row">    <embed src="https://dezeming.top/wp-content/uploads/2021/07/%E5%87%BD%E6%95%B0%E5%AF%B9%E5%90%91%E9%87%8F%E6%B1%82%E5%AF%BC-%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84%E6%8F%8F%E8%BF%B0.pdf" width="100%" height="550" type="application/pdf"></div><p>其实下面的推导只会用到这个 pdf 最开始的概念。多数情况下可以非常粗糙地理解——只要记住某些符号其实代表了一个向量，而每个向量都有很多元素，但是都可以用同一种方法计算，因而将它们记成了向量。</p><p>为了使联结权值能沿着 E 的梯度下降的方向逐渐改善，网络逐渐收敛，权值变化量 $\Delta w_{jk}$ 的计算公式如下：</p><script type="math/tex; mode=display">\Delta w_{jk} = - \eta \frac{\partial E}{\partial w_{jk}}</script><p>式中，$\eta$ 为增益因子，取 [0, 1] 区间的一个正数，其取值与算法的收敛速度有关。</p><script type="math/tex; mode=display">\frac{\partial E}{\partial w_{jk}} = \frac{\partial E}{\partial I_k} \frac{\partial I_k}{\partial w_{jk}}</script><p>注：E 是一个复合函数，这里用了链式法则。这样拆分是有实际意义的，比较显然。</p><script type="math/tex; mode=display">\frac{\partial I_k}{\partial w_{jk}} = \frac{\partial}{\partial w_{jk}} \sum_{j=1}^m w_{jk} O_{j} = O_j</script><p>令局部梯度</p><script type="math/tex; mode=display">\delta _k = - \frac{\partial E}{\partial I_k}</script><p>注意，这里 $\delta _k$ 代表了 $l$ 个变量，它们具有类似的形式。</p><p>那么有</p><script type="math/tex; mode=display">\Delta w_{jk} = -\eta \frac{\partial E}{\partial I_k} \frac{\partial I_k}{\partial w_{jk}} = \eta \delta _k O_j</script><p><strong>对于输出层上的结点</strong>，则有 $O_k=y_k$ ，因此（这里 $y_k$ 也是向量）</p><script type="math/tex; mode=display">\delta _k = - \frac{\partial E}{\partial I_k} = - \frac{\partial E}{\partial y_k} \frac{\partial y_k}{\partial I_k}</script><p>得到</p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial E}{\partial y_k}&= \frac{\partial}{\partial y_k} ( \frac{1}{2} \sum_{i=1}^l (d_i - y_i)^2 )  \\&= \frac{1}{2} \cdot 2 (d_k - y_k) \cdot (-1)  \\&= -(d_k - y_k)\end{aligned}</script><p>又因为</p><script type="math/tex; mode=display">\frac{\partial y_k}{\partial I_k} = f'(I_k - \theta)</script><p>所以</p><script type="math/tex; mode=display">\delta _k = (d_k - y_k) f'(I_k - \theta)</script><p>又因为 $f(I_k - \theta) = y_k$ ，再由 sigmoid 函数的导数的公式，有</p><script type="math/tex; mode=display">\delta _k = (d_k - y_k) y_k (1-y_k)</script><p>代入之前的结果：</p><script type="math/tex; mode=display">\Delta w_{jk} = \eta (d_k - y_k) (1 - y_k) y_k O_j</script><p>那么，<strong>对输出层有</strong>：</p><script type="math/tex; mode=display">\begin{aligned}w_{jk}(t+1) &= w_{jk}(t) + \Delta w_{jk} \\&= w_{jk}(t) + \eta (d_k - y_k) (1-y_k) y_k O_j \\\end{aligned}</script><p><strong>现在，我们想要类似地计算 $\Delta w_{ij}$</strong> 。</p><p><strong>对于不是输出层的结点</strong>。它表示联结权值是作用于隐含层上的结点，我们可以类似地定义 $\delta _j$ ：</p><script type="math/tex; mode=display">\delta _j = - \frac{\partial E}{\partial I_j} = - \frac{\partial E}{\partial O_j} \frac{\partial O_j}{\partial I_j}</script><p>容易得到：</p><script type="math/tex; mode=display">\delta _j = - \frac{\partial E}{\partial O_j} f'(I_j - \theta _j)</script><p>为了便于理解，下面的 $O_j$ 可以理解为隐藏层中的随意一个节点的输出值（实际上它是向量）：</p><script type="math/tex; mode=display">\begin{aligned}-\frac{\partial E}{\partial O_j}&= - \frac{\partial E}{\partial I_k} \frac{\partial I_k}{\partial O_j} \\&= (-\frac{\partial E}{\partial I_k}) \cdot \frac{\partial}{\partial O_j} \sum_{j=1}^m w_{jk} O_j \\&= (- \frac{\partial E}{\partial I_k}) w_{jk} \\\end{aligned}</script><p>上面式子最后结果中的 $w_{jk}$ 是指该 $O_j$ 对应的权值。</p><p>这个结果非常的 amazing 啊，注意到 </p><script type="math/tex; mode=display">\delta _k = - \frac{\partial E}{\partial I_k}</script><p>于是有：</p><script type="math/tex; mode=display">-\frac{\partial E}{\partial O_j} = \delta _k w_{jk}</script><p>于是</p><script type="math/tex; mode=display">\delta _j = \delta _k w_{jk} f'(I_j - \theta _j)</script><p>这说明，低层结点的 $\delta$ 值是通过上一层结点的 $\delta$ 值来计算的。这样，我们就可以先计算出输出层上的 $\delta$ 值，然后在较低层上计算。</p><script type="math/tex; mode=display">\delta _j = \delta _k w_{jk} f(I_j - \theta _j) [1 - f(I_j - \theta _j)]</script><p>于是</p><script type="math/tex; mode=display">\begin{aligned}\Delta w_{ij}&= \eta \delta _k w_{jk} f(I_j - \theta _j) [1 - f(I_j - \theta _j)] O_i \\&= \eta \delta _k w_{jk} O_j (1 - O_j) x_i\end{aligned}</script><p>那么，<strong>对隐含层有</strong>：</p><script type="math/tex; mode=display">\begin{aligned}w_{ij}(t+1)&= w_{ij}(t) + \Delta w_{ij} \\&= \text{代入即可} \cdots \\\end{aligned}</script><p>BP 网络的算法流程：</p><p><img src="https://s2.loli.net/2024/09/01/eMNB6CQ5RDiAY2j.png" alt="80-40.png"></p><h2 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h2><div class="row"><iframe src="https://drive.google.com/file/d/1oP-LaYqY_X6sxByJhi9-6LvR6xjNcQYN/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>卷积神经网络(CNN)  2<br>RNN  6<br>LSTM结构  9<br>注意力机制  11<br>正则化与优化器  18</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:</summary>
      
    
    
    
    <category term="算法" scheme="https://dropsong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="神经网络" scheme="https://dropsong.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="AI" scheme="https://dropsong.github.io/tags/AI/"/>
    
    <category term="A*" scheme="https://dropsong.github.io/tags/A/"/>
    
    <category term="蒙特卡洛树" scheme="https://dropsong.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91/"/>
    
    <category term="α-β剪枝" scheme="https://dropsong.github.io/tags/%CE%B1-%CE%B2%E5%89%AA%E6%9E%9D/"/>
    
    <category term="主观贝叶斯" scheme="https://dropsong.github.io/tags/%E4%B8%BB%E8%A7%82%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
    <category term="机器学习" scheme="https://dropsong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="决策树" scheme="https://dropsong.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
    <category term="信息论" scheme="https://dropsong.github.io/tags/%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
    <category term="遗传算法" scheme="https://dropsong.github.io/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term="SVM" scheme="https://dropsong.github.io/tags/SVM/"/>
    
    <category term="KNN" scheme="https://dropsong.github.io/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 23</title>
    <link href="https://dropsong.github.io/posts/7d04e5a3.html"/>
    <id>https://dropsong.github.io/posts/7d04e5a3.html</id>
    <published>2024-07-01T09:42:28.000Z</published>
    <updated>2024-08-13T08:48:58.856Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个拖了很久的读书笔记，简记一下 23 年的读过的两本书。</p><p>感谢 OCR 技术。</p><p>一本是《都柏林人》，另一本是《小径分岔的花园》。</p><h2 id="都柏林人"><a href="#都柏林人" class="headerlink" title="都柏林人"></a>都柏林人</h2><p>有印象的就只有几篇而已。</p><h3 id="阿拉比"><a href="#阿拉比" class="headerlink" title="阿拉比"></a>阿拉比</h3><p>这篇文章写了一个小男孩的初恋，但是没几天他就大失所望，然后觉得非常可耻。</p><blockquote><p>甚至在最不适宜浪漫的地方，她的形象也陪伴着我。星期六晚上，我姑妈到市场去的时候，我不得不替她去拿些东西。我们走过灯光闪耀的大街，被醉汉和讨价还价的妇女们挤来挤去，街上熙熙攘攘，劳工们咒骂，守立在猪头肉桶旁边的店伙计尖声吆喝，街头卖唱的人用带鼻音的腔调唱着关于奥多诺万·罗萨的《大家一起来》之歌，或者唱着关于我们祖国动乱的民谣。这些声音在我心里汇成一种独特的生活感受：<strong>我想象自己捧着圣杯，在一群敌人中安然通过。</strong>在我进行自己并不理解的祈祷和赞美时，她的名字时不时地从我的嘴里脱口而出。我眼里常常充满泪水（我也说不出为什么），有时一股热流似乎从心里涌上胸膛。</p></blockquote><p>两人的第一次谈话：</p><blockquote><p>她终于和我说话了。她说第一句话的时候，我榄乱不安，不知该如何回答。她问我去不去阿拉比。我记不清回答的是去还是不去。那是一个非常壮观的市场，她说她非常想去。</p></blockquote><p>去了阿拉比之后，无论什么都糟透了，小男孩觉得自己像个小丑：</p><blockquote><p>抬头向黑暗中凝视，我看见自己成了一个被虛荣心驱使和嘲弄的动物，于是我的双眼燃烧起痛苦和愤怒</p></blockquote><h3 id="伊芙琳"><a href="#伊芙琳" class="headerlink" title="伊芙琳"></a>伊芙琳</h3><p>生活中确实有很多伊芙琳这样的人呢。</p><blockquote><p>在她沉思冥想之际，她母亲一生可怜的景象如同符咒似的压在了她的心头——平平凡凡耗尽了生命，临终都操碎了心。她浑身颤抖，仿佛又听见母亲的声音愚顽不停地说着：</p><p>“我亲爱的孩子！我亲爱的孩子1”</p><p>她蓦然惊恐地站了起来。逃！她必须逃走！弗兰克会救她。他会给她新的生活，也许还会给她爱情。而她需要生活。为什么她不应该幸福？她有权利获得幸福。弗兰克会拥抱她，把她抱在怀里。他会救她的。</p></blockquote><p>但是最后关头她还是怂了：</p><blockquote><p>在诺斯华尔码头，她站在挤来挤去的人群当中。他拉着她的手，她知道他在对她说话，一遍通谈着航行的事儿。码头上挤满了带着棕色行李的士兵。透过候船室宽大的门口，她瞥见了巨大的黑色船体，停泊在码头的墙边，舷窗里亮着灯。她没有说话。她觉得脸色苍白发冷，由于莫明其妙的悲伤，她祈求上帝指点迷津，告诉她该做什么。大船在雾里鸣响悠长而哀婉的汽笛声。如果她走的话，翌日就会和弗兰克一起在海上，向布宜诺斯艾利斯驶去。他们的船位已经订好。在他为她做了这一切之后，她还能后退么？她的悲伤使她真觉得想吐，于是便不停地翕动嘴唇，虔诚地默默祈祷。</p><p>一阵叮当的铃声敲响了她的心房。她觉得他抓紧了自己的手：</p><p>“来呀！”</p><p>全世界的海洋在她的心中翻腾激荡。他把她拖进了汪洋之中：他会把她淹死的。她用双手紧紧地抓住了铁栏。</p><p>“来呀！”</p><p>不！不！不！这不可能。她双手疯狂地抓着铁栏。在汪洋之中，她发出一阵痛苦的叫喊。</p><p>“伊芙琳！爱薇！”</p><p>他冲过栅栏，喊叫她跟上。有人喊他往前走，他却仍在喊她。她迫不得己地向他拾起巷白的面孔，像是一只孤独无助的动物。她双眼望着他，没有显示出爱意，也没有显示出惜别之情，仿佛是路人似的。</p></blockquote><h3 id="一小片阴云"><a href="#一小片阴云" class="headerlink" title="一小片阴云"></a>一小片阴云</h3><p>小钱德勒太像 F 了，真的越看越绝望。</p><h3 id="委员会办公室里的长青节"><a href="#委员会办公室里的长青节" class="headerlink" title="委员会办公室里的长青节"></a>委员会办公室里的长青节</h3><p>其实我看着并没有什么体会，只是感叹一下，一百多年前的爱尔兰人讨论政治的时候，遥远的东方现在还没有选举呢。</p><h3 id="母亲"><a href="#母亲" class="headerlink" title="母亲"></a>母亲</h3><p>还是很倾佩这位母亲的。</p><p>下面的这段描写还是很细致的：</p><blockquote><p>郝勒汉先生绝望地指指大厅，那里的听众正在鼓掌和跺脚。他向基尔尼先生求助，又向凯瑟琳求助。但基尔尼先生继续捋着他的胡子，<strong>凯瑟琳则低头望着地下，移动着她新鞋的鞋尖：意思是这并非她的过错。</strong></p></blockquote><h3 id="死者"><a href="#死者" class="headerlink" title="死者"></a>死者</h3><p>印象最深的一篇。</p><p>某次新年舞会散场后，加布里埃尔忽然念起妻子的好来。</p><blockquote><p>加布里埃尔没有与其他人一起到门口。他待在前厅的暗处，拾头凝视着楼梯。一个女人站在第一段楼梯的上部，也在阴影里。他看不见她的脸，但能看见她裙子上赤褐色和橙红色的图案，它们在阴影里呈现出黑色和白色。那是他的妻子。她正倚着栏杆聆听什么。加布里埃尔见她一动不动大感惊讶，也竖起耳朵细听。但他却听不见什么，除了门口台阶上的笑声和争论，只依稀听见钢琴上弹出一些和音和一个男声唱歌的片断。</p><p>他静静地站在昏暗的前厅里，试图捕捉那声音唱的曲调，并仰头注视着他的妻子。她的神态显得优雅而神秘，仿佛她是某种东西的一个象征。他自己问自己，一个女人站在楼梯上的阴影里，倾听远处的音乐，是什么东西的象征呢？如果他是个面家，他会画下她那种神态。她的蓝色毡帽配以黑暗的背景会突出她那古铜色的头发，而她裙子上的深色图案也会突出浅色的图案。假如他是画家，他会把这幅画称作《远方的音乐》。<br>…<br>她正站在满是灰尘的楣窗下面，煤气灯的光焰照亮了她那丰润的古铜色头发，几天前他曾 见她在火边把头发烤千。她神态如前，似乎没有意识到她周围的谈话。终于她转向他们，加布里埃尔发现她双颊泛红，眼睛闪闪发光。</p></blockquote><p>他想起与妻子的点点滴滴。</p><blockquote><p>凌展，天仍然很暗。阴沉昏黄的展光笼罩着房子和河面，天像要垂下来似的。脚下到处是融了的雪水；只有房顶上、码头的栏杆上和空地的围栏上，留着一缕缕、一片片白雪。<br>…<br>她的鞋用一款棕色的包袱包着夹在胳膊下面，双手提着裙子唯恐溅上了雪水。她已不再有什么高雅的神态，但加布里埃尔的眼睛仍然幸福得发亮<br>…<br>她走在他前面，那么轻盈，那么挺直，他极想悄悄地追上去，抓住她的双肩，在她耳边说些可笑而深情的话儿。他觉得她那么娇弱，他渴望着保护她不受伤害，渴望着与她单独待在一起。一些他俩秘密生活的时刻突然像星星一样在他的记忆中闪现。一个淡紫色的信封放在他早餐的杯子旁边，他用手轻轻地抚弄着它。鸟儿在常春藤上唧唧喳喳，窗帘上网状的阳光在地板上闪烁：他幸福得吃不下东西。他们俩站在拥挤的站台上，他把一张车票塞进她戴着手套的温暖的手心。他和她一起在寒冷里站着，透过花格窗向里观望，看一个男人在烈焰熊熊的火炉边制作瓶子。天气很冷。她的脸在寒冷的空气里散发着芬芳，与他的脸离得很近，突然他朝炉边那个男人喊道：</p><p>“火旺不旺，先生？</p><p>那人因为炉子的响声没能听见。这倒也好。否则他可能粗暴地回答。</p></blockquote><p>这可能是个很普遍的经验，不知道大家有没有幻想过与心爱的另一半在末世中生存。</p><blockquote><p>他渴望与她单独在一起，当其他人都已离去。</p></blockquote><p>加布里埃尔因为这些种种美妙的情感体验，来到一处宾馆，想要和妻子做爱。</p><p>但是他的妻子其实因为舞会终了的歌声想起了一位故人（双重意义上的“故人”），她向加布里埃尔坦白了自己初恋（？）的事。</p><p>概括来说，这位初恋先生因为她死了，至少她是这么认为的。</p><p>加布里埃尔感到“某个无形的、蓄意报复的幽灵跟他作对，在它那个朦胧的世界里正纠集力量与他对抗”。</p><blockquote><p>加布里埃尔感到受了羞辱，因为讥讽落了空，也因为从死者引出这么一个人——一个在煤气厂工作的男孩。就在他全心回忆他们在一起的私生活，心里充满柔情、欢乐和欲望时，她却一直在心里把他和另一人比较。一种对自我人格的羞辱意识袭上了他的心头。他发现自己成了个滑稽的人物，扮演一个为姨妈跑腿挣小钱的人，一个神经质的、自作多情的感伤主义者，一个对一群庸俗的人大事演讲并把自己小丑般的欲望理想化，一个他在镜子里警见的那种可怜而愚蠢的家伙。他本能地转身背向光线。以免她会看见他额上燃烧着羞辱。</p></blockquote><p>加布里埃尔勉强听完了妻子的往事，妻子也伤心地睡了。</p><blockquote><p>加布里埃尔斜倚着臂肘，心平气和地看了一会她那蓬乱的头发和半启的嘴唇，听着她深沉的呼吸。原来她生活中有过那么一段浪漫故事：一个男人因为她而死去。现在想到他这个丈大在她生活里扮演了多么可怜的角色，他几乎不再感到痛苦。他注视着正在熟睡的她，仿佛他和她从未像夫妻一样在一起生活过似的。他好奇的眼睛久久地望着她的脸庞和她的头发：当他想着她蓓蕾初绽之际该是什么样子时，一种奇怪的对她友善的怜悯在他的心灵里升起。他甚至不愿对自己说她的脸庞己不再漂亮，但他知道那不再是迈克尔·福瑞为之慨然殉情的脸庞。<br>…<br>房间的空气使他的肩膀觉得寒冷。他小心地钻进被子里，在他妻子的身边躺下。一个接一个，他们全都要变成幽灵。<strong>最好在某种激情全盛时期勇敢地进人那另一个世界，切莫随着年龄增长而凄凉地衰败枯萎。</strong> 他想到躺在他身边的妻子，想到她多年来如何在心里深锁着她的情人告诉她不想活下去时的眼神。</p></blockquote><p>文章的最后：</p><blockquote><p>几声轻轻拍打玻璃的声音使他转过身面向窗户。又开始下雪了。他睡意蒙眬地望着雪花，银白和灰暗的雪花在灯光的衬托下斜斜地飘落。时间己到他出发西行的时候。是的，报纸是对的：<strong>整个爱尔兰都在下雪</strong>。雪落在阴晦的中部平原的每一片土地上，落在没有树木的山丘上，轻轻地落在艾伦沼地上，再往西，轻轻地落进山农河面汹涌澎海的黑浪之中。它也落在山丘上孤零零的教堂墓地的每一个角落，迈克尔·福瑞就埋葬在那里。它飘落下来，厚厚地堆积在歪斜的十字架和墓碑上，堆积在一根根栅栏的尖项上，堆积在光秀秃的荆辣丛上。他听着雪花隐隐约约地飘落，慢慢地睡着了，雪花穿过宇宙轻轻地落下，就像他们的结局似的，落到所有生者和死者身上。</p></blockquote><h2 id="小径分岔的花园"><a href="#小径分岔的花园" class="headerlink" title="小径分岔的花园"></a>小径分岔的花园</h2><p>能稍微看懂的就是《环形废墟》《通天塔图书馆》。</p><p>有一说一，《环形废墟》我甚至猜到了结局，不过还算一个结构精妙的故事。</p><p>《通天塔图书馆》确实令人印象深刻，感觉是做梦会梦的那种类型。最后似乎沾了点永恒轮回的意味。</p><p>其他的一概不懂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个拖了很久的读书笔记，简记一下 23 年的读过的两本书。&lt;/p&gt;
&lt;p&gt;感谢 OCR 技术。&lt;/p&gt;
&lt;p&gt;一本是《都柏林人》，另一本是《小径分岔的花园》。&lt;/p&gt;
&lt;h2 id=&quot;都柏林人&quot;&gt;&lt;a href=&quot;#都柏林人&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="闲文" scheme="https://dropsong.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="书评" scheme="https://dropsong.github.io/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>苏州园林</title>
    <link href="https://dropsong.github.io/posts/167f15dc.html"/>
    <id>https://dropsong.github.io/posts/167f15dc.html</id>
    <published>2024-06-13T09:32:24.000Z</published>
    <updated>2024-06-13T10:12:18.902Z</updated>
    
    <content type="html"><![CDATA[<p>我已经完全懂了（叉腰.jpg）！</p><p>这些小园林，就是主打一个欲遮半掩。</p><p>雕一个镂空的花纹窗户，外面要么是假山要么是湖。</p><p>一面墙空出一大块，外面一株精甚细腻的小植物得把枝条探进来。</p><p>靠着墙的走廊，不能紧挨着墙，要适时地折一下，和墙空出的部分又是一个赏心悦目的绿植。</p><p>园里还要有假山，假山最好簇着一块怪石，像点什么最好。</p><p>这假山的周围还要有水，水里可以有点鱼，尽量是黑的，红的多了就俗了，可以放两只伸着脑袋的乌龟。</p><p>假山可以探洞，也可以爬，若是要爬，每到一个视野开阔处就是园子的另一个角度。</p><p>假山要是想跨过水面，必须是只通一人的看着不小心就能掉下去的石板小桥。</p><p>水里还须竖着若干小石头磊起来的莫名其妙的小柱子。</p><p>要是园子再大点，还能再弄一片湖，湖里面还有个亭子，去亭子的小桥也是弯弯曲曲的。</p><p>园子里的门，尤其是那种圆门，最好是每换个角度看都不一样，或是藏着点惊喜。看上去就是一副圆形边框的画。</p><p>房子之间还是要有假山的（永远都不嫌多），山上是有亭子的，周围还得用树挡着。</p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7c0783.jpg" alt="78-1.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4be93cff.jpg" alt="78-2.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4bda5651.jpg" alt="78-3.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4be6d3c0.jpg" alt="78-4.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4bec340f.jpg" alt="78-5.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7dbe7f.jpg" alt="78-6.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b2094dc.jpg" alt="78-7.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4aa245d6.jpg" alt="78-8.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b9e7f2a.jpg" alt="78-9.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7c5875.jpg" alt="78-10.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac5265c87f.jpg" alt="78-11.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac526611ce.jpg" alt="78-12.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac525569e2.jpg" alt="78-13.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac51d82ff9.jpg" alt="78-14.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac519ad577.jpg" alt="78-15.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac526b2adb.jpg" alt="78-16.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac516bfc76.jpg" alt="78-17.jpg"></p><p>其实还是拿着手机随手拍啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我已经完全懂了（叉腰.jpg）！&lt;/p&gt;
&lt;p&gt;这些小园林，就是主打一个欲遮半掩。&lt;/p&gt;
&lt;p&gt;雕一个镂空的花纹窗户，外面要么是假山要么是湖。&lt;/p&gt;
&lt;p&gt;一面墙空出一大块，外面一株精甚细腻的小植物得把枝条探进来。&lt;/p&gt;
&lt;p&gt;靠着墙的走廊，不能紧挨着墙，要适时地折一</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://dropsong.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="园林" scheme="https://dropsong.github.io/tags/%E5%9B%AD%E6%9E%97/"/>
    
  </entry>
  
  <entry>
    <title>sonny boy</title>
    <link href="https://dropsong.github.io/posts/1b848c05.html"/>
    <id>https://dropsong.github.io/posts/1b848c05.html</id>
    <published>2024-06-03T19:23:56.000Z</published>
    <updated>2024-10-29T16:40:50.663Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1e2cb5113105d05a18f401349987f972b13ee9f83392196e42ed4697fda2d284"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="在此输入密码">在此输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">文章被密码保护。</summary>
    
    
    
    <category term="闲文" scheme="https://dropsong.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="private1" scheme="https://dropsong.github.io/tags/private1/"/>
    
  </entry>
  
  <entry>
    <title>搜索引擎项目</title>
    <link href="https://dropsong.github.io/posts/c434ad22.html"/>
    <id>https://dropsong.github.io/posts/c434ad22.html</id>
    <published>2024-05-31T17:57:56.000Z</published>
    <updated>2024-07-01T09:40:31.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发服务器方案"><a href="#并发服务器方案" class="headerlink" title="并发服务器方案"></a>并发服务器方案</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Nf7GqoqVR2mKDuE2_mepxiPF9bkm5JSY/preview" style="width:100%; height:550px"></iframe></div><h2 id="Reactor模型（V1）"><a href="#Reactor模型（V1）" class="headerlink" title="Reactor模型（V1）"></a>Reactor模型（V1）</h2><p>Socket类：所有与套接字相关的操作都在 Socket 类中，负责套接字的创建与关闭，以及获取套接字。</p><p>InetAddress类：所有与地址相关的操作都在 InetAddress 类中，包括 ip 的获取、port 的获取，以及 struct sockadd_in 结构体的操作。</p><p>Acceptor类：所有连接相关的操作全部都封装在 Acceptor 中，包括：端口复用、地址复用、bind、listen、accept 操作。</p><p>TcpConnection类：只要 accept 函数有正确的返回值，那么就表明三次握手已经建立成功了，那么这条连接就是正常的，就可以创建这条连接。那么数据的收发都可以靠 TcpConnection 这条连接，封装收发数据的函数 send 与 receive 函数。</p><p>SocketIO类：是真正底层进行数据收发的类，该类进行执行系统调用 recv/send 操作，进行真正数据的收发。</p><p>类图：</p><p><img src="https://s2.loli.net/2024/05/29/isDFSjx51to7wXH.png" alt="76-1.png"></p><p>代码实现：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v1">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v1</a></p><p>V1 主要是完成了面向对象的封装。</p><h2 id="Reactor模型（V2）"><a href="#Reactor模型（V2）" class="headerlink" title="Reactor模型（V2）"></a>Reactor模型（V2）</h2><p>V1 只实现了非常基础的功能，一个 server 只能服务一个 client. 现在我们尝试加入 epoll.</p><p>类图（初版，之后还会有变动）：</p><p><img src="https://s2.loli.net/2024/05/29/EjXDziNAaknh6HL.png" alt="76-2.png"></p><p>对应上面的类图写出伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _isLooping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(_isLooping)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">waitEpollFd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unloop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _isLooping = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">waitEpollFd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nready = <span class="built_in">epoll_wait</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == nready &amp;&amp; errno == EINTR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">-1</span> == nready)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;epoll_wait&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == nready)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&gt;&gt;epoll_wait timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; nready; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(有新的连接请求进来，并且是读事件)<span class="comment">//fd == listenfd</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">handleNewConnection</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fd = _evtList[idx].data.fd;</span><br><span class="line">                <span class="comment">//老的连接上有读事件</span></span><br><span class="line">                <span class="built_in">handleMessage</span>(fd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleNewConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    connfd = _acceptor.<span class="built_in">accept</span>();</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//处理connfd的异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TcpConnection <span class="title">con</span><span class="params">(connfd)</span></span>;</span><br><span class="line">    _conns.<span class="built_in">insert</span>(connd, con);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">addEpollReadFd</span>(connfd);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleMessage</span><span class="params">(<span class="type">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    it = _conns.<span class="built_in">find</span>(fd);</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        it-&gt;<span class="built_in">send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在面向对象的代码之前，我们先看看<strong>面向过程的逻辑</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建监听服务器的套接字</span></span><br><span class="line">    <span class="type">int</span> listenfd = ::<span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listenfd &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//地址复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">setsockopt</span>(listenfd,  SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;setsockopt ip error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//端口重用</span></span><br><span class="line">    ret = <span class="built_in">setsockopt</span>(listenfd, SOL_SOCKET, SO_REUSEPORT, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;setsockopt port error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//网络地址需要采用网络字节序存储(大端模式)</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serveraddr;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serveraddr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serveraddr));</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    serveraddr.sin_port = <span class="built_in">htons</span>(<span class="number">8888</span>);</span><br><span class="line">    serveraddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    <span class="type">socklen_t</span> length = <span class="built_in">sizeof</span>(serveraddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 绑定服务器的网络地址</span></span><br><span class="line">    <span class="keyword">if</span>(::<span class="built_in">bind</span>(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;serveraddr, length) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="comment">//文件描述符是比较稀缺的，所以不用的时候要回收</span></span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 让服务器开始监听</span></span><br><span class="line">    <span class="comment">// listenfd跟所有的新连接打交道</span></span><br><span class="line">    <span class="keyword">if</span>(::<span class="built_in">listen</span>(listenfd, <span class="number">128</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;server is listening...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建epoll实例</span></span><br><span class="line">    <span class="type">int</span> efd = ::<span class="built_in">epoll_create1</span>(<span class="number">0</span>);<span class="comment">// 红黑树 + 就绪链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">    ev.events = EPOLLIN | EPOLLOUT;</span><br><span class="line">    ev.data.fd = listenfd;</span><br><span class="line">    <span class="comment">//epoll要进行监听操作: 对listenfd的读事件进行监听</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//Reactor: 注册读就绪事件</span></span><br><span class="line">    ret = ::<span class="built_in">epoll_ctl</span>(efd, EPOLL_CTL_ADD, listenfd, &amp;ev);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="built_in">close</span>(efd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> *evtList = </span><br><span class="line">        (<span class="keyword">struct</span> epoll_event *)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="built_in">sizeof</span>(<span class="keyword">struct</span> epoll_event));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Reactor: 事件分离器</span></span><br><span class="line">        <span class="type">int</span> nready = ::<span class="built_in">epoll_wait</span>(efd, evtList, <span class="number">1024</span>, <span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == nready &amp;&amp; errno == EINTR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">-1</span> == nready) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;epoll_wait&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == nready) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt; epoll_wait timeout!\n&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历struct epoll_event数组, 去check</span></span><br><span class="line">            <span class="comment">//每一个epoll_event到底发生了什么事件</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; nready; ++idx)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 必须要使用按位&amp;操作来判断事件，不能使用==,&amp;&amp;</span></span><br><span class="line">                <span class="keyword">if</span>((evtList[idx].data.fd == listenfd)  &amp;&amp;</span><br><span class="line">                   (evtList[idx].events &amp; EPOLLIN)) </span><br><span class="line">                &#123;   </span><br><span class="line">                    <span class="comment">//意味着有新连接来了,所以要调用accept函数,获取新连接</span></span><br><span class="line">                    <span class="comment">//写事件什么情况会触发? 只要内核发送缓冲区还有空间，就可以触发写事件</span></span><br><span class="line">                    <span class="type">int</span> peerfd = ::<span class="built_in">accept</span>(listenfd, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">                    <span class="comment">/* TcpConnection conn(peerfd); */</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//将新连接添加到epoll的监听实例中去</span></span><br><span class="line">                    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">                    ev.events = EPOLLIN | EPOLLOUT | EPOLLERR;</span><br><span class="line">                    ev.data.fd = peerfd;</span><br><span class="line">                    ret = ::<span class="built_in">epoll_ctl</span>(efd, EPOLL_CTL_ADD, peerfd, &amp;ev);</span><br><span class="line">                    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//新连接到来之后的处理</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt; conn has connected, fd: %d\n&quot;</span>, peerfd);</span><br><span class="line">                    <span class="comment">//记录日志, 使用Log4cpp完成</span></span><br><span class="line">                    <span class="comment">//个性定制化 ==&gt; 事件处理器</span></span><br><span class="line">                    <span class="comment">/* onConnection();//考虑扩展性，挖一个坑 */</span></span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 已经建立好的连接发送数据过来了</span></span><br><span class="line">                    <span class="comment">// 如果发生了读事件</span></span><br><span class="line">                    <span class="type">char</span> buff[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(evtList[idx].events &amp; EPOLLIN)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">int</span> fd = evtList[idx].data.fd;</span><br><span class="line">                        ret = ::<span class="built_in">recv</span>(fd, buff, <span class="built_in">sizeof</span>(buff), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) </span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; recv msg %d bytes,content:%s\n&quot;</span>,</span><br><span class="line">                                    ret, buff);</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">//1. 对应用层数据进行解析</span></span><br><span class="line">                            <span class="comment">//2. 拿到最终要处理的数据之后，进行业务逻辑处理</span></span><br><span class="line">                            <span class="comment">//(假设第2步执行的时间很长1S, 是否合适)</span></span><br><span class="line">                            <span class="comment">//3. 得到要返回给客户端的数据之后，进行发送操作</span></span><br><span class="line">                            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                            ret = <span class="built_in">send</span>(fd, buff, <span class="built_in">strlen</span>(buff), <span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; send %d bytes\n&quot;</span>, ret);</span><br><span class="line">                            <span class="comment">/* onMessage();//, 考虑扩展性，挖一个坑 */</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;conn has closed!\n&quot;</span>);</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">//需要从epoll的监听实例删除掉, 因为连接断开，不需要再监听了</span></span><br><span class="line">                            <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">                            ev.data.fd = fd;</span><br><span class="line">                            ret = ::<span class="built_in">epoll_ctl</span>(efd, EPOLL_CTL_DEL, fd, &amp;ev);</span><br><span class="line">                            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) </span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//记录日志, log4cpp</span></span><br><span class="line">                            <span class="comment">/* onClose();//考虑扩展性，挖一个坑 */</span></span><br><span class="line">                        &#125;<span class="comment">// end of ret if</span></span><br><span class="line">                    &#125;<span class="comment">//end of event if</span></span><br><span class="line">                    <span class="comment">//else if()  //处理其他事件的</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">close</span>(listenfd);<span class="comment">// 关闭连接</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP 网络编程最本质的是处理<strong>三个半事件</strong>：</p><ol><li><strong>连接建立</strong>：包括服务器端被动接受连接（accept）和客户端主动发起连接（connect）。TCP 连接一旦建立，客户端和服务端就是平等的，可以各自收发数据。</li><li><strong>连接断开</strong>：包括主动断开（close、shutdown）和被动断开（read()返回 0）。</li><li><strong>消息到达</strong>：文件描述符可读。这是最为重要的一个事件，对它的处理方式决定了网络编程的风格（阻塞还是非阻塞，如何处理分包，应用层的缓冲如何设计等等）。</li><li><strong>消息发送完毕</strong>：这算半个。对于低流量的服务，可不必关心这个事件；另外，这里的“发送完毕”是指数据写入操作系统缓冲区（内核缓冲区），将由 TCP 协议栈负责数据的发送与重传，不代表对方已经接收到数据。</li></ol><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v2">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v2</a></p><p>重新考虑细节之后，类图如下：</p><p><img src="https://s2.loli.net/2024/05/31/AbECe43dchnG8aR.png" alt="76-3.png"></p><h2 id="Reactor模型（V3）"><a href="#Reactor模型（V3）" class="headerlink" title="Reactor模型（V3）"></a>Reactor模型（V3）</h2><p>为使 V2 代码的 main 函数更加简洁，我们进一步封装：</p><p><img src="https://s2.loli.net/2024/06/04/HA8eiGFRnmjVIcN.png" alt="76-4.png"></p><p>代码（较 V2 版本改动较小）：</p><p><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v3">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v3</a></p><p><strong>V2 和 V3 版本其实就是实现了 Basic Reactor Design .</strong></p><h2 id="进程、线程通信"><a href="#进程、线程通信" class="headerlink" title="进程、线程通信"></a>进程、线程通信</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>我们尝试开发 Reactor 的 V4 版本，即 Reactor with ThreadPool. 要义是将 IO 和计算任务分开。</p><p>将 IO 和计算任务分开的必要性：它们的速度不匹配。</p><p>我们改进 V3 版本的 <code>TestTcpServer.cc</code> 文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpConnection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTask</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyTask</span>(<span class="type">const</span> string &amp;msg, <span class="type">const</span> TcpConnectionPtr &amp;con)</span><br><span class="line">    : _msg(msg)</span><br><span class="line">    , _con(con)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//所有的业务逻辑的处理，decode、compute、encode</span></span><br><span class="line">        <span class="comment">//在此处理msg1</span></span><br><span class="line">        _msg;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程池处理完毕业务逻辑之后，需要告诉Reactor/EventLoop去进行发送</span></span><br><span class="line">        <span class="comment">//数据，因为数据的收发不是线程池的功能，为了将职责分清楚，所以</span></span><br><span class="line">        <span class="comment">//Reactor/EventLoop进行IO操作，而线程池主要处理业务逻辑，也就是</span></span><br><span class="line">        <span class="comment">//进行计算操作，所以我们将IO操作的线程，称为IO线程，将计算操作的</span></span><br><span class="line">        <span class="comment">//线程，称为计算线程。</span></span><br><span class="line">        <span class="comment">//那么就会涉及到计算线程要通知IO线程进行数据的发送</span></span><br><span class="line">        <span class="comment">//那么就会涉及到线程之间的通信？</span></span><br><span class="line">        <span class="comment">//eventfd解决线程或者进程之间的通信。。。</span></span><br><span class="line">        <span class="comment">//将msg1发送数据给客户端</span></span><br><span class="line">        _con-&gt;<span class="built_in">sendInLoop</span>(_msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string _msg;</span><br><span class="line">    TcpConnectionPtr _con;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; con-&gt;<span class="built_in">toString</span>() &lt;&lt; <span class="string">&quot; has connected!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//接收客户端的数据</span></span><br><span class="line">    <span class="comment">//接收数据，也就是read数据，也就是读数据，是EventLoop线程</span></span><br><span class="line">    <span class="comment">//也就是Reactor线程，并且数据的发送也是属于EventLoop线程</span></span><br><span class="line">    <span class="comment">//或者Reactor线程</span></span><br><span class="line">    string msg = con-&gt;<span class="built_in">receive</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&gt;&gt;recv msg from client: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将接收的msg，业务逻辑进行decode compute encode操作</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function">MyTask <span class="title">task</span><span class="params">(msg, con)</span></span>;</span><br><span class="line">    pool.<span class="built_in">addTask</span>(std::<span class="built_in">bind</span>(&amp;MyTask::process, task));<span class="comment">//bind的地址传递与值传递</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//msg1</span></span><br><span class="line">    <span class="comment">//将msg1发送数据给客户端</span></span><br><span class="line">    <span class="comment">/* con-&gt;send(msg); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onClose</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; con-&gt;<span class="built_in">toString</span>() &lt;&lt; <span class="string">&quot; has closed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TcpServer <span class="title">server</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span></span>;</span><br><span class="line">    server.<span class="built_in">setAllCallback</span>(std::<span class="built_in">move</span>(onConnection)</span><br><span class="line">                          , std::<span class="built_in">move</span>(onMessage)</span><br><span class="line">                          , std::<span class="built_in">move</span>(onClose));</span><br><span class="line">    server.<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们发现有必要了解进程、线程间的通信。</p><h3 id="eventfd-系统调用"><a href="#eventfd-系统调用" class="headerlink" title="eventfd 系统调用"></a>eventfd 系统调用</h3><p>从 Linux 2.6.27 版本开始，新增了不少系统调用，其中包括 eventfd，它主要用于进程或线程间通信（如通知/等待机制的实现）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/eventfd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eventfd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> initval, <span class="type">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">//initval:64位的计数器，并且由内核维护。</span></span><br><span class="line"><span class="comment">//flags:可以设置为0.</span></span><br><span class="line"><span class="comment">//返回值：返回的是一个 eventfd 对象（可以理解为文件描述符）。</span></span><br></pre></td></tr></table></figure><p>eventfd 支持的操作：</p><ul><li>read</li><li>write</li><li>select / poll / epoll</li></ul><p>eventfd 是专门用于事件通知的文件描述符（fd）。它创建一个 eventfd 对象，eventfd 对象不仅可以用于进程间的通信，还能用于用户态和内核态的通信。<strong>eventfd 对象在内核中包含了一个计数器，该计数器是 64 位的无符号整数（uint64_t），计数不为零是有可读事件发生，read 之后计数会清零，write 则会递增计数器。</strong></p><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/eventfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>             <span class="comment">/* Definition of uint64_t */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> handle_error(msg) \</span></span><br><span class="line"><span class="meta">    do &#123; perror(msg); exit(EXIT_FAILURE); &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> efd, j;</span><br><span class="line">    <span class="type">uint64_t</span> u;</span><br><span class="line">    <span class="type">ssize_t</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Usage: %s &lt;num&gt;...\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    efd = <span class="built_in">eventfd</span>(<span class="number">10</span>, <span class="number">0</span>);<span class="comment">//eventfd的第一个参数代表的是内核上的计数器</span></span><br><span class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">handle_error</span>(<span class="string">&quot;eventfd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (fork()) </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">//case 0部分是子线程的执行流</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; argc; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child writing %s to efd\n&quot;</span>, argv[j]);</span><br><span class="line">            u = <span class="built_in">strtoull</span>(argv[j], <span class="literal">NULL</span>, <span class="number">0</span>);<span class="comment">/* strtoull() allows various bases */</span></span><br><span class="line">            s = <span class="built_in">write</span>(efd, &amp;u, <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>));<span class="comment">//write可以写多次, 每执行一次，就会执行一次加法</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>))</span><br><span class="line">                <span class="built_in">handle_error</span>(<span class="string">&quot;write&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child completed write loop\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//父线程的一个执行流</span></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">2</span>; idx &lt; argc; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Parent about to read\n&quot;</span>);</span><br><span class="line">            s = <span class="built_in">read</span>(efd, &amp;u, <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>));<span class="comment">// read操作会将计数器的值清0</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>))</span><br><span class="line">                <span class="built_in">handle_error</span>(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Parent read %llu (0x%llx) from efd\n&quot;</span>,</span><br><span class="line">                    (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) u, (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) u);</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        <span class="built_in">handle_error</span>(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">./a.out  1 2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Child writing 1 to efd</span></span><br><span class="line"><span class="comment">Child writing 2 to efd</span></span><br><span class="line"><span class="comment">Parent about to read</span></span><br><span class="line"><span class="comment">Parent read 13 (0xd) from efd</span></span><br><span class="line"><span class="comment">Child writing 3 to efd</span></span><br><span class="line"><span class="comment">Parent about to read</span></span><br><span class="line"><span class="comment">Parent read 3 (0x3) from efd</span></span><br><span class="line"><span class="comment">Child completed write loop</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="eventfd-的封装"><a href="#eventfd-的封装" class="headerlink" title="eventfd 的封装"></a>eventfd 的封装</h3><p>类图（这个 MyTask 就是 <a href="https://loveofpeach.github.io/posts/cb3a6d2b.html">CppNote4</a> 里面的）：</p><p><img src="https://bu.dusays.com/2024/06/02/665c7953f0a53.png" alt="76-5.png"></p><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/EventFd">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/EventFd</a></p><h2 id="Reactor模型（V4）"><a href="#Reactor模型（V4）" class="headerlink" title="Reactor模型（V4）"></a>Reactor模型（V4）</h2><p>注意，这里我们将上一张图片里的 EventFd 类揉碎了放进 EventLoop 类中：</p><p><img src="https://s2.loli.net/2024/06/04/JtPQSOFhEKc6yzk.jpg" alt="76-6.jpg"></p><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v4">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v4</a></p><p>很多注释都在代码里面。</p><p>注意：在 Reactor_v4 的 <code>TestTcpServer.cc</code> 代码中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gPool-&gt;<span class="built_in">addTask</span>(std::<span class="built_in">bind</span>(&amp;MyTask::process, task));</span><br></pre></td></tr></table></figure><p>并没有传递 task 的地址，这与之前的介绍不一样，这是为什么呢？</p><p>我们实验一下，发现如果用 <code>&amp;</code> 取地址，运行时会报 core dumped. </p><p>这是因为 task 对象的生命周期已经结束（而且它们会分属不同的线程）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//接收客户端的数据</span></span><br><span class="line">    <span class="comment">//接收数据，也就是read数据，也就是读数据，是EventLoop线程</span></span><br><span class="line">    <span class="comment">//也就是Reactor线程，并且数据的发送也是属于EventLoop线程</span></span><br><span class="line">    <span class="comment">//或者Reactor线程</span></span><br><span class="line">    string msg = con-&gt;<span class="built_in">receive</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&gt;&gt;recv msg from client: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将接收的msg，业务逻辑进行decode compute encode操作</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function">MyTask <span class="title">task</span><span class="params">(msg, con)</span></span>;</span><br><span class="line">    gPool-&gt;<span class="built_in">addTask</span>(std::<span class="built_in">bind</span>(&amp;MyTask::process, task));<span class="comment">//bind的地址传递与值传递</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不取地址的时候，会做一个值传递（拷贝）。</p><p>这是 bind() 函数本身的特性，之前只是没有提：</p><p><img src="https://s2.loli.net/2024/06/04/XAaFOvniskW2qCP.png" alt="76-7.png"></p><h2 id="Reactor模型（V5）"><a href="#Reactor模型（V5）" class="headerlink" title="Reactor模型（V5）"></a>Reactor模型（V5）</h2><p>在 v4 模型中，还有一些不足：使用了全局变量。</p><p>v4 中我们之所以使用全局变量，是暂时没有什么手段处理生命周期的问题。现在我们重新考虑：</p><p><img src="https://bu.dusays.com/2024/06/05/665f3e77a1e26.jpg" alt="76-8.jpg"></p><p>代码如下：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v5">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v5</a></p><p>代码相较于 v4 的变动是：</p><ul><li><code>TestTcpServer.cc</code> 变为 <code>EchoServer.h</code> ，其中的封装技巧值得注意。</li><li>测试文件 <code>testFile.cc</code> 。</li></ul><h2 id="定时器-timerfd"><a href="#定时器-timerfd" class="headerlink" title="定时器 timerfd"></a>定时器 timerfd</h2><p>timerfd 是 Linux 提供的一个定时器接口。这个接口<strong>基于文件描述符</strong>，通过文件描述符的可读事件进行超时通知，所以能够被用于 select/poll/epoll 的应用场景。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/timerfd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">timerfd_create</span><span class="params">(<span class="type">int</span> clockid, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="comment">// clockid 可设置为：</span></span><br><span class="line"><span class="comment">//    1. CLOCK_REALTIME：从1970.1.1到目前的时间。更改系统时间 会更改获取的值，它以系统时间为坐标。</span></span><br><span class="line"><span class="comment">//    2. CLOCK_MONOTONIC：获取的时间为系统重启到现在的时间，更改系统时间对其没有影响。</span></span><br><span class="line"><span class="comment">// flags:直接传递为0</span></span><br><span class="line"><span class="comment">// 返回值：返回一个定时器对象，也就是一个文件描述符。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">timerfd_settime</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="keyword">struct</span> itimerspec *new_value,</span></span><br><span class="line"><span class="params">                    <span class="keyword">struct</span> itimerspec *old_value)</span>;</span><br><span class="line"><span class="comment">//fd：就是timerfd_create成功执行后的函数返回值。</span></span><br><span class="line"><span class="comment">//flags:可以传递两种值，0表示是相对定时器,TFD_TIMER_ABSTIME表示是绝对定时器</span></span><br><span class="line"><span class="comment">//new_value:设置超时时间，包括开始的时间与周期时间。如果该值是0，表明定时器取消</span></span><br><span class="line"><span class="comment">//old_value:一般设置为nullptr</span></span><br><span class="line"><span class="comment">//返回值：该函数的目的就是为了去设置或者停止定时器。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">time_t</span>  tv_sec;   <span class="comment">/* Seconds */</span></span><br><span class="line">    <span class="type">long</span>    tv_nsec;  <span class="comment">/* Nanoseconds */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerspec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">it_interval</span>;</span> <span class="comment">/* Interval for periodic timer */</span>  <span class="comment">//周期时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">it_value</span>;</span>    <span class="comment">/* Initial expiration */</span>  <span class="comment">//初始时间</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>考虑封装其功能如下：</p><p><img src="https://s2.loli.net/2024/06/04/KbONdS8yQWa6LsR.png" alt="76-9.png"></p><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/TimerFd">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/TimerFd</a></p><p>TimerFd 自然也可以用在 Reactor 的代码中，只不过未必好。</p><p>eventfd 与 timerfd 都可以用于线程间通信。eventfd 是让 A 线程主动唤醒 B 线程进行操作，而 timerfd 是让 B 线程被定时唤醒。</p><h2 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>本节内容参考： <a href="https://jozeou.github.io/2019/05/09/nlp-course-notes/nlp-note3/">NLP 笔记（三）：最短编辑距离</a></p><p>首先引入提出算法的动机。</p><p>1）如何衡量两个字符串有多相似？例如，我们需要实现<strong>拼写纠正</strong>：用户键入“graffe”，以下哪个最接近？</p><ul><li>graf</li><li>graft</li><li>grail</li><li>giraffe</li></ul><p>2）计算生物学：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-1.png" alt="76-10"></p><p><strong>编辑距离（Edit Distance）</strong>：两个字符串之间的最短编辑距离是指将一个字符串变换为另一个需要的编辑操作（插入（Insertion），删除（Deletion），替换（Substitution））的最小数量。</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-2.png" alt="76-11"></p><p>注意：</p><ul><li>如果每个操作的代价值为 1，则此两个字符串之间的距离为 5</li><li>如果替换操作的代价值为 2，则距离为 8</li></ul><p>该问题可以动态规划求解。</p><p>现有长为 n 的字符串 X，长为 m 的字符串 Y .</p><p>定义： <code>D(i, j)</code> 为 <code>X[1...i]</code>（X 的前 i 个字符）和 <code>Y[1...j]</code>（Y 的前 j 个字符）的最短编辑距离。</p><p><strong>注意：这里下标是从 1 开始的。</strong></p><p>那么我们所求的就是 D(n, m) .</p><p>边界条件： <code>D(i, 0) = i</code>，<code>D(0, j) = j</code> .</p><p>对边界条件的解释：<br>若有一字符串为空串，则另一字符串编辑为空串的方法为 del / ins 其自身长度的字符，即该操作的代价为自身长度。</p><p>递推公式（替换操作代价为2）：</p><script type="math/tex; mode=display">D(i,j) = \min \begin{cases}D(i-1, j)+1 & \text {} \\D(i, j-1)+1 &\text{} \\D(i-1, j-1)+ \begin{cases}2 & X_i \neq Y_j \\0 & X_i = Y_j\end{cases} \end{cases}</script><p>递推公式（替换操作代价为1）：</p><script type="math/tex; mode=display">D(i,j) = \min \begin{cases}D(i-1, j)+1 & \text {} \\D(i, j-1)+1 &\text{} \\D(i-1, j-1)+ \begin{cases}1 & X_i \neq Y_j \\0 & X_i = Y_j\end{cases} \end{cases}</script><p>对递推公式的解释，一图胜千言：</p><p><img src="https://s2.loli.net/2024/06/08/SjGm7Bxe2ZoWIcw.jpg" alt="76-12.jpeg"></p><p>对应的 leetcode 题目： <a href="https://leetcode.com/problems/edit-distance/description/">edit-distance</a></p><p>到这里的原理已经足够我们应用了，但是我们继续拓展一下。</p><p><strong>计算对齐（Computing alignments）</strong>：我们经常需要将两个字符串的每个字符彼此对齐，这可以通过保持“回溯（backtrace）”来做到：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-6.png" alt="76-13"></p><p>根据上图回溯，得到两个字符串和它们之间的对齐，见图 76-11.</p><p>一点微小的技巧：<code>*</code>填充在 76-11 上面还是下面取决与 76-13 黑线是横着走还是竖着走。</p><p><strong>加权最短编辑距离</strong>：嗯，就是加个权。</p><p>为什么要在计算中加权？</p><ul><li>拼写纠正：有些字母比其他字母更容易输入错</li><li>生物学：某些类型的删除或插入更有可能发生</li></ul><p>算法实现：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-8.png" alt="76-14"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>作为搜索引擎功能的很小一部分，我们试图实现一个中英文混合的最小编辑距离算法。</p><p>UTF8 编码规则：</p><p><img src="https://s2.loli.net/2024/06/09/FNCdYOqDps37rwo.png" alt="76-15.png"></p><p>于是，可以写出如下函数求一个字符在 UTF-8 编码中占据的字节数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">nBytesCode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; <span class="number">7</span>))  <span class="comment">// 检查最高位是否为1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nBytes = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx != <span class="number">6</span>; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">6</span> - idx)))  <span class="comment">// 检查从第二位开始的连续1的数量</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++nBytes;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，下面这份代码不仅支持中英文混合，只要是 UTF-8 就行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//1. 求取一个字符占据的字节数</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">nBytesCode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 求取一个字符串的字符长度</span></span><br><span class="line"><span class="function">std::<span class="type">size_t</span> <span class="title">length</span><span class="params">(<span class="type">const</span> std::string &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 中英文通用的最小编辑距离算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">editDistance</span><span class="params">(<span class="type">const</span> std::string &amp; lhs, <span class="type">const</span> std::string &amp;rhs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::string本身是一个字节流的字符串</span></span><br><span class="line">    <span class="comment">// 字符流的字符串</span></span><br><span class="line">    string s1 = <span class="string">&quot;abcd&quot;</span>;<span class="comment">//4个字符的字符串</span></span><br><span class="line">    <span class="comment">//获取的是字符的长度</span></span><br><span class="line">    string s2 = <span class="string">&quot;中国&quot;</span>;<span class="comment">//2个字符的字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; ch : s2) &#123;</span><br><span class="line">        cout &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2[1]: &quot;</span> &lt;&lt; s2[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.size() : &quot;</span> &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.size() : &quot;</span> &lt;&lt; s2.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s3 = s2.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.size(): &quot;</span> &lt;&lt; s3.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3: &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s4 = s2.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4.size(): &quot;</span> &lt;&lt; s4.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4: &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符的长度</span></span><br><span class="line">    string s5 = <span class="string">&quot;abc中国&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s5.size(): &quot;</span> &lt;&lt; s5.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s5.length: &quot;</span> &lt;&lt; <span class="built_in">length</span>(s5) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2与s5的最小编辑距离: &quot;</span> &lt;&lt; <span class="built_in">editDistance</span>(s2, s5) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s6 = <span class="string">&quot;今夜は月が綺麗ですね&quot;</span>;</span><br><span class="line">    string s7 = <span class="string">&quot;今夜月綺麗，有道理&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6.size(): &quot;</span> &lt;&lt; s6.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6.length: &quot;</span> &lt;&lt; <span class="built_in">length</span>(s6) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s7.size(): &quot;</span> &lt;&lt; s7.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s7.length: &quot;</span> &lt;&lt; <span class="built_in">length</span>(s7) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6与s7的最小编辑距离: &quot;</span> &lt;&lt; <span class="built_in">editDistance</span>(s6, s7) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 注意替换的代价是 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test0</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">nBytesCode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; <span class="number">7</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nBytes = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx != <span class="number">6</span>; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">6</span> - idx)))</span><br><span class="line">            &#123;</span><br><span class="line">                ++nBytes;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 看穿内存的操作（</span></span><br><span class="line"><span class="function">std::<span class="type">size_t</span> <span class="title">length</span><span class="params">(<span class="type">const</span> std::string &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="type">size_t</span> ilen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(std::<span class="type">size_t</span> idx = <span class="number">0</span>; idx != str.<span class="built_in">size</span>(); ++idx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nBytes = <span class="built_in">nBytesCode</span>(str[idx]);</span><br><span class="line">        <span class="comment">// 如果这个字符不止一个字节，就跳到它的最后一个字节</span></span><br><span class="line">        idx += (nBytes - <span class="number">1</span>);</span><br><span class="line">        ++ilen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ilen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">triple_min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b, <span class="type">const</span> <span class="type">int</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? (a &lt; c ? a : c) : (b &lt; c ? b : c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">editDistance</span><span class="params">(<span class="type">const</span> std::string &amp; lhs, <span class="type">const</span> std::string &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//计算最小编辑距离-包括处理中英文</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> lhs_len = <span class="built_in">length</span>(lhs);</span><br><span class="line">    <span class="type">size_t</span> rhs_len = <span class="built_in">length</span>(rhs);</span><br><span class="line">    <span class="type">int</span> editDist[lhs_len + <span class="number">1</span>][rhs_len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> idx = <span class="number">0</span>; idx &lt;= lhs_len; ++idx)</span><br><span class="line">    &#123;</span><br><span class="line">        editDist[idx][<span class="number">0</span>] = idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> idx = <span class="number">0</span>; idx &lt;= rhs_len; ++idx)</span><br><span class="line">    &#123;</span><br><span class="line">        editDist[<span class="number">0</span>][idx] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::string sublhs, subrhs;</span><br><span class="line">    <span class="keyword">for</span>(std::<span class="type">size_t</span> dist_i = <span class="number">1</span>, lhs_idx = <span class="number">0</span>; dist_i &lt;= lhs_len; ++dist_i, ++lhs_idx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// start string</span></span><br><span class="line">        <span class="type">size_t</span> nBytes = <span class="built_in">nBytesCode</span>(lhs[lhs_idx]);</span><br><span class="line">        sublhs = lhs.<span class="built_in">substr</span>(lhs_idx, nBytes);</span><br><span class="line">        lhs_idx += (nBytes - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(std::<span class="type">size_t</span> dist_j = <span class="number">1</span>, rhs_idx = <span class="number">0</span>; dist_j &lt;= rhs_len; ++dist_j, ++rhs_idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// target string</span></span><br><span class="line">            nBytes = <span class="built_in">nBytesCode</span>(rhs[rhs_idx]);</span><br><span class="line">            subrhs = rhs.<span class="built_in">substr</span>(rhs_idx, nBytes);</span><br><span class="line">            rhs_idx += (nBytes - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sublhs == subrhs)</span><br><span class="line">            &#123;</span><br><span class="line">                editDist[dist_i][dist_j] = editDist[dist_i - <span class="number">1</span>][dist_j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                editDist[dist_i][dist_j] = <span class="built_in">triple_min</span>(</span><br><span class="line">                    editDist[dist_i][dist_j - <span class="number">1</span>] + <span class="number">1</span>,</span><br><span class="line">                    editDist[dist_i - <span class="number">1</span>][dist_j] + <span class="number">1</span>,</span><br><span class="line">                    editDist[dist_i - <span class="number">1</span>][dist_j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> editDist[lhs_len][rhs_len];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中国</span></span><br><span class="line"><span class="comment">s2[1]: �</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">s1.size() : 4</span></span><br><span class="line"><span class="comment">s2.size() : 6</span></span><br><span class="line"><span class="comment">s3.size(): 3</span></span><br><span class="line"><span class="comment">s3: 中</span></span><br><span class="line"><span class="comment">s4.size(): 3</span></span><br><span class="line"><span class="comment">s4: ���</span></span><br><span class="line"><span class="comment">s5.size(): 9</span></span><br><span class="line"><span class="comment">s5.length: 5</span></span><br><span class="line"><span class="comment">s2与s5的最小编辑距离: 3</span></span><br><span class="line"><span class="comment">s6.size(): 30</span></span><br><span class="line"><span class="comment">s6.length: 10</span></span><br><span class="line"><span class="comment">s7.size(): 27</span></span><br><span class="line"><span class="comment">s7.length: 9</span></span><br><span class="line"><span class="comment">s6与s7的最小编辑距离: 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Stop-words"><a href="#Stop-words" class="headerlink" title="Stop words"></a>Stop words</h2><p>本节内容转载自： <a href="https://kavita-ganesan.com/what-are-stop-words/">What are Stop Words?</a></p><h3 id="What-are-Stop-Words"><a href="#What-are-Stop-Words" class="headerlink" title="What are Stop Words"></a>What are Stop Words</h3><p>When working with text mining applications, we often hear of the term “stop words” or “stop word list” or even “stop list”. Stop words are basically a set of commonly used words in any language, not just English.</p><p>The reason why stop words are critical to many applications is that, if we remove the words that are very commonly used in a given language, we can focus on the important words instead. For example, in the context of a search engine, if your search query is “how to develop information retrieval applications”, If the search engine tries to find web pages that contained the terms “how”, “to” “develop”, “information”, ”retrieval”, “applications” the search engine is going to find a lot more pages that contain the terms “how”, “to” than pages that contain information about developing information retrieval applications because the terms “how” and “to” are so commonly used in the English language. If we disregard these two terms, the search engine can actually focus on retrieving pages that contain the keywords: “develop” “information” “retrieval” “applications” – which would bring up pages that are actually of interest. This is just the basic intuition for using stop words.</p><p>Stop words can be used in a whole range of tasks and here are a few:</p><ol><li>Supervised machine learning – removing stop words from the feature space</li><li>Clustering – removing stop words prior to generating clusters</li><li>Information retrieval – preventing stop words from being indexed</li><li>Text summarization- excluding stop words from contributing to summarization scores &amp; removing stop words when computing ROUGE scores</li></ol><h3 id="Types-of-Stop-Words"><a href="#Types-of-Stop-Words" class="headerlink" title="Types of Stop Words"></a>Types of Stop Words</h3><p>Stop words are generally thought to be a “single set of words”. It really can mean different things to different applications. For example, in some applications removing all stop words right from determiners (e.g. the, a, an) to prepositions (e.g. above, across, before) to some adjectives (e.g. good, nice) can be an appropriate stop word list. To some applications however, this can be detrimental. For instance, in sentiment analysis removing adjective terms such as ‘good’ and ‘nice’ as well as negations such as ‘not’ can throw algorithms off their tracks. In such cases, one can choose to use a minimal stop list consisting of just determiners or determiners with prepositions or just coordinating conjunctions depending on the needs of the application.Examples of minimal stop word lists that you can use:</p><ol><li><strong>Determiners</strong> – Determiners tend to mark nouns where a determiner usually will be followed by a noun<br>examples: the, a, an, another</li><li><strong>Coordinating conjunctions</strong> – Coordinating conjunctions connect words, phrases, and clauses<br>examples: for, an, nor, but, or, yet, so</li><li><strong>Prepositions</strong> – Prepositions express temporal or spatial relations<br>examples: in, under, towards, before</li></ol><p>In some domain specific cases, such as clinical texts, we may want a whole different set of stop words. For example, terms like “mcg” “dr” and “patient” may have less discriminating power in building intelligent applications compared to terms such as ‘heart’ ‘failure’ and ‘diabetes’. In such cases, we can also construct domain specific stop words as opposed to using a published stop word list.</p><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>对于我们的应用而言，上面的介绍已经足够了，更进一步的了解，在转载文章中查看。</p><p>这个 stop words list 可以上网找一个合适的，亦可自己制作（？）。</p><h2 id="boost-regex"><a href="#boost-regex" class="headerlink" title="boost::regex"></a>boost::regex</h2><p>项目会用到 boost::regex 库，标准库的实现有 bug (截至 12.2.0)，而 boost::regex 可以正常处理。</p><p>在 Ubuntu/Debian 上安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libboost-regex-dev</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/regex.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 示例文本</span></span><br><span class="line">    std::string text = <span class="string">&quot;&lt;description&gt;This is a description.&lt;/description&gt;\n&lt;content&gt;This is the\ncontent with new lines.&lt;/content&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义正则表达式</span></span><br><span class="line">    <span class="function">boost::regex <span class="title">re_description</span><span class="params">(<span class="string">&quot;&lt;description&gt;([\\s\\S]*?)&lt;/description&gt;&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">boost::regex <span class="title">re_content</span><span class="params">(<span class="string">&quot;&lt;content&gt;([\\s\\S]*?)&lt;/content&gt;&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义匹配结果存储对象</span></span><br><span class="line">    boost::smatch match_description;</span><br><span class="line">    boost::smatch match_content;</span><br><span class="line">    std::string description;</span><br><span class="line">    std::string content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配 &lt;description&gt; 标签的内容</span></span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_search</span>(text, match_description, re_description)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match_description.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            description = match_description[<span class="number">1</span>].<span class="built_in">str</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Description 内容: &quot;</span> &lt;&lt; description &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;没有匹配到 &lt;description&gt; 内容。&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配 &lt;content&gt; 标签的内容</span></span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_search</span>(text, match_content, re_content)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match_content.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            content = match_content[<span class="number">1</span>].<span class="built_in">str</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Content 内容: &quot;</span> &lt;&lt; content &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;没有匹配到 &lt;content&gt; 内容。&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时需要编译选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ 你的代码.cc -lboost_regex</span><br></pre></td></tr></table></figure><p>另一个使用 boost::regex 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/regex.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">findSentenceWithKeyword</span><span class="params">(<span class="type">const</span> std::string&amp; content, <span class="type">const</span> std::string&amp; keyword)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建正则表达式</span></span><br><span class="line">    std::string regexPattern = <span class="string">&quot;(.&#123;0,13&#125;)(&quot;</span> + keyword + <span class="string">&quot;)(.&#123;0,13&#125;)&quot;</span>;</span><br><span class="line">    <span class="function">boost::regex <span class="title">pattern</span><span class="params">(regexPattern)</span></span>;</span><br><span class="line"></span><br><span class="line">    boost::smatch match;</span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_search</span>(content, match, pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;...&quot;</span> + match.<span class="built_in">str</span>(<span class="number">1</span>) + match.<span class="built_in">str</span>(<span class="number">2</span>) + match.<span class="built_in">str</span>(<span class="number">3</span>) + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string content = <span class="string">&quot;这是一个简单的例子，内容中包含了一个关键字。The keyword is important. 关键字非常重要。&quot;</span>;</span><br><span class="line">    std::string keyword = <span class="string">&quot;keyword&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::string result = <span class="built_in">findSentenceWithKeyword</span>(content, keyword);</span><br><span class="line">    <span class="keyword">if</span> (!result.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Found sentence: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Keyword not found in the content.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路草图"><a href="#思路草图" class="headerlink" title="思路草图"></a>思路草图</h2><p><img src="https://s2.loli.net/2024/06/25/eopr7gisfPCuYF9.jpg" alt="76-16.jpg"></p><p><img src="https://s2.loli.net/2024/06/25/a2ICjyQnEvHs1ZJ.jpg" alt="76-17.jpg"></p><p><img src="https://s2.loli.net/2024/06/25/yT2xuPg5tkW7N4J.jpg" alt="76-18.jpg"></p><h2 id="离线部分"><a href="#离线部分" class="headerlink" title="离线部分"></a>离线部分</h2><p>词频统计、编制索引不提。值得注意的是处理中文时会需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">trim</span><span class="params">(<span class="type">const</span> string&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> first = str.<span class="built_in">find_first_not_of</span>(<span class="string">&quot; \n\r\t&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> last = str.<span class="built_in">find_last_not_of</span>(<span class="string">&quot; \n\r\t&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (first == string::npos || last == string::npos) ? <span class="string">&quot;&quot;</span> : str.<span class="built_in">substr</span>(first, last - first + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编制网页库时，需要根据不同的 xml 文件格式编写一些特别处理的代码，有点麻烦。时不时遇到 core dump ，这大概是指针空了，需要 gdb 看看哪里出了问题，有的时候还需要深入到 xml 文件里看看，这大概率是这个 xml 文件写的很飘。</p><p>另外，编制网页库时还会需要 Simhash 去重，直接使用别人的代码：<a href="https://github.com/yanyiwu/simhash">yanyiwu/simhash</a> 。关于 Simhash 的原理（若下面这个链接挂了，可以去 <a href="https://archive.ph/">https://archive.ph/</a> 查找）：</p><p><a href="https://www.cnblogs.com/maybe2030/p/5203186.html">https://www.cnblogs.com/maybe2030/p/5203186.html</a></p><p>接着是编写偏移库，会用到 <code>tellg()</code> 之类的函数。</p><p>最后编写倒排索引，使用 TF-IDF 算法。</p><p>该算法的目标是：</p><ul><li>某词在文档中的出现次数越多，权重越大</li><li>在整个网页库中的出现次数越多，权重越小</li></ul><p>定义：<br>$TF:$  Term Frequency 某个词在文章中出现的次数<br>$DF:$ Document Frequency 包含该词语的文档数量<br>$IDF:$ Inverse Document Frequency<br>$N: $ 文档的总数</p><script type="math/tex; mode=display">IDF = \log _2(N/(DF+1))</script><p>词语的权重为：</p><script type="math/tex; mode=display">w = TF \cdot IDF</script><p>一篇文档包含多个词语，其权重为 w1, w2, …, wn，对这些权重系数归一化：</p><script type="math/tex; mode=display">w^{'}_i = \frac{w_i}{\sqrt{\sum_{k=1}^{n} w^2_k}}</script><h2 id="在线部分"><a href="#在线部分" class="headerlink" title="在线部分"></a>在线部分</h2><p>首先，我们已经有了 Reactor 模型（V5）的代码，直接把它拿过来，就是一个 echo 服务器，添加业务逻辑的代码，就可以是想要的 SearchEngine server 代码了。</p><p>业务逻辑有两块，关键词推荐和网页搜索。server 要怎么知道 client 发过来的请求是关键字推荐还是网页搜索呢？可见，我们需要定义消息的格式。简单起见，消息分为如下两种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 somemsg   # 关键字推荐，somemsg 为具体内容</span><br><span class="line">2 somemsg   # 网页搜索</span><br><span class="line"># 其他格式，服务器应该返回 &quot;format error !&quot;</span><br></pre></td></tr></table></figure><h3 id="关键字推荐"><a href="#关键字推荐" class="headerlink" title="关键字推荐"></a>关键字推荐</h3><p>关键字搜索应该怎么做呢？</p><p>我们先额外考虑一下缓存的情况。如果 client 发过来的查询已经在缓存中，直接将缓存中的数据取出。若不在缓存中，走完流程后还需要将这次查询和查询的结果保存在缓存中。</p><p>纯英文的情况，比如“hello”，我们可以把字符串拆开，<code>h</code> <code>e</code> <code>l</code> <code>o</code> ，对于每一个字符，在索引库（索引是词频库的索引）里面查找其对应的集合，得到包含这个字母的单词在词频库里面的行号。对这些集合取并集。</p><p>为什么是并集呢？因为我们要求的是与 hello 相似的单词，这允许出现这四个字母以外的字母。我们可以先取并集得到一个很大的集合（里面是词频库的行号），然后根据这个行号得到具体的单词和频率。这样得到的单词至少有一个字母和 hello 相同（打倒一大片，拾取一小撮）。</p><p>我们仍然要求得到的结果和 hello 有些相似，相似程度由最短编辑距离衡量。过滤掉相似度不足的单词（不妨设编辑距离大于 3 就认为不相似），剩下的就是合法的单词和词频。我们会得到如下的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;单词, dist(编辑距离), freq(词频)&#125;</span><br></pre></td></tr></table></figure><p>这种形式的数据可能很多，而我们只需要五六个就差不多了。为此需要评价到底哪个单词更好，我们可以将这种形式的数据放在 struct 中，然后定义 <code>&lt;</code> : </p><ol><li>dist 小的更相似。这符合直觉。</li><li>dist 相同的情况下，freq 越大，就提高该单词的优先级。</li></ol><p>定义了结构体的比较方法之后，就可以把这些数据放在优先队列中，这样取数据的时候只要 pop 一定数量的元素即可。</p><p>那么，中文的情况呢？其实也是一样的做法。</p><p>中英文混合推荐呢？将中文和英文分开，分别做一遍中文和英文的关键字推荐流程即可。</p><h3 id="网页搜索"><a href="#网页搜索" class="headerlink" title="网页搜索"></a>网页搜索</h3><p>同样先考虑一下缓存的情况。</p><p>我们如法炮制，按照关键字推荐的方法做缓存，这样会有什么问题呢？</p><p>假设我们有两条查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 cat</span><br><span class="line">2 cat</span><br></pre></td></tr></table></figure><p>因为我们将数据放在缓存中的时候，是将 cat 和对应的结果放进去的，这样没法区分开。我们改变放入缓存的策略：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;useRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">findInCache</span><span class="params">(<span class="type">const</span> string&amp; A, string flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pRedis-&gt;<span class="built_in">get</span>(<span class="string">&quot;flAg&quot;</span>+flag+<span class="string">&quot;xD&quot;</span>+A);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putInCache</span><span class="params">(<span class="type">const</span> string&amp; A, <span class="type">const</span> string&amp; B, string flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pRedis-&gt;<span class="built_in">set</span>(<span class="string">&quot;flAg&quot;</span>+flag+<span class="string">&quot;xD&quot;</span>+A, B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理查询请求时，对于 client 发来的搜索词，将它们视为一篇文档 X，计算出每个关键词的权重系数，这就要先进行 jieba 分词。</p><p>此处的权重系数，并不能完全按照 TF-IDF 算法。因为这里词语的权重仅是在该查询语句中的权重，计算词频 Wi 即可，然后归一化：</p><script type="math/tex; mode=display">W_i^{'} = \frac{W_i}{\sqrt{\sum W_k^2}}</script><p>将其组成一个向量(w1, w2, …,wn)，该向量作为基准向量 Base .</p><p>通过倒排索引表查找包含所有关键字的网页，只要其中有一个查询词不在索引表中，就认为没有找到相关的网页。在这个过程中，不仅要把一个个词语对应的 docid 放在放在 <code>vector&lt;set&lt;int&gt;&gt;</code> 中，还要将某个 docid 里某个分词的 TF-IDF 权重放在 <code>map&lt;pair&lt;int, string&gt;, double&gt;</code> 中。</p><p>将得到的 set 取交集，对于每一篇文章，计算它与 base 的余弦相似度。</p><p>将搜索结果填充标题、链接、摘要，并按余弦相似度排序。</p><p>如何生成摘要信息？见 boost::regex 部分的代码。</p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>没什么可谈的。</p><p>代码链接：□□□□□□□□（此处指向了我的入世账号）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并发服务器方案&quot;&gt;&lt;a href=&quot;#并发服务器方案&quot; class=&quot;headerlink&quot; title=&quot;并发服务器方案&quot;&gt;&lt;/a&gt;并发服务器方案&lt;/h2&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;https://drive.goo</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://dropsong.github.io/tags/C/"/>
    
    <category term="搜索引擎" scheme="https://dropsong.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>高中物理讲义</title>
    <link href="https://dropsong.github.io/posts/85db1ce6.html"/>
    <id>https://dropsong.github.io/posts/85db1ce6.html</id>
    <published>2024-05-11T07:54:22.000Z</published>
    <updated>2024-05-17T17:32:29.265Z</updated>
    
    <content type="html"><![CDATA[<p>非常惭愧地又带了一个高中生。</p><p>在之前的基础上重新整理了讲义，并添加了新内容。</p><p>实际上教学中会有更多例题，但这篇文章主要是给我自己串知识点的，简单的题目我应该可以推出来，因此不放了。</p><p>持续更新中…</p><h2 id="运动的描述"><a href="#运动的描述" class="headerlink" title="运动的描述"></a>运动的描述</h2><h3 id="知识点梳理"><a href="#知识点梳理" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><p><strong>质点</strong>：理想模型，忽略大小形状，具有质量。</p><ul><li>具体问题具体分析</li></ul><p>例题：</p><p><img src="https://bu.dusays.com/2024/05/09/663cc3daedf7f.jpg" alt="75-1.jpg"></p><p><strong>参考系</strong>：描述物体运动时选定的参考。</p><p><strong>位移</strong>：矢量，由起点指向终点，大小和方向。</p><p><strong>速度</strong>：位移与发生该位移的时间的比。 $v=\Delta x/\Delta t$</p><ul><li>$1m/s=3.6km/h$</li><li>$v-t$图像，与$x-t$图像的关系，几何意义</li></ul><p><img src="https://bu.dusays.com/2024/05/09/663cc5ab4fc24.jpg" alt="75-2.jpg"></p><p>v-t 图像 直线/曲线 下方面积就是位移。</p><p>例题：</p><p><img src="https://bu.dusays.com/2024/05/09/663cc878e434a.jpg" alt="75-3.jpg"></p><p><strong>平均速度</strong>：$\overline{v}=\dfrac{\Delta x}{\Delta t}$  $\quad$ <strong>瞬时速度</strong>：$v=\dfrac{\Delta x}{\Delta t}(\Delta t \to 0)$</p><p>例题：</p><p><img src="https://bu.dusays.com/2024/05/09/663cc930dd73b.jpg" alt="75-4.jpg"></p><p><strong>加速度</strong>：速度的变化率。 $a=\Delta v/\Delta t$</p><ul><li>加速度具有方向，在未声明正方向的题目中需自行声明。</li><li>$v-t$图像中的加速度。</li></ul><p><img src="https://bu.dusays.com/2024/05/09/663cc9f19db64.jpg" alt="75-5.jpg"></p><p>速度与加速度的关系：</p><p><img src="https://bu.dusays.com/2024/05/09/663ccae91ef0a.jpg" alt="75-6.jpg"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://bu.dusays.com/2024/05/09/663ccb68e9c21.jpg" alt="75-7.jpg"></p><h2 id="匀变速直线运动"><a href="#匀变速直线运动" class="headerlink" title="匀变速直线运动"></a>匀变速直线运动</h2><h3 id="知识点梳理-1"><a href="#知识点梳理-1" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>匀变速直线运动：<strong>加速度不变的直线运动</strong>。</p><p>在辨析题中注意区分，例如圆周运动、平抛运动可以作为很多反例。</p><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>通过 $v-t$ 图像理解 <strong>$x=\dfrac{1}{2}at^2+v_0t$</strong> 的导出：</p><p><img src="https://bu.dusays.com/2024/05/09/663ccda5bc617.jpg" alt="75-8.jpg"></p><p>并通过类似方法理解匀变速运动中中点时刻速度等于平均速度（自行完成）。</p><p>联立 $x=\dfrac{1}{2}at^2+v_0t$ 与 $v=at+v_0$ 得到：</p><p><strong><script type="math/tex">v^2-v_0^2=2ax</script></strong></p><h4 id="重要推论"><a href="#重要推论" class="headerlink" title="重要推论"></a>重要推论</h4><script type="math/tex; mode=display">\Delta x=aT^2</script><p>含义：匀变速直线运动中，任意相等的连续时间间隔 $T$ 内位移之差为定值 $aT^2$</p><p>拓展（方便理解）：对于一个符合二次函数的数列，例如：</p><script type="math/tex; mode=display">1,4,9,16,25,... \quad (1)</script><p>逐项作差：</p><script type="math/tex; mode=display">3,5,7,9,\quad ...(2)</script><p>对 $(2)$ 继续作差：</p><script type="math/tex; mode=display">2,2,2,\quad ...(3)</script><p>将得到定值。</p><p>这个规律对任一以二次函数为数列通项公式的数列都成立。</p><p>其中数列 (1) 可理解为位移，数列 (2) 理解为速度。而数列 (3) 中的数与二次函数的二次项系数有关，在匀变速直线运动中与加速度有关。</p><p><strong>推论 $\Delta x=aT^2$ 实质上与此类似，</strong> 在 $x-t$ 图像（$x=\dfrac{1}{2}at^2+v_0t$ 为二次函数）上等距取点，算出函数值作差（第一次作差）得到等间隔内的位移,将此位移继续作差（第二次作差）得到定值。</p><p><strong>拓展（小车实验的基础）</strong>：第 $m$ 个时间 $T$ 内与第 $n$ 个时间 $T$ 内的位移差：</p><script type="math/tex; mode=display">\Delta x=x_m-x_n=(m-n)aT^2</script><h4 id="重要的比例式"><a href="#重要的比例式" class="headerlink" title="重要的比例式"></a>重要的比例式</h4><p><strong>初速度为 0 的</strong>匀加速直线运动中几个重要的比例式：</p><ul><li>时间等分</li><li>位移等分<ul><li>前 nx </li><li>第 n 个 x</li></ul></li></ul><p><strong>时间等分</strong>：第一个 T 内、第二个 T 内、第三个 T 内、… 的位移之比为 1 : 3 : 5 : …</p><p><img src="https://bu.dusays.com/2024/05/09/663cd1324faf9.jpg" alt="75-9.jpg"></p><p><strong>位移等分（前 nx）</strong>：通过前$x$，前$2x$，$…$,前$nx$位移时的<strong>速度之比</strong>为：</p><script type="math/tex; mode=display">v_1:v_2:v_3:...:v_n=1:\sqrt 2:\sqrt 3:...:\sqrt n</script><p>推导方法，由 $v^2-v_0^2=2ax$ 导出：</p><script type="math/tex; mode=display">v^2-v^2_0=2ax</script><script type="math/tex; mode=display">x=\frac{1}{2a}(v^2-v_0^2)=\frac{v^2}{2a}</script><script type="math/tex; mode=display">\frac{2x}{x}=2=\frac{v_2^2}{v_1^2}</script><script type="math/tex; mode=display">\frac{v_2}{v_1}=\sqrt{2}</script><script type="math/tex; mode=display">\frac{v_3}{v_1}=\sqrt{3}</script><script type="math/tex; mode=display">\cdots</script><p><strong>位移等分（第 n 个 x）</strong>：通过第一个 $x$，第二个 $x$，$…$，第 $n$ 个 $x$ 所用<strong>时间之比</strong>：</p><script type="math/tex; mode=display">t_1:t_2:t_3:...:t_n=1:(\sqrt 2-1):(\sqrt 3-\sqrt 2):...:(\sqrt n-\sqrt{n-1})</script><p>推导方法：因为初速度为零，速度正比于时间。至此，由 <strong>位移等分（前 nx）</strong> 的公式不难得到。</p><h4 id="自由落体、竖直上抛"><a href="#自由落体、竖直上抛" class="headerlink" title="自由落体、竖直上抛"></a>自由落体、竖直上抛</h4><p><strong>自由落体运动</strong>：匀变速直线运动的一种特例，$a=g$，$v_0=0$ .</p><script type="math/tex; mode=display">v=gt,x=\dfrac{1}{2}gt^2</script><p><strong>竖直上抛运动</strong>：仍然是匀变速直线运动的一种</p><h4 id="实验-小车测加速度"><a href="#实验-小车测加速度" class="headerlink" title="实验 小车测加速度"></a>实验 小车测加速度</h4><p><strong>实验 - 小车速度随时间的变化规律</strong> 的注意点:</p><ul><li>交流电频率 $50Hz$ ，打点计时器打出的两点时间间隔为$0.02s$</li><li>小车释放位置：靠近打点计时器</li><li>先接通电源打点，后释放小车</li><li>改变钩码数量，重复实验</li><li><strong>实验方案创新</strong>，频闪照相，等效替代等，通过 $v-t$ 图像理解剪下纸带的长度</li></ul><p>一种常见的数据处理方法：</p><script type="math/tex; mode=display">a=\frac{\Delta x}{(m-n)T^2}</script><script type="math/tex; mode=display">a=\frac{x_4-x_1}{3T^2}=\frac{x_5-x_2}{3T^2}=\frac{x_6-x_3}{3T^2}</script><script type="math/tex; mode=display">a=\frac{x_6+x_5+x_4-(x_3+x_2+x_1)}{9T^2}</script><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>画图分析，列方程，解方程：</p><p><img src="https://bu.dusays.com/2024/05/09/663ce0ab4fc03.jpg" alt="75-10.jpg"></p><p><img src="https://bu.dusays.com/2024/05/09/663ce4459f9f0.jpg" alt="75-11.jpg"></p><p>活用 v-t 图像：</p><p><img src="https://bu.dusays.com/2024/05/09/663ce5e2e0e72.jpg" alt="75-12.jpg"></p><p><img src="https://bu.dusays.com/2024/05/09/663ce812931bf.jpg" alt="75-13.jpg"></p><h2 id="力"><a href="#力" class="headerlink" title="力"></a>力</h2><h3 id="重力-弹力-摩檫力"><a href="#重力-弹力-摩檫力" class="headerlink" title="重力 弹力 摩檫力"></a>重力 弹力 摩檫力</h3><h4 id="重力"><a href="#重力" class="headerlink" title="重力"></a>重力</h4><p>定义：由于地球的吸引而使物体受到的力。</p><script type="math/tex; mode=display">G=mg</script><p><strong>注意</strong>：在地球表面附近可近似认为重力等于万有引力。 严格来说，只有在两极和赤道处，重力的方向才指向地心。其余位置，万有引力会分解为两个力：使物体随着地球自转的向心力 $F_{向}$ 和 $mg$ .</p><p>方向：竖直向下。 注意：竖直向下是和水平面垂直，不一定指向地心。</p><p>重心：因为物体的各部分都受到重力作用，在研究问题是可认为重力作用集中于物体的一点，即重心。<strong>质量分布均匀、形状规则的物体的重心在其几何中心上</strong>。</p><h4 id="弹力"><a href="#弹力" class="headerlink" title="弹力"></a>弹力</h4><p>定义：形变的物体有恢复原状的趋势，对与之接触的物体产生力的作用，这种力叫做弹力。</p><p><strong>产生条件</strong>：物体相互接触且发生<strong>弹性形变</strong>。</p><p>方向：与作用在物体上使之发生形变的外力方向相反。</p><p>常见的弹力及其方向：</p><p><img src="https://bu.dusays.com/2024/05/17/664724ea8f509.jpg" alt="75-14.jpg"></p><p><strong>重要</strong>：接触面、绳、杆上的弹力可以突变。</p><h4 id="胡克定律"><a href="#胡克定律" class="headerlink" title="胡克定律"></a>胡克定律</h4><p>内容：在弹性限度内（弹簧发生弹性形变），弹力 $F$ 的大小和弹簧长度的变化量 $x$ 成正比。</p><script type="math/tex; mode=display">F=kx</script><p>其中 $k$ 称为劲度系数。</p><h4 id="滑动摩檫力"><a href="#滑动摩檫力" class="headerlink" title="滑动摩檫力"></a>滑动摩檫力</h4><p>定义：两个相互接触的物体，当它们相对滑动时，接触面上会产生阻碍这种相对运动的力，即滑动摩擦力。</p><p>产生的条件：</p><ol><li>接触面粗糙</li><li>两个物体互相接触并挤压（即接触处有弹力）</li><li>两个物体相对运动</li></ol><p>方向：沿着接触面，与相对运动的方向相反。</p><p>大小：</p><script type="math/tex; mode=display">F_f=\mu F_{压}</script><p>其中，$\mu$ 是动摩擦因数，与两个物体的材料和接触面的粗糙程度有关，与接触面的面积和运动速度无关。</p><h4 id="静摩檫力"><a href="#静摩檫力" class="headerlink" title="静摩檫力"></a>静摩檫力</h4><p>定义：相互接触的两个物体只有相对运动的趋势（并没有发生相对运动）时的摩檫力。</p><p>产生条件：</p><ol><li>接触面粗糙</li><li>接触处有弹力</li><li>两物体间有相对运动的趋势</li></ol><p>大小（介于 0 和最大静摩擦力之间）：</p><script type="math/tex; mode=display">0<F\le F_{max}</script><p>一点可有可无的细节补充：</p><ol><li>最大静摩擦力的大小和正压力近似成正比。</li><li>$F_{max}$ 略大于滑动摩檫力。在解题中，如无特别说明，可认为两者相等。</li></ol><h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><p>在两个正交（互相垂直）的方向上分解力，列出等式，联立方程：</p><p><img src="https://s2.loli.net/2024/05/17/X1DrWoFPVqZcRCi.jpg" alt="75-15.jpg"></p><p><img src="https://bu.dusays.com/2024/05/17/664735c3ee96c.jpg" alt="75-16.jpg"></p><p><img src="https://s2.loli.net/2024/05/17/5FypAxw1jz6Q2OP.jpg" alt="75-17.jpg"></p><p>考虑如下的模型：</p><center><?xml version="1.0" standalone="yes"?><svg xmlns="http://www.w3.org/2000/svg" width="795" height="411"><path style="fill:#ffffff; stroke:none;" d="M0 0L0 411L795 411L795 0L0 0z"/><path style="fill:#fcdbdd; stroke:none;" d="M365 37C368.163 38.3274 371.586 37.9996 375 38C371.837 36.6726 368.414 37.0004 365 37z"/><path style="fill:#f79396; stroke:none;" d="M365 38L365 55C366.883 50.5135 366.883 42.4865 365 38z"/><path style="fill:#f2555b; stroke:none;" d="M366 38C368.82 39.1946 371.993 39.2818 375 40C372.727 37.3988 369.306 38.0026 366 38z"/><path style="fill:#fde2e3; stroke:none;" d="M375.333 38.6667C375.278 38.7222 375.222 39.7777 375.667 39.3333C375.722 39.2779 375.778 38.2221 375.333 38.6667z"/><path style="fill:#ef343b; stroke:none;" d="M366 39L366 55C366.985 52.6685 366.981 50.5432 367 48L374 48C369.62 45.9498 367.404 45.3025 367 40L374 40C371.387 38.9023 368.836 39.0072 366 39z"/><path style="fill:#f3676c; stroke:none;" d="M367 40L367 46C367.951 43.7147 367.951 42.2852 367 40z"/><path style="fill:#fbccce; stroke:none;" d="M368 40C370.332 40.9845 372.457 40.9813 375 41C372.668 40.0155 370.543 40.0187 368 40z"/><path style="fill:#fbcfd1; stroke:none;" d="M383 42C384.248 42.6848 384.548 42.7488 386 43C384.752 42.3152 384.452 42.2512 383 42z"/><path style="fill:#fcd7d9; stroke:none;" d="M377 43L377 56C378.591 52.2087 378.591 46.7913 377 43z"/><path style="fill:#f4686d; stroke:none;" d="M378.667 43.3333C378.222 43.7777 379.278 43.7222 379.333 43.6667C379.778 43.2222 378.722 43.2778 378.667 43.3333z"/><path style="fill:#fbd2d3; stroke:none;" d="M380.667 43.3333C380.222 43.7777 381.278 43.7223 381.333 43.6667C381.778 43.2222 380.722 43.2778 380.667 43.3333z"/><path style="fill:#f03f46; stroke:none;" d="M382 43L382 45C387.465 46.6591 386.996 50.9962 387 56L389 56C389 49.5684 389.878 43.601 382 43z"/><path style="fill:#fac8ca; stroke:none;" d="M387 43L388 44L387 43z"/><path style="fill:#f03f46; stroke:none;" d="M378 44L378 56L380 56C380.011 51.9848 380.666 47.9333 380 44L378 44z"/><path style="fill:#f3676c; stroke:none;" d="M380 44C380.545 45.6352 380.365 45.455 382 46L382 44L380 44z"/><path style="fill:#f8a5a8; stroke:none;" d="M385 45L386 46L385 45z"/><path style="fill:#f3676c; stroke:none;" d="M368 46C370.052 46.8742 371.747 46.9528 374 47C371.948 46.1258 370.253 46.0472 368 46z"/><path style="fill:#f9b0b3; stroke:none;" d="M374.333 46.6667C374.278 46.7223 374.222 47.7777 374.667 47.3333C374.722 47.2779 374.778 46.2221 374.333 46.6667M386 46L386 56C387.346 52.7929 387.346 49.2071 386 46z"/><path style="fill:#fcd7d9; stroke:none;" d="M389 46L389 56C390.346 52.7929 390.346 49.207 389 46z"/><path style="fill:#f9b0b3; stroke:none;" d="M380 47L380 56C381.256 53.0058 381.256 49.9942 380 47z"/><path style="fill:#f3676c; stroke:none;" d="M367 48L367 55C368.059 52.4657 368.059 50.5343 367 48z"/><path style="fill:#fbccce; stroke:none;" d="M368 48C370.052 48.8742 371.747 48.9528 374 49C371.948 48.1258 370.253 48.0472 368 48z"/><path style="fill:#ed1c24; stroke:none;" d="M356 66C348.033 83.0358 342.214 101.403 335.576 119C330.637 132.096 324.16 145.349 321 159L270 143C271.098 142.142 279.669 136.021 274.663 134.874C272.419 134.36 269.781 136.338 268.001 137.429C260.272 142.167 260.967 146.181 263.951 153.999C264.702 155.968 265.567 159.632 268.073 160.079C273.342 161.018 267.808 149.534 267 148C279.52 150.896 291.699 155.574 304 159.28C308.954 160.773 316.144 161.648 319.397 166.133C321.651 169.243 320.843 173.409 321.09 177C321.641 185.047 322 192.907 322 201C322 229.315 325 257.685 325 286L319.975 281.694C318.985 280.845 318.04 279.903 317.001 279.113C315.256 277.787 309.298 275.121 311.176 280.059C312.999 284.853 319.206 288.846 323 292.03C324.51 293.298 326.5 295.406 328.701 295.079C330.833 294.761 332.014 291.593 333.299 290.166C335.985 287.181 340.165 285.261 342.338 281.849C346.358 275.536 336.999 279.698 335.025 281.19L330 285C330 253.012 327.012 221.019 327 189C326.996 179.594 324.72 169.824 326.033 160.424C326.898 154.232 330.378 147.827 332.576 142L345.576 108L356.576 79C358.381 74.2531 359.614 68.8374 363 65C363.081 66.7499 363.68 75.2599 367.437 72.8241C369.28 71.6291 368.42 68.7004 368.116 66.9992C367.536 63.7604 370.072 55.1302 364.941 55.7052C360.935 56.1542 352.216 60.468 349.662 63.618C345.86 68.3078 354.142 66.6575 356 66z"/><path style="fill:#fbcfd1; stroke:none;" d="M378.667 56.3333C378.222 56.7777 379.278 56.7222 379.333 56.6667C379.778 56.2222 378.722 56.2779 378.667 56.3333z"/><path style="fill:#fcd2d3; stroke:none;" d="M387.667 56.3333C387.222 56.7777 388.278 56.7222 388.333 56.6667C388.778 56.2222 387.722 56.2779 387.667 56.3333z"/><path style="fill:#000000; stroke:none;" d="M377 231C378.979 222.669 383.478 214.849 386.85 207C394.036 190.27 401.664 173.73 408.85 157C411.436 150.978 414.058 144.966 416.769 139C417.847 136.628 420.112 133.055 419.211 130.329C418.501 128.179 415.814 128.247 413.995 127.833C409.932 126.908 405.911 125.376 402 123.947C389.371 119.332 376.739 114.636 364 110.333C358.029 108.315 352.335 105.553 346 105L345 109C357.227 114.42 370.396 118.206 383 122.692C392.889 126.212 402.761 130.631 413 133C410.531 141.638 405.994 149.77 402.424 158C395.908 173.022 389.424 188.072 382.694 203C378.923 211.367 374.124 220.059 372 229C358.288 222.922 342.621 217.383 328 214C328.703 222.835 342.928 224.309 350 226.667C372.689 234.231 395.634 241.721 418 250.192C483.187 274.881 550.146 295.482 616 318.344C635.971 325.277 656.145 331.798 676 339.053C689.278 343.905 704.027 350.936 718 353C710.849 355.114 702.427 354 695 354L652 354L510 354L44 354L44 121C59.6517 127.938 76.7882 132.479 93 138.003C122.687 148.118 152.451 158.176 182 168.692C195.636 173.545 209.332 178.237 222.999 183.004C226.189 184.116 228.986 186.392 232.17 187.311C244.449 190.856 256.821 194.357 269 198.692C286.664 204.979 304.726 212.772 323 217C322.315 208.184 309.036 207.099 302 204.656C280.362 197.144 258.368 190.243 237 182C244.673 159.318 254.904 137.239 263.8 115C267.642 105.397 273.242 95.2078 275 85C297.757 88.361 318.23 103.637 341 107L342 102C324.336 97.9135 307.161 89.8497 290 83.9969C286.122 82.6745 275.463 76.5016 271.628 79.1211C269.913 80.293 270.176 83.2164 269.742 85.0008C268.577 89.7894 266.227 94.4329 264.4 99C256.792 118.018 249.35 137.113 241.424 156C239.062 161.631 236.949 167.365 234.596 172.999C233.48 175.674 232.356 178.929 228.945 178.922C223.031 178.91 215.482 174.884 210 172.808C200.104 169.06 189.914 166.131 180 162.424C149.68 151.089 118.679 140.994 88 130.667C76.308 126.732 64.7004 122.567 53 118.667C50.0512 117.684 43.5681 114.152 40.6034 116.121C37.7457 118.019 39 125.086 39 128L39 163L39 306L39 345C39 348.471 37.4933 356.515 41.3179 358.397C44.6743 360.048 50.3482 359 54 359L84 359L192 359L577 359L697 359L726 359C728.462 359 734.26 359.979 735.824 357.451C737.069 355.441 734.357 354.033 732.941 353.363C728.188 351.114 722.977 349.659 718 348C696.264 340.755 674.736 332.912 653 325.667C593.509 305.836 534.08 285.335 475 264.308C455.407 257.335 435.532 251.084 416 243.947C403.66 239.438 389.98 232.944 377 231z"/><path style="fill:#ffffff; stroke:none;" d="M275 85C272.479 94.2187 268.149 103.128 264.6 112C258.734 126.665 253.014 141.399 246.989 156C243.483 164.496 239.125 173.033 237 182C251.856 189.828 270.055 194.018 286 199.333C297.729 203.243 309.729 209.188 322 211C322 199.625 322.246 188.314 321.17 177C320.844 173.571 321.758 169.242 319.972 166.133C317.457 161.755 310.423 160.871 306 159.576C293.203 155.828 280.203 149.95 267 148C267.686 149.778 272.178 158.555 268.697 159.369C265.967 160.007 264.6 154.71 263.951 153C261.204 145.77 261.029 142.453 268.001 138.056C269.622 137.033 272.448 134.811 274.534 135.512C278.098 136.711 270.832 141.423 270 142C274.33 145.817 280.599 146.618 286 148.344C297.554 152.036 309.179 156.265 321 159C326.67 141.605 335.784 124.793 340 107C327.265 102.849 314.548 98.2666 302 93.5756C293.448 90.3783 284.137 85.7978 275 85M345 109C340.179 119.308 336.593 130.352 332.576 141C330.309 147.012 326.756 153.603 325.894 160C324.7 168.867 326.891 178.145 326.996 187C327.068 192.999 326.93 199.001 327.004 205C327.038 207.744 326.901 211.105 328.858 213.298C331.689 216.469 338.109 217.37 342 218.667C352.037 222.012 361.937 225.726 372 229C380.019 205.45 392.2 182.873 402.001 160C405.722 151.317 411.34 142.34 413 133C390.144 125.563 367.858 116.438 345 109M44 121L44 354L718 354C707.582 347.444 693.534 345.161 682 340.947C653.522 330.541 624.564 321.474 596 311.308C538.536 290.856 480.623 271.66 423 251.656C391.565 240.743 360.099 227.762 328 219C328 241.032 329.998 263.011 330 285C332.738 283.603 338.436 277.701 341.534 278.591C343.647 279.198 341.492 281.937 340.793 282.716C338.311 285.484 334.924 287.269 332.545 290.165C331.486 291.454 330.575 294.059 328.701 294.369C324.57 295.053 316.578 285.811 314.078 282.997C313.107 281.904 311.261 280.14 311.631 278.466C312.323 275.335 318.221 281.059 318.995 281.701C320.922 283.3 322.883 284.676 325 286C325 269.681 323.414 253.3 323.015 237C322.894 232.096 325.028 221.777 321.972 217.702C318.727 213.375 307.929 212.059 303 210.192C284.883 203.33 266.251 197.804 248 191.308C242.761 189.443 237.338 188.53 232.17 186.809C225.088 184.452 218.151 180.827 211 178.344C155.429 159.052 99.9382 139.202 44 121z"/><path style="fill:#fababc; stroke:none;" d="M214 143C215.506 143.683 216.315 143.826 218 144C216.494 143.317 215.685 143.174 214 143z"/><path style="fill:#f8acae; stroke:none;" d="M213 144L214 145L213 144z"/><path style="fill:#f03f46; stroke:none;" d="M210 150L210 152C212.474 155.266 212 159.01 212 163L214 163C214 157.03 212.455 149.451 217 145C213.359 144.235 212.172 147.529 210 150z"/><path style="fill:#f57d82; stroke:none;" d="M217 144L215 145C216.482 145.791 217.796 145.87 217 144z"/><path style="fill:#fabdc0; stroke:none;" d="M212 145L213 146L212 145z"/><path style="fill:#fddddf; stroke:none;" d="M211 146L211 150C211.71 148.24 211.71 147.759 211 146z"/><path style="fill:#f37277; stroke:none;" d="M214 146L215 147L214 146z"/><path style="fill:#f9b1b4; stroke:none;" d="M214 147L214 150C214.696 148.446 214.696 148.554 214 147z"/><path style="fill:#fde2e3; stroke:none;" d="M215.667 149.333C215.222 149.778 216.278 149.722 216.333 149.667C216.778 149.222 215.722 149.278 215.667 149.333z"/><path style="fill:#fbd2d3; stroke:none;" d="M209.333 150.667C209.278 150.722 209.222 151.778 209.667 151.333C209.722 151.278 209.778 150.222 209.333 150.667z"/><path style="fill:#f14b51; stroke:none;" d="M214 150L214 152L217 152L217 150L214 150z"/><path style="fill:#f9b3b6; stroke:none;" d="M217.333 150.667C217.278 150.722 217.222 151.778 217.667 151.333C217.722 151.278 217.778 150.222 217.333 150.667z"/><path style="fill:#f8a9ac; stroke:none;" d="M210.667 152.333C210.222 152.778 211.278 152.722 211.333 152.667C211.778 152.222 210.722 152.278 210.667 152.333z"/><path style="fill:#f9b1b4; stroke:none;" d="M214 152L214 163C215.44 159.569 214.67 156.075 217 153C215.752 152.315 215.452 152.251 214 152z"/><path style="fill:#fcd7d9; stroke:none;" d="M211 153L211 163C212.346 159.793 212.346 156.207 211 153z"/><path style="fill:#fbcfd0; stroke:none;" d="M212.667 163.333C212.222 163.778 213.278 163.722 213.333 163.667C213.778 163.222 212.722 163.278 212.667 163.333z"/><path style="fill:#fde2e3; stroke:none;" d="M357 308C358.248 308.685 358.548 308.749 360 309C358.752 308.315 358.452 308.251 357 308z"/><path style="fill:#fbd1d2; stroke:none;" d="M362 308C363.248 308.685 363.548 308.749 365 309C363.752 308.315 363.452 308.251 362 308z"/><path style="fill:#fbd0d1; stroke:none;" d="M370 308C371.248 308.685 371.548 308.749 373 309C371.752 308.315 371.452 308.251 370 308z"/><path style="fill:#fbcfd1; stroke:none;" d="M383 308C384.506 308.683 385.315 308.826 387 309C385.494 308.317 384.685 308.174 383 308z"/><path style="fill:#f3676c; stroke:none;" d="M357 309L357 322C358.673 318.012 357.984 313.267 359 309L357 309z"/><path style="fill:#f8a8ab; stroke:none;" d="M359 309L360 310L359 309z"/><path style="fill:#f1585e; stroke:none;" d="M359 311C361.45 311.174 362.695 310.906 365 310C362.492 309.111 361.185 309.505 359 311z"/><path style="fill:#f58185; stroke:none;" d="M365 309L366 310L365 309z"/><path style="fill:#f14f55; stroke:none;" d="M367 314C369.633 312.159 371.865 311.576 375 311C371.254 308.222 368.298 309.723 367 314z"/><path style="fill:#fac9cb; stroke:none;" d="M381 309L382 310L381 309z"/><path style="fill:#f14e54; stroke:none;" d="M382 309C384.37 310.927 385.959 311.252 389 311C386.686 309.409 384.81 309.142 382 309z"/><path style="fill:#fababc; stroke:none;" d="M387.667 309.333C387.222 309.778 388.278 309.722 388.333 309.667C388.778 309.222 387.722 309.278 387.667 309.333z"/><path style="fill:#f47075; stroke:none;" d="M389.667 309.333C389.222 309.778 390.278 309.722 390.333 309.667C390.778 309.222 389.722 309.278 389.667 309.333z"/><path style="fill:#fcd7d9; stroke:none;" d="M391 309L391 324C392.74 319.852 392.74 313.148 391 309z"/><path style="fill:#ef343b; stroke:none;" d="M358 310L358 322C359.505 318.421 360.127 313.294 358 310M364 310C365.724 314.068 365.997 317.62 366 322C367.677 318.003 367.867 312.507 364 310z"/><path style="fill:#f47479; stroke:none;" d="M366 310L367 311L366 310z"/><path style="fill:#f9b6b9; stroke:none;" d="M367 310L368 311L367 310z"/><path style="fill:#fab6b9; stroke:none;" d="M380 310L381 311L380 310z"/><path style="fill:#ef3940; stroke:none;" d="M381 310C379.311 315.716 379.111 321.207 386 322C381.431 318.081 381.27 315.607 383 310L381 310z"/><path style="fill:#ef343b; stroke:none;" d="M389 310C388.598 311.944 388.598 312.056 389 314C389.71 312.241 389.71 311.759 389 310z"/><path style="fill:#f14a51; stroke:none;" d="M390 310C389.435 314.781 389.902 319.217 390 324C391.667 320.028 391.667 313.972 390 310z"/><path style="fill:#f58186; stroke:none;" d="M364 311L365 312L364 311z"/><path style="fill:#fababc; stroke:none;" d="M369 311L370 312L369 311z"/><path style="fill:#f8a5a8; stroke:none;" d="M372 311L373 312L372 311z"/><path style="fill:#ef343b; stroke:none;" d="M374 311L374 322C375.431 318.59 375.431 314.41 374 311z"/><path style="fill:#f3676c; stroke:none;" d="M375 311L375 322C376.431 318.59 376.431 314.41 375 311z"/><path style="fill:#fabdbf; stroke:none;" d="M383 311L384 312L383 311z"/><path style="fill:#ffffff; stroke:none;" d="M384.259 311.89C380.864 313.052 381.817 320.512 385.741 319.248C389.142 318.153 388.249 310.525 384.259 311.89z"/><path style="fill:#f57d82; stroke:none;" d="M365 312L365 322C366.346 318.793 366.346 315.207 365 312z"/><path style="fill:#f9b0b3; stroke:none;" d="M368 312L369 313L368 312z"/><path style="fill:#f79396; stroke:none;" d="M373 312L373 322C374.346 318.793 374.346 315.207 373 312z"/><path style="fill:#f3676c; stroke:none;" d="M379.333 312.667C379.278 312.722 379.222 313.778 379.667 313.333C379.722 313.278 379.778 312.222 379.333 312.667z"/><path style="fill:#f79396; stroke:none;" d="M359 313L359 322C360.256 319.006 360.256 315.994 359 313z"/><path style="fill:#fbc3c6; stroke:none;" d="M381 313L381 318C381.83 315.969 381.83 315.031 381 313z"/><path style="fill:#f9aeb1; stroke:none;" d="M388 313L388 318C388.83 315.969 388.83 315.031 388 313z"/><path style="fill:#f57d82; stroke:none;" d="M367 314L367 322C368.161 319.23 368.161 316.77 367 314z"/><path style="fill:#fbc5c7; stroke:none;" d="M378 314L378 318C378.71 316.241 378.71 315.759 378 314z"/><path style="fill:#f14a50; stroke:none;" d="M379 314L379 319C379.83 316.969 379.83 316.031 379 314z"/><path style="fill:#f03c43; stroke:none;" d="M389 317C387.961 322.152 387.598 325.409 382 327C388.956 329.805 391.294 322.469 389 317z"/><path style="fill:#f47479; stroke:none;" d="M381 318L382 319L381 318z"/><path style="fill:#f79c9f; stroke:none;" d="M379 319L380 320L379 319z"/><path style="fill:#f79a9e; stroke:none;" d="M382 319L383 320L382 319z"/><path style="fill:#f1545a; stroke:none;" d="M387 319C386.014 320.479 386 320.203 386 322C387.388 321.309 387.861 321.015 389 320L387 319z"/><path style="fill:#f79396; stroke:none;" d="M383 320C384.248 320.685 384.548 320.749 386 321C384.752 320.315 384.452 320.251 383 320z"/><path style="fill:#f47378; stroke:none;" d="M381 321L382 322L381 321z"/><path style="fill:#f9aaad; stroke:none;" d="M387 321L388 324C388.685 322.752 388.749 322.452 389 321L387 321z"/><path style="fill:#fbccce; stroke:none;" d="M357 322C358.248 322.685 358.548 322.749 360 323C358.752 322.315 358.452 322.251 357 322M365 322C366.248 322.685 366.548 322.749 368 323C366.752 322.315 366.452 322.251 365 322M373 322C374.248 322.685 374.548 322.749 376 323C374.752 322.315 374.452 322.251 373 322z"/><path style="fill:#f89ca0; stroke:none;" d="M382 322C383.506 322.683 384.315 322.826 386 323C384.494 322.317 383.685 322.174 382 322z"/><path style="fill:#f8a3a6; stroke:none;" d="M390 324L391 325L390 324z"/><path style="fill:#fbccce; stroke:none;" d="M379 325L379 328C379.696 326.446 379.696 326.554 379 325z"/><path style="fill:#f69296; stroke:none;" d="M380 325L381 326L380 325z"/><path style="fill:#fac5c7; stroke:none;" d="M386 325L387 326L386 325z"/><path style="fill:#f15056; stroke:none;" d="M380 326L380 328L382 328L382 326L380 326z"/><path style="fill:#f57b80; stroke:none;" d="M382 326C383.506 326.683 384.315 326.826 386 327C384.494 326.317 383.685 326.174 382 326z"/><path style="fill:#f9b3b6; stroke:none;" d="M389 326L390 327L389 326z"/></svg></center><p>斜坡固定，物体静止在斜坡上，斜坡与物体之间有摩擦，动摩擦因数为 $\mu$, 斜坡的倾角为 $\theta$.</p><p>对物体受力分析：物体受重力、摩檫力、斜面对物体的弹力。</p><p>将重力分解为沿着斜坡向下的力和垂直指向斜坡的力，建立方程：</p><script type="math/tex; mode=display">mg\cos \theta =F_n</script><script type="math/tex; mode=display">f=mg\sin \theta =\mu F_n=\mu mg\cos \theta</script><script type="math/tex; mode=display">\sin \theta = \mu \cos \theta</script><script type="math/tex; mode=display">\mu = \tan \theta</script><p>即，在这种情况下，物体想要保持静止，斜面的动摩擦因数至少为 $\tan \theta$ ，若小于这个值，物体会因为重力沿着斜面向下的力大于摩檫阻力而向下滑落。</p><p><img src="https://bu.dusays.com/2024/05/17/664766180a881.jpg" alt="75-18.jpg"></p><p><img src="https://bu.dusays.com/2024/05/17/66476617f1cfc.jpg" alt="75-19.jpg"></p><h3 id="力的合成与分解"><a href="#力的合成与分解" class="headerlink" title="力的合成与分解"></a>力的合成与分解</h3><h4 id="知识点梳理-2"><a href="#知识点梳理-2" class="headerlink" title="知识点梳理"></a>知识点梳理</h4><p>合力：一个力可以等效替代某几个力的共同作用。</p><p>分力：合力所等效替代的那几个力。</p><p>力的合成遵循 平行四边形法则 / 三角形法则。</p><p>两个共点力的合力范围：</p><script type="math/tex; mode=display">|F_1-F_2| \le F \le F_1 + F_2</script><p>三个共点力的合力大小范围：（可以由两个点的情形推广而来）…</p><p>一些力的分解案例：</p><p><img src="https://bu.dusays.com/2024/05/17/66476a825f7bd.jpg" alt="75-20.jpg"></p><p>力的正交分解：将力分解到两个互相垂直的方向上。</p><h4 id="专题-共点力平衡"><a href="#专题-共点力平衡" class="headerlink" title="专题 共点力平衡"></a>专题 共点力平衡</h4><p>受力分析的方法：整体法（不考虑系统内部的相互作用）、隔离法。</p><p><img src="https://bu.dusays.com/2024/05/17/664774aa8d791.jpg" alt="75-21.jpg"></p><p><img src="https://s2.loli.net/2024/05/17/FXjQprS1mbzZqvi.jpg" alt="75-22.jpg"></p><p><img src="https://bu.dusays.com/2024/05/18/66478441a6755.jpg" alt="75-23.jpg"></p><p><img src="https://bu.dusays.com/2024/05/18/6647870d9ea30.jpg" alt="75-24.jpg"></p><p><img src="https://bu.dusays.com/2024/05/18/6647870dd1f55.jpg" alt="75-25.jpg"></p><p><img src="https://s2.loli.net/2024/05/18/sceMNAOjIb2Ko4Q.jpg" alt="75-26.jpg"></p><p><img src="https://s2.loli.net/2024/05/18/jgGpdTKovtk7bIy.jpg" alt="75-27.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;非常惭愧地又带了一个高中生。&lt;/p&gt;
&lt;p&gt;在之前的基础上重新整理了讲义，并添加了新内容。&lt;/p&gt;
&lt;p&gt;实际上教学中会有更多例题，但这篇文章主要是给我自己串知识点的，简单的题目我应该可以推出来，因此不放了。&lt;/p&gt;
&lt;p&gt;持续更新中…&lt;/p&gt;
&lt;h2 id=&quot;运动的描述&quot;</summary>
      
    
    
    
    <category term="杂项" scheme="https://dropsong.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="高中物理" scheme="https://dropsong.github.io/tags/%E9%AB%98%E4%B8%AD%E7%89%A9%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CppNote4</title>
    <link href="https://dropsong.github.io/posts/cb3a6d2b.html"/>
    <id>https://dropsong.github.io/posts/cb3a6d2b.html</id>
    <published>2024-05-02T16:23:19.000Z</published>
    <updated>2024-05-31T17:59:37.698Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/555ef888.html">CppNote3</a></p><h2 id="容器的选择"><a href="#容器的选择" class="headerlink" title="容器的选择"></a>容器的选择</h2><p>序列式容器：vector、deque、list、array、forward_list<br>关联式容器：set、multiset、map、multimap<br>无序关联式容器：unordered_set、unordered_multiset、unordered_map、unordered_multimap<br>容器适配器：stack、queue、priority_queue</p><p><strong>容器中元素是否有顺序？</strong></p><ul><li>如果有顺序，首选关联式容器或者优先级队列，备选序列式容器（sort），肯定不会用到无序关联式容<br>器。</li><li>如果没有顺序，首选就是无序关联式容器，备选序列式容器，不会选择关联式容器或者优先级队列。</li></ul><p><strong>容器是否具有下标？</strong><br>vector、deque、map、unordered_map</p><p><strong>迭代器的类型？</strong></p><ul><li>随机访问迭代器（LegacyRandomAccessIterator）：vector、deque</li><li>双向迭代器（LegacyBidirectionalIterator）：list、关联式容器</li><li>前向迭代器（LegacyForwardIterator）：无序关联式容器</li></ul><p><strong>容器是否具有迭代器？</strong><br>除了容器适配器之外，其他的容器都具备迭代器。</p><h2 id="迭代器概述"><a href="#迭代器概述" class="headerlink" title="迭代器概述"></a>迭代器概述</h2><p>从前面的用法看，<strong>迭代器类似于指针。</strong></p><p>模板的引入使函数和类的定义脱离了存储类型的限制，在需要时指定即可，是一种泛化的思维观念。<br><strong>迭代器是更高层次的抽象</strong>，它使<strong>算法独立于容器</strong>，<strong>算法独立于类型</strong>。</p><p>不同的算法对迭代器的要求不同，为此，STL定义了5种迭代器，分别是</p><ul><li>随机访问迭代器（RandomAccessIterator）</li><li>双向迭代器（BidirectionalIterator）</li><li>前向迭代器（ForwardIterator）</li><li>输出迭代器（OutputIterator）</li><li>输入迭代器（InputIterator）</li></ul><p>其层次结构如图所示：</p><p><img src="https://s2.loli.net/2024/05/01/Oua6i5hJAvYwdSI.png" alt="74-1.png"></p><p>为什么要定义这么多迭代器？</p><ul><li><strong>不同的算法要求的迭代器类型不同</strong>，定义 5 种迭代器，是为了使用 <strong>“最合适”</strong> 的工具，编写算法时在满足要求的基础上尽可能地使用功能少的迭代器，减少副作用。假设要编写一个查找函数<code>find()</code>，只要能读取容器中的元素即可，最理想的方案是使用<strong>输入迭代器</strong>，这样，有效防止了在<code>find()</code>函数内对元素的修改，真正“物尽其用”。打个比方，<strong>一把刀既能削铁如泥，又能砍瓜切菜，还能理发，真正用其理发是很危险的，不如剃头刀来的安全方便。</strong></li><li>对 5 种迭代器初步了解后，重看上图，实际上，依照箭头的方向，迭代器实现的功能越来越少，除了输出迭代器和输入迭代器是功能相反的并列关系外，<strong>箭头左侧的迭代器不仅都实现了右侧迭代器所有的功能</strong>，而且在其基础上增加了一些功能。所以说，<strong>箭头左侧的迭代器“适应”于箭头右侧的迭代器</strong>。因此，如果某个算法的形参为前向迭代器，则实参可以是双向迭代器和随机访问迭代器，但不能是输出迭代器或输入迭代器。</li></ul><p>迭代器操作和类别：</p><p><img src="https://s2.loli.net/2024/05/01/keH8G9d3MnotaKv.png" alt="74-2.png"></p><h2 id="流迭代器"><a href="#流迭代器" class="headerlink" title="流迭代器"></a>流迭代器</h2><p>流迭代器是特殊的迭代器，包括两种：</p><ul><li>输出流迭代器(ostream_iterator)</li><li>输入流迭代器(istream_iterator)</li></ul><p>理解的<strong>要点是将 输入/输出流 作为容器看待</strong>。因此，任何接受迭代器参数的算法都可以和流一起工作。使用流迭代器必须要包含头文件<code>&lt;iterator&gt;</code>。</p><h3 id="输出流迭代器"><a href="#输出流迭代器" class="headerlink" title="输出流迭代器"></a>输出流迭代器</h3><p>ostream_iterator 的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ostream_iterator</span>( ostream_type&amp; stream, <span class="type">const</span> CharT* delim );</span><br><span class="line"><span class="built_in">ostream_iterator</span>( ostream_type&amp; stream );</span><br></pre></td></tr></table></figure><p><code>std::copy</code>，在头文件<code>&lt;algorithm&gt;</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> InputIt, <span class="keyword">class</span> OutputIt &gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">copy</span><span class="params">( InputIt first, InputIt last,</span></span></span><br><span class="line"><span class="params"><span class="function">               OutputIt d_first )</span></span>;</span><br></pre></td></tr></table></figure><p>看一个演示例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">// 流对象可以看作容器</span></span><br><span class="line">    <span class="function">ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">osi</span><span class="params">(cout, <span class="string">&quot;\n&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), osi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面我们试着从源码上看看究竟发生了什么。（为简单起见，源码作了一定修改，重要的是理解其逻辑）</p><p>ostream_iterator 的源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ostream_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//ostream_iterator&lt;int&gt; osi(cout, &quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">//__s = cout;</span></span><br><span class="line">    <span class="comment">//const _CharT* __c = &quot;\n&quot;</span></span><br><span class="line">    <span class="comment">//_M_stream = &amp;cout;</span></span><br><span class="line">    <span class="comment">//_M_string = __c;</span></span><br><span class="line">    <span class="built_in">ostream_iterator</span>(ostream_type&amp; __s, <span class="type">const</span> _CharT* __c)</span><br><span class="line">    : _M_stream(&amp;__s)</span><br><span class="line">    , _M_string(__c)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//__value = 1</span></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">int</span>&amp; __value)</span><br><span class="line">    &#123;</span><br><span class="line">        *_M_stream &lt;&lt; __value;<span class="comment">//cout &lt;&lt; 1</span></span><br><span class="line">        <span class="keyword">if</span> (_M_string)</span><br><span class="line">        *_M_stream &lt;&lt; _M_string;<span class="comment">//cout &lt;&lt; &quot;\n&quot;</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ostream_type* _M_stream;</span><br><span class="line">    <span class="type">const</span> _CharT* _M_string;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>copy 的源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copy---&gt;__copy_aux---&gt;__copy_aux2---&gt;__copy</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _OutputIter <span class="title">copy</span><span class="params">(_InputIter __first, _InputIter __last,</span></span></span><br><span class="line"><span class="params"><span class="function">                        _OutputIter __result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __STL_REQUIRES(_InputIter, _InputIterator);</span><br><span class="line">    __STL_REQUIRES(_OutputIter, _OutputIterator);</span><br><span class="line">    <span class="keyword">return</span> __copy_aux(__first, __last, __result, __VALUE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>, <span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> _OutputIter __copy_aux(_InputIter __first, _InputIter __last,</span><br><span class="line">                              _OutputIter __result, _Tp*) &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp&gt;::has_trivial_assignment_operator</span><br><span class="line">            _Trivial;</span><br><span class="line">    <span class="keyword">return</span> __copy_aux2(__first, __last, __result, _Trivial());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,</span><br><span class="line">                               _OutputIter __result, __false_type) &#123;</span><br><span class="line">    <span class="keyword">return</span> __copy(__first, __last, __result,</span><br><span class="line">                  __ITERATOR_CATEGORY(__first),</span><br><span class="line">                  __DISTANCE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>, <span class="keyword">class</span> <span class="title class_">_Distance</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> _OutputIter __copy(_InputIter __first, _InputIter __last,</span><br><span class="line">                          _OutputIter __result,</span><br><span class="line">                          input_iterator_tag, _Distance*)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__result, ++__first)</span><br><span class="line">        *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector&lt;int&gt; vec = &#123;1, 3, 7, 9, 6&#125;;</span></span><br><span class="line"><span class="comment">//copy(vec.begin(), vec.end(), osi);</span></span><br><span class="line"><span class="comment">//__first = vec.begin()</span></span><br><span class="line"><span class="comment">//__last = vec.end()</span></span><br><span class="line"><span class="comment">//__result = osi</span></span><br><span class="line">                    last</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span>   <span class="number">5</span>   <span class="number">2</span>   <span class="number">4</span></span><br><span class="line">    f</span><br><span class="line"></span><br><span class="line">osi = <span class="number">1</span></span><br><span class="line">_OutputIter <span class="built_in">copy</span>(_InputIter __first, _InputIter __last, _OutputIter __result )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__result, ++__first)</span><br><span class="line">        *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入流迭代器、gdb-调试"><a href="#输入流迭代器、gdb-调试" class="headerlink" title="输入流迭代器、gdb 调试"></a>输入流迭代器、gdb 调试</h3><p>接下来，看看 istream_iterator 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::istream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">isi</span><span class="params">(cin)</span></span>;</span><br><span class="line">    <span class="built_in">copy</span>(isi, <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), vec.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>)); <span class="comment">// 右值</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这份代码<strong>出错了</strong>，我们尝试使用 gdb 调试。</p><p>使用编译选项<code>-g</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ .\tmptest.cpp -o main -g</span><br></pre></td></tr></table></figure><p>生成了 main.exe ，继续键入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb .\main.exe</span><br></pre></td></tr></table></figure><p>进入了 gdb 调试。</p><p>常用命令<code>list</code>，显示代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list</span><br><span class="line">10      using std::vector;</span><br><span class="line">11      using std::istream_iterator;</span><br><span class="line">12      using std::ostream_iterator;</span><br><span class="line">13</span><br><span class="line">14      void test() &#123;</span><br><span class="line">15          vector&lt;int&gt; vec;</span><br><span class="line">16          istream_iterator&lt;int&gt; isi(cin);</span><br><span class="line">17          copy(isi, istream_iterator&lt;int&gt;(), vec.begin());</span><br><span class="line">18          copy(vec.begin(), vec.end(),</span><br><span class="line">(gdb) list 1     ostream_iterator&lt;int&gt;(cout, &quot; &quot;)); // 鍙冲€?</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2       #include &lt;iterator&gt;</span><br><span class="line">3       #include &lt;vector&gt;</span><br><span class="line">4       #include &lt;algorithm&gt;</span><br><span class="line">5</span><br><span class="line">6       using std::cout;</span><br><span class="line">7       using std::endl;</span><br><span class="line">8       using std::cin;</span><br><span class="line">9       using std::copy;</span><br><span class="line">10      using std::vector;</span><br><span class="line">(gdb) list</span><br><span class="line">11      using std::istream_iterator;</span><br><span class="line">12      using std::ostream_iterator;</span><br><span class="line">13</span><br><span class="line">14      void test() &#123;</span><br><span class="line">15          vector&lt;int&gt; vec;</span><br><span class="line">16          istream_iterator&lt;int&gt; isi(cin);</span><br><span class="line">17          copy(isi, istream_iterator&lt;int&gt;(), vec.begin());</span><br><span class="line">18          copy(vec.begin(), vec.end(),</span><br><span class="line">20          cout &lt;&lt; endl;iterator&lt;int&gt;(cout, &quot; &quot;)); // 鍙冲€?</span><br><span class="line">(gdb) list</span><br><span class="line">21      &#125;</span><br><span class="line">22</span><br><span class="line">23      int main() &#123;</span><br><span class="line">24          test();</span><br><span class="line">25          return 0;</span><br><span class="line">26      &#125;</span><br></pre></td></tr></table></figure><p>运行程序（100是输入）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: D:\c++code\main.exe</span><br><span class="line">[New Thread 16524.0x3c68]</span><br><span class="line">[New Thread 16524.0x265c]</span><br><span class="line">[New Thread 16524.0x31a8]</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">Thread 1 received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00007ff7eeab3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">356                 *__result = *__first;</span><br></pre></td></tr></table></figure><p><code>bt</code>命令，打印堆栈信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007ff7eeab3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">#1  0x00007ff7eeab3e3b in std::__copy_move_a2&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:506</span><br><span class="line">#2  0x00007ff7eeab3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">#3  0x00007ff7eeab3cd9 in std::__copy_move_a&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:540</span><br><span class="line">#4  0x00007ff7eeab3f2b in std::copy&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:633</span><br><span class="line">#5  0x00007ff7eeab173e in test () at .\tmptest.cpp:17</span><br><span class="line">#6  0x00007ff7eeab17ea in main () at .\tmptest.cpp:24</span><br></pre></td></tr></table></figure><p>由上面的信息，我们可以定位到出错代码的行号。</p><p>我们继续看看 gdb 调试的其他命令。</p><p>打断点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 15</span><br><span class="line">Breakpoint 1 at 0x1400016e1: file .\tmptest.cpp, line 15.</span><br><span class="line">(gdb) b 24</span><br><span class="line">Breakpoint 2 at 0x1400017e5: file .\tmptest.cpp, line 24.</span><br><span class="line">(gdb) info b</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x00000001400016e1 in test() at .\tmptest.cpp:15</span><br><span class="line">2       breakpoint     keep y   0x00000001400017e5 in main() at .\tmptest.cpp:24</span><br></pre></td></tr></table></figure><p>开始运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: D:\c++code\main.exe</span><br><span class="line">[New Thread 7156.0x3b14]</span><br><span class="line">[New Thread 7156.0x4534]</span><br><span class="line">[New Thread 7156.0x179c]</span><br><span class="line"></span><br><span class="line">Thread 1 hit Breakpoint 2, main () at .\tmptest.cpp:24</span><br><span class="line">24          test();</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>单步调试<code>s</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line">Thread 1 hit Breakpoint 1, test () at .\tmptest.cpp:15</span><br><span class="line">15          vector&lt;int&gt; vec;</span><br></pre></td></tr></table></figure><p>一行一行地执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line">16          istream_iterator&lt;int&gt; isi(cin);</span><br></pre></td></tr></table></figure><p>继续（10 是输入）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line">10</span><br><span class="line">17          copy(isi, istream_iterator&lt;int&gt;(), vec.begin());</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Thread 1 received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">356                 *__result = *__first;</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">#1  0x00007ff6ef5c3e3b in std::__copy_move_a2&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:506</span><br><span class="line">#2  0x00007ff6ef5c3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">#3  0x00007ff6ef5c3cd9 in std::__copy_move_a&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:540</span><br><span class="line">#4  0x00007ff6ef5c3f2b in std::copy&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:633</span><br><span class="line">#5  0x00007ff6ef5c173e in test () at .\tmptest.cpp:17</span><br><span class="line">#6  0x00007ff6ef5c17ea in main () at .\tmptest.cpp:24</span><br></pre></td></tr></table></figure><p>使某个断点失效，<code>disable 1</code>，其中 1 是断点的编号。</p><p><code>c</code>(continue)，运行到下一个断点。</p><p>栈帧的切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">PS D:\c++code&gt; gdb .\main.exe</span><br><span class="line">GNU gdb (GDB for MinGW-W64 x86_64, built by Brecht Sanders) 13.2</span><br><span class="line">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-w64-mingw32&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from .\main.exe...</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: D:\c++code\main.exe</span><br><span class="line">[New Thread 13656.0x3134]</span><br><span class="line">[New Thread 13656.0x2c08]</span><br><span class="line">[New Thread 13656.0x13cc]</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">Thread 1 received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">356                 *__result = *__first;</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">#1  0x00007ff6ef5c3e3b in std::__copy_move_a2&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=...,</span><br><span class="line">    __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:506</span><br><span class="line">#2  0x00007ff6ef5c3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=...,</span><br><span class="line">    __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">#3  0x00007ff6ef5c3cd9 in std::__copy_move_a&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=...,</span><br><span class="line">    __last=..., __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:540</span><br><span class="line">#4  0x00007ff6ef5c3f2b in std::copy&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:633</span><br><span class="line">#5  0x00007ff6ef5c173e in test () at .\tmptest.cpp:17</span><br><span class="line">#6  0x00007ff6ef5c17ea in main () at .\tmptest.cpp:24</span><br><span class="line">(gdb) f 2</span><br><span class="line">#2  0x00007ff6ef5c3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=...,</span><br><span class="line">    __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">533         &#123; return std::__copy_move_a2&lt;_IsMove&gt;(__first, __last, __result); &#125;</span><br></pre></td></tr></table></figure><p>现在回到本级标题下最开始遇到的问题。</p><p>解决方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::istream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">isi</span><span class="params">(cin)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(isi, <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), std::<span class="built_in">back_inserter</span>(vec));</span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>)); <span class="comment">// 右值</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">334</span></span><br><span class="line"><span class="comment">3456</span></span><br><span class="line"><span class="comment">3456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3434</span></span><br><span class="line"><span class="comment">^Z</span></span><br><span class="line"><span class="comment">1 2 3 4 6 7 334 3456 3456 3434</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此为 windows 环境</span></span><br></pre></td></tr></table></figure><p>解释，需要看源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">istream_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">istream_iterator</span>()</span><br><span class="line">    : _M_stream(<span class="number">0</span>)</span><br><span class="line">    , _M_ok(<span class="literal">false</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="comment">//istream_iterator&lt;int&gt; isi(cin);</span></span><br><span class="line">    <span class="comment">//__s = cin;</span></span><br><span class="line">    <span class="comment">//_M_stream = &amp;cin;</span></span><br><span class="line">    <span class="built_in">istream_iterator</span>(istream_type&amp; __s)</span><br><span class="line">    : _M_stream(&amp;__s)</span><br><span class="line">    &#123;</span><br><span class="line">        _M_read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> _M_read()</span><br><span class="line">    &#123;</span><br><span class="line">        _M_ok = (_M_stream &amp;&amp; *_M_stream) ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">//true</span></span><br><span class="line">        <span class="keyword">if</span> (_M_ok)</span><br><span class="line">        &#123;</span><br><span class="line">            *_M_stream &gt;&gt; _M_value; <span class="comment">// cin &gt;&gt; _M_value</span></span><br><span class="line">            _M_ok = *_M_stream ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reference <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _M_value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    istream_iterator&amp; <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        _M_read();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> _M_equal(<span class="type">const</span> istream_iterator&amp; __x) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_M_ok == __x._M_ok) &amp;&amp; (!_M_ok || _M_stream == __x._M_stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    istream_type* _M_stream;</span><br><span class="line">    _Tp _M_value;</span><br><span class="line">    <span class="type">bool</span> _M_ok;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__x = isi;</span></span><br><span class="line"><span class="comment">//__y = istream_iterator&lt;int&gt;()</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> istream_iterator&lt;_Tp, _CharT, _Traits, _Dist&gt;&amp; __x,</span><br><span class="line">                <span class="type">const</span> istream_iterator&lt;_Tp, _CharT, _Traits, _Dist&gt;&amp; __y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __x._M_equal(__y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">back_insert_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp;</span><br><span class="line">    <span class="keyword">operator</span>=(<span class="type">const</span> <span class="keyword">typename</span> _Container::value_type&amp; __value)</span><br><span class="line">    &#123;</span><br><span class="line">        container-&gt;<span class="built_in">push_back</span>(__value);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp; <span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp; <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp; <span class="keyword">operator</span>++(<span class="type">int</span>) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copy(isi, istream_iterator&lt;int&gt;(), std::back_inserter(vec));</span></span><br><span class="line"><span class="comment">//__first = isi;</span></span><br><span class="line"><span class="comment">//__last = istream_iterator&lt;int&gt;()</span></span><br><span class="line"><span class="comment">//__result = std::back_inserter(vec)</span></span><br><span class="line"><span class="function">_OutputIter <span class="title">copy</span><span class="params">(_InputIter __first, _InputIter __last, _OutputIter __result )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__result, ++__first)</span><br><span class="line">        *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// __result = 2</span></span><br></pre></td></tr></table></figure><h2 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h2><p>在尾部进行插入：back_inserter、back_insert_iterator<br>在头部进行插入：front_inserter、front_insert_iterator<br>在任意位置进行插入：inserter、insert_iterator</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::back_inserter;</span><br><span class="line"><span class="keyword">using</span> std::back_insert_iterator;</span><br><span class="line"><span class="keyword">using</span> std::front_inserter;</span><br><span class="line"><span class="keyword">using</span> std::front_insert_iterator;</span><br><span class="line"><span class="keyword">using</span> std::inserter;</span><br><span class="line"><span class="keyword">using</span> std::insert_iterator;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::list;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; listNum = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 vector 尾部插入</span></span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(vecNum));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 9 7 </span></span><br><span class="line"><span class="comment">1 3 5 9 7 11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; listNum = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 vector 尾部插入</span></span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(),</span><br><span class="line">         back_insert_iterator&lt;vector&lt;<span class="type">int</span>&gt;&gt;(vecNum));</span><br><span class="line">    <span class="comment">// 可以参考 cppreference</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 9 7 </span></span><br><span class="line"><span class="comment">1 3 5 9 7 11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 list 前面插入数据</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; listNum = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 vector 尾部插入</span></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">front_inserter</span>(listNum));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">7 9 5 3 1 11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; setNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(setNum.<span class="built_in">begin</span>(), setNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> sit = setNum.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">inserter</span>(setNum, sit));</span><br><span class="line">    <span class="comment">// 可以参考 cppreference</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(setNum.<span class="built_in">begin</span>(), setNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 7 22 33 55 66 99 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 22 33 55 66 99 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test4</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h2><p>看例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::reverse_iterator rit = num.<span class="built_in">rbegin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; rit != num.<span class="built_in">rend</span>(); ++rit) &#123;</span><br><span class="line">        cout &lt;&lt; *rit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 5 3 1 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法库中的函数，<strong>都是非成员函数</strong>。不是针对与某一种具体的类型或容器编程，而是针对所有的类型或者容器进行编程，可以体现通用编程或者泛型编程的思想。</p><p>分类：</p><ul><li>非修改式的算法：<strong>for_each</strong>、count、find、search</li><li>修改式的算法：<strong>copy</strong>、<strong>remove_if</strong>、move、replace</li><li>排序算法：<strong>sort</strong></li><li>二分搜索：lower_bound、upper_bound、equal_range</li><li>集合操作：set_difference、<strong>set_intersection</strong>、set_union</li><li>未初始化的内存操作：<strong>uninitialized_copy</strong></li></ul><p>不是所有的算法都要一一去进行使用，需要懂得方法，然后在使用的时候，可以进行查找即可。（学方法）</p><h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryFunc &gt;</span></span><br><span class="line"><span class="function">UnaryFunc <span class="title">for_each</span><span class="params">( InputIt first, InputIt last, UnaryFunc f )</span></span>;</span><br></pre></td></tr></table></figure><p>学点单词：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unary   adj. [数] 一元的</span><br></pre></td></tr></table></figure></p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    ++ value;</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span>&amp; value)</span> </span>&#123;</span><br><span class="line">    ++ value;</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;original data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;entering func...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;data in vector:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;entering func2...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func2);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;data in vector:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">original data:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment">entering func...</span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3 </span></span><br><span class="line"><span class="comment">data in vector:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment">entering func2...</span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3 </span></span><br><span class="line"><span class="comment">data in vector:</span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于上面的例子，也有<strong>匿名函数</strong>的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;original data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名函数，lambda 表达式</span></span><br><span class="line">    <span class="comment">// [] 捕获列表</span></span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [](<span class="type">int</span>&amp; value)&#123;</span><br><span class="line">        ++ value;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">original data:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面代码的基础上，再来看一个小特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在匿名函数中，需要捕获</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;original data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名函数，lambda 表达式</span></span><br><span class="line">    <span class="comment">// [] 捕获列表</span></span><br><span class="line">    <span class="comment">// () 参数列表</span></span><br><span class="line">    <span class="comment">// &#123;&#125; 函数体</span></span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [&amp;a](<span class="type">int</span>&amp; value)-&gt;<span class="type">void</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        ++ value;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">original data:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a = 10</span></span><br><span class="line"><span class="comment">2 a = 10</span></span><br><span class="line"><span class="comment">5 a = 10</span></span><br><span class="line"><span class="comment">8 a = 10</span></span><br><span class="line"><span class="comment">10 a = 10</span></span><br><span class="line"><span class="comment">6 a = 10</span></span><br><span class="line"><span class="comment">9 a = 10</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="remove-if"><a href="#remove-if" class="headerlink" title="remove_if"></a>remove_if</h3><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [](<span class="type">int</span>&amp; value)&#123;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">remove_if</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 9 8 22 55 123 8 3 2 </span></span><br><span class="line"><span class="comment">1 9 8 8 3 2 8 3 2 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码输出结果似乎和我们预期不符。来看一下源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove_if(number.begin(), number.end(), func);</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; number = &#123;1, 9, 8, 22, 55, 123, 8, 3, 2&#125;;</span></span><br><span class="line"><span class="comment">//first = number.begin()</span></span><br><span class="line"><span class="comment">//last = number.end()</span></span><br><span class="line"><span class="comment">//p = func</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">remove_if</span><span class="params">(ForwardIt first, ForwardIt last, UnaryPredicate p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    first = std::<span class="built_in">find_if</span>(first, last, p);</span><br><span class="line">    <span class="keyword">if</span> (first != last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ForwardIt i = first; ++i != last; )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">p</span>(*i))</span><br><span class="line">            &#123;</span><br><span class="line">                *first = std::<span class="built_in">move</span>(*i);</span><br><span class="line">                first++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                  f        last</span><br><span class="line"><span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span></span><br><span class="line">                           <span class="function">i</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">                                last</span><br><span class="line"><span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span></span><br><span class="line">         <span class="function">f</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> InputIt <span class="title">find_if</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">p</span>(*first)) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>人话总结：将不要的元素删除，位置由后面的合法元素填充。同时并不会删除后面的合法元素。</p><p>remove_if 是有返回值的，由此给出改进方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [](<span class="type">int</span>&amp; value)&#123;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove_if 返回待删除元素的首迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">remove_if</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func);</span><br><span class="line">    num.<span class="built_in">erase</span>(it, num.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 9 8 22 55 123 8 3 2 </span></span><br><span class="line"><span class="comment">1 9 8 8 3 2 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>remove_if 之所以要这样设计，是为了满足泛型编程的思想（通用编程的思想），要针对于所有的容器进行编程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector                      i</span><br><span class="line">1, 9, 8, 8,3, 2, 8, 3, 2</span><br><span class="line">                 f</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line">1, 9, 8, 22 , 55, 123, 8, 3, 2</span><br><span class="line">         f</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind1st 可以绑定二元函数对象 f 的第一个参数，第一个参数使用 x 进行替代，bind2nd 可以绑定二元函数对象 f 的第二个参数，第二个参数使用 x 进行替代。</p><p>以下代码若有不懂的可以结合 cppreference 理解：</p><p><img src="https://bu.dusays.com/2024/05/03/6634b2095ebda.png" alt="74-3.png"></p><p>bind1st 和 bind2nd 已经过时。</p><p>大伙流行用这个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int add(int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int func(int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(&amp;add, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1()&quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(&amp;func, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2()&quot;</span> &lt;&lt; <span class="built_in">f2</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1()int add(int, int)</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">f2()int func(int, int, int)</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以下写法效果相同：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int add(int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int func(int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(add, <span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 函数名是函数的入口地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1()&quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(func, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2()&quot;</span> &lt;&lt; <span class="built_in">f2</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1()int add(int, int)</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">f2()int func(int, int, int)</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>看点骚操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;嘿嘿，成员函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Example ex;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(&amp;Example::add, &amp;ex, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1() = &quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1() = 嘿嘿，成员函数</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>【杂项】关于函数指针的杂项知识点：<br>回调函数可以分为注册和执行（思想：延迟）。</p><p>继续看看 bind 的其他细节。</p><p>占位符本身代表的是函数的形参，占位符中的数字代表的是函数的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> x3, <span class="type">const</span> <span class="type">int</span>&amp; x4, <span class="type">int</span> x5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x1 = &quot;</span> &lt;&lt; x1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x2 = &quot;</span> &lt;&lt; x2 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x3 = &quot;</span> &lt;&lt; x3 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x4 = &quot;</span> &lt;&lt; x4 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x5 = &quot;</span> &lt;&lt; x5 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(add, <span class="number">10</span>, std::placeholders::_1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1() = &quot;</span> &lt;&lt; <span class="built_in">f1</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(add, std::placeholders::_1, std::placeholders::_2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2() = &quot;</span> &lt;&lt; <span class="built_in">f2</span>(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1() = 15</span></span><br><span class="line"><span class="comment">f2() = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">bind</span>(func, <span class="number">1</span>, _3, _1, num, num);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">11</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">88</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x1 = 1</span></span><br><span class="line"><span class="comment">x2 = 22</span></span><br><span class="line"><span class="comment">x3 = 11</span></span><br><span class="line"><span class="comment">x4 = 50</span></span><br><span class="line"><span class="comment">x5 = 50</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>bind 默认情况下采用值传递</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> x3, <span class="type">const</span> <span class="type">int</span>&amp; x4, <span class="type">int</span> x5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x1 = &quot;</span> &lt;&lt; x1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x2 = &quot;</span> &lt;&lt; x2 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x3 = &quot;</span> &lt;&lt; x3 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x4 = &quot;</span> &lt;&lt; x4 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x5 = &quot;</span> &lt;&lt; x5 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">bind</span>(func, <span class="number">1</span>, _3, _1, std::<span class="built_in">cref</span>(num), num);</span><br><span class="line">    num = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">11</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">88</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x1 = 1</span></span><br><span class="line"><span class="comment">x2 = 22</span></span><br><span class="line"><span class="comment">x3 = 11</span></span><br><span class="line"><span class="comment">x4 = 100</span></span><br><span class="line"><span class="comment">x5 = 50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于 auto 到底推导了什么类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;嘿嘿，成员函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;int func(int, int, int)&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    function&lt;<span class="type">int</span>()&gt; f1 = <span class="built_in">bind</span>(add, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1() = &quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>()&gt; f2 = <span class="built_in">bind</span>(func, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2() = &quot;</span> &lt;&lt; <span class="built_in">f2</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Example ex;</span><br><span class="line">    function&lt;<span class="type">int</span>()&gt; f3 = <span class="built_in">bind</span>(&amp;Example::add, &amp;ex, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3() = &quot;</span> &lt;&lt; <span class="built_in">f3</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; f4 = <span class="built_in">bind</span>(add, <span class="number">10</span>, std::placeholders::_1);</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;f4(30) = &quot;</span> &lt;&lt; <span class="built_in">f4</span>(<span class="number">30</span>) &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1() = 30</span></span><br><span class="line"><span class="comment">f2() = 6</span></span><br><span class="line"><span class="comment">f3() = 嘿嘿，成员函数</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">f4(30) = 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，function 被称为函数的容器。</p><p><strong>面向过程地实现多态</strong>（std::bind + std::function）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="comment">// 回调函数的设计思想</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> DisplayCallBack = function&lt;<span class="built_in">void</span>()&gt;;</span><br><span class="line">    <span class="keyword">using</span> AreaCallBack = function&lt;<span class="built_in">double</span>()&gt;;</span><br><span class="line"></span><br><span class="line">    DisplayCallBack _displayCallBack;</span><br><span class="line">    AreaCallBack _areaCallBack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数的注册</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDisplayCallBack</span><span class="params">(DisplayCallBack&amp;&amp; cb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _displayCallBack = std::<span class="built_in">move</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAreaCallBack</span><span class="params">(AreaCallBack&amp;&amp; cb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _areaCallBack = std::<span class="built_in">move</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数的执行</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleDisplayCallBack</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_displayCallBack)</span><br><span class="line">        &#123;</span><br><span class="line">            _displayCallBack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">handleAreaCallBack</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_areaCallBack) &#123;</span><br><span class="line">            <span class="keyword">return</span> _areaCallBack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">double</span> length = <span class="number">0</span>, <span class="type">double</span> width = <span class="number">0</span>)</span><br><span class="line">    :_length(length), _width(width) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Rectangle(double, double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Rectangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _length*_width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Rectangle</span>() &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;~Rectangle()&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _length;</span><br><span class="line">    <span class="type">double</span> _width;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> radius = <span class="number">0</span>):_radius(radius) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Circle(double = 0)&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * _radius * _radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Circle</span>() &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;~Circle()&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Triangle</span>(<span class="type">double</span> a = <span class="number">0</span>, <span class="type">double</span> b= <span class="number">0</span>, <span class="type">double</span> c = <span class="number">0</span>)</span><br><span class="line">    : _a(a), _b(b), _c(c) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Triangle(double = 0, double = 0, double = 0)&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> tmp = (_a + _b + _c)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(tmp*(tmp-_a)*(tmp-_b)*(tmp-_c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Triangle</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Triangle()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _a;</span><br><span class="line">    <span class="type">double</span> _b;</span><br><span class="line">    <span class="type">double</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> Figure&amp; fig)</span> </span>&#123;</span><br><span class="line">    fig.<span class="built_in">handleDisplayCallBack</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;的面积：&quot;</span> &lt;&lt; fig.<span class="built_in">handleAreaCallBack</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Rectangle <span class="title">rectangle</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Circle <span class="title">circle</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Triangle <span class="title">triangle</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Figure 是具体的类</span></span><br><span class="line">    Figure fig;</span><br><span class="line">    fig.<span class="built_in">setDisplayCallBack</span>(<span class="built_in">bind</span>(&amp;Rectangle::display, &amp;rectangle));</span><br><span class="line">    fig.<span class="built_in">setAreaCallBack</span>(<span class="built_in">bind</span>(&amp;Rectangle::area, &amp;rectangle));</span><br><span class="line">    <span class="built_in">func</span>(fig);</span><br><span class="line"></span><br><span class="line">    fig.<span class="built_in">setDisplayCallBack</span>(<span class="built_in">bind</span>(&amp;Circle::display, &amp;circle));</span><br><span class="line">    fig.<span class="built_in">setAreaCallBack</span>(<span class="built_in">bind</span>(&amp;Circle::area, &amp;circle));</span><br><span class="line">    <span class="built_in">func</span>(fig);</span><br><span class="line">    </span><br><span class="line">    fig.<span class="built_in">setDisplayCallBack</span>(<span class="built_in">bind</span>(&amp;Triangle::display, &amp;triangle));</span><br><span class="line">    fig.<span class="built_in">setAreaCallBack</span>(<span class="built_in">bind</span>(&amp;Triangle::area, &amp;triangle));</span><br><span class="line">    <span class="built_in">func</span>(fig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Rectangle(double, double)</span></span><br><span class="line"><span class="comment">Circle(double = 0)</span></span><br><span class="line"><span class="comment">Triangle(double = 0, double = 0, double = 0)</span></span><br><span class="line"><span class="comment">Rectangle的面积：200</span></span><br><span class="line"><span class="comment">Circle的面积：314</span></span><br><span class="line"><span class="comment">Triangle的面积：6</span></span><br><span class="line"><span class="comment">~Triangle()</span></span><br><span class="line"><span class="comment">~Circle()</span></span><br><span class="line"><span class="comment">~Rectangle()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码结合函数指针的思路去理解，就会方便很多。</p><h2 id="成员函数适配器"><a href="#成员函数适配器" class="headerlink" title="成员函数适配器"></a>成员函数适配器</h2><p>成员函数适配器 mem_fun_ref 的用法示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成员函数适配器mem_fun_ref的用法示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumVals</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumVals</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NumVals</span>(<span class="type">int</span> j)</span><br><span class="line">    &#123;</span><br><span class="line">        val = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>) !(val % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= (val / <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(val % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function">vector&lt;NumVals&gt; <span class="title">v1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1[i] = <span class="built_in">NumVals</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Use of mem_fun_ref calling member function through a reference</span></span><br><span class="line">    <span class="comment">// remove the primes in the vector using isPrime ( )</span></span><br><span class="line">    it1 = <span class="built_in">remove_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::isPrime));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中删除质数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), it1, <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    vector&lt;NumVals&gt;<span class="built_in">v2</span>(<span class="number">13</span>);</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">13</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2 [k] = <span class="built_in">NumVals</span> (k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Use of mem_fun_ref calling member function through a reference</span></span><br><span class="line">    <span class="comment">// remove the even numbers in the vector v2 using isEven ( )</span></span><br><span class="line">    it2 = <span class="built_in">remove_if</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::isEven));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中删除偶数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), it2, <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v1中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v1中删除质数后剩下的值为: </span></span><br><span class="line"><span class="comment">4 6 8 9 10 12 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">v2中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v2中删除偶数后剩下的值为: </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 13 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码使用 mem_fn 可以达到同样效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumVals</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumVals</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NumVals</span>(<span class="type">int</span> j)</span><br><span class="line">    &#123;</span><br><span class="line">        val = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>) !(val % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= (val / <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(val % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function">vector&lt;NumVals&gt; <span class="title">v1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1[i] = <span class="built_in">NumVals</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    it1 = <span class="built_in">remove_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::isPrime));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中删除质数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), it1, <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    vector&lt;NumVals&gt;<span class="built_in">v2</span>(<span class="number">13</span>);</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">13</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2 [k] = <span class="built_in">NumVals</span> (k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    it2 = <span class="built_in">remove_if</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::isEven));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中删除偶数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), it2, <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v1中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v1中删除质数后剩下的值为: </span></span><br><span class="line"><span class="comment">4 6 8 9 10 12 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">v2中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v2中删除偶数后剩下的值为: </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 13 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>mem_fn 的另一个示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mem_fn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello, world.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_number</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;number: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Foo f;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> greet = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_greeting);</span><br><span class="line">    <span class="built_in">greet</span>(f);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> print_num = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_number);</span><br><span class="line">    <span class="built_in">print_num</span>(f, <span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> access_data = std::<span class="built_in">mem_fn</span>(&amp;Foo::data);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;data: &quot;</span> &lt;&lt; <span class="built_in">access_data</span>(f) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello, world.</span></span><br><span class="line"><span class="comment">number: 42</span></span><br><span class="line"><span class="comment">data: 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看一种刁钻的写法，这样同样是合法的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumVals</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumVals</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NumVals</span>(<span class="type">int</span> j)</span><br><span class="line">    &#123;</span><br><span class="line">        val = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>) !(val % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= (val / <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(val % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function">vector&lt;NumVals&gt; <span class="title">v1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1[i] = <span class="built_in">NumVals</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(),</span><br><span class="line">             std::<span class="built_in">bind</span>(&amp;NumVals::display, std::placeholders::_1));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v1中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码需要解释：<br>NumVals::display 是个无参函数，但隐式地有一个 this 参数，因此用 std::placeholders::_1 占位。这个参数在运行时接受 v1.begin() 至 v1.end() 传过来的迭代器（指针）。<br>std::bind(&amp;NumVals::display, std::placeholders::_1) 则返回一个类似于函数指针的东西，符合 for_each 的要求。</p><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>函数对象（仿函数）：所有可与小括号结合，并且体现函数的形式。（将函数对象的概念进行扩充）</p><ul><li>重载了函数调用运算符的类创建的对象</li><li>普通函数或者成员函数</li><li>函数指针</li></ul><h2 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h2><p>空间配置器负责空间的申请与回收。</p><p>空间配置器将空间的申请与对象的构建分开，将空间的释放与对象的销毁也分开。</p><p>STL中，元素都是<strong>批量</strong>的，所以出于效率考虑，需要将空间的申请与对象的构建分开。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span><span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">T</span> &gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">allocator</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间的申请</span></span><br><span class="line"><span class="function">pointer <span class="title">allocate</span><span class="params">( size_type n, <span class="type">const</span> <span class="type">void</span> * hint = <span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="function">T* <span class="title">allocate</span><span class="params">( std::<span class="type">size_t</span> n, <span class="type">const</span> <span class="type">void</span> * hint)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间的释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">( T* p, std::<span class="type">size_t</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的构建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">( pointer p, const_reference val )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">( pointer p )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="实现自己的-vector"><a href="#实现自己的-vector" class="headerlink" title="实现自己的 vector"></a>实现自己的 vector</h3><p>整体逻辑不算难，但是很多细节弄不出来，很麻烦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> iterator = T*;</span><br><span class="line">    <span class="built_in">Vector</span>()</span><br><span class="line">    : _start(<span class="literal">nullptr</span>)</span><br><span class="line">    , _finish(<span class="literal">nullptr</span>)</span><br><span class="line">    , _end_of_storage(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Vector</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; value)</span></span>; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>; <span class="comment">//重新分配内存,动态扩容要用的</span></span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> std::allocator&lt;T&gt; _alloc;</span><br><span class="line">     </span><br><span class="line">    T *_start;                 <span class="comment">//指向数组中的第一个元素</span></span><br><span class="line">    T *_finish;                <span class="comment">//指向最后一个实际元素之后的那个元素</span></span><br><span class="line">    T *_end_of_storage;        <span class="comment">//指向数组本身之后的位置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">std::allocator&lt;T&gt; Vector&lt;T&gt;::_alloc; <span class="comment">// 静态数据成员进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::~<span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_start) &#123;</span><br><span class="line">        <span class="keyword">while</span>(_finish != _start) &#123;</span><br><span class="line">            <span class="comment">// 销毁空间上的元素</span></span><br><span class="line">            _alloc.<span class="built_in">destroy</span>(--_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回收空间</span></span><br><span class="line">        _alloc.<span class="built_in">deallocate</span>(_start, <span class="built_in">capacity</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Vector&lt;T&gt;::<span class="built_in">push_back</span>(<span class="type">const</span> T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">size</span>() == <span class="built_in">capacity</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">reallocate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    _alloc.<span class="built_in">construct</span>(_finish++, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Vector&lt;T&gt;::<span class="built_in">pop_back</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">size</span>() &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    _alloc.<span class="built_in">destroy</span>(--_finish);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">int</span> Vector&lt;T&gt;::<span class="built_in">size</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _finish - _start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">int</span> Vector&lt;T&gt;::<span class="built_in">capacity</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _end_of_storage - _start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Vector&lt;T&gt;::<span class="built_in">reallocate</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> oldCapacity = <span class="built_in">capacity</span>();</span><br><span class="line">    <span class="type">int</span> newCapacity = <span class="number">2</span>*oldCapacity &gt; <span class="number">0</span> ? <span class="number">2</span>*oldCapacity : <span class="number">1</span>;</span><br><span class="line">    T* tmp = _alloc.<span class="built_in">allocate</span>(newCapacity);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_start) &#123;</span><br><span class="line">        <span class="comment">// 拷贝老空间上的元素到新空间</span></span><br><span class="line">        std::<span class="built_in">uninitialized_copy</span>(_start, _finish, tmp);</span><br><span class="line">        <span class="keyword">while</span>(_finish != _start) &#123;</span><br><span class="line">            <span class="comment">// 销毁老空间上的元素</span></span><br><span class="line">            _alloc.<span class="built_in">destroy</span>(--_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回收老的空间</span></span><br><span class="line">        _alloc.<span class="built_in">deallocate</span>(_start, <span class="built_in">capacity</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    _start = tmp;</span><br><span class="line">    _finish = _start + oldCapacity;</span><br><span class="line">    _end_of_storage = _start + newCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printinfo</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;con.size() = &quot;</span> &lt;&lt; con.<span class="built_in">size</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;con.capacity() = &quot;</span> &lt;&lt; con.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : num) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">con.size() = 1</span></span><br><span class="line"><span class="comment">con.capacity() = 1</span></span><br><span class="line"><span class="comment">con.size() = 2</span></span><br><span class="line"><span class="comment">con.capacity() = 2</span></span><br><span class="line"><span class="comment">con.size() = 3</span></span><br><span class="line"><span class="comment">con.capacity() = 4</span></span><br><span class="line"><span class="comment">con.size() = 4</span></span><br><span class="line"><span class="comment">con.capacity() = 4</span></span><br><span class="line"><span class="comment">con.size() = 5</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 6</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 7</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 8</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 9</span></span><br><span class="line"><span class="comment">con.capacity() = 16</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><img src="https://s2.loli.net/2024/05/06/Ca5Szj2geYxOEtc.png" alt="74-4.png"></p><p>以下代码块展开约 500+ 行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> alloc _Alloc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个分支（一级空间配置器）</span></span><br><span class="line"><span class="keyword">typedef</span> malloc_alloc alloc;</span><br><span class="line"><span class="keyword">typedef</span> __malloc_alloc_template&lt;<span class="number">0</span>&gt; malloc_alloc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__malloc_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">void</span>* __result = <span class="built_in">malloc</span>(__n);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == __result)</span><br><span class="line">            __result = _S_oom_malloc(__n);<span class="comment">//S = static, oom = out of memory</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> __result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> <span class="comment">/* __n */</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">free</span>(__p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个分支（默认分支，二级空间配置器）</span></span><br><span class="line"><span class="keyword">typedef</span> __default_alloc_template&lt;__NODE_ALLOCATOR_THREADS, <span class="number">0</span>&gt; alloc;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__default_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(__n &gt; <span class="number">128</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">malloc</span>(__n);<span class="comment">//对空间，new</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//16个自由链表_S_free_list + 内存池</span></span><br><span class="line">            _Obj** __my_free_list = _S_free_list + _S_freelist_index(__n);</span><br><span class="line"></span><br><span class="line">            _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">            <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">                __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">                __ret = __result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (__n &gt; (<span class="type">size_t</span>) <span class="number">128</span>)</span><br><span class="line">            malloc_alloc::<span class="built_in">deallocate</span>(__p, __n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 此处代码有较大改动，目的是方便理解其主要逻辑</span></span><br><span class="line">            _Obj** __my_free_list = _S_free_list + _S_freelist_index(__n);<span class="comment">//_S_free_list[3]</span></span><br><span class="line">            _Obj* __q = (_Obj*)__p;</span><br><span class="line"></span><br><span class="line">            __q -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">            *__my_free_list = __q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">allocator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> alloc _Alloc;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//空间的申请</span></span><br><span class="line">    <span class="function">_Tp* <span class="title">allocate</span><span class="params">(size_type __n, <span class="type">const</span> <span class="type">void</span> *ptr = <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __n != <span class="number">0</span> ? <span class="built_in">static_cast</span>&lt;_Tp*&gt;(_Alloc::<span class="built_in">allocate</span>(__n * <span class="built_in">sizeof</span>(_Tp))) : <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//空间的回收</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(pointer __p, size_type __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _Alloc::<span class="built_in">deallocate</span>(__p, __n * <span class="built_in">sizeof</span>(_Tp));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象的构建</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(pointer __p, <span class="type">const</span> _Tp&amp; __val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//int *pInt = new int(10);</span></span><br><span class="line">        <span class="keyword">new</span>(__p) _Tp(__val); <span class="comment">//定位new表达式 allocate</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象的销毁</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">(pointer __p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        __p-&gt;~_Tp(); <span class="comment">//显示调用析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//联合体</span></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">_Obj</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_Obj</span>* _M_free_list_link;</span><br><span class="line">    <span class="type">char</span> _M_client_data[<span class="number">1</span>]; <span class="comment">/* The client sees this.*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123;_ALIGN = <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123;_MAX_BYTES = <span class="number">128</span>&#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123;_NFREELISTS = <span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typename</span> __default_alloc_template::_Obj* __default_alloc_template::_S_free_list[</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined(__SUNPRO_CC) || defined(__GNUC__) || defined(__HP_aCC)</span></span><br><span class="line">    _NFREELISTS</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">    __default_alloc_template::_NFREELISTS</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_start_free = <span class="literal">nullptr</span>;<span class="comment">//指向内存池的头</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_end_free = <span class="literal">nullptr</span>;<span class="comment">//指向内存池的尾</span></span><br><span class="line"><span class="type">size_t</span> __default_alloc_template::_S_heap_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//取自由链表的下标的函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_freelist_index(<span class="type">size_t</span> __bytes) <span class="comment">//__bytes = 32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (((__bytes) + (<span class="type">size_t</span>)_ALIGN<span class="number">-1</span>)/(<span class="type">size_t</span>)_ALIGN - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//return (32 + 8 - 1)/8 - 1 = 39/8 - 1 = 4.x - 1 = 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__bytes = <span class="number">33</span></span><br><span class="line">[<span class="number">25</span>, <span class="number">32</span>]  <span class="number">32</span>    <span class="number">3.</span>x  <span class="number">4</span></span><br><span class="line">[<span class="number">33</span>,   ]  <span class="number">40</span></span><br><span class="line">[  , <span class="number">24</span>]  <span class="number">24</span></span><br><span class="line"><span class="comment">//向上取整，得到8的整数倍</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_round_up(<span class="type">size_t</span> __bytes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> (((__bytes) + (<span class="type">size_t</span>) _ALIGN<span class="number">-1</span>) &amp; ~((<span class="type">size_t</span>) _ALIGN - <span class="number">1</span>));</span><br><span class="line">                (<span class="number">32</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">39</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">39</span> = <span class="number">32</span> + <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span>    <span class="number">0010</span> <span class="number">0111</span></span><br><span class="line">                <span class="number">7</span> = <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span>          <span class="number">0000</span> <span class="number">0111</span>   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">            </span><br><span class="line">                <span class="number">0010</span> <span class="number">0111</span></span><br><span class="line">            &amp;   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span>   = <span class="number">2</span>^<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">31</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">38</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0110</span></span><br><span class="line">                <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span> = <span class="number">2</span>^<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">33</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">40</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">40</span> = <span class="number">32</span> + <span class="number">8</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">1000</span>   <span class="number">40</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">25</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">32</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span></span><br><span class="line">            &amp;   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span> = <span class="number">2</span>^<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">24</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">31</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">31</span> = <span class="number">16</span> + <span class="number">8</span> + <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">                <span class="number">0001</span> <span class="number">1111</span></span><br><span class="line">            &amp;   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0001</span> <span class="number">1000</span> = <span class="number">16</span> + <span class="number">8</span> = <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、申请32字节时候,内存（堆空间）是足够的</span></span><br><span class="line"><span class="comment">//__size = 32</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">32</span> * <span class="number">20</span> = <span class="number">640</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = <span class="number">2</span> * __total_bytes + _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2</span> * <span class="number">640</span> + _S_round_up(<span class="number">0</span> &gt;&gt; <span class="number">4</span>) = <span class="number">1280</span>;</span><br><span class="line"></span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get) = <span class="built_in">malloc</span>(<span class="number">1280</span>);</span><br><span class="line">    </span><br><span class="line">        _S_heap_size += __bytes_to_get = <span class="number">1280</span>;</span><br><span class="line">        _S_end_free = _S_start_free + __bytes_to_get;</span><br><span class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">32</span> * <span class="number">20</span> = <span class="number">640</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">1280</span>;</span><br><span class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes)</span><br><span class="line">    &#123;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>(__result);<span class="comment">//分割出来了640字节，然后将剩余的640自己交给_S_end_free与_S_start_free</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数就是在按照__n为一个等分，进行将大段空间进行切割，分成多个等分</span></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)<span class="comment">//__n = 32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    __my_free_list = _S_free_list +</span><br><span class="line">                     _S_freelist_index(__n);<span class="comment">//_S_free_list[3]</span></span><br><span class="line"></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++)</span><br><span class="line">    &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n);</span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i)</span><br><span class="line">        &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(__result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span><span class="comment">//__n = 32</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list + _S_freelist_index(__n);<span class="comment">//_S_free_list[3]</span></span><br><span class="line"></span><br><span class="line">        _Obj*  __result = *__my_free_list;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="literal">nullptr</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));<span class="comment">//32 * 20 * 2 = 1280  640/32 = 20</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、申请64字节时候,内存（堆空间）是足够的</span></span><br><span class="line"><span class="comment">//__size = 64</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">64</span> * <span class="number">20</span> = <span class="number">1280</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size)</span><br><span class="line">    &#123;</span><br><span class="line">        __nobjs = (<span class="type">int</span>)(__bytes_left/__size) = <span class="number">640</span>/<span class="number">64</span> = <span class="number">10</span>;</span><br><span class="line">        __total_bytes = __size * __nobjs = <span class="number">64</span> * <span class="number">10</span> = <span class="number">640</span>;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)<span class="comment">//__n = 64</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    __my_free_list = _S_free_list +</span><br><span class="line">                     _S_freelist_index(__n);<span class="comment">//_S_free_list[7]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build free list in chunk */</span></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++) &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n);</span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span><span class="comment">//__n = 64</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list +</span><br><span class="line">                                _S_freelist_index(__n);<span class="comment">//_S_free_list[7]</span></span><br><span class="line"></span><br><span class="line">        _Obj* __result = *__my_free_list;</span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="literal">nullptr</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、申请96字节时候,内存（堆空间）是足够的</span></span><br><span class="line"><span class="comment">//__size = 96</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">96</span> * <span class="number">20</span> = <span class="number">1920</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = <span class="number">2</span> * __total_bytes + </span><br><span class="line">                                _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2</span> * <span class="number">1920</span> + _S_round_up( <span class="number">1280</span> &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">3840</span> + <span class="number">80</span> = <span class="number">3920</span>;</span><br><span class="line">                              </span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get) = <span class="built_in">malloc</span>(<span class="number">3920</span>);</span><br><span class="line"></span><br><span class="line">        _S_heap_size += __bytes_to_get = <span class="number">1280</span> + <span class="number">3920</span> = <span class="number">5200</span>;</span><br><span class="line">        _S_end_free = _S_start_free + __bytes_to_get;</span><br><span class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">96</span> * <span class="number">20</span> = <span class="number">1920</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">3920</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes)</span><br><span class="line">    &#123;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);<span class="comment">//3920 = 1920 + 2000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)<span class="comment">//__n = 96</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __my_free_list = _S_free_list +</span><br><span class="line">                     _S_freelist_index(__n);<span class="comment">//_S_free_list[11]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build free list in chunk */</span></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++)</span><br><span class="line">    &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n);</span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span><span class="comment">//__n = 96</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list +</span><br><span class="line">                                _S_freelist_index(__n);<span class="comment">//_S_free_list[11]</span></span><br><span class="line"></span><br><span class="line">        _Obj* __result = *__my_free_list;</span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="literal">nullptr</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、申请72字节时候，内存池与堆空间没有连续的72字节(堆空间与内存池容量不足)</span></span><br><span class="line"><span class="comment">//表名内存池中没有连续的72字节，表明上一次96字节分割完毕之后，内存池中2000字节被使用完毕了</span></span><br><span class="line"><span class="comment">//__size = 72</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">72</span> * <span class="number">20</span> = <span class="number">1440</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = <span class="number">2</span> * __total_bytes +</span><br><span class="line">                                _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2</span> * <span class="number">1440</span> + _S_round_up(<span class="number">5200</span> &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2880</span> + <span class="number">325</span> = <span class="number">3205</span>;</span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get) = <span class="built_in">malloc</span>(<span class="number">3205</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span> == _S_start_free)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">size_t</span> __i;</span><br><span class="line">            _Obj** __my_free_list;</span><br><span class="line">            _Obj* __p;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//__size = 72</span></span><br><span class="line">            <span class="comment">//__i = 72  80  88  96,想找连续72字节的时候，没有满足条件的，那么就只能向上“借”</span></span><br><span class="line">            <span class="keyword">for</span> (__i = __size; __i &lt;= (<span class="type">size_t</span>) <span class="number">128</span>; __i += (<span class="type">size_t</span>)<span class="number">8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//_S_free_list[8] _S_free_list[9] _S_free_list[10] _S_free_list[11]</span></span><br><span class="line">                __my_free_list = _S_free_list + _S_freelist_index(__i);</span><br><span class="line">                __p = *__my_free_list;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">nullptr</span> != __p)</span><br><span class="line">            &#123;</span><br><span class="line">                *__my_free_list = __p -&gt; _M_free_list_link;</span><br><span class="line">                _S_start_free = (<span class="type">char</span>*)__p;</span><br><span class="line">                _S_end_free = _S_start_free + __i;</span><br><span class="line">                <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">72</span> * <span class="number">20</span> = <span class="number">1440</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">96</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size)</span><br><span class="line">    &#123;</span><br><span class="line">        __nobjs = (<span class="type">int</span>)(__bytes_left/__size) = <span class="number">96</span>/<span class="number">72</span> = <span class="number">1</span>;</span><br><span class="line">        __total_bytes = __size * __nobjs = <span class="number">72</span> * <span class="number">1</span> = <span class="number">72</span>;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//__n = 72</span></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == __nobjs) <span class="keyword">return</span>(__chunk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__n = 72</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list +</span><br><span class="line">                                _S_freelist_index(__n);<span class="comment">//_S_free_list[8]</span></span><br><span class="line"></span><br><span class="line">        _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"><span class="number">1</span>、STL中，所有容器申请的空间在内存的那个位置？</span><br><span class="line">A:都在堆上</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、空间配置器中，代码流程是怎么样的？</span><br><span class="line">第一分支：一级空间配置器，底层调用的是malloc申请空间</span><br><span class="line">第二分支：二级空间配置器，当申请的长度大于<span class="number">128</span>字节时候，底层走的还是malloc申请堆空间；但</span><br><span class="line">是当申请的长度小于<span class="number">128</span>字节时候，会使用自由链表（数组的长度为<span class="number">16</span>，_S_free_list） + 内存</span><br><span class="line">池（使用_S_start_free与_S_end_free指向内存池的首尾）的思想。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、函数调用过程是怎么样的？</span><br><span class="line">allocate：进行申请空间，该函数会调用_S_refill</span><br><span class="line">_S_refill：会将申请的空间进行切割，分成多个等分，然后进行挂接，该函数会调用_S_chunk_alloc</span><br><span class="line">_S_chunk_alloc：是真正的申请空间的函数，该函数底层调用的是malloc，申请大片空间。该函数还有可能会进行递归调用。</span><br><span class="line">_S_round_up：向上取整，得到<span class="number">8</span>的整数倍</span><br><span class="line">_S_freelist_index：获取自由链表的下标</span><br><span class="line"></span><br><span class="line">可以多多回顾 D27<span class="number">-4</span>、D27<span class="number">-5</span>、D28<span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="作业-LRU-算法"><a href="#作业-LRU-算法" class="headerlink" title="作业 - LRU 算法"></a>作业 - LRU 算法</h2><p>题目链接： <a href="https://leetcode.com/problems/lru-cache/description/">leetcode 146. LRU Cache</a></p><p>我的做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::list&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;::iterator  listptr;</span><br><span class="line">    <span class="keyword">typedef</span> std::unordered_map&lt;<span class="type">int</span>,std::pair&lt;<span class="type">int</span>,listptr&gt;&gt;::iterator  mapptr;</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) &#123;</span><br><span class="line">        Capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        mapptr it = mmap.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mmap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*get 到的值需要更新优先级为最新*/</span></span><br><span class="line">            <span class="built_in">put</span>(key, mmap[key].first);</span><br><span class="line">            <span class="keyword">return</span> it-&gt;second.first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        mlist.<span class="built_in">insert</span>(mlist.<span class="built_in">end</span>(), &#123;key, value&#125;);</span><br><span class="line"></span><br><span class="line">        mapptr it = mmap.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(it != mmap.<span class="built_in">end</span>()) <span class="comment">// 新元素之前就有</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*在 list 中移除旧元素*/</span></span><br><span class="line">            mlist.<span class="built_in">erase</span>(it-&gt;second.second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mlist.<span class="built_in">size</span>() &gt; Capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            mmap.<span class="built_in">erase</span>(mlist.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">            <span class="comment">// 在 list 中移除队头</span></span><br><span class="line">            mlist.<span class="built_in">erase</span>(mlist.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mmap[key] = std::<span class="built_in">make_pair</span>(value, std::<span class="built_in">prev</span>(mlist.<span class="built_in">end</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unordered_map&lt;<span class="type">int</span>,std::pair&lt;<span class="type">int</span>,listptr&gt;&gt; mmap;</span><br><span class="line">    std::list&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; mlist;</span><br><span class="line">    <span class="type">int</span> Capacity;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LRUCache* obj = <span class="keyword">new</span> <span class="built_in">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 返回 1</span></span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得键 2 作废</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">2</span>) &lt;&lt; std::endl; <span class="comment">// 返回 -1（未找到）</span></span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得键 1 作废</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 返回 -1（未找到）</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">3</span>) &lt;&lt; std::endl; <span class="comment">// 返回 3</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">4</span>) &lt;&lt; std::endl; <span class="comment">// 返回 4</span></span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>大体思路还算 ok ，但是不少语法上的细节是在 GPT 帮助下完成的，例如：</p><ul><li><code>it-&gt;second.second</code></li><li><code>std::prev()</code></li></ul><h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><div class="row"><iframe src="https://drive.google.com/file/d/11oK8x8NwlFcRaMH6OQhXJ3wYFwHxM1zZ/preview" style="width:100%; height:550px"></iframe></div><p>手打目录：</p><blockquote><p>0 ⾯向对象设计 1<br>1 为什么要⾯向对象设计 3<br>2 UML语言 6<br>3 类与类之间的关系 9<br>3.1 继承(泛化) 10<br>3.2 关联 12<br>3.3 聚合 14<br>3.4 组合 16<br>3.5 依赖 18<br>3.6 比较和总结 19<br>4 面向对象设计原则 20<br>4.1 单一职责原则 22<br>4.2 开放闭合原则 25<br>4.3 里氏替换原则 27<br>4.4 接口分离原则 30<br>4.5 依赖倒置原则 33<br>4.6 迪米特法则 35<br>4.7 组合复⽤原则 39</p></blockquote><h2 id="文本查询代码再再探"><a href="#文本查询代码再再探" class="headerlink" title="文本查询代码再再探"></a>文本查询代码再再探</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wordQueryTest.cpp</span></span><br><span class="line">get_file函数会传两个参数，作用是打开文件，返回一个TextQuery的对象</span><br><span class="line">get_file返回的TextQuery类型的对象，所以会调用TextQuery的构造，该函数执行了相应的读操</span><br><span class="line">作，将文件里面每一行放在file对应的shared_ptr&lt;vector&lt;string&gt;&gt;存起来；然后将每个单词与</span><br><span class="line">行号存在wm对应的map&lt;string, shared_ptr&lt;set&lt;<span class="type">size_t</span>&gt;&gt;&gt;存起来。</span><br><span class="line"></span><br><span class="line"><span class="comment">//sought是待查询的单词，可以使用&quot;hello&quot;进行替代，然后构建Query对象，调用Query的构造函数，将基类指针q指向派生类对象WordQuery，</span></span><br><span class="line"><span class="function">Query <span class="title">name</span><span class="params">(sought)</span></span>;</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string &amp;s)</span><br><span class="line">: <span class="built_in">q</span>(<span class="keyword">new</span> <span class="built_in">WordQuery</span>(s))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Query的eval方法，在该方法中能体现多态，调用的就是派生类WordQuery的eval方法</span></span><br><span class="line"><span class="type">const</span> QueryResult results = name.<span class="built_in">eval</span>(file);</span><br><span class="line"><span class="function">QueryResult <span class="title">Query::eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t);<span class="comment">//体现多态</span></span><br><span class="line"><span class="comment">//动态多态被激活的五个条件就全部都满足</span></span><br><span class="line"><span class="comment">//eval在基类Query_base中是虚函数</span></span><br><span class="line"><span class="comment">//在派生类WordQuery也是虚函数并且实现</span></span><br><span class="line"><span class="comment">//基类的指针q指向了派生类对象new WordQuery</span></span><br><span class="line"><span class="comment">//q调用了eval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用WordQuery的eval方法，在该方法中执行TextQuery的query函数</span></span><br><span class="line"><span class="function">QueryResult <span class="title">WordQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数讲带查询的单词sought，也就是&quot;hello&quot;,单词的行号nodata/loc-&gt;second,单词对应的</span></span><br><span class="line"><span class="comment">// 一行内容file传递给QueryResult的构造函数</span></span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> string &amp;sought)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> lineType <span class="title">nodata</span><span class="params">(<span class="keyword">new</span> set&lt;line_no&gt;)</span></span>;</span><br><span class="line">    wmIter loc = wm.<span class="built_in">find</span>(<span class="built_in">cleanup_str</span>(sought));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, nodata, file); <span class="comment">//待查询单词不存在</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);<span class="comment">//待查询单词存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这三个值就会分别交给sought，lines，file</span></span><br><span class="line"><span class="built_in">QueryResult</span>(std::string s,</span><br><span class="line">            std::shared_ptr&lt;std::set&lt;line_no&gt; &gt; p,</span><br><span class="line">            std::shared_ptr&lt;std::vector&lt;std::string&gt; &gt; f)</span><br><span class="line">: <span class="built_in">sought</span>(s)</span><br><span class="line">, <span class="built_in">lines</span>(p)</span><br><span class="line">, <span class="built_in">file</span>(f)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后执行print函数进行打印（实质上就是输出流运算符的重载）</span></span><br><span class="line"><span class="built_in">print</span>(cout, results) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数就将待查询单词，单词的次数，单词行号，单词对应的一行内容打出来</span></span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp; os, <span class="type">const</span> QueryResult &amp;qr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//std::ostream &amp;operator&lt;&lt;(std::ostream &amp; os, const QueryResult &amp;qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">       &lt;&lt; <span class="built_in">make_plural</span>(qr.lines-&gt;<span class="built_in">size</span>(), <span class="string">&quot;time&quot;</span>, <span class="string">&quot;s&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (lineIter num = qr.lines-&gt;<span class="built_in">begin</span>();num != qr.lines-&gt;<span class="built_in">end</span>(); ++num)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt; <span class="string">&quot;\t(line &quot;</span> &lt;&lt; *num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;) &quot;</span> &lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + *num)</span><br><span class="line">           &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：一定要熟悉多态，掌握多态的五个条件</span></span><br><span class="line"><span class="comment">//抽象类，纯虚函数</span></span><br><span class="line"><span class="comment">//私有的数据成员或者成员函数不能在类外面进行访问，如果必须在类外进行使用，需要友元的支撑。</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!ifs)</span><br><span class="line">&#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;jksdjs&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifstream infile;</span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">    infile.<span class="built_in">open</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line"><span class="function">shared_ptr&lt;Query_base&gt; <span class="title">q</span><span class="params">(<span class="keyword">new</span> WordQuery(s))</span></span>;</span><br><span class="line">Query_base *q = <span class="keyword">new</span> <span class="built_in">WordQuery</span>(s);</span><br><span class="line">Computer *pc = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;xiaomi&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">Base *pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="number">12</span>,<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">shared_ptr&lt;Query_base&gt; q;</span><br><span class="line"></span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string &amp;s)</span><br><span class="line">: <span class="built_in">q</span>(<span class="keyword">new</span> <span class="built_in">WordQuery</span>(s))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t); <span class="comment">//eval在基类Query_base中是纯虚函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态多态被激活的五个条件就全部都满足</span></span><br><span class="line"><span class="comment">//eval在基类Query_base中是虚函数</span></span><br><span class="line"><span class="comment">//在派生类WordQuery也是虚函数并且实现</span></span><br><span class="line"><span class="comment">//基类的指针q指向了派生类对象new WordQuery</span></span><br><span class="line"><span class="comment">//q调用了eval</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//andQueryTest.cpp</span></span><br><span class="line">sought1 = <span class="string">&quot;hello&quot;</span>,sought2 = <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query &amp;lhs, <span class="type">const</span> Query &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Query(shared_ptr&lt;Query_base&gt; )</span></span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs, rhs));</span><br><span class="line">    <span class="comment">//shared_ptr&lt;Query_base&gt; t(new AndQuery(lhs, rhs));</span></span><br><span class="line">    <span class="comment">// return t; Query(t)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Query <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Query t;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">    shared_ptr&lt;Query_base&gt;----&gt;<span class="built_in">Query</span>(xxx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Query</span>(shared_ptr&lt;Query_base&gt; )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// NotQuery 的逻辑</span><br><span class="line">hello</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">单词有的时候：1 3 6 9 10 &quot;hello&quot;</span><br><span class="line">没有出现单词：2 4 5 7 8 ~&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>上面的代码，包括之前的一些代码阅读，都是草稿性质的，并不能实际执行。</p><p>使用 StarUML 画出的类图（这个软件出的图有点不尽人意）：</p><p><img src="https://s2.loli.net/2024/05/10/mTR5owVHZLtG2U6.png" alt="74-5.png"></p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1haYhOE1IlaOQPC_LFEJ9dNeSeOCv_B_y/preview" style="width:100%; height:550px"></iframe></div><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>我们先来看一下之前写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Figure</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123;_name = <span class="string">&quot;Cylinder&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Figure* pfig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pfig-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&#x27;s area is &quot;</span></span><br><span class="line">         &lt;&lt; pfig-&gt;<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">o1</span><span class="params">(<span class="number">1.0</span>)</span></span>;</span><br><span class="line">    o1.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;o1);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">o2</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">    o2.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;o2);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Cylinder <span class="title">cy1</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    cy1.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;cy1);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Cylinder <span class="title">cy2</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    cy2.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;cy2);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 1</span></span><br><span class="line"><span class="comment">perimeter = 6.28319</span></span><br><span class="line"><span class="comment">area = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 2</span></span><br><span class="line"><span class="comment">perimeter = 12.5664</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 1</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment">volume = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 2</span></span><br><span class="line"><span class="comment">area = 50.2655</span></span><br><span class="line"><span class="comment">volume = 25.1327</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 50.2655</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>现在，我们尝试更优雅地创建对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123; _name = <span class="string">&quot;Cylinder&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Figure* pfig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pfig-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&#x27;s area is &quot;</span></span><br><span class="line">         &lt;&lt; pfig-&gt;<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Figure* <span class="title">create</span><span class="params">(<span class="type">const</span> string&amp; name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="string">&quot;Circle&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读配置文件</span></span><br><span class="line">            <span class="comment">// 解析配置文件</span></span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Circle</span>(<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(name == <span class="string">&quot;Cylinder&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读配置文件</span></span><br><span class="line">            <span class="comment">// 解析配置文件</span></span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Cylinder</span>(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">pCir</span><span class="params">(Factory::create(<span class="string">&quot;Circle&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">pCyl</span><span class="params">(Factory::create(<span class="string">&quot;Cylinder&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(pCir.<span class="built_in">get</span>());  <span class="comment">// get() 方法得到裸指针</span></span><br><span class="line">    <span class="built_in">func</span>(pCyl.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 3.14159</span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码采用了简单工厂的思想。</p><p><strong>简单工厂</strong>模式又叫<strong>静态工厂</strong>方法模式。提供一个工厂类，在工厂类中做判断，<strong>根据传入的类型创造相应的产品</strong>。当增加新的产品时，就需要修改工厂类。简单工厂模式提供了专门的工厂类用于创建对象，将对象的创建和对象的使用分离开。</p><p><img src="https://bu.dusays.com/2024/05/10/663e40bad9ea8.png" alt="74-6.png"></p><p>应用场景：一个公司、一个工厂可以生产很多的产品（类似于富士康）。</p><p>缺点:</p><ol><li>违背了开闭原则（扩展性比较差）</li><li>违背了单一职责原则（该类可以做很多事情）</li><li>违背了依赖倒置原则，不能更好的应对变化</li></ol><p>优点:</p><ol><li>直接通过配置文件就可以获取产品信息</li><li>无需知道产品的生产过程，就可以获取产品</li></ol><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>在简单工厂上进行改进。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123; _name = <span class="string">&quot;Cylinder&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Figure* pfig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pfig-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&#x27;s area is &quot;</span></span><br><span class="line">         &lt;&lt; pfig-&gt;<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Figure* <span class="title">create</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Factory</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleFactory</span>: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Figure* <span class="title">create</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读配置文件</span></span><br><span class="line">        <span class="comment">// 解析配置文件</span></span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Circle</span>(<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CylinderFactory</span>: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Figure* <span class="title">create</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读配置文件</span></span><br><span class="line">        <span class="comment">// 解析配置文件</span></span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Cylinder</span>(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Factory&gt; <span class="title">factoryCir</span><span class="params">(<span class="keyword">new</span> CircleFactory())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">myCir</span><span class="params">(factoryCir-&gt;create())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">unique_ptr&lt;Factory&gt; <span class="title">factoryCyl</span><span class="params">(<span class="keyword">new</span> CylinderFactory())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">myCyl</span><span class="params">(factoryCyl-&gt;create())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(myCir.<span class="built_in">get</span>());  <span class="comment">// get() 方法得到裸指针</span></span><br><span class="line">    <span class="built_in">func</span>(myCyl.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 3.14159</span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/11/663f07daf0546.png" alt="74-7.png"></p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>在软件开发及运行过程中，经常面临着“一系列相互依赖的对象”的创建工作；而由于需求的变化，常常存在更多系列对象的创建问题。</p><p>做法是：提供一个接口，该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。</p><p><img src="https://s2.loli.net/2024/05/11/2d6vpxyYeOc3rUH.png" alt="74-8.png"></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A类型的抽象产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractProductA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ~<span class="built_in">AbstractProductA</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类型的抽象产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractProductB</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ~<span class="built_in">AbstractProductB</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA1</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductA1::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA2</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductA2::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB1</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductB1::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB2</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductB2::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractProductA *<span class="title">createProductA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractProductB *<span class="title">createProductB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ~<span class="built_in">AbstractFactory</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span></span><br><span class="line">: <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractProductA *<span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB *<span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span></span><br><span class="line">: <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractProductA *<span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB *<span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractFactory *factory1 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory1</span>();</span><br><span class="line">    AbstractProductA *productA = factory1-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    AbstractProductB *productB = factory1-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    productA-&gt;<span class="built_in">show</span>();</span><br><span class="line">    productB-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    AbstractFactory *factory2 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory2</span>();</span><br><span class="line">    productA = factory2-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    productB = factory2-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    productA-&gt;<span class="built_in">show</span>();</span><br><span class="line">    productB-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>《设计模式：可复用面向对象软件的基础》对观察者模式定义如下：</p><p>定义对象的一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 当一个对象发生了变化，关注它的对象就会得到通知。这种交互也称为<strong>发布-订阅（publish - subscribe）</strong>。</p><p><img src="https://bu.dusays.com/2024/05/11/663f1479834f1.png" alt="74--9.png"></p><p>代码示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::list;</span><br><span class="line"><span class="keyword">using</span> std::find;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">attach</span><span class="params">(Observer *pObserver)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">detach</span><span class="params">(Observer *pObserver)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">notify</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Subject</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteSubject</span></span><br><span class="line">: <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attach</span><span class="params">(Observer *pObserver)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">detach</span><span class="params">(Observer *pObserver)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setStatus</span><span class="params">(<span class="type">int</span> status)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getStatus</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;Observer *&gt; _obList;</span><br><span class="line">    <span class="type">int</span> _status;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Observer</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver</span></span><br><span class="line">: <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteObserver</span>(<span class="type">const</span> string &amp;name)</span><br><span class="line">                    : _name(name) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ConcreteObserver &quot;</span> &lt;&lt; _name &lt;&lt; <span class="string">&quot;, value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver2</span></span><br><span class="line">: <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteObserver2</span>(<span class="type">const</span> string &amp;name)</span><br><span class="line">    : _name(name)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ConcreteObserver2 &quot;</span> &lt;&lt; _name &lt;&lt; <span class="string">&quot;, value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConcreteSubject::attach</span><span class="params">(Observer *pObserver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _obList.<span class="built_in">push_back</span>(pObserver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConcreteSubject::detach</span><span class="params">(Observer *pObserver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = _obList.<span class="built_in">begin</span>(); it != _obList.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it == pObserver)</span><br><span class="line">        &#123;</span><br><span class="line">            _obList.<span class="built_in">remove</span>(pObserver);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConcreteSubject::notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ob : _obList)</span><br><span class="line">    &#123;</span><br><span class="line">        ob-&gt;<span class="built_in">update</span>(_status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;ConcreteSubject&gt; <span class="title">pSubject</span><span class="params">(<span class="keyword">new</span> ConcreteSubject())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Observer&gt; <span class="title">pObserver</span><span class="params">(<span class="keyword">new</span> ConcreteObserver(<span class="string">&quot;lili&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Observer&gt; <span class="title">pObserver2</span><span class="params">(<span class="keyword">new</span> ConcreteObserver2(<span class="string">&quot;lucy&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成为 ikun</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">attach</span>(pObserver.<span class="built_in">get</span>());</span><br><span class="line">    pSubject-&gt;<span class="built_in">attach</span>(pObserver2.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gege 更新状态</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">setStatus</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gege 发布动态</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 虚伪的拥护</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">detach</span>(pObserver2.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    pSubject-&gt;<span class="built_in">setStatus</span>(<span class="number">3</span>);</span><br><span class="line">    pSubject-&gt;<span class="built_in">notify</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Observer2 遗憾离场</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ConcreteObserver lili, value = 2</span></span><br><span class="line"><span class="comment">ConcreteObserver2 lucy, value = 2</span></span><br><span class="line"><span class="comment">ConcreteObserver lili, value = 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h2><h3 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h3><p><strong>进程是系统中程序执行和资源分配的基本单位。</strong> 每个进程有自己的数据段、代码段和堆栈段。这就造成进程在进行切换等操作时都需要有比较多的上下文切换等动作。为了进一步减少处理器的空转时间支持多处理器和减少上下文切换开销，也就出现了线程。</p><p><strong>线程是操作系统能够进行运算调度的最小单位。</strong> 它被包含在进程之中，是进程中的实际运作单位。是进程的基本调度单元，<strong>每个进程至少都有一个 main 线程</strong>，它与同进程中的其他线程共享进程空间（堆代码、数据、文件描述符、信号等），<strong>只拥有少量的栈空间</strong>，大大减少了上下文切换的开销。</p><p>线程和进程在使用上各有优缺点：线程执行开销小，占用的 CPU 少，线程之间的切换快，但不利于资源的管理和保护；而进程正相反。</p><p>同进程一样，线程也将相关的变量值放在 <strong>线程控制表（TCB）</strong> 内。一个进程可以有多个线程，也就是有多个线程控制表及堆栈寄存器，共享一个用户地址空间。要注意的是，<strong>由于线程共享了进程的资源和地址空间，因此，任何线程对系统资源的操作都会给其他线程带来影响。</strong></p><h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><p>用户态空间（0-3G）：运行在用户态的线程称为用户级线程（用户态线程），可以使用系统调用。</p><p>内核态空间（3G-4G）：运行在内核态的线程称为内核级线程（内核态线程）。</p><h3 id="线程的-Linux-实现"><a href="#线程的-Linux-实现" class="headerlink" title="线程的 Linux 实现"></a>线程的 Linux 实现</h3><p>Linux 的线程是通过用户级的函数库实现的，一般采用 pthread 线程库实现线程的访问和控制。它用第三方 posix 标准的 pthread，具有良好的可移植性。编译时要在后面加上 <code>–lpthread</code>。</p><table>  <tbody>    <tr>      <td></td>      <td><strong>创建</strong></td>      <td><strong>退出</strong></td>      <td><strong>等待</strong></td>    </tr>    <tr>      <td><strong>进程</strong></td>      <td>fork()</td>      <td>exit()</td>      <td>wait()</td>    </tr>    <tr>      <td><strong>线程</strong></td>      <td>pthread_create()</td>      <td>pthread_exit()</td>      <td><strong>pthread_join()</strong></td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table><h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compile and link with -pthread.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *),</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">void</span> *arg)</span></span>;</span><br><span class="line"><span class="comment">// thread:线程id，为了与其他线程做区分。</span></span><br><span class="line"><span class="comment">// attr:线程的属性，线程的特性，可以使用默认属性，将其设置空即可。</span></span><br><span class="line"><span class="comment">// start_routine:线程入口函数，线程需要去做的任务，都写在该函数中。start_routine是一个函数指针。</span></span><br><span class="line"><span class="comment">// arg:代表的是线程的参数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的返回类型是一个int，如果线程创建成功，就会返回0，如果线程创建失败，会返回错误码。</span></span><br></pre></td></tr></table></figure><p>传多个参数的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// just an example...</span></span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">float</span> fx;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pstr = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">float</span> fx;</span><br><span class="line">    <span class="type">char</span> *pstr;</span><br><span class="line">&#125;Data_t;</span><br><span class="line"></span><br><span class="line">Data_t *p;</span><br></pre></td></tr></table></figure><p>来看一个简单的例子，它展示了线程的不确定性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create: %s\n&quot;</span>, <span class="built_in">strerror</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果是不确定的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以考虑使用 sleep 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create: %s\n&quot;</span>, <span class="built_in">strerror</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>更改 sleep 函数的位置，可以得到不一样的效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create: %s\n&quot;</span>, <span class="built_in">strerror</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>用宏包装一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>向线程入口函数中传参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = (<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread. %d\n&quot;</span>, *pInt);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> aaa = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, (<span class="type">void</span>*)&amp;aaa);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread. 10</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="线程的退出"><a href="#线程的退出" class="headerlink" title="线程的退出"></a>线程的退出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span></span>;</span><br><span class="line"><span class="comment">//retVal:线程退出时候的值（状态）</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = (<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread. %d\n&quot;</span>, *pInt);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> aaa = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, (<span class="type">void</span>*)&amp;aaa);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread. 10</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>main 线程是主线程，主线程执行完毕之后，不管子线程，子线程有可能还没有来得及执行。所以一般都需要让主线程等待子线程执行完毕，再退出。</p><h3 id="线程的等待"><a href="#线程的等待" class="headerlink" title="线程的等待"></a>线程的等待</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span></span>;</span><br><span class="line"><span class="comment">//thread：传递进来的是被等待线程的id</span></span><br><span class="line"><span class="comment">//retVal：将等待线程的状态值取出来</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_join&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">pthread_join: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>获取线程 id：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">pthread_t</span> <span class="title">pthread_self</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>线程的执行具有随机性。因为时序不同，所以每次运行的结果都可能不同。</p><h3 id="线程的取消"><a href="#线程的取消" class="headerlink" title="线程的取消"></a>线程的取消</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cancel</span><span class="params">(<span class="type">pthread_t</span> thread)</span></span>;</span><br><span class="line"><span class="comment">//thread:被取消的线程id</span></span><br></pre></td></tr></table></figure><p>线程也可以被其它线程杀掉，在 Linux 中的说法是一个线程被另一个线程取消（cancel）。</p><p>线程取消的方法是一个线程向目标线程发 cancel 信号， 但是如何处理 cancel 信号则由目标线程自己决定，目标线程或者忽略、或者立即终止、或者继续运行至 cancelation-point（取消点）后终止。<strong>默认的行为是运行到取消点。</strong></p><p>根据 POSIX 标准：一些会引起阻塞的系统调用都是取消点。不过经过测试一些非阻塞性函数也可以是取消点。可以通过 man 7 pthreads 查看，不过由于 Linux 线程库和 C 库结合的不是很好，有很多函数没有明确是否为取消点。</p><p>总之，线程的取消一方面是一个线程强行杀另外一个线程，从程序设计角度看并不是一种好的风格，另一方面目前 Linux 本身对这方面的支持并不完善，所以在<strong>实践中应该谨慎使用</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程尝试杀死子线程</span></span><br><span class="line">    ret = <span class="built_in">pthread_cancel</span>(thid);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cancel&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_join&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">pthread_cancel: Success</span></span><br><span class="line"><span class="comment">pthread_join: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="线程的分离"><a href="#线程的分离" class="headerlink" title="线程的分离"></a>线程的分离</h3><p>如果想让主线程不去等待或者回收子线程，那么可以将子线程设置为分离状态：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="面向对象的线程封装"><a href="#面向对象的线程封装" class="headerlink" title="面向对象的线程封装"></a>面向对象的线程封装</h2><p>整体思路：</p><p><img src="https://bu.dusays.com/2024/05/13/6641e4a61deff.png" alt="74-10.png"></p><p><code>Thread.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Thread</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span>; <span class="comment">// 线程的入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;      <span class="comment">// 线程的执行任务</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> _thid;  <span class="comment">// 线程 id</span></span><br><span class="line">    <span class="type">bool</span> _isRunning; <span class="comment">// 线程运行的标志位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Thread.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Thread::<span class="built_in">Thread</span>()</span><br><span class="line">: _thid(<span class="number">0</span>)</span><br><span class="line">, _isRunning(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread::~<span class="built_in">Thread</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 让子线程与主线程分离，主线程不管子线程的回收</span></span><br><span class="line">        <span class="built_in">pthread_detach</span>(_thid);</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程，启动！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;_thid, <span class="literal">nullptr</span>, threadFunc, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _isRunning = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_join</span>(_thid, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_join\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread::threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Thread* pth = <span class="built_in">static_cast</span>&lt;Thread*&gt;(arg);</span><br><span class="line">    <span class="keyword">if</span>(pth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// threadFunc 是 static 的，没有 this 指针</span></span><br><span class="line">        <span class="comment">// 故在 pthread_create 中将 this 传进来</span></span><br><span class="line">        pth-&gt;<span class="built_in">run</span>(); <span class="comment">// 体现多态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让子线程主动退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testThread.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>: <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 具体逻辑根据需要书写</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;My Thread is Running !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Thread&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> MyThread())</span></span>;</span><br><span class="line">    p-&gt;<span class="built_in">start</span>();</span><br><span class="line">    p-&gt;<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于对象的线程封装"><a href="#基于对象的线程封装" class="headerlink" title="基于对象的线程封装"></a>基于对象的线程封装</h2><p>思路：</p><p><img src="https://s2.loli.net/2024/05/14/NYAtgceWVFSXHMR.jpg" alt="74-11.jpg"></p><p><code>Thread.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> ThreadCallBack = function&lt;<span class="built_in">void</span>()&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>(ThreadCallBack&amp;&amp; cb); <span class="comment">// 移动语义是为了提高效率</span></span><br><span class="line">    ~<span class="built_in">Thread</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span>; <span class="comment">// 线程的入口函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> _thid;     <span class="comment">// 线程 id</span></span><br><span class="line">    <span class="type">bool</span> _isRunning;     <span class="comment">// 线程运行的标志位</span></span><br><span class="line">    ThreadCallBack _cb;  <span class="comment">// 封装的任务</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Thread.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Thread::<span class="built_in">Thread</span>(ThreadCallBack&amp;&amp; cb)</span><br><span class="line">: _thid(<span class="number">0</span>)</span><br><span class="line">, _isRunning(<span class="literal">false</span>)</span><br><span class="line">, _cb(std::<span class="built_in">move</span>(cb)) <span class="comment">// 注册回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread::~<span class="built_in">Thread</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 让子线程与主线程分离，主线程不管子线程的回收</span></span><br><span class="line">        <span class="built_in">pthread_detach</span>(_thid);</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程，启动！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;_thid, <span class="literal">nullptr</span>, threadFunc, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _isRunning = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_join</span>(_thid, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_join\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread::threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Thread* pth = <span class="built_in">static_cast</span>&lt;Thread*&gt;(arg);</span><br><span class="line">    <span class="keyword">if</span>(pth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// threadFunc 是 static 的，没有 this 指针</span></span><br><span class="line">        <span class="comment">// 故在 pthread_create 中将 this 传进来</span></span><br><span class="line">        pth-&gt;_cb();  <span class="comment">// 执行回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让子线程主动退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testThread.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTask</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 具体逻辑根据需要书写</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;My Thread is Running !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyTask task;</span><br><span class="line">    <span class="function">Thread <span class="title">th</span><span class="params">(std::bind(&amp;MyTask::process, &amp;task))</span></span>;</span><br><span class="line"></span><br><span class="line">    th.<span class="built_in">start</span>();</span><br><span class="line">    th.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>Posix Thread 中定义了一套专门用于线程互斥的 mutex 函数。mutex 是一种简单的加锁的方法来控制对共享资源的存取，这个互斥锁只有两种状态（上锁和解锁），可以把互斥锁看作某种意义上的全局变量。</p><h3 id="互斥锁的初始化"><a href="#互斥锁的初始化" class="headerlink" title="互斥锁的初始化"></a>互斥锁的初始化</h3><p>静态初始化与动态初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="comment">//pthread_mutex_t 锁的类型</span></span><br><span class="line"><span class="comment">//mutex锁的名字</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化（常用）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *mutexattr)</span></span>;</span><br><span class="line"><span class="comment">//mutex：指向互斥锁的指针的名字</span></span><br><span class="line"><span class="comment">//mutexattr:互斥锁的属性，如果不需要设置锁的其他属性，可以设置为nullptr，用默认属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：如果锁的初始化是正常的，就会返回0；否则会返回非0的值</span></span><br></pre></td></tr></table></figure><h3 id="互斥锁的销毁"><a href="#互斥锁的销毁" class="headerlink" title="互斥锁的销毁"></a>互斥锁的销毁</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：如果锁正常销毁就会返回0；否则返回错误码</span></span><br></pre></td></tr></table></figure><h3 id="加锁与解锁"><a href="#加锁与解锁" class="headerlink" title="加锁与解锁"></a>加锁与解锁</h3><p>注意：锁只有两种状态，要么加锁，要么解锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试加锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure><p>上锁状态，资源一直被占用，不能直接回收或销毁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Device or resource busy</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>互斥锁不能多加：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">卡住</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>正确的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>尝试加锁（若已加锁，则尝试上锁失败；否则成功）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_trylock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_trylock: Device or resource busy</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>两次 trylock ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_trylock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_trylock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_trylock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_trylock: Device or resource busy</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><p>条件变量是利用线程间共享的全局变量进行同步的一种机制， 主要包括两个动作：一个线程等待条件变量上的条件成立而挂起；另一个线程使条件成立（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。</p><h3 id="条件变量的初始化"><a href="#条件变量的初始化" class="headerlink" title="条件变量的初始化"></a>条件变量的初始化</h3><p>两种初始化的方式：静态初始化与动态初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_condattr_t</span> *cond_attr)</span></span>;</span><br><span class="line"><span class="comment">//cond：条件变量的名字</span></span><br><span class="line"><span class="comment">//cond_attr:条件变量属性，默认情况可以使用nullptr传递默认值。</span></span><br><span class="line"><span class="comment">//返回值：初始化成功就返回0；否则就返回非0的错误码。</span></span><br></pre></td></tr></table></figure><h3 id="条件变量的销毁"><a href="#条件变量的销毁" class="headerlink" title="条件变量的销毁"></a>条件变量的销毁</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"><span class="comment">//返回值：销毁成功就返回0；否则就返回非0的错误码。</span></span><br></pre></td></tr></table></figure><h3 id="条件变量的等待"><a href="#条件变量的等待" class="headerlink" title="条件变量的等待"></a>条件变量的等待</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无时间的等待，一直等待</span></span><br><span class="line"><span class="comment">//该函数会分为两个部分（至关重要）</span></span><br><span class="line"><span class="comment">//1、上半部：（在条件变量上）排队；解锁；睡眠；</span></span><br><span class="line"><span class="comment">//2、下半部：(从条件变量上)被唤醒；加锁；函数返回</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有时等待，超过设定的时间之后，就不会阻塞下去，而会返回</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">pthread_mutex_t</span> *mutex,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">const</span> <span class="keyword">struct</span> timespec *abstime)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="条件变量的激发"><a href="#条件变量的激发" class="headerlink" title="条件变量的激发"></a>条件变量的激发</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// 《unix高级环境编程》</span></span><br><span class="line"><span class="comment">// 发送消息，让至少一个等待在条件变量上的线程唤醒。（唤醒的线程的个数是不一定的，但是至少有一个）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送广播消息，让所有等待在条件变量上的线程都被唤醒。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure><p>注意：POSIX 规范为了简化 pthread_cond_signal 的实现，允许它在实现的时候唤醒一个以上的线程。结果是，当一个线程调用 pthread_cond_signal 后，多个调用 pthread_cond_wait 或 pthread_cond_timedwait 的线程返回。 该现象被称为<strong>虚假唤醒</strong>。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 互斥锁初始化</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量初始化</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;</span><br><span class="line">    ret = <span class="built_in">pthread_cond_init</span>(&amp;cond, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁加锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_destroy</span>(&amp;cond);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_destory&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_cond_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">pthread_cond_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看一段稍显迷惑的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;</span><br><span class="line">&#125;Data_t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Data_t* p = (Data_t*) arg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁加锁</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_lock</span>(&amp;p-&gt;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock2&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_cond_wait</span>(&amp;p-&gt;cond, &amp;p-&gt;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_wait&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;p-&gt;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock2&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Data_t data;</span><br><span class="line">    data.num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁初始化</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;data.mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量初始化</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_init</span>(&amp;data.cond, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子线程，让其等待在条件变量上</span></span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, &amp;data);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让子线程先执行</span></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁加锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;data.mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock1&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程唤醒子线程</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_signal</span>(&amp;data.cond);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_signal&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;data.mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock1&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_join&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;data.mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_destroy</span>(&amp;data.cond);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_destory&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_cond_init: Success</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock2: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock1: Success</span></span><br><span class="line"><span class="comment">pthread_cond_signal: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock1: Success</span></span><br><span class="line"><span class="comment">pthread_cond_wait: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock2: Success</span></span><br><span class="line"><span class="comment">pthread_join: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">pthread_cond_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么获得 lock2 后还能获得 lock1 ？</span></span><br><span class="line"><span class="comment">// 互斥锁不是不能多加吗？</span></span><br></pre></td></tr></table></figure><p>代码最后注释的两个疑问，和 pthread_cond_wait 函数的特性有关。该函数会分为两个部分：</p><ul><li>上半部：在条件变量上排队；解锁；睡眠</li><li>下半部：在条件变量上被唤醒；加锁；函数返回</li></ul><h2 id="生产者与消费者封装"><a href="#生产者与消费者封装" class="headerlink" title="生产者与消费者封装"></a>生产者与消费者封装</h2><h3 id="简单情形"><a href="#简单情形" class="headerlink" title="简单情形"></a>简单情形</h3><p>思路：</p><p><img src="https://s2.loli.net/2024/05/15/lQsUm8LR64NZEFP.png" alt="74-12.png"></p><p><code>MutexLock.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MUTEXLOCK_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MUTEXLOCK_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLock</span>();</span><br><span class="line">    ~<span class="built_in">MutexLock</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trylock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get_mutex_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>MutexLock.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MutexLock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MutexLock::<span class="built_in">MutexLock</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;_mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_init\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MutexLock::~<span class="built_in">MutexLock</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_destroy\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexLock::lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_lock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexLock::trylock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_trylock\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexLock::unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Condition.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CONDITION_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CONDITION_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Condition</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Condition</span>(MutexLock&amp; mutex);</span><br><span class="line">    ~<span class="built_in">Condition</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MutexLock&amp; _mutex;</span><br><span class="line">    <span class="type">pthread_cond_t</span> _cond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Condition.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Condition.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MutexLock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Condition::<span class="built_in">Condition</span>(MutexLock&amp; mutex)</span><br><span class="line">: _mutex(mutex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_init</span>(&amp;_cond, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_init\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                      </span><br><span class="line">Condition::~<span class="built_in">Condition</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_destroy</span>(&amp;_cond);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_destroy\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_wait</span>(&amp;_cond, _mutex.<span class="built_in">get_mutex_ptr</span>());</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">                                      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_signal</span>(&amp;_cond);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_signal\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_broadcast</span>(&amp;_cond);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TaskQueue.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TASKQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TASKQUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MutexLock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Condition.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">size_t</span> queSize);</span><br><span class="line">    ~<span class="built_in">TaskQueue</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">size_t</span> _queSize;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; _que;</span><br><span class="line">    MutexLock _mutex;</span><br><span class="line">    Condition _notEmpty;</span><br><span class="line">    Condition _notFull;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>TaskQueue.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TaskQueue::<span class="built_in">TaskQueue</span>(<span class="type">size_t</span> queSize)</span><br><span class="line">: _queSize(queSize)</span><br><span class="line">, _que()</span><br><span class="line">, _mutex()</span><br><span class="line">, _notEmpty(_mutex)</span><br><span class="line">, _notFull(_mutex)  <span class="comment">// 注意要按照顺序初始化</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _queSize 和 _que 不用管</span></span><br><span class="line"><span class="comment">// _mutex, _notEmpty, _notFull 生命周期结束自动执行各自的析构函数</span></span><br><span class="line">TaskQueue::~<span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == _que.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::full</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _que.<span class="built_in">size</span>() == _queSize;</span><br><span class="line">    <span class="comment">// 这里的 _queSize 其实是指队列的最大容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskQueue::push</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _mutex.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notFull.<span class="built_in">wait</span>();</span><br><span class="line">        <span class="comment">// 这个变量命名有点奇怪，可以这样理解：</span></span><br><span class="line">        <span class="comment">// 等待不满的时候</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _que.<span class="built_in">push</span>(value);</span><br><span class="line">    _notEmpty.<span class="built_in">notify</span>(); <span class="comment">// 唤醒消费者</span></span><br><span class="line">    _mutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TaskQueue::pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _mutex.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notEmpty.<span class="built_in">wait</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = _que.<span class="built_in">front</span>();</span><br><span class="line">    _que.<span class="built_in">pop</span>();</span><br><span class="line">    _notFull.<span class="built_in">notify</span>(); <span class="comment">// 唤醒生产者</span></span><br><span class="line">    _mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Thread.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Thread</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span>; <span class="comment">// 线程的入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;      <span class="comment">// 线程的执行任务</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> _thid;  <span class="comment">// 线程 id</span></span><br><span class="line">    <span class="type">bool</span> _isRunning; <span class="comment">// 线程运行的标志位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Thread.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Thread::<span class="built_in">Thread</span>()</span><br><span class="line">: _thid(<span class="number">0</span>)</span><br><span class="line">, _isRunning(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread::~<span class="built_in">Thread</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 让子线程与主线程分离，主线程不管子线程的回收</span></span><br><span class="line">        <span class="built_in">pthread_detach</span>(_thid);</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程，启动！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;_thid, <span class="literal">nullptr</span>, threadFunc, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _isRunning = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_join</span>(_thid, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_join\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread::threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Thread* pth = <span class="built_in">static_cast</span>&lt;Thread*&gt;(arg);</span><br><span class="line">    <span class="keyword">if</span>(pth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// threadFunc 是 static 的，没有 this 指针</span></span><br><span class="line">        <span class="comment">// 故在 pthread_create 中将 this 传进来</span></span><br><span class="line">        pth-&gt;<span class="built_in">run</span>(); <span class="comment">// 体现多态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让子线程主动退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Producer.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PRODUCER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PRODUCER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span></span><br><span class="line">: <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Producer</span>(TaskQueue&amp; taskQue)</span><br><span class="line">    : _taskQue(taskQue)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Producer</span>()</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ::<span class="built_in">srand</span>(::<span class="built_in">clock</span>());</span><br><span class="line">        <span class="type">size_t</span> cnt = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> number = ::<span class="built_in">rand</span>()%<span class="number">100</span>;</span><br><span class="line">            _taskQue.<span class="built_in">push</span>(number);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&gt;&gt;Producer produce: &quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaskQueue&amp; _taskQue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Consumer.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CONSUMER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CONSUMER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span></span><br><span class="line">: <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Consumer</span>(TaskQueue&amp; taskQue)</span><br><span class="line">    : _taskQue(taskQue)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Consumer</span>()</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> cnt = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num = _taskQue.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&gt;&gt;Consumer consume: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaskQueue&amp; _taskQue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>testFile.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Producer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Consumer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TaskQueue <span class="title">task</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Producer <span class="title">pro</span><span class="params">(task)</span></span>;</span><br><span class="line">    <span class="function">Consumer <span class="title">con</span><span class="params">(task)</span></span>;</span><br><span class="line"></span><br><span class="line">    pro.<span class="built_in">start</span>();</span><br><span class="line">    con.<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    pro.<span class="built_in">join</span>();</span><br><span class="line">    con.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TaskQueue <span class="title">task</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Thread&gt; <span class="title">pro</span><span class="params">(<span class="keyword">new</span> Producer(task))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Thread&gt; <span class="title">con</span><span class="params">(<span class="keyword">new</span> Consumer(task))</span></span>;</span><br><span class="line"></span><br><span class="line">    pro-&gt;<span class="built_in">start</span>();</span><br><span class="line">    con-&gt;<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    pro-&gt;<span class="built_in">join</span>();</span><br><span class="line">    con-&gt;<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某一次的运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 39</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 71</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 55</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 9</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 94</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 19</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 71</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 59</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 90</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: &gt;&gt;Producer produce: 4</span></span><br><span class="line"><span class="comment">39</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 71</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 97</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 55</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 9</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 94</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 19</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: &gt;&gt;Consumer consume: 5771</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 59</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 90</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 4</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 97</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 57</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 23</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 85</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 95</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: &gt;&gt;Producer produce: 29</span></span><br><span class="line"><span class="comment">23&gt;&gt;Producer produce: </span></span><br><span class="line"><span class="comment">8&gt;&gt;Consumer consume: 85</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 95</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 29</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 54</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 54</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以看到两线程交替运行</span></span><br><span class="line"><span class="comment">空行是之前还没来得及输出的换行</span></span><br><span class="line"><span class="comment">cout 不是原子操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类图设计的思路可以多回顾 D31_4</span></span><br></pre></td></tr></table></figure><h3 id="利用-RAII-优化"><a href="#利用-RAII-优化" class="headerlink" title="利用 RAII 优化"></a>利用 RAII 优化</h3><p>一个小改进，我们可以利用 RAII 的思想管理锁（以两个文件为例）：</p><p><code>MutexLock.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MUTEXLOCK_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MUTEXLOCK_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLock</span>();</span><br><span class="line">    ~<span class="built_in">MutexLock</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trylock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get_mutex_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 RAII 的思想</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLockGuard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLockGuard</span>(MutexLock&amp; mutex)</span><br><span class="line">    : _mutex(mutex)</span><br><span class="line">    &#123;</span><br><span class="line">        _mutex.<span class="built_in">lock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MutexLockGuard</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        _mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MutexLock&amp; _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>TaskQueue.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TaskQueue::<span class="built_in">TaskQueue</span>(<span class="type">size_t</span> queSize)</span><br><span class="line">: _queSize(queSize)</span><br><span class="line">, _que()</span><br><span class="line">, _mutex()</span><br><span class="line">, _notEmpty(_mutex)</span><br><span class="line">, _notFull(_mutex)  <span class="comment">// 注意要按照顺序初始化</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _queSize 和 _que 不用管</span></span><br><span class="line"><span class="comment">// _mutex, _notEmpty, _notFull 生命周期结束自动执行各自的析构函数</span></span><br><span class="line">TaskQueue::~<span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == _que.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::full</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _que.<span class="built_in">size</span>() == _queSize;</span><br><span class="line">    <span class="comment">// 这里的 _queSize 其实是指队列的最大容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskQueue::push</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// RAII 的思想：</span></span><br><span class="line">    <span class="comment">// 在构造函数中初始化资源，析构函数中释放</span></span><br><span class="line">    <span class="comment">// 实质：用栈对象的生命周期管理资源</span></span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">autolock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notFull.<span class="built_in">wait</span>();</span><br><span class="line">        <span class="comment">// 这个变量命名有点奇怪，可以这样理解：</span></span><br><span class="line">        <span class="comment">// 等待不满的时候</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _que.<span class="built_in">push</span>(value);</span><br><span class="line">    _notEmpty.<span class="built_in">notify</span>(); <span class="comment">// 唤醒消费者</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TaskQueue::pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">autolock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notEmpty.<span class="built_in">wait</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = _que.<span class="built_in">front</span>();</span><br><span class="line">    _que.<span class="built_in">pop</span>();</span><br><span class="line">    _notFull.<span class="built_in">notify</span>(); <span class="comment">// 唤醒生产者</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h3><p>考虑这样的情况：<br>有多个生产者，生产者们的生产速度超过了消费者消费的速度，那么，仓库常常会处于满的状态，生产者线程被挂起（假设共有 3 个生产者）。现在，消费者消费了一个产品，调用 pthread_cond_signal 函数，由于 POSIX 规范允许它唤醒一个以上的线程（见之前笔记），如果此时唤醒了多个生产者线程（假设我们唤醒了 3 个线程），来看下面的代码逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line">    _notFull.<span class="built_in">wait</span>();</span><br><span class="line">    <span class="comment">// 这个变量命名有点奇怪，可以这样理解：</span></span><br><span class="line">    <span class="comment">// 等待不满的时候</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_que.<span class="built_in">push</span>(value);</span><br><span class="line">_notEmpty.<span class="built_in">notify</span>(); <span class="comment">// 唤醒消费者</span></span><br></pre></td></tr></table></figure><p>它们都会走出<code>if()&#123;&#125;</code>，并在 _que 里面塞点东西，这是我们不愿看见的。</p><p>使用<strong>虚假唤醒</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line">    _notFull.<span class="built_in">wait</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_que.<span class="built_in">push</span>(value);</span><br></pre></td></tr></table></figure><h3 id="禁止复制"><a href="#禁止复制" class="headerlink" title="禁止复制"></a>禁止复制</h3><p>这些代码仍然有问题。</p><p>锁、条件变量、线程是资源，不能进行复制或赋值，要体现对象语义。</p><p>解决方案：</p><ol><li>将拷贝构造函数和赋值运算符函数设为 private. （C++98）</li><li>将拷贝构造函数和赋值运算符函数进行<code>=delete</code> （C++11）</li></ol><p>我们沿用<code>2</code>的思路，使用一个对原有代码最少改动的方法。</p><p>编写文件<code>NonCopyable.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _NONCOPYABLE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _NONCOPYABLE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonCopyable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NonCopyable</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">NonCopyable</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NonCopyable</span>(<span class="type">const</span> NonCopyable&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    NonCopyable&amp; <span class="keyword">operator</span> = (<span class="type">const</span> NonCopyable&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后让现有的一些类继承自此类（注意需要包含头文件<code>NonCopyable.h</code>）。</p><p><code>Condition.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Condition</span></span><br><span class="line">: NonCopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Condition</span>(MutexLock&amp; mutex);</span><br><span class="line">    ~<span class="built_in">Condition</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MutexLock&amp; _mutex;</span><br><span class="line">    <span class="type">pthread_cond_t</span> _cond;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>MutexLock.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span></span><br><span class="line">: NonCopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLock</span>();</span><br><span class="line">    ~<span class="built_in">MutexLock</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trylock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get_mutex_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> _mutex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Thread.h</code>同理。</p><p>最终的代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/pc_problem">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/pc_problem</a></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>任务量（并发量）较大时，频繁地创建、销毁线程开销也较大。我们可以提前创建好线程，有任务过来的时候，先放到任务队列中，之后子线程从任务队列中获取任务并执行。这样能提高程序的执行效率。</p><h3 id="面向对象的线程池封装"><a href="#面向对象的线程池封装" class="headerlink" title="面向对象的线程池封装"></a>面向对象的线程池封装</h3><p>类图：</p><p><img src="https://bu.dusays.com/2024/05/17/664701c6f269b.jpg" alt="74-13.jpg"></p><p>我的一个通俗但未必严谨的理解：<br>ThreadPool 就是一个中介平台，本身并不做事情，它的手下有一堆干活小弟 Thread（这是一个抽象类，真正干活的是 WorkThread），中介平台会接一些外包任务 Task 分配给干活小弟干。具体来说，WorkThread 的<code>run()</code>方法去执行 ThreadPool 的任务<code>threadFunc()</code> .</p><p>代码参见： <a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/oo_threadPool">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/oo_threadPool</a></p><p>一些注意点写在了注释里。</p><p>一点调试经验：<br>如果线程池退不出来，可以使用<code>ps -elLF | grep a.out</code>查看进程状态。</p><p>时序图：</p><p><img src="https://s2.loli.net/2024/05/20/hSNiH5OQ8Wt6RJF.jpg" alt="74-14.jpg"></p><h3 id="基于对象的线程池封装"><a href="#基于对象的线程池封装" class="headerlink" title="基于对象的线程池封装"></a>基于对象的线程池封装</h3><p>类图：</p><p><img src="https://bu.dusays.com/2024/05/20/664afdeea8a6f.jpg" alt="74-15.JPG"></p><p>代码参见：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/bo_threadPool">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/bo_threadPool</a></p><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><p>pthread_create 的第二个参数 attr 是一个结构体指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">__pthread_attr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sched_param</span> __schedparam;</span><br><span class="line">    <span class="type">void</span> *__stackaddr;</span><br><span class="line">    <span class="type">size_t</span> __stacksize;</span><br><span class="line">    <span class="type">size_t</span> __guardsize;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">__pthread_detachstate</span> __detachstate;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">__pthread_inheritsched</span> __inheritsched;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">__pthread_contentionscope</span> __contentionscope;</span><br><span class="line">    <span class="type">int</span> __schedpolicy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构中的元素分别指定新线程的运行属性，各成员属性为：</p><p><strong>__detachstate</strong> 表示新线程是否与进程中其他线程脱离同步，如果置该属性则新线程不能用 pthread_join() 来等待，且在退出时自行释放所占用的资源。缺省为 PTHREAD_CREATE_JOINABLE 状态。这个属性也可以在线程创建并运行以后用 pthread_detach() 来设置，而一旦设置为 PTHREAD_CREATE_DETACHED 状态（不论是创建时设置还是运行时设置）则不能再恢复到 PTHREAD_CREATE_JOINABLE 状态。</p><p><strong>__schedpolicy</strong>：表示新线程的调度策略，主要包括 SCHED_OTHER（分时调度策略）、SCHED_RR（实时、时间片轮转法）和 SCHED_FIFO（实时、 先到先服务）三种， 缺省为 SCHED_OTHER，后两种调度策略仅对超级用户有效。运行时可以用过 pthread_setschedparam() 来改变。</p><p><strong>__schedparam</strong>：一个 sched_param 结构，目前仅有一个 sched_priority 整型变量表示线程的运行优先级。这个参数仅当调度策略为实时（即 SCHED_RR 或 SCHED_FIFO）时才有效，并可以在运行时通过 pthread_setschedparam() 函数来改变，缺省为 0 .</p><p><strong>__inheritsched</strong>：有两种值可供选择：PTHREAD_EXPLICIT_SCHED 和 PTHREAD_INHERIT_SCHED，前者表示新线程使用显式指定调度策略和调度参数（即 attr 中的值），而后者表示继承调用者线程的值。缺省为 PTHREAD_INHERIT_SCHED .</p><p><strong>__contentionscope</strong>：表示线程间竞争 CPU 的范围，也就是说线程优先级的有效范围。POSIX 的标准中定义了两个值： PTHREAD_SCOPE_SYSTEM 和 PTHREAD_SCOPE_PROCESS，前者表示与系统中所有线程一起竞争 CPU 时间，后者表示仅与同进程中的线程竞争 CPU. 目前 Linux 仅实现了 PTHREAD_SCOPE_SYSTEM 一值。</p><p>属性设置是由一些函数来完成的，通常调用 pthread_attr_init 函数进行初始化。设置绑定属性的函数为 pthread_attr_setscope，设置分离属性的函数是 pthread_attr_setdetachstate，设置线程优先级的相关函数 pthread_attr_getscehdparam（获取线程优先级）和 pthread_attr_setschedparam（设置线程优先级）。再设置完成属性后，调用 pthread_creat 函数创建线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_attr_init</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span></span>; <span class="comment">//初始化线程属性</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_attr_destroy</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span></span>; <span class="comment">//销毁线程属性</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_attr_setdetachstate</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> detachstate)</span></span>; <span class="comment">//设置线程分离属性</span></span><br></pre></td></tr></table></figure><p>设置线程分离属性示例（<strong>该代码并未测试</strong>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;head.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i am child thread\n&quot;</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="built_in">pthread_attr_init</span>(&amp;attr);</span><br><span class="line">    <span class="comment">//设置线程属性为可分离状态</span></span><br><span class="line">    <span class="built_in">pthread_attr_setdetachstate</span>(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_create</span>(&amp;thid, &amp;attr, threadFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">THREAD_ERROR_CHECK</span>(ret, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i am main thread\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">THREAD_ERROR_CHECK</span>(ret, <span class="string">&quot;pthread_join&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h2><p>这部分内容参见 <a href="https://loveofpeach.github.io/posts/db0b4310.html">计算机网络笔记</a> 。</p><p>三次握手、四次挥手的相关知识不再赘述。</p><p><strong>SYN 攻击</strong>：<br>SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 回复确认包，并等待 Client 的确认，由于源地址是不存在的，因此，Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列（内核会为每个这样的连接分配资源的），导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪。SYN 攻击是一种典型的 DDOS 攻击，检测 SYN 攻击的方式非常简单，即当 Server 上有大量半连接状态且源 IP 地址是随机的，则可以断定遭到 SYN 攻击了。</p><p><strong>状态迁移图</strong>：</p><p><img src="https://s2.loli.net/2024/05/20/mqe4c7fAz6Fo1h3.jpg" alt="74-16.jpg"></p><p>在上图中：</p><ul><li>粗实线：主动发起连接与主动关闭连接</li><li>虚线：被动发起连接与被动关闭连接</li><li>细实线：两端同时操作的部分</li></ul><p>一个常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -apn | grep 8888</span><br><span class="line"># 8888 只是一个随便写的数字</span><br></pre></td></tr></table></figure><p>具体作用试一下就知道了。</p><h2 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>IP 地址可以在网络环境中唯一标识一台主机，端口号可以在主机中唯一标识一个进程。所以在网络环境中唯一标识一个进程可以使用 IP 地址与端口号 Port .</p><p><img src="https://s2.loli.net/2024/05/21/XebgTOENcM9WF6w.png" alt="74-17.png"></p><p>TCP/IP 协议规定，<strong>网络数据流应采用大端字节序</strong>。</p><p>大端：低地址存高位，高地址存低位。<br>小端：低地址存低位，高地址存高位（<strong>x86采用小端存储</strong>）。</p><p>网络字节序，就是在网络中进行传输的字节序列，采用的是大端法。主机字节序，就是本地计算机中存储数据采用的字节序列，采用的是小端法。</p><p>网络字节序与本机字节序的转换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="comment">//h = host n = network l = long s = short</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>网络套接字函数 <strong>socket</strong> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line"><span class="comment">//domain：协议族，常用的三个AF_INET/AF_INET6/AF_UNIX,</span></span><br><span class="line"><span class="comment">//type:协议类型，SOCK_STREAM(TCP)/SOCK_DGRAM(UDP)</span></span><br><span class="line"><span class="comment">//protocol:默认情况就传0，代表使用的是tcp或者udp的默认协议</span></span><br><span class="line"><span class="comment">//返回值，如果成功的话，会返回一个文件描述符fd,如果失败的话，那么会返回-1.</span></span><br></pre></td></tr></table></figure><p><strong>bind</strong> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定服务器的ip与端口号</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//addr:传递包含ip与端口号的结构体。（服务器的ip与端口号）</span></span><br><span class="line"><span class="comment">//socklen_t:结构体的大小</span></span><br><span class="line"><span class="comment">//返回值：如果正确的话，会返回0；否则会返回-1.</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，一些结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span>  sa_family;</span><br><span class="line">    <span class="type">char</span>         sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sin_family;  <span class="comment">/* address family: AF_INET */</span></span><br><span class="line">    <span class="type">in_port_t</span> sin_port;      <span class="comment">/* port in network byte order */</span>  <span class="comment">// port</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">/* internet address */</span>            <span class="comment">// ip</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> s_addr; <span class="comment">/* address in network byte order */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">in_addr_t</span>;</span><br></pre></td></tr></table></figure><p><strong>listen</strong> 函数（让服务器处于监听状态）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// listen - listen for connections on a socket</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//backlog：允许同时多少个客户端与服务器建立连接，默认128。</span></span><br><span class="line"><span class="comment">//返回值：如果正确的话，会返回0；否则会返回-1.</span></span><br></pre></td></tr></table></figure><p><strong>connect</strong> 函数，客户端调用该函数，连接到服务器上，主动发起连接：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//addr:该结构中包装的是服务器的ip与服务器的端口号。</span></span><br><span class="line"><span class="comment">//addrlen:结构体的长度。</span></span><br><span class="line"><span class="comment">//返回值：如果正确的话，会返回0；否则会返回-1.</span></span><br></pre></td></tr></table></figure><p><strong>accept</strong> 函数，接收连接请求的函数，阻塞等待客户端发起连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// accept, accept4 - accept a connection on a socket</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//addr:也是地址，但是在此处是将客户端的ip与端口号存放在这个addr中。</span></span><br><span class="line"><span class="comment">//addrlen:是addr对应的结构体的长度。</span></span><br><span class="line"><span class="comment">//返回值：成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1</span></span><br></pre></td></tr></table></figure><p><strong>read/recv</strong> 函数，从对应的文件描述符 fd 中读取数据到 buf 中，读的长度是 count :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recv</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="comment">//如果recv中的flags为0的话，那么read与recv是等价的。</span></span><br></pre></td></tr></table></figure><p><strong>write/send</strong> 函数，将 buf 中的 count 个字节写到 fd 对应的文件描述符中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="comment">//如果send中的flags为0的话，那么send与write是等价的。</span></span><br></pre></td></tr></table></figure><p><strong>close</strong> 函数，关闭文件描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="comment">//在服务器端会关闭两个文件描述符，一个是socket的返回值，一个是accept的返回值。</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>来看例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 服务器</span></span><br><span class="line">    <span class="comment">//1. 需要创建套接字，使用 socket 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listen_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 需要绑定服务器的 ip 和 port，使用 bind</span></span><br><span class="line">    <span class="comment">//   对应会有结构体 sockadd_in</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(seraddr));  <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 本机字节序转换为网络字节序</span></span><br><span class="line">    seraddr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// inet_addr 函数转换网络主机地址为网络字节序二进制值</span></span><br><span class="line">    seraddr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 传 ip</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = bind(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 使用 Listen 使服务器处于监听状态</span></span><br><span class="line">    ret = listen(listen_fd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 服务器调用 accept，阻塞等待客户端的连接</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;clientaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(clientaddr));  <span class="comment">// 初始化</span></span><br><span class="line">    clientaddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">    accept(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> connfd = accept(listen_fd, nullptr, nullptr);</span><br><span class="line">    <span class="keyword">if</span>(connfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 连接成功之后，表明三次握手成功，可以进行</span></span><br><span class="line">    <span class="comment">//   数据的收发，也就是调用read/recv, 或者write/send</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> len = recv(connfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recive failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rec msg from client: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;got some msg for the client: \n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> aa[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, aa);</span><br><span class="line">        <span class="type">int</span> len2 = send(connfd, aa, <span class="built_in">strlen</span>(aa), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len2 == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent succeeded.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 关闭对应的文件描述符</span></span><br><span class="line">    close(listen_fd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 客户端</span></span><br><span class="line">    <span class="comment">//1. 创建套接字，使用 socket 函数</span></span><br><span class="line">    <span class="type">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listen_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 使用 connect 主动发起连接请求，但是需要知道</span></span><br><span class="line">    <span class="comment">//   服务器的 ip 和 port, 使用结构体 sockadd_in</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(seraddr));  <span class="comment">// 初始化</span></span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 本机字节序转换为网络字节序</span></span><br><span class="line">    seraddr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// inet_addr 函数转换网络主机地址为网络字节序二进制值</span></span><br><span class="line">    seraddr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 传 ip</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = connect(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 如果 connect 返回值 ok，就表明三次握手成功,</span></span><br><span class="line">    <span class="comment">//   那么就可以进行数据收发，也就是 read/recv,</span></span><br><span class="line">    <span class="comment">//   或者 write/send 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;got some msg for the server: \n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> aa[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, aa);</span><br><span class="line">        <span class="type">int</span> len2 = send(listen_fd, aa, <span class="built_in">strlen</span>(aa), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len2 == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent succeeded.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> len = recv(listen_fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recive failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rec msg from server: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 关闭文件描述符</span></span><br><span class="line">    close(listen_fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来演示运行过程。</p><p>【terminal 1】启动 server： <code>./server 127.0.0.1 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server is listening...</span><br></pre></td></tr></table></figure><p>【terminal 3】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      42676/./server      </span><br><span class="line">tcp        0      0 192.168.3.10:33508      120.232.240.71:8888     TIME_WAIT   -     </span><br></pre></td></tr></table></figure><p>【terminal 2】启动 client： <code>./client 127.0.0.1 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">got some msg for the server: </span><br></pre></td></tr></table></figure><p>【terminal 3】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:8888          127.0.0.1:49390         ESTABLISHED 42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:49390         127.0.0.1:8888          ESTABLISHED 43363/./client  </span><br></pre></td></tr></table></figure><p>【进行了一段富有建设性的对话后，terminal 2 按下 ctrl+c】</p><p>【terminal 3】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:8888          127.0.0.1:49390         CLOSE_WAIT  42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:49390         127.0.0.1:8888          FIN_WAIT2   -    </span><br></pre></td></tr></table></figure><p>【terminal 1 按下 ctrl+c，<strong>以迅雷不及掩耳之势</strong>在 terminal 3 中输入】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:53716         127.0.0.1:8888          TIME_WAIT   -       </span><br></pre></td></tr></table></figure><p>过一段时间之后在 terminal 3 中重复该命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br></pre></td></tr></table></figure><p>有些时候图省事，也可以暂时不编写 client 程序：</p><p><img src="https://s2.loli.net/2024/05/22/9GCrY3bfHvRU5sg.png" alt="74-18.png"></p><p>一个有助于理解的视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV12A411X7gY&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h3 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h3><p>继续测试上面的程序，我们发现：<br>在运行过程中，如果我们先 ctrl+c 了 server, 再试图重新运行 server, 会提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind</span><br><span class="line">: Address already in use</span><br></pre></td></tr></table></figure><p>这是因为，server 仍处于 timewait 状态。</p><p>现在，我们试图修改代码，使服务器的 IP 和 Port 可以重复使用。</p><p>为此，需要了解以下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname,</span></span><br><span class="line"><span class="params">               <span class="type">void</span> *optval, <span class="type">socklen_t</span> *optlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname,</span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="type">void</span> *optval, <span class="type">socklen_t</span> optlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：成功返回0，错误返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"><span class="type">int</span> opt2 = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEPORT, &amp;opt2, <span class="keyword">sizeof</span>(opt2));</span><br></pre></td></tr></table></figure><p>对 <code>server.cc</code> 作如下修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 服务器</span></span><br><span class="line">    <span class="comment">//1. 需要创建套接字，使用 socket 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listen_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> retval = setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(retval &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;setsockopt\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt2 = <span class="number">1</span>;</span><br><span class="line">    retval = setsockopt(listen_fd, SOL_SOCKET, SO_REUSEPORT, &amp;opt2, <span class="keyword">sizeof</span>(opt2));</span><br><span class="line">    <span class="keyword">if</span>(retval &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;setsockopt\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 需要绑定服务器的 ip 和 port，使用 bind</span></span><br><span class="line">    <span class="comment">//   对应会有结构体 sockadd_in</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(seraddr));  <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 本机字节序转换为网络字节序</span></span><br><span class="line">    seraddr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// inet_addr 函数转换网络主机地址为网络字节序二进制值</span></span><br><span class="line">    seraddr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 传 ip</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = bind(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 使用 Listen 使服务器处于监听状态</span></span><br><span class="line">    ret = listen(listen_fd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 服务器调用 accept，阻塞等待客户端的连接</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;clientaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(clientaddr));  <span class="comment">// 初始化</span></span><br><span class="line">    clientaddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">    accept(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> connfd = accept(listen_fd, nullptr, nullptr);</span><br><span class="line">    <span class="keyword">if</span>(connfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 连接成功之后，表明三次握手成功，可以进行</span></span><br><span class="line">    <span class="comment">//   数据的收发，也就是调用read/recv, 或者write/send</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> len = recv(connfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recive failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rec msg from client: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;got some msg for the client: \n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> aa[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, aa);</span><br><span class="line">        <span class="type">int</span> len2 = send(connfd, aa, <span class="built_in">strlen</span>(aa), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len2 == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent succeeded.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 关闭对应的文件描述符</span></span><br><span class="line">    close(listen_fd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>client.cc</code> 保持不变。</p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>在上面的代码中，C/S 是一对一的，这不是我们想要的，我们希望一个 S 可以服务多个 C.</p><p><img src="https://s2.loli.net/2024/05/23/oHb2F6jyPpt3n15.png" alt="74-19.png"></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>文件描述符从 0 开始排，如果文件描述符使用后被释放了，那么后面需要重复使用已经释放的文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,</span></span><br><span class="line"><span class="params">           <span class="keyword">struct</span> timeval *timeout)</span>;</span><br><span class="line"><span class="comment">//nfds：最大文件描述符加1</span></span><br><span class="line"><span class="comment">//readfds,writefds,exceptfds:可读，可写，异常。fd_set,位图</span></span><br><span class="line"><span class="comment">//timeout:</span></span><br><span class="line"><span class="comment">//1、nullptr，永远等下去</span></span><br><span class="line"><span class="comment">//2、设置timeval，等待固定时间</span></span><br><span class="line"><span class="comment">//3、设置timeval里时间均为0，检查描述字后立即返回，轮询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回：满足符合条件的文件描述符的个数。包括：可读的文件描述符的个数，可写文件描述符的个数，异常的文件描述符的个数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听文件描述符的时候，往往都只是监听可读的属性。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">long</span> tv_sec;      <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="type">long</span> tv_usec;     <span class="comment">/* microseconds */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">long</span> tv_sec;      <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="type">long</span> tv_nsec;     <span class="comment">/* nanoseconds */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clr = clear</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_CLR</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//将fd从set位图中删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FD_ISSET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;<span class="comment">//判断fd是否在set位图中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_SET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//将fd加入到set位图中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span>;        <span class="comment">//将set位图进行初始化</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/23/yFv9EBxDGRV1T5t.png" alt="74-20.png"></p><p>select 函数的返回结果（例如上图返回 4）：位图中有多少个 1.</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> listenfd, connfd, sockfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> clie_addr_len;</span><br><span class="line">    <span class="type">int</span> ret, maxfd, maxi, i, j, nready, nByte;</span><br><span class="line">    fd_set rset, allset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FD_SETSIZE 定义在 /usr/include/linux/posix_types.h</span></span><br><span class="line">    <span class="comment">// 1024</span></span><br><span class="line">    <span class="comment">// select 最多监听 1024 个（设计缺陷）</span></span><br><span class="line">    <span class="type">int</span> client[FD_SETSIZE];</span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ], str[BUFSIZ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建套接字</span></span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == listenfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 地址复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 端口复用</span></span><br><span class="line">    <span class="type">int</span> opt2 = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt2, <span class="keyword">sizeof</span>(opt2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 绑定ip与端口号</span></span><br><span class="line">    bzero(&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    <span class="comment">// INADDR_ANY : 本地随机的有效数字类型的 IP</span></span><br><span class="line">    <span class="comment">// 转换过来就是 0.0.0.0 , 泛指本机的所有 IP</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       因为有些电脑不止一块网卡，如果某个应用程序只监听</span></span><br><span class="line"><span class="comment">       某个端口，那么其他端口过来的数据就接受不了。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    ret = bind(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 服务器监听</span></span><br><span class="line">    ret = listen(listenfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6. select 类型 IO 多路复用</span></span><br><span class="line">    maxfd = listenfd; <span class="comment">// select 的第一个参数设置为 listenfd</span></span><br><span class="line">    maxi = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; FD_SETSIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        client[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FD_ZERO(&amp;allset); <span class="comment">// 清空 allset</span></span><br><span class="line">    <span class="comment">// 将 listenfd 放在 allset 中进行监听</span></span><br><span class="line">    FD_SET(listenfd, &amp;allset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rset = allset; <span class="comment">// 将 allset 拷贝给 rset</span></span><br><span class="line">        <span class="comment">//6.1. 使用 select 负责监听，如果返回值大于0，表明有</span></span><br><span class="line">        <span class="comment">//     满足条件的连接被监听到</span></span><br><span class="line">        nready = select(maxfd+<span class="number">1</span>, &amp;rset, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;select error&quot;</span>);</span><br><span class="line">            close(listenfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.2. 如果 listenfd 被置位, 表示有新的请求进来</span></span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(listenfd, &amp;rset))</span><br><span class="line">        &#123;</span><br><span class="line">            clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">            <span class="comment">//7. 有新的连接，那么 accept 肯定有返回值</span></span><br><span class="line">            connfd = accept(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == connfd)</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">                close(listenfd);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;receive from %s from port %d\n&quot;</span>,</span><br><span class="line">                   inet_ntop(AF_INET, &amp;clie_addr.sin_addr, str, <span class="keyword">sizeof</span>(str)),</span><br><span class="line">                   ntohs(clie_addr.sin_port));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               将新的连接加到数组 client 中，</span></span><br><span class="line"><span class="comment">               该数组就是为了存储建立连接的文件描述符</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; FD_SETSIZE; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>(client[i] &lt; <span class="number">0</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     client[i] = connfd;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// i 超过了能监听的最大的文件描述符数量</span></span><br><span class="line">            <span class="keyword">if</span>(i == FD_SETSIZE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">&quot;too many clients.\n&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将建立了三次握手的文件描述符放在 allset 集合中</span></span><br><span class="line"><span class="comment">            进行继续监听，如果该文件描述符后续继续可读，</span></span><br><span class="line"><span class="comment">            表明有数据需要读写</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            FD_SET(connfd, &amp;allset);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(connfd &gt; maxfd)</span><br><span class="line">            &#123;</span><br><span class="line">                maxfd = connfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxi)</span><br><span class="line">            &#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果 nready 等于 1，就继续 while 循环</span></span><br><span class="line"><span class="comment">            而不用走 6.3 出 for 循环，提示效率</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 6.3.</span></span><br><span class="line"><span class="comment">        遍历 client 数组，如果里面的元素为正，就表明该文件</span></span><br><span class="line"><span class="comment">        描述符被监听到，就是老的连接，可以进行数据的收发</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= maxi; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((sockfd = client[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果老的连接上有数据，表明可以进行数据的传输</span></span><br><span class="line">            <span class="comment">// 可以进行 read/write 操作</span></span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(sockfd, &amp;rset)) <span class="comment">// 老的连接</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((nByte = read(sockfd, buf, <span class="keyword">sizeof</span>(buf))) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 表明数据读完了（缓冲区已经没有数据）</span></span><br><span class="line">                    <span class="comment">// 连接即将断开</span></span><br><span class="line">                    close(sockfd);</span><br><span class="line">                    FD_CLR(sockfd, &amp;allset);</span><br><span class="line">                    client[i] = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 正常的操作</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nByte &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; nByte; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        buf[j] = <span class="built_in">toupper</span>(buf[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    write(sockfd, buf, nByte);</span><br><span class="line">                    write(STDOUT_FILENO, buf, nByte);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 若已处理完 connfd 直接退出循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(listenfd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码配合 <code>client.cc</code> 可以运行，观察到一个 S 可以服务于多个 C.</p><p>select 的特点：</p><ul><li>文件描述符上限（1024），同时监听的文件描述符 1024 个，历史原因，不好修改，除非重新编译 Linux 内核。</li><li>当监听的文件描述符个数比较稀疏的时候，循环判断比较麻烦，需要自定义数据结构，例如数组。</li><li>监听集合与满足监听条件的集合是同一个，需要将原有集合保存。</li></ul><p>youtube 视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/PbOqVvuKeBE?si=lFmOWfuxg72YGqNO" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">nfds_t</span> nfds, <span class="type">int</span> timeout)</span>;</span><br><span class="line"><span class="comment">//events/revents:POLLIN/POLLOUT/POLLERR</span></span><br><span class="line"><span class="comment">//timeout 毫秒级等待</span></span><br><span class="line"><span class="comment">//-1:阻塞等，#define INFTIM -1 Linux中没有定义此宏</span></span><br><span class="line"><span class="comment">//0:立即返回，不阻塞进程</span></span><br><span class="line"><span class="comment">//&gt;0:等待指定毫秒数，如当前系统时间精度不够毫秒，向上取值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值：满足监听条件的文件描述符的数目</span></span><br><span class="line"></span><br><span class="line">fds[<span class="number">1024</span>]   fds[<span class="number">0</span>].fd = listendfd;   fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> fd;   <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="type">short</span> events; <span class="comment">/* requested events */</span><span class="comment">//监听的事件类型，读事件，写事件，异常</span></span><br><span class="line">    <span class="type">short</span> revents;<span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码（该代码并未测试）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poll.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPEN_MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, n, maxi;</span><br><span class="line">    <span class="type">int</span> nready, ret;</span><br><span class="line">    <span class="type">int</span> listenfd, connfd, sockfd;</span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ], str[INET_ADDRSTRLEN];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr, clie_addr;</span><br><span class="line">    <span class="type">socklen_t</span> clie_addr_len;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">pollfd</span> client[OPEN_MAX];</span><br><span class="line"></span><br><span class="line">    listenfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == listenfd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(SERV_PORT);<span class="comment">//本地字节序port与ip都要转换为网络字节序</span></span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">//因为要在网络上传输</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">bind</span>(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>(listenfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// poll 类型 IO 多路复用</span></span><br><span class="line">    <span class="comment">// 将 listenfd 放在数组中进行监听</span></span><br><span class="line">    client[<span class="number">0</span>].fd = listenfd;</span><br><span class="line">    client[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; OPEN_MAX; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        client[i].fd = <span class="number">-1</span>;<span class="comment">//将数组初始化为-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxi = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nready = <span class="built_in">poll</span>(client, maxi + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;poll error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(client[<span class="number">0</span>].revents &amp; POLLIN)</span><br><span class="line">        &#123;</span><br><span class="line">            clie_addr_len = <span class="built_in">sizeof</span>(clie_addr);</span><br><span class="line">            connfd = <span class="built_in">accept</span>(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;clie_addr, &amp;clie_addr_len);<span class="comment">//立即连接，此时不会阻塞等</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == connfd)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">perror</span>(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;received from %s at port %d\n&quot;</span>,</span><br><span class="line">                    <span class="built_in">inet_ntop</span>(AF_INET, &amp;clie_addr.sin_addr.s_addr, str,<span class="built_in">sizeof</span>(str)),</span><br><span class="line">                    <span class="built_in">ntohs</span>(clie_addr.sin_port));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; OPEN_MAX; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(client[i].fd &lt; <span class="number">0</span>)<span class="comment">//因为初始化为-1,所以在此作为判断条件</span></span><br><span class="line">                &#123;</span><br><span class="line">                    client[i].fd = connfd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == OPEN_MAX)<span class="comment">//select监听的文件描述符有上限，最大只能监听1024个</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">&quot;too many clients\n&quot;</span>, stderr);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            client[i].events = POLLIN;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxi)</span><br><span class="line">            &#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">                <span class="comment">//因为文件描述符有新增，导致自定义数组有变化，所以需要重新修改maxi的值</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= maxi; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((sockfd = client[i].fd) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>(client[i].revents &amp; POLLIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((n = <span class="built_in">read</span>(sockfd, buf, <span class="built_in">sizeof</span>(buf))) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(errno == ECONNRESET)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;client[%d] abort connect\n&quot;</span>, i);</span><br><span class="line">                        <span class="built_in">close</span>(sockfd);</span><br><span class="line">                        client[i].fd = <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">perror</span>(<span class="string">&quot;read n = 0 error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        buf[j] = <span class="built_in">toupper</span>(buf[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">write</span>(sockfd, buf, n);</span><br><span class="line">                    <span class="built_in">write</span>(STDOUT_FILENO, buf, n);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">close</span>(sockfd);</span><br><span class="line">                    client[i].fd = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(listenfd);</span><br><span class="line">    <span class="built_in">close</span>(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>突破文件描述符1024的上限</li><li>监听与返回的集合分离</li><li>搜索范围变小（已经知道是那几个数组）</li></ol><p>缺点：</p><ul><li>例如：监听1000个文件描述符，但是只有3个满足条件，这样也需要全部遍历，效率依旧低。</li></ul><p>youtube 视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/57HjE5xLo5I?si=3Fbeu5qaphuE4UP-" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll 是 Linux 下 IO 多路复用接口 select/poll 的增强版本，能显著提高程序在<strong>大量并发连接中只有少量活跃</strong>的情况下的系统 CPU 利用率，因为它会复用文件描述符集合来传递结果而不是迫使开发者每次等待事件之前都必须重新准备要侦听的文件描述符集合，另一个原因是获取事件的时候，它<strong>无须遍历整个被侦听的描述符集，只要遍历哪些被内核 IO 事件唤醒而加入 Ready 队列的描述符集合</strong>就行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_create</span><span class="params">(<span class="type">int</span> size)</span>;</span><br><span class="line"><span class="comment">//size:linux内核版本2.6.8之后，size可以忽略，但是要大于0</span></span><br><span class="line"><span class="comment">//返回值：成功返回非负整数，失败返回-1.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_create1</span><span class="params">(<span class="type">int</span> flags)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span>;</span><br><span class="line"><span class="comment">//epfd:是epoll_create函数的返回值，也就是文件描述符</span></span><br><span class="line"><span class="comment">//op:EPOLL_CTL_ADD/EPOLL_CTL_MOD/EPOLL_CTL_DEL</span></span><br><span class="line"><span class="comment">//fd:将哪个文件描述符以op的方式加在以epfd建立的树上</span></span><br><span class="line"><span class="comment">//event:告诉内核需要监听的事情,EPOLLIN/EPOLLOUT/EPOLLERR/...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> events;   <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="type">epoll_data_t</span> data; <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">void</span>     *ptr;  <span class="comment">// 拓展性</span></span><br><span class="line">    <span class="type">int</span>       fd;</span><br><span class="line">    <span class="type">uint32_t</span>  u32;</span><br><span class="line">    <span class="type">uint64_t</span>  u64;</span><br><span class="line">&#125; <span class="type">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>  // 例如我们用 <span class="title">void</span>* <span class="title">ptr</span> 指向这个结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">void</span>* (pFunc)(<span class="type">void</span> *);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event *events, <span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span>;</span><br><span class="line"><span class="comment">//epfd:是epoll_create函数的返回值，也就是文件描述符</span></span><br><span class="line"><span class="comment">//events:满足条件的事件都在该结构体，只需遍历该结构体即可</span></span><br><span class="line"><span class="comment">//maxevents：告知内核这个events有多大.</span></span><br><span class="line"><span class="comment">//timeout 毫秒级等待</span></span><br><span class="line"><span class="comment">//-1:阻塞等，#define INFTIM -1 Linux中没有定义此宏</span></span><br><span class="line"><span class="comment">//0:立即返回，不阻塞进程</span></span><br><span class="line"><span class="comment">//&gt;0:等待指定毫秒数，如当前系统时间精度不够毫秒，向上取值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：成功，将满足条件的文件描述符的个数返回；失败就返回-1.</span></span><br></pre></td></tr></table></figure><p>epoll 中涉及到两个数据结构： epoll_create 创建的红黑树的根节点，将满足条件的事件放在就绪链表，可以直接遍历就绪链表即可。</p><p><img src="https://s2.loli.net/2024/05/24/Wozj7Qm2pLcMaNV.png" alt="74-21.png"></p><p>代码（<strong>下面两份代码没有实际运行验证</strong>）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPEN_MAX 5000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> listenfd, connfd, sockfd, epfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> clie_addr_len;</span><br><span class="line">    <span class="type">int</span> ret, i, j, nready, nByte;</span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ], str[BUFSIZ];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evt</span>, <span class="title">ep</span>[<span class="title">OPEN_MAX</span>];</span></span><br><span class="line"></span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == listenfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"></span><br><span class="line">    bzero(&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    ret = bind(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = listen(listenfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建红黑树的根节点（使用数据结构：红黑树+就绪链表）</span></span><br><span class="line">    epfd = epoll_create(OPEN_MAX);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == epfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_create error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evt.events = EPOLLIN;</span><br><span class="line">    evt.data.fd = listenfd;</span><br><span class="line"></span><br><span class="line">    ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;evt);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 epoll_wait 监听。若返回值大于 0，表明有</span></span><br><span class="line">        <span class="comment">// 满足条件的连接被监听到</span></span><br><span class="line">        nready = epoll_wait(epfd, ep, OPEN_MAX, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;select error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nready; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(ep[i].events &amp; EPOLLIN))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果监听到的是 listenfd, 表明有新的请求进来</span></span><br><span class="line">            <span class="keyword">if</span>(ep[i].data.fd == listenfd)<span class="comment">//如果是连接事件</span></span><br><span class="line">            &#123;</span><br><span class="line">                clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">                connfd = accept(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == connfd)</span><br><span class="line">                &#123;</span><br><span class="line">                    perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">                    close(listenfd);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;receive from %s from port %d\n&quot;</span>,</span><br><span class="line">                        inet_ntop(AF_INET, &amp;clie_addr.sin_addr, str, <span class="keyword">sizeof</span>(str)),</span><br><span class="line">                        ntohs(clie_addr.sin_port));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 connfd 放在红黑树上继续监听</span></span><br><span class="line">                evt.events = EPOLLIN;</span><br><span class="line">                evt.data.fd = connfd;</span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &amp;evt);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//不是连接建立事件，而是读写事件(信息传递事件)</span></span><br><span class="line">            &#123;</span><br><span class="line">                sockfd = ep[i].data.fd;</span><br><span class="line">                nByte = read(sockfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span>(nByte == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ret = epoll_ctl(epfd, EPOLL_CTL_DEL, sockfd, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">                    &#123;</span><br><span class="line">                        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    close(sockfd);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;client[%d] closed connection\n&quot;</span>, sockfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nByte &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;   <span class="comment">/* 连接异常 */</span></span><br><span class="line">                    perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">                    ret = epoll_ctl(epfd, EPOLL_CTL_DEL, sockfd, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">                    &#123;</span><br><span class="line">                        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    close(sockfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123; <span class="comment">/*正常操作*/</span></span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; nByte; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        buf[j] = <span class="built_in">toupper</span>(buf[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    write(sockfd, buf, nByte);</span><br><span class="line">                    write(STDOUT_FILENO, buf, nByte);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(listenfd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_IP <span class="string">&quot;127.0.0.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ];</span><br><span class="line">    <span class="type">int</span> nByte;</span><br><span class="line"></span><br><span class="line">    cfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == cfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* inet_pton(cfd, SERV_IP, &amp;serv_addr.sin_addr.s_addr); */</span></span><br><span class="line"></span><br><span class="line">    connect(cfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);<span class="comment">//hello world ----&gt;  hello world\n\0</span></span><br><span class="line">        write(cfd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">        nByte = read(cfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        write(STDOUT_FILENO, buf, nByte);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(cfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>文件描述符数目没有上限：通过 epoll_ctl() 来注册一个文件描述符，内核中使用红黑树的数据结构来管理所有需要监控的文件描述符。</li><li>基于事件就绪通知方式：一旦被监听的某个文件描述符就绪，内核会采用类似于 callback 的回调机制，迅速激活这个文件描述符，这样随着文件描述符数量的增加，也不会影响判定就绪的性能。</li><li>维护就绪队列：当文件描述符就绪，就会被放到内核中的一个就绪队列中，这样调用 epoll_weit 获取就绪文件描述符的时候，只要取队列中的元素即可，操作的时间复杂度恒为O(1).</li></ol><p>类型区别</p><ul><li><strong>水平触发(level-trggered)</strong>：只要文件描述符关联的<strong>读内核缓冲区</strong>非空，有数据可以读取，就一直发出可读信号进行通知；当文件描述符关联的<strong>内核写缓冲区</strong>不满，有空间可以写入，就一直发出可写信号进行通知 LT 模式支持阻塞和非阻塞两种方式。epoll 默认的模式是 LT.</li><li><strong>边缘触发(edge-triggered)</strong>：当文件描述符关联的<strong>读内核缓冲区由空转化为非空</strong>的时候，则发出可读信号进行通知；当文件描述符关联的<strong>内核写缓冲区由满转化为不满的时候</strong>，则发出可写信号进行通知。</li></ul><p>水平触发和边缘触发的区别在哪里呢？<br>水平触发是只要读缓冲区有数据，就会一直触发可读信号，而边缘触发仅仅在空变为非空的时候通知一次。LT(level triggered) 是缺省的工作方式，并且同时支持 block 和 no-block socket. 在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的 fd 进行 IO 操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的 select/poll 都是这种模型的代表．</p><p><img src="https://s2.loli.net/2024/05/25/DlMZqHLpVi9oynv.png" alt="74-22.png"></p><p>当设置了边缘触发以后，以可读事件为例，对“有数据到来”这事件为触发。</p><p><img src="https://s2.loli.net/2024/05/25/3DFldcan9kiGo1f.png" alt="74-23.png"></p><p>select/poll/epoll 除了应用于 fd 外，像管道、文件也是可以的。</p><p>youtube 视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/QWE8_MzpR4U?si=xaxiuWN0kUhtNuJJ" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>上面三个视频其实蛮多地方胡言乱语，建议看以下的总结视频，比较清晰。不过请注意，该视频的 epoll 讲解略有瑕疵。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1qJ411w7du&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>如果后来者无法在 B 站看到视频，可以<a href="https://www.youtube.com/watch?v=G8E5vqrzd3A">前往 youtube 观看备份视频</a></p><h2 id="五种网络IO模型"><a href="#五种网络IO模型" class="headerlink" title="五种网络IO模型"></a>五种网络IO模型</h2><h3 id="阻塞式-IO"><a href="#阻塞式-IO" class="headerlink" title="阻塞式 IO"></a>阻塞式 IO</h3><p><img src="https://s2.loli.net/2024/05/28/OjoqkR6c3w4APSH.png" alt="74-24.png"></p><h3 id="非阻塞式-IO"><a href="#非阻塞式-IO" class="headerlink" title="非阻塞式 IO"></a>非阻塞式 IO</h3><p><img src="https://s2.loli.net/2024/05/28/1IyBmCwzcOEGHPY.png" alt="74-25.png"></p><h3 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h3><p><img src="https://s2.loli.net/2024/05/28/pbXiwfAcVtL2IM1.png" alt="74-26.png"></p><h3 id="信号驱动式-IO"><a href="#信号驱动式-IO" class="headerlink" title="信号驱动式 IO"></a>信号驱动式 IO</h3><p><img src="https://s2.loli.net/2024/05/28/1VAegdtzGmkS9EJ.png" alt="74-27.png"></p><p>这里的原理，和操作系统那门课的 IO控制方式 相关知识点（轮询、中断）差不多。</p><h3 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h3><p><img src="https://s2.loli.net/2024/05/28/rwmLoRUEpMCfvl5.png" alt="74-28.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要： &lt;a href=&quot;https://loveofpeach.github.io/posts/555ef888.html&quot;&gt;CppNote3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;容器的选择&quot;&gt;&lt;a href=&quot;#容器的选择&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://dropsong.github.io/tags/C/"/>
    
    <category term="设计模式" scheme="https://dropsong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="多线程" scheme="https://dropsong.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="网络编程" scheme="https://dropsong.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎 toybox</title>
    <link href="https://dropsong.github.io/posts/3bc8141e.html"/>
    <id>https://dropsong.github.io/posts/3bc8141e.html</id>
    <published>2024-04-24T14:33:03.000Z</published>
    <updated>2024-05-02T15:38:32.017Z</updated>
    
    <content type="html"><![CDATA[<p>一个简易的游戏引擎，适合刚学了一点语法的小白。</p><p>项目地址：<a href="https://git.nju.edu.cn/jyy/toybox">https://git.nju.edu.cn/jyy/toybox</a></p><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><p>阅读过程有 AI 协助。</p><h3 id="toybox-h"><a href="#toybox-h" class="headerlink" title="toybox.h"></a>toybox.h</h3><p>下方代码展开约 280+ 行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toybox.h</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  _____         _           </span></span><br><span class="line"><span class="comment"> * |_   _|___ _ _| |_ ___ _ _ </span></span><br><span class="line"><span class="comment"> *   | | | . | | | . | . |_&#x27;_|</span></span><br><span class="line"><span class="comment"> *   |_| |___|_  |___|___|_,_|</span></span><br><span class="line"><span class="comment"> *           |___|            </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * C/C++ 初学者的第一个游戏 &amp; 动画引擎</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * MIT License</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2024 by Yanyan Jiang and Zesen Liu</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to deal</span></span><br><span class="line"><span class="comment"> * in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment"> * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment"> * copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment"> * furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment"> * copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="comment"> * SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toybox 只提供一个函数 void toybox_run(fps, update, keypress)</span></span><br><span class="line"><span class="comment"> * toybox_run 接收三个参数，然后进入死循环：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 1. 整数 fps:</span></span><br><span class="line"><span class="comment"> *       每秒刷新的次数 (每秒执行 fps 次 update)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 2. 函数 update:</span></span><br><span class="line"><span class="comment"> *       void updpate(int w, int h, draw_function draw);</span></span><br><span class="line"><span class="comment"> *       每当时间到时，update 会被调用，其中可以调用 draw(x, y, ch);</span></span><br><span class="line"><span class="comment"> *       在坐标 (x, y) 绘制一个字符 ch。坐标系统：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *            (0,0) ---- x ----&gt;</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            y ------ (x,y) = ch   //  draw(x, y, ch)</span></span><br><span class="line"><span class="comment"> *            |</span></span><br><span class="line"><span class="comment"> *            v</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 3. 函数 keypress:</span></span><br><span class="line"><span class="comment"> *       void keypress(int key);</span></span><br><span class="line"><span class="comment"> *       每当收到按键时，keypress 会被调用，key 是按键的 ASCII 码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -= Toybox API =------------------------------------- */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*draw_function)</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span></span>;</span><br><span class="line"><span class="comment">/* ---------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_W_ 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_H_ 64</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> append_(buf, str) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        strcpy(buf, str); \</span></span><br><span class="line"><span class="meta">        buf += strlen(str); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint64_t</span> start_time_;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> w_, h_;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> canvas_[MAX_W_ * MAX_H_];</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> startTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTickCount</span>() - startTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> _getch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi)) &#123;</span><br><span class="line">        *w = csbi.srWindow.Right - csbi.srWindow.Left;</span><br><span class="line">        *h = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *w = <span class="number">80</span>;</span><br><span class="line">        *h = <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copied from https://github.com/confluentinc/librdkafka</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval * tp, <span class="keyword">struct</span> timezone * tzp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: some broken versions only have 8 trailing zero&#x27;s, the correct epoch has 9 trailing zero&#x27;s</span></span><br><span class="line">    <span class="comment">// This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)</span></span><br><span class="line">    <span class="comment">// until 00:00:00 January 1, 1970</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> EPOCH = ((<span class="type">uint64_t</span>) <span class="number">116444736000000000ULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME  system_time;</span><br><span class="line">    FILETIME    file_time;</span><br><span class="line">    <span class="type">uint64_t</span>    time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTime</span>( &amp;system_time );</span><br><span class="line">    <span class="built_in">SystemTimeToFileTime</span>( &amp;system_time, &amp;file_time );</span><br><span class="line">    time =  ((<span class="type">uint64_t</span>)file_time.dwLowDateTime )      ;</span><br><span class="line">    time += ((<span class="type">uint64_t</span>)file_time.dwHighDateTime) &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    tp-&gt;tv_sec  = (<span class="type">long</span>) ((time - EPOCH) / <span class="number">10000000L</span>);</span><br><span class="line">    tp-&gt;tv_usec = (<span class="type">long</span>) (system_time.wMilliseconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    COORD topLeft  = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE console = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO screen;</span><br><span class="line">    DWORD written;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(console, &amp;screen);</span><br><span class="line">    <span class="built_in">FillConsoleOutputCharacterA</span>(</span><br><span class="line">            console, <span class="string">&#x27; &#x27;</span>, screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">FillConsoleOutputAttribute</span>(</span><br><span class="line">            console, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE,</span><br><span class="line">            screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(console, topLeft);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeout;</span><br><span class="line">    fd_set readfds;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">    timeout.tv_sec = <span class="number">0</span>;</span><br><span class="line">    timeout.tv_usec = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;readfds);</span><br><span class="line">    <span class="built_in">FD_SET</span>(STDIN_FILENO, &amp;readfds);</span><br><span class="line"></span><br><span class="line">    retval = <span class="built_in">select</span>(STDIN_FILENO + <span class="number">1</span>, &amp;readfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">if</span> (retval) &#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="built_in">read</span>(STDIN_FILENO, &amp;ch, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">termios</span> old_;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">termios_init_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">winsize</span> win;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">termios</span> cur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ioctl</span>(STDOUT_FILENO, TIOCGWINSZ, &amp;win) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not a terminal window.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcgetattr</span>(STDIN_FILENO, &amp;old_);</span><br><span class="line"></span><br><span class="line">    cur = old_;</span><br><span class="line">    cur.c_lflag &amp;= ~(ICANON | ECHO);</span><br><span class="line">    cur.c_cc[VMIN] = <span class="number">0</span>;</span><br><span class="line">    cur.c_cc[VTIME] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((destructor))</span><br><span class="line"><span class="built_in">termios_restore_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;old_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">winsize</span> win;</span><br><span class="line">    <span class="built_in">ioctl</span>(STDOUT_FILENO, TIOCGWINSZ, &amp;win);</span><br><span class="line"></span><br><span class="line">    *w = win.ws_col &lt; MAX_W_ ? win.ws_col : MAX_W_;</span><br><span class="line">    *h = win.ws_row &lt; MAX_H_ ? win.ws_row : MAX_H_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[H&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">timer_ms_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> (tv.tv_sec * <span class="number">1000LL</span>) + (tv.tv_usec / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">init_timer_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    start_time_ = <span class="built_in">timer_ms_</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; w_ &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; h_) &#123;</span><br><span class="line">        canvas_[y * w_ + x] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> last_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, last_size = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> buffer[MAX_W_ * MAX_H_ + MAX_H_ * <span class="number">2</span> + <span class="number">4096</span>], *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> key = <span class="built_in">waitkey_</span>();</span><br><span class="line">        <span class="keyword">if</span> (key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keypress) &#123;</span><br><span class="line">                <span class="built_in">keypress</span>(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">uint64_t</span> t = <span class="built_in">timer_ms_</span>() - start_time_;</span><br><span class="line">            <span class="keyword">if</span> (t - last_time &lt;= <span class="number">1000</span> / fps) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            last_time = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">get_window_size_</span>(&amp;w_, &amp;h_);</span><br><span class="line">        <span class="built_in">memset</span>(canvas_, <span class="string">&#x27; &#x27;</span>, <span class="built_in">sizeof</span>(canvas_));</span><br><span class="line">        <span class="built_in">update</span>(w_, h_, draw_);</span><br><span class="line"></span><br><span class="line">        head = buffer;</span><br><span class="line">        <span class="built_in">clear_screen_</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">            last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">            <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h_; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">append_</span>(head, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strncpy</span>(head, &amp;canvas_[i * w_], w_);</span><br><span class="line">            head += w_;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fwrite</span>(buffer, head - buffer, <span class="number">1</span>, stdout);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的游戏和动画引擎，称为 “toybox”。它提供了一个函数 <code>toybox_run</code>，该函数接受三个参数：</p><ol><li>整数 <code>fps</code>：表示每秒刷新的次数，也就是每秒调用 <code>update</code> 函数的次数。</li><li>函数指针 <code>update</code>：一个函数，定义为 <code>void update(int w, int h, draw_function draw)</code>，表示每次刷新时被调用的更新函数。它可以接受当前窗口的宽度和高度，并使用 <code>draw</code> 函数在屏幕上绘制图形。</li><li>函数指针 <code>keypress</code>：一个函数，定义为 <code>void keypress(int key)</code>，表示当按下键盘按键时被调用的函数。</li></ol><p>在主循环中，程序会不断等待键盘输入或者根据设定的帧率调用 <code>update</code> 函数进行屏幕更新，然后根据更新后的画面重新绘制屏幕内容。</p><p>接下来我们从头到尾看一看里面的细节。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> append_(buf, str) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        strcpy(buf, str); \</span></span><br><span class="line"><span class="meta">        buf += strlen(str); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br></pre></td></tr></table></figure><p>这段代码定义了一个宏 <code>append_</code>，用于将字符串追加到指定的缓冲区中。</p><ol><li><code>#define append_(buf, str)</code>：这是宏的定义，<code>append_</code> 是宏的名称，<code>(buf, str)</code> 是宏的参数列表，这里有两个参数，<code>buf</code> 表示目标缓冲区，<code>str</code> 表示要追加的字符串。</li><li><code>do &#123; ... &#125; while (0)：</code> 这是一个 do-while 循环，它的主体是一系列语句，其中包括了复制字符串和移动指针的操作。<code>do &#123; ... &#125;</code> 表示循环体，<code>while (0)</code> 则是一个条件，由于条件为 0，因此循环只会执行一次。</li><li><code>strcpy(buf, str)</code>：这一行使用 <code>strcpy</code> 函数将字符串 <code>str</code> 复制到缓冲区 <code>buf</code> 中。</li><li><code>buf += strlen(str)</code>：这一行将指针 <code>buf</code> 向后移动，移动的距离是字符串 <code>str</code> 的长度，这样可以保证下一次追加的字符串会接在当前字符串的末尾。</li></ol><p>这个宏的作用是将字符串追加到缓冲区中，类似于字符串拼接操作。在每次调用 <code>append_</code> 宏时，它会将指定的字符串添加到目标缓冲区的末尾，并更新指针以指向新的末尾位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> canvas_[MAX_W_ * MAX_H_];</span><br></pre></td></tr></table></figure><p><code>canvas_</code> 数组是用来表示绘图区域的缓冲区。在这个简单的游戏和动画引擎中，屏幕上的图像是通过在这个缓冲区中绘制字符来实现的。每个字符对应着屏幕上的一个像素或一个小图形。</p><p>在每次调用 <code>update</code> 函数时，会根据游戏逻辑更新 <code>canvas_</code> 数组中的内容，然后将更新后的内容绘制到屏幕上。因此，<code>canvas_</code> 数组存储了当前屏幕上的图像信息，通过更新这个数组，可以实现屏幕内容的动态变化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>虽然在这段代码中，函数的声明和定义紧密相邻，看起来似乎有些多余，但这是一个良好的编程实践，可以帮助<strong>提高代码的可维护性和可读性</strong>。让读者快速了解函数的接口，包括返回类型和参数列表，而不必深入到函数的定义中去查找这些信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br></pre></td></tr></table></figure><p>在这段代码中，它的作用是根据当前编译环境是否是 Windows 平台来进行条件编译。</p><p>这个技术常用于实现跨平台的编译，在不同的平台上使用不同的代码逻辑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>该头文件主要用于 Windows 平台下的一些系统调用和操作。</p><p>在这个代码中，<code>&lt;windows.h&gt;</code> 被用来进行以下操作：</p><ol><li><strong>获取系统时间和延时操作</strong>：通过 <code>GetTickCount()</code> 函数可以获取系统启动后经过的毫秒数，用于实现定时器功能。另外，该头文件还定义了与时间相关的数据类型和函数，例如 <code>SYSTEMTIME</code> 结构体和 <code>GetSystemTime()</code> 函数。</li><li><strong>控制台操作</strong>：例如 <code>GetConsoleScreenBufferInfo()</code> 函数用于获取控制台屏幕缓冲区信息，<code>SetConsoleCursorPosition()</code> 函数用于设置控制台光标位置，以及一些用于控制控制台文本属性和颜色的宏定义。</li><li><strong>键盘输入操作</strong>：<code>&lt;conio.h&gt;</code> 头文件通常与 <code>&lt;windows.h&gt;</code> 一起使用，用于实现控制台下的键盘输入操作。在这个代码中，<code>&lt;conio.h&gt;</code> 用于定义 <code>_kbhit()</code> 和 <code>_getch()</code> 函数，用于检测是否有键盘输入和获取键盘输入字符。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> startTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTickCount</span>() - startTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> _getch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 10 毫秒内轮询检查是否有键盘输入，若有则返回该输入，否则返回 -1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi)) &#123;</span><br><span class="line">        *w = csbi.srWindow.Right - csbi.srWindow.Left;</span><br><span class="line">        *h = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *w = <span class="number">80</span>;</span><br><span class="line">        *h = <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数首先声明了一个 <code>CONSOLE_SCREEN_BUFFER_INFO</code> 结构体变量 <code>csbi</code>，用于存储获取到的控制台屏幕缓冲区信息。然后调用 <code>GetConsoleScreenBufferInfo</code> 函数，将获取到的信息存储在 <code>csbi</code> 变量中。</p><p>接着，函数通过计算 <code>csbi</code> 中的 <code>srWindow</code> 结构体中的 <code>Right</code>、<code>Left</code>、<code>Bottom</code> 和 <code>Top</code> 字段来计算控制台窗口的宽度和高度。具体地，控制台窗口的宽度等于 <code>Right - Left</code>，高度等于 <code>Bottom - Top + 1</code>。然后将计算得到的宽度和高度分别存储在传入的指针参数 <code>w</code> 和 <code>h</code> 所指向的位置。</p><p>如果调用 <code>GetConsoleScreenBufferInfo</code> 函数失败（可能是因为当前程序并非在控制台中运行），则函数将宽度和高度分别设为默认值 80 和 25。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copied from https://github.com/confluentinc/librdkafka</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval * tp, <span class="keyword">struct</span> timezone * tzp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: some broken versions only have 8 trailing zero&#x27;s, the correct epoch has 9 trailing zero&#x27;s</span></span><br><span class="line">    <span class="comment">// This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)</span></span><br><span class="line">    <span class="comment">// until 00:00:00 January 1, 1970</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> EPOCH = ((<span class="type">uint64_t</span>) <span class="number">116444736000000000ULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME  system_time;</span><br><span class="line">    FILETIME    file_time;</span><br><span class="line">    <span class="type">uint64_t</span>    time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTime</span>( &amp;system_time );</span><br><span class="line">    <span class="built_in">SystemTimeToFileTime</span>( &amp;system_time, &amp;file_time );</span><br><span class="line">    time =  ((<span class="type">uint64_t</span>)file_time.dwLowDateTime )      ;</span><br><span class="line">    time += ((<span class="type">uint64_t</span>)file_time.dwHighDateTime) &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    tp-&gt;tv_sec  = (<span class="type">long</span>) ((time - EPOCH) / <span class="number">10000000L</span>);</span><br><span class="line">    tp-&gt;tv_usec = (<span class="type">long</span>) (system_time.wMilliseconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看个大概就行。</p><p>这个函数名为 <code>gettimeofday</code>，<strong>它的功能是获取当前系统时间，并将其以秒和微秒的形式存储在 <code>struct timeval</code> 结构体指针 <code>tp</code> 中。</strong> 这个函数类似于 Unix/Linux 系统中的 <code>gettimeofday</code> 函数，但是实现方式有所不同。</p><p>具体来说，这个函数的步骤如下：</p><ol><li>定义一个静态常量 <code>EPOCH</code>，用于表示从 1601 年 1 月 1 日 UTC 时间零点开始到 1970 年 1 月 1 日 UTC 时间零点之间的时间间隔，以 100 毫微秒（100纳秒）为单位。</li><li>调用 Windows 平台特有的 <code>GetSystemTime</code> 函数，获取当前系统时间，并将结果存储在 <code>SYSTEMTIME</code> 结构体变量 <code>system_time</code> 中。</li><li>调用 Windows 平台特有的 <code>SystemTimeToFileTime</code> 函数，将 <code>system_time</code> 转换为 <code>FILETIME</code> 结构体变量 <code>file_time</code>，表示自 1601 年 1 月 1 日以来的时间。</li><li>将 <code>file_time</code> 中的时间转换为以 100 毫微秒为单位的整数，存储在 <code>time</code> 变量中。</li><li>根据 <code>time</code> 变量和 <code>EPOCH</code> 值的差值，计算出秒数并存储在 <code>tv_sec</code> 成员中，计算出微秒数并存储在 <code>tv_usec</code> 成员中。</li><li>返回 0，表示函数执行成功。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    COORD topLeft  = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE console = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO screen;</span><br><span class="line">    DWORD written;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(console, &amp;screen);</span><br><span class="line">    <span class="built_in">FillConsoleOutputCharacterA</span>(</span><br><span class="line">            console, <span class="string">&#x27; &#x27;</span>, screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">FillConsoleOutputAttribute</span>(</span><br><span class="line">            console, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE,</span><br><span class="line">            screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(console, topLeft);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是清空控制台屏幕上的所有内容，并将光标移动到左上角位置。具体来说：</p><ol><li>创建一个 <code>COORD</code> 结构体变量 <code>topLeft</code>，表示控制台屏幕的左上角位置。</li><li>获取标准输出控制台的句柄，并将其存储在 <code>HANDLE</code> 类型的变量 <code>console</code> 中，使用 <code>GetStdHandle(STD_OUTPUT_HANDLE)</code> 函数实现。</li><li>声明一个 <code>CONSOLE_SCREEN_BUFFER_INFO</code> 结构体变量 <code>screen</code>，用于存储控制台屏幕缓冲区的信息。</li><li>调用 <code>GetConsoleScreenBufferInfo</code> 函数，获取控制台屏幕缓冲区的信息，并将结果存储在 <code>screen</code> 变量中。</li><li>调用 <code>FillConsoleOutputCharacterA</code> 函数，将控制台屏幕上所有位置的字符都填充为空格字符，使用空格字符 <code>&#39; &#39;</code>。</li><li>调用 <code>FillConsoleOutputAttribute</code> 函数，将控制台屏幕上所有位置的文本属性都填充为前景色为白色（红、绿、蓝三种颜色混合）。</li><li>最后，使用 <code>SetConsoleCursorPosition</code> 函数将控制台光标移动到左上角位置，以确保下次输出从屏幕的左上角开始。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">timer_ms_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> (tv.tv_sec * <span class="number">1000LL</span>) + (tv.tv_usec / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是获取当前系统时间，并以毫秒为单位返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">init_timer_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    start_time_ = <span class="built_in">timer_ms_</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数使用 <code>__attribute__((constructor))</code> 属性，表示它会在程序运行时自动执行，并在其他代码之前被调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> last_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, last_size = <span class="number">-1</span>; <span class="comment">// 上一次窗口大小</span></span><br><span class="line">    <span class="type">char</span> buffer[MAX_W_ * MAX_H_ + MAX_H_ * <span class="number">2</span> + <span class="number">4096</span>], *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> key = <span class="built_in">waitkey_</span>();</span><br><span class="line">        <span class="keyword">if</span> (key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keypress) &#123; <span class="comment">// 检查函数指针是否有效</span></span><br><span class="line">                <span class="built_in">keypress</span>(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// “懒绘制”</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">uint64_t</span> t = <span class="built_in">timer_ms_</span>() - start_time_;</span><br><span class="line">            <span class="keyword">if</span> (t - last_time &lt;= <span class="number">1000</span> / fps) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;  <span class="comment">// 继续等待</span></span><br><span class="line">            &#125;</span><br><span class="line">            last_time = t; <span class="comment">// 吉时已到，刷新</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新游戏状态</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">get_window_size_</span>(&amp;w_, &amp;h_); <span class="comment">// 更新窗口大小</span></span><br><span class="line">        <span class="built_in">memset</span>(canvas_, <span class="string">&#x27; &#x27;</span>, <span class="built_in">sizeof</span>(canvas_));</span><br><span class="line">        <span class="built_in">update</span>(w_, h_, draw_); <span class="comment">// 绘制画面到 canvas 数组</span></span><br><span class="line"></span><br><span class="line">        head = buffer;</span><br><span class="line">        <span class="built_in">clear_screen_</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">            last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">            <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h_; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">append_</span>(head, <span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strncpy</span>(head, &amp;canvas_[i * w_], w_);  <span class="comment">// 拷贝一行</span></span><br><span class="line">            head += w_; <span class="comment">// 移动指针到下一行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fwrite</span>(buffer, head - buffer, <span class="number">1</span>, stdout); <span class="comment">// 数据写入标准输出流</span></span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对于代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">    last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">    <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是在每次循环中检查当前窗口大小是否发生了变化，如果发生了变化，则清空屏幕，并将新的窗口大小记录下来，以便下次比较。</p><ol><li><code>(w_ &lt;&lt; 16) + h_</code>：这一部分将当前窗口的宽度 <code>w_</code> 左移 16 位（相当于乘以 65536），然后加上窗口的高度 <code>h_</code>。这个操作可以<strong>将窗口的宽度和高度合并成一个整数，用于唯一标识窗口的大小。</strong></li><li><code>append_(head, &quot;\033[2J&quot;);</code>：将清空屏幕的控制字符序列 <code>&quot;\033[2J&quot;</code> 追加到 <code>head</code> 中。</li></ol><h3 id="hello-cpp"><a href="#hello-cpp" class="headerlink" title="hello.cpp"></a>hello.cpp</h3><p>该代码在整个小黑框内打印字符，按下按键后，小黑框内打印输入的字符。</p><p>效果：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/8YJ9EtlM9T8?si=deaCg1WrF9h5lrOq" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="string">&#x27;?&#x27;</span>, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++)</span><br><span class="line">            <span class="built_in">draw</span>(x, y, k);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;-\\|/&quot;</span>[(t++) / <span class="number">5</span> % <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> ch)</span> </span>&#123;</span><br><span class="line">    k = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">30</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，update() 和 keypress() 都是需要自己实现的。</p><p>值得一瞧的是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">draw</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;-\\|/&quot;</span>[(t++) / <span class="number">5</span> % <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>这玩意实现了一个小动画。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>请参考 toybox.h 头部的注释和 hello.cpp 的例子。</p><p>C/C++ 都可以从以下模板开始，只需实现 “TODO” 中更新屏幕和响应按键逻辑 (可以不提供响应按键的 keypress) 即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toybox_run(fps, update, keypress)</span></span><br><span class="line"><span class="comment">// - 进入游戏/动画主循环</span></span><br><span class="line"><span class="comment">// - 每秒 fps 次调用 update(w, h, draw)</span></span><br><span class="line"><span class="comment">// - 当任何时候有按键时，调用 keypress(key)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前屏幕大小为 w x h (此时屏幕为空)</span></span><br><span class="line">    <span class="comment">// 可以使用 draw(x, y, ch) 可以在第 x 列第 y 行绘制字符 h</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得一个按键，例如 W, A, S, D</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">20</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">1</span>, [](<span class="type">int</span> w, <span class="type">int</span> h, <span class="keyword">auto</span> draw) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(x, y, <span class="string">&#x27;0&#x27;</span> + t % <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// snake.cpp</span></span><br><span class="line"><span class="comment">// Author: GPT-4-turbo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义蛇的方向</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; UP, DOWN, LEFT, RIGHT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的初始方向</span></span><br><span class="line">Direction dir = RIGHT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的身体，用一系列的 x,y 坐标表示</span></span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; snake = &#123;&#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">5</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 食物的位置</span></span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; food = &#123;<span class="number">7</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏是否结束</span></span><br><span class="line"><span class="type">bool</span> gameOver = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成食物</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateFood</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    food.first = <span class="built_in">rand</span>() % w;</span><br><span class="line">    food.second = <span class="built_in">rand</span>() % h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染游戏</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, <span class="type">void</span>(*draw)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span>))</span> </span>&#123;</span><br><span class="line">    <span class="built_in">update</span>();</span><br><span class="line">    <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清屏</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            <span class="built_in">draw</span>(x, y, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制蛇</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;part : snake) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(part.first, part.second, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制食物</span></span><br><span class="line">    <span class="built_in">draw</span>(food.first, food.second, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理按键</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: dir = UP; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: dir = DOWN; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: dir = LEFT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: dir = RIGHT; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新游戏状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算蛇头的新位置</span></span><br><span class="line">    std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; head = snake.<span class="built_in">front</span>();</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> UP:    head.second--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOWN:  head.second++; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT:  head.first--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT: head.first++; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查蛇是否撞墙或撞到自己</span></span><br><span class="line">    <span class="keyword">if</span> (head.first &lt; <span class="number">0</span> || head.second &lt; <span class="number">0</span> || head.first &gt;= <span class="number">80</span> || head.second &gt;= <span class="number">25</span> || std::<span class="built_in">find</span>(snake.<span class="built_in">begin</span>(), snake.<span class="built_in">end</span>(), head) != snake.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        gameOver = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新头部添加到蛇的身体中</span></span><br><span class="line">    snake.<span class="built_in">insert</span>(snake.<span class="built_in">begin</span>(), head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否吃到食物</span></span><br><span class="line">    <span class="keyword">if</span> (head == food) &#123;</span><br><span class="line">        <span class="built_in">generateFood</span>(<span class="number">80</span>, <span class="number">25</span>); <span class="comment">// 假设屏幕大小为 80x25</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 移除蛇</span></span><br><span class="line">        snake.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">10</span>, render, keypress); <span class="comment">// 假设 toybox_run 函数接受一个更新游戏状态的函数作为参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tetris"><a href="#tetris" class="headerlink" title="tetris"></a>tetris</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tetris.cpp</span></span><br><span class="line"><span class="comment">// Author: Claude-3-Opus</span></span><br><span class="line"><span class="comment">// With a few small bug fixes.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BOARD_WIDTH = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BOARD_HEIGHT = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BLOCK_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> board[BOARD_HEIGHT][BOARD_WIDTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> block[BLOCK_SIZE][BLOCK_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> blockX, blockY;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    blockX = BOARD_WIDTH / <span class="number">2</span> - BLOCK_SIZE / <span class="number">2</span>;</span><br><span class="line">    blockY = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Claude-3 made a mistake here: it forgot to clear the block.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++)</span><br><span class="line">            block[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> blockType = <span class="built_in">rand</span>() % <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">switch</span> (blockType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// I</span></span><br><span class="line">            block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">2</span>] = block[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// J</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">2</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// L</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// O</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// S</span></span><br><span class="line">            block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// T</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">2</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// Z</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> block[BLOCK_SIZE][BLOCK_SIZE])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                <span class="type">int</span> newX = x + j;</span><br><span class="line">                <span class="type">int</span> newY = y + i;</span><br><span class="line">                <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= BOARD_WIDTH || newY &lt; <span class="number">0</span> || newY &gt;= BOARD_HEIGHT || board[newY][newX]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp[BLOCK_SIZE][BLOCK_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            temp[i][j] = block[BLOCK_SIZE - <span class="number">1</span> - j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Claude-3 made a mistake here (now fixed):</span></span><br><span class="line">    <span class="comment">// it wrote isValid(int x, int y) that tests the validity for the</span></span><br><span class="line">    <span class="comment">// global block. temp is created but is never tested.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX, blockY, temp)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">                block[i][j] = temp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                board[blockY + i][blockX + j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = BOARD_HEIGHT - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">bool</span> isFull = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!board[i][j]) &#123;</span><br><span class="line">                isFull = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isFull) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">                    board[k][j] = board[k - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBoard</span><span class="params">(draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BOARD_HEIGHT; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j]) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(j, i, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">draw</span>(j, i, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(blockX + j, blockY + i, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isValid</span>(blockX, blockY + <span class="number">1</span>, block)) &#123;</span><br><span class="line">        <span class="built_in">mergeBlock</span>();</span><br><span class="line">        <span class="built_in">clearLines</span>();</span><br><span class="line">        <span class="built_in">generateBlock</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isValid</span>(blockX, blockY, block)) &#123;</span><br><span class="line">            <span class="comment">// Game Over</span></span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">4</span>, <span class="number">10</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">6</span>, <span class="number">10</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">8</span>, <span class="number">10</span>, <span class="string">&#x27;O&#x27;</span>); </span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">9</span>, <span class="number">10</span>, <span class="string">&#x27;V&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">11</span>, <span class="number">10</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        blockY++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">drawBoard</span>(draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX - <span class="number">1</span>, blockY, block)) &#123;</span><br><span class="line">                blockX--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX + <span class="number">1</span>, blockY, block)) &#123;</span><br><span class="line">                blockX++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="built_in">rotateBlock</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX, blockY + <span class="number">1</span>, block)) &#123;</span><br><span class="line">                blockY++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">generateBlock</span>();</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">3</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rasterize"><a href="#rasterize" class="headerlink" title="rasterize"></a>rasterize</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rasterize.cpp</span></span><br><span class="line"><span class="comment">// Author: GPT-4-turbo</span></span><br><span class="line"><span class="comment">// 有轻微手工修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> <span class="comment">// For std::abs and std::round</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">p0</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span>, <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span>, <span class="title">p2</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawLine</span><span class="params">(Point p0, Point p1, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dx = std::<span class="built_in">abs</span>(p1.x - p0.x), sx = p0.x &lt; p1.x ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> dy = -std::<span class="built_in">abs</span>(p1.y - p0.y), sy = p0.y &lt; p1.y ? <span class="number">1</span> : <span class="number">-1</span>; </span><br><span class="line">    <span class="type">int</span> err = dx + dy, e2; <span class="comment">/* error value e_xy */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(p0.x, p0.y, <span class="string">&#x27;*&#x27;</span>); <span class="comment">// 使用 &#x27;*&#x27; 绘制线段</span></span><br><span class="line">        <span class="keyword">if</span> (p0.x == p1.x &amp;&amp; p0.y == p1.y) <span class="keyword">break</span>;</span><br><span class="line">        e2 = <span class="number">2</span> * err;</span><br><span class="line">        <span class="keyword">if</span> (e2 &gt;= dy) &#123; err += dy; p0.x += sx; &#125;</span><br><span class="line">        <span class="keyword">if</span> (e2 &lt;= dx) &#123; err += dx; p0.y += sy; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">drawLine</span>(p0, p1, draw);</span><br><span class="line">    <span class="built_in">drawLine</span>(p1, p2, draw);</span><br><span class="line">    <span class="built_in">drawLine</span>(p0, p2, draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: p0.y -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: p0.y += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: p0.x -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: p0.x += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>: p1.y -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>: p1.y += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: p1.x -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: p1.x += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">20</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/7Hk3bW0yT2s?si=HwTj1YCSI2RR3Ae5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h2 id="飞机大战"><a href="#飞机大战" class="headerlink" title="飞机大战"></a>飞机大战</h2><p>自己写了一个，整体思路不是很难。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; STILL, UP, DOWN, LEFT, RIGHT &#125;;</span><br><span class="line">Direction dir = STILL;</span><br><span class="line"><span class="type">bool</span> fruit_mode, K_mode, flag = <span class="literal">true</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MYFPS = <span class="number">26</span>;</span><br><span class="line"><span class="type">int</span> score, enemy_num, fpscnt, FPSCNT = <span class="number">2</span>*MYFPS;</span><br><span class="line">std::random_device seed;  <span class="comment">// 硬件生成随机数种子</span></span><br><span class="line"><span class="function">std::ranlux48 <span class="title">engine</span><span class="params">(seed())</span></span>; <span class="comment">// 利用种子生成随机数引擎</span></span><br><span class="line"></span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; Kmode_bullet;</span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; Kmode_bullet2; <span class="comment">// 分裂弹</span></span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; normal_bullet;</span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; targets; <span class="comment">// 敌人坐标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: dir = UP; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: dir = DOWN; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: dir = LEFT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: dir = RIGHT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>: &#123;</span><br><span class="line">            fruit_mode = <span class="literal">false</span>;</span><br><span class="line">            K_mode = !K_mode;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: &#123;</span><br><span class="line">            K_mode = <span class="literal">false</span>;</span><br><span class="line">            fruit_mode = !fruit_mode;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fly_x, fly_y;</span><br><span class="line"><span class="comment">// --x--------</span></span><br><span class="line"><span class="comment">// |     /\</span></span><br><span class="line"><span class="comment">// y    /  \</span></span><br><span class="line"><span class="comment">// |    ----</span></span><br><span class="line"><span class="comment">// |</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBody</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> STILL: <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UP:</span><br><span class="line">            <span class="keyword">if</span>(fly_y<span class="number">-3</span> &gt;= <span class="number">0</span>) fly_y--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOWN:</span><br><span class="line">            <span class="keyword">if</span>(fly_y+<span class="number">1</span> &lt; h) fly_y++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT:</span><br><span class="line">            <span class="keyword">if</span>(fly_x<span class="number">-1</span> &gt;= <span class="number">0</span>) fly_x--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT:</span><br><span class="line">            <span class="keyword">if</span>(fly_x+<span class="number">4</span> &lt; w) fly_x++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dir = STILL;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">1</span>, fly_y<span class="number">-2</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">2</span>, fly_y<span class="number">-2</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x, fly_y<span class="number">-1</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">3</span>, fly_y<span class="number">-1</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        <span class="built_in">draw</span>(fly_x+i, fly_y, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_rand_num</span><span class="params">(<span class="type">int</span> minr, <span class="type">int</span> maxr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::uniform_int_distribution&lt;&gt; <span class="built_in">distrib</span>(minr, maxr);</span><br><span class="line">    <span class="type">int</span> my_random = <span class="built_in">distrib</span>(engine); <span class="comment">// 随机数</span></span><br><span class="line">    <span class="keyword">return</span> my_random;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updBullet</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != normal_bullet.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it-&gt;first, ny = it-&gt;second<span class="number">-2</span>;</span><br><span class="line">        it = normal_bullet.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">if</span>(ny &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it2 = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it2 != Kmode_bullet.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it2-&gt;first, ny = it2-&gt;second<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ny &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nx+<span class="number">1</span> &lt;= w)</span><br><span class="line">                Kmode_bullet2.<span class="built_in">insert</span>(&#123;nx+<span class="number">1</span>, ny&#125;);</span><br><span class="line">            <span class="keyword">if</span>(nx<span class="number">-1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                Kmode_bullet2.<span class="built_in">insert</span>(&#123;nx<span class="number">-1</span>, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        it2 = Kmode_bullet.<span class="built_in">erase</span>(it2);</span><br><span class="line">        <span class="keyword">if</span>(ny &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!K_mode) &#123;</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">1</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">2</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(fruit_mode) &#123;</span><br><span class="line">            normal_bullet.<span class="built_in">insert</span>(&#123;fly_x, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">            normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">3</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">1</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">2</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Kmode_bullet.<span class="built_in">insert</span>(Kmode_bullet2.<span class="built_in">begin</span>(), Kmode_bullet2.<span class="built_in">end</span>());</span><br><span class="line">    Kmode_bullet2.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">collision_detection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// normal_bullet 不会与 Kmode_bullet 碰撞</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = targets.<span class="built_in">begin</span>(); it != targets.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">bool</span> hit = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">auto</span> b = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; b != normal_bullet.<span class="built_in">end</span>(); ++b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it == *b) &#123;</span><br><span class="line">                hit = <span class="literal">true</span>;</span><br><span class="line">                normal_bullet.<span class="built_in">erase</span>(b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> kb = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; kb != Kmode_bullet.<span class="built_in">end</span>(); ++kb) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it == *kb) &#123;</span><br><span class="line">                hit = <span class="literal">true</span>;</span><br><span class="line">                Kmode_bullet.<span class="built_in">erase</span>(kb);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hit) &#123;</span><br><span class="line">            it = targets.<span class="built_in">erase</span>(it);</span><br><span class="line">            ++score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ++it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updEnemy</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = targets.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != targets.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it-&gt;first, ny = it-&gt;second+<span class="number">1</span>;</span><br><span class="line">        it = targets.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">if</span>(ny &gt;= h) <span class="keyword">continue</span>;</span><br><span class="line">        targets.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">collision_detection</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fpscnt &gt; FPSCNT) &#123;</span><br><span class="line">        fpscnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> target_num = <span class="built_in">get_rand_num</span>(<span class="number">1</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(w/<span class="number">4.0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=target_num; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> nx = <span class="built_in">get_rand_num</span>(<span class="number">1</span>, w);</span><br><span class="line">            <span class="type">int</span> ny = <span class="built_in">get_rand_num</span>(<span class="number">-8</span>, <span class="number">1</span>); <span class="comment">// 扰动</span></span><br><span class="line">            targets.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        FPSCNT = <span class="built_in">get_rand_num</span>(<span class="number">1</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(MYFPS/<span class="number">1.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPic</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != normal_bullet.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it-&gt;first, it-&gt;second, <span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> it2 = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it2 != Kmode_bullet.<span class="built_in">end</span>(); it2++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it2-&gt;first, it2-&gt;second, <span class="string">&#x27;~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it3 = targets.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it3 != targets.<span class="built_in">end</span>(); it3++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it3-&gt;first, it3-&gt;second, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawScore</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">1</span>, h<span class="number">-1</span>, <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">2</span>, h<span class="number">-1</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">3</span>, h<span class="number">-1</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">4</span>, h<span class="number">-1</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">5</span>, h<span class="number">-1</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">6</span>, h<span class="number">-1</span>, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">7</span>, h<span class="number">-1</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    std::string score_as_string = std::<span class="built_in">to_string</span>(score);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;score_as_string.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(<span class="number">8</span>+i, h<span class="number">-1</span>, score_as_string[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        fly_x = w/<span class="number">2</span>, fly_y = h<span class="number">-1</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            <span class="built_in">draw</span>(x, y, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ++fpscnt;</span><br><span class="line">    <span class="built_in">drawBody</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">updBullet</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">updEnemy</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">drawPic</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">drawScore</span>(w, h, draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(MYFPS, update, keypress);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个简易的游戏引擎，适合刚学了一点语法的小白。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://git.nju.edu.cn/jyy/toybox&quot;&gt;https://git.nju.edu.cn/jyy/toybox&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码阅读&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://dropsong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://dropsong.github.io/posts/2f57a694.html"/>
    <id>https://dropsong.github.io/posts/2f57a694.html</id>
    <published>2024-04-15T12:33:27.000Z</published>
    <updated>2024-05-02T15:44:21.180Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式快速参考：<br><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference">https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference</a></p><div class="note info flat"><p>版权声明：本文为博主原创文章，遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_28087491/article/details/107608569">https://blog.csdn.net/qq_28087491/article/details/107608569</a></p></div><p>本文对原文的改编如下：<br>修订了一些错误。例如 CSDN 将原博主的<code>*</code>识别为 markdown 标记，导致<code>*</code>丢失，部分字体变为斜体。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在编写处理字符串的程序或网页时，经常会有查找某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>很可能你使用过Win/Dos下用于文件查找的<strong>通配符(wildcard)</strong>，也就是<code>?</code>和<code>*</code>。如果你想要查找某个目录下的所有Word文档的话，你会搜索<code>*.doc</code>。在这里，<code>*</code>会被解释成任意的字符串。</p><p>和通配符类似，<strong>正则表达式</strong>也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求。当然，代价是更复杂。比如，可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2~3 个数字，然后是一个连字号<code>-</code>，最后是7或8位数字的字符串（像010-12345678或0376-7654321）。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>假设你在一篇英文小说里查找 hi，你可以使用正则表达式<code>hi</code>。</p><p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是<code>h</code>，后一个是<code>i</code>。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi, HI, Hi, hI这四种中的任意一种。</p><p>不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him, history, high 等等。用<code>hi</code>来查找的话，这里面的 hi 也会被找出来。如果要精确地查找 hi 这个单词的话，我们应该使用<code>\bhi\b</code>。</p><p><code>\b</code>是正则表达式规定的一个特殊代码（被称为<strong>元字符 metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p><p>假如你要找的是 hi 后面不远处跟着的一个 Lucy，你应该用<code>\bhi\b.*\bLucy\b</code>。</p><p>这里，<code>.</code>是另一个元字符，匹配除了换行符以外的任意字符。<code>*</code>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定前边的内容可以连续重复出现任意次以使整个表达式得到匹配。因此，<code>.*</code>连在一起就意味着任意数量的不包含换行的字符。现在<code>\bhi\b.*\bLucy\b</code>的意思就很明显了：先是一个单词hi，然后是任意个字符（但不能换行），最后是Lucy这个单词。</p><p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：<code>0\d\d-\d\d\d\d\d\d\d\d</code>匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字（也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形）。</p><p>这里的<code>\d</code>是个新的元字符，匹配一位数字（0或1或2… …）。<code>-</code>不是元字符，只匹配它本身——连字符或者减号。</p><p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<code>0\d&#123;2&#125;-\d&#123;8&#125;</code>。这里 \d 后面的 {2}({8}) 的意思是前面的 \d 必须连续重复匹配2次（8次）。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>现在已经知道了几个很有用的元字符了，正则表达式里还有更多的元字符，比如<code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。<code>\w</code>匹配字母或数字或下划线或汉字等。</p><p>下面看看更多的例子。</p><p><code>\ba\w*\b</code>匹配以字母a开头的单词——先是某个单词开始处（\b），然后是字母a，然后是任意数量的字母或数字（\w*）,最后是单词结束处（\b）。</p><p><code>\d+</code>匹配 1 个或更多连续的数字。这里的<code>+</code>是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次（可能是0次），而<code>+</code>则匹配重复 1 次或更多次。</p><p><code>\b\w&#123;6&#125;\b</code>匹配刚好 6 个字母/数字的单词。</p><p>元字符 <code>^</code> 和 $ 都匹配一个位置，这和 <code>\b</code> 有点类似。 <code>^</code> 匹配要用来查找的字符串的开头， $ 匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5到12位的数字时，可以使用：<code>^\d&#123;5,12&#125;$</code>。</p><p>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p><p>因为使用了<code>^</code>和<code>$</code>，所以输入的整个字符串都要用来和<code>\d&#123;5,12&#125;</code>来匹配，也就是说整个输出必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p><p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。<strong>如果选中了这个选项，<code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</strong></p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果想查找元字符本身的话，比如查找<code>.</code>，或者<code>*</code>，就会出现问题：没有办法去指定它们，因为它们会被解释成别的意思。这时候就得使用<code>\</code>来取消这些字符的特殊意义。因此，应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，则使用<code>\\</code>。</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>要想查找数字、字母或数字、空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合（比如元音字母a,e,i,o,u）,应该怎么办？</p><p>很简单，你只需要在方括号里列出它们就行了，像<code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!)。</p><p>我们也可以轻松地指定一个字符范围，像<code>[0-9]</code>代表的含意与<code>\d</code>就是完全一致的：一位数字。同理<code>[a-z0-9A-Z_]</code>也完全等同于<code>\w</code>（如果只考虑英文的话）。</p><p>下面是一个更复杂的表达式：<code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>。</p><p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先使用转义字符表示<code>(</code>,它能出现0次或1次(即 ? 的含义)，然后是一个<code>0</code>，后面跟着<code>2个数字</code>（即 \d{2} 的含义），然后是<code>)</code>或<code>-</code>或<code>空格</code>中的一个，它出现1次或不出现，最后是<code>8个数字</code>。</p><h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>不幸的是，刚才那个表达式也能匹配 010)12345678 或 (022-87654321 这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开。</p><p><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号（如 010-12345678 ），一种是4位区号，7位本地号（0376-2233445）。</p><p><code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题： <strong>使用分枝条件时，要注意各个条件的顺序。</strong> 如果你把它改成<code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code>的话，那么就只会匹配5位的邮编（以及9位邮编的前5位）。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>上文中已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了），但如果想要重复多个字符又该怎么办？</p><p>可以使用小括号来指定<strong>子表达式</strong>（也叫作<strong>分组</strong>），然后就可以指定这个子表达式的重复次数了。</p><p><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d&#123;1,3&#125;</code>匹配1到3位的数字，<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号重复三次，最后再加上一个一到三位的数字<code>\d&#123;1,3&#125;</code>。</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p><table>  <tbody>    <tr>      <td><strong>语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>\W</td>      <td>匹配任意不是字母，数字，下划线，汉字的字符</td>    </tr>    <tr>      <td>\S</td>      <td>匹配任意不是空白符的字符</td>    </tr>    <tr>      <td>\D</td>      <td>匹配任意非数字的字符</td>    </tr>    <tr>      <td>\B</td>      <td>匹配不是单词开头或结束的位置</td>    </tr>    <tr>      <td>[^x]</td>      <td>匹配除了x以外的任意字符</td>    </tr>    <tr>      <td>[^aeiou]</td>      <td>匹配除了aeiou这几个字母以外的任意字符</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>例如，用<code>&lt;a[^&gt;]+&gt;</code>匹配用尖括号括起来的以a开头的字符串。</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个<strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。例如，<code>\1</code>代表分组 1 匹配的文本。难以理解？请看示例：</p><p><code>\b(\w+)\b\s+\1\b</code>可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字<code>\b(\w+)\b</code>，这个单词会被捕获到编号为 1 的分组中，然后是 1 个或几个空白符<code>\s+</code>，最后是分组 1 中捕获的内容<code>\1</code>。</p><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：<code>(?&lt;Word&gt;\w+)</code>，或者把尖括号换成<code>&#39;</code>也行：<code>(?&#39;Word&#39;\w+)</code>，这样就把<code>\w+</code>的组名指定为 Word 了。要反向引用这个分组捕获的内容，你可以使用<code>\k&lt;Word&gt;</code>。所以上一个例子也可以写成这样：<code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code>。</p><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>接下来的四个用于查找<strong>在某些内容（但并不包括这些内容）之前或之后的东西</strong>，也就是说它们像<code>\b</code>，<code>^</code>，<code>$</code>那样用于指定一个位置，这个位置应该满足一定的条件（即断言），因此它们也被称为<strong>零宽断言</strong>。</p><p><code>(?=exp)</code>也叫作<strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式 exp。比如<code>\b\w+(?=ing\b)</code>，匹配以 ing 结尾的单词的前面部分（除了 ing 以外的部分），如查找 I’m singing while you’re dancing 时，它会匹配 sing 和 danc 。</p><p><code>(?&lt;=exp)</code>也叫<strong>零宽度正回顾后发断言</strong>，它断言自身出现的位置的前面能匹配表达式 exp。比如<code>(?&lt;=\bre)\w+\b</code>会匹配以 re 开头的单词的后半部分（除了 re 以外的部分），例如在查找 reading a book 时，它匹配 ading .</p><p>假如你想要给一个很长的数字中每三位间加一个逗号（当然是从右边加起了），你可以这样查找需要在前面和里面添加逗号的部分：<code>((?&lt;=\d)\d&#123;3&#125;)*\b</code>，用它对 1234567890 进行查找时结果是 234567890 .</p><p>这个例子同时使用了两种断言：<code>(?&lt;=\s)\d+(?=\s)</code>匹配以空白符间隔的数字（再次强调，不包括这些空白符）。</p><p><strong>在 cpp 的 regex 库中，这部分的规则会稍有差异。</strong></p><h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p>当正则表达式中包含能接受重复的限定符时，通常的行为是<strong>在使整个表达式能得到匹配的前提下尽可能多的字符。</strong> 考虑这个表达式：<code>a.*b</code>，它将匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 aabab 的话，它会匹配整个字符串 aabab，被称为<strong>贪婪匹配</strong>。</p><p>有时，我们更需要<strong>懒惰匹配</strong>，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号<code>?</code>。这样，<code>.*?</code>就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。</p><p><code>a.*?b</code>匹配最短的，以 a 开始，以 b 结束的字符串。如果把它应用于 aabab 的话，它会匹配 aab（第一到第三个字符）和 ab（第四到第五个字符）。</p><table>  <tbody>    <tr>      <td><strong>代码/语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>*?</td>      <td>重复任意次，但尽可能少重复</td>    </tr>    <tr>      <td>+?</td>      <td>重复1次或更多次，但尽可能少重复</td>    </tr>    <tr>      <td>??</td>      <td>重复0次或1次，但尽可能少重复</td>    </tr>    <tr>      <td>{n,m}?</td>      <td>重复n到m次，但尽可能少重复</td>    </tr>    <tr>      <td>{n,}?</td>      <td>重复n次以上，但尽可能少重复</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式快速参考：&lt;br&gt;&lt;a href=&quot;https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference&quot;&gt;https://</summary>
      
    
    
    
    <category term="转载" scheme="https://dropsong.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="正则表达式" scheme="https://dropsong.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>烟花三月下扬州</title>
    <link href="https://dropsong.github.io/posts/19141e40.html"/>
    <id>https://dropsong.github.io/posts/19141e40.html</id>
    <published>2024-04-09T11:50:02.000Z</published>
    <updated>2024-04-12T01:42:21.623Z</updated>
    
    <content type="html"><![CDATA[<p>仍旧是随手拍。</p><p>出了车站直取鉴真路，可惜花期已过，是今年太热了吗？</p><p>瘦西湖离鉴真路不远，遂步行。</p><p><img src="https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg" alt="71-1.jpg"></p><p>路过一个小餐馆，正是饭点，点了一碗卤肉饭，不是很好吃。</p><p>平山堂东路路边有鉴真的雕像，北边便是大明寺。</p><p>往寺庙去的台阶上有个算命的，门口有开光物件的广告。</p><p>墙体金黄，寺内香火旺盛。</p><p>佛像和罗汉像并未给人很特别的印象，若移驾去别的小寺，恐怕也难有大驾光临之感。</p><p>倒是背后的一墙小神仙的雕塑，生动活泼。</p><p>此地设有欧阳文忠纪念馆，亦与梁思成颇有渊源。</p><p>有康熙乾隆的笔墨，还有一些雅致的小建筑。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e36f0f6a.jpg" alt="71-2.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618903e5e746.jpg" alt="71-3.jpg"></p><p>广场前有一处洗手池，总之大约是吉利的意思，我便舀来洗了。但这水并不十分干净，黏黏的，后来在洗手间重又洗了一回。</p><p>来到广场，便是很远处就可看见的塔，钟楼和鼓楼拱卫其下。</p><p>出了大明寺，沿平山堂东路继续走不远，是一处江泽民题字的烈士陵园。</p><p>我路过的时候，正值一群老干部神气的人，穿着正式、谈笑风生地走下来，大约刚结束了什么团建活动。</p><p>大门敞开着，我便直接走进。终于爬了上去，视野比较开阔，然而回头却发现大门紧闭，才知道今天并不对外开放，却放我从正门大摇大摆地进来。我赶紧往回走，和保安吱了一声，大门开了一条小缝放我出去。</p><p>接下来直接去瘦西湖。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e49033bc.jpg" alt="71-4.jpg"></p><p>瘦西湖很大，我也并未逛全，只是随着人流瞎玩。</p><p>盆景很值得一看，有户外展出的，也有室内博物馆。</p><p><img src="https://bu.dusays.com/2024/04/12/6618907a462ff.jpg" alt="71-5.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167e52aa2e2.jpg" alt="71-6.jpg"></p><p>洛春堂：黄昏花影二分月，细雨春林一半烟。</p><p><img src="https://bu.dusays.com/2024/04/12/661890d4d2651.jpg" alt="71-7.jpg"></p><p>二十四桥人挤人。</p><p>出了瘦西湖景区，正好外面有卖酸奶的，随手挑了一个扬大酸奶，不知道和扬州大学有没有关系。</p><p>光速打卡了文昌阁、钟书阁、四望亭，出发去东关街。</p><p>东关街看着像是现代商业炮制出来的街道，甚至还有塔罗咨询，实际上深入巷子里发现还是有土著住在里面的，大约只是面向游客的那一面商业化了。</p><p>东关街边正好挨着个园，它真好看。</p><p><img src="https://bu.dusays.com/2024/04/12/661891039b049.jpg" alt="71-8.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618913267391.jpg" alt="71-9.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618916beed5a.jpg" alt="71-10.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167effb769d.jpg" alt="71-11.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167f004e223.jpg" alt="71-12.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/661693346a73f.jpg" alt="71-13.jpg"></p><p>据说是小姐抛绣球的地方：<del>糟糕，好像有什么前世记忆苏醒了</del></p><p><img src="https://s2.loli.net/2024/04/10/apXZLtenfNWk5yu.jpg" alt="71-13dot5.jpg"></p><p>出了个园之后，买了两个糕点。</p><p><img src="https://s2.loli.net/2024/04/10/dhxz7Ab6CLoIDJO.jpg" alt="71-14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仍旧是随手拍。&lt;/p&gt;
&lt;p&gt;出了车站直取鉴真路，可惜花期已过，是今年太热了吗？&lt;/p&gt;
&lt;p&gt;瘦西湖离鉴真路不远，遂步行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg&quot; alt=&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://dropsong.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
</feed>
