<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loveofpeach&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://loveofpeach.github.io/atom.xml" rel="self"/>
  
  <link href="https://loveofpeach.github.io/"/>
  <updated>2023-03-11T09:25:16.834Z</updated>
  <id>https://loveofpeach.github.io/</id>
  
  <author>
    <name>love of peach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PythonNote</title>
    <link href="https://loveofpeach.github.io/posts/7b6f8cd.html"/>
    <id>https://loveofpeach.github.io/posts/7b6f8cd.html</id>
    <published>2023-03-07T14:53:45.000Z</published>
    <updated>2023-03-11T09:25:16.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-课程概述"><a href="#Python-课程概述" class="headerlink" title="Python 课程概述"></a>Python 课程概述</h2><h3 id="实例：hello-world"><a href="#实例：hello-world" class="headerlink" title="实例：hello world"></a>实例：hello world</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">hello, world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="built_in">input</span>(<span class="string">&#x27;input your name: &#x27;</span>)</span><br><span class="line"><span class="built_in">input</span> your name: ldq</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(name,<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">ldq hello world</span><br></pre></td></tr></table></figure><p><strong>print() - python 内置函数</strong></p><ul><li><code>dir(_builtins_)</code></li><li><code>len(dir(_builtins_))</code></li><li><code>help(print)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">print</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">print</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(...)</span><br><span class="line">    <span class="built_in">print</span>(value, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">    <span class="type">Optional</span> keyword arguments:</span><br><span class="line">    file:  a file-like <span class="built_in">object</span> (stream); defaults to the current sys.stdout.</span><br><span class="line">    sep:   string inserted between values, default a space.</span><br><span class="line">    end:   string appended after the last value, default a newline.</span><br><span class="line">    flush: whether to forcibly flush the stream.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/6407ef0e37efa.png" alt="34-1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">input</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">input</span> <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(prompt=<span class="literal">None</span>, /)</span><br><span class="line">    Read a string <span class="keyword">from</span> standard <span class="built_in">input</span>.  The trailing newline <span class="keyword">is</span> stripped.</span><br><span class="line"></span><br><span class="line">    The prompt string, <span class="keyword">if</span> given, <span class="keyword">is</span> printed to standard output without a</span><br><span class="line">    trailing newline before reading <span class="built_in">input</span>.</span><br><span class="line"></span><br><span class="line">    If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), <span class="keyword">raise</span> EOFError.</span><br><span class="line">    On *nix systems, readline <span class="keyword">is</span> used <span class="keyword">if</span> available.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-基本语法元素"><a href="#Python-基本语法元素" class="headerlink" title="Python 基本语法元素"></a>Python 基本语法元素</h2><h3 id="实例：圆面积的计算"><a href="#实例：圆面积的计算" class="headerlink" title="实例：圆面积的计算"></a>实例：圆面积的计算</h3><p>交互式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=<span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>area=<span class="number">3.1415</span>*r*r</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="number">25</span> <span class="number">1963.4375000000002</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.44</span></span><br></pre></td></tr></table></figure><p>文件式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">25</span></span><br><span class="line">area = <span class="number">3.1415</span> * r * r</span><br><span class="line"><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=&quot;</span>,r,<span class="string">&quot;area=&quot;</span>,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br></pre></td></tr></table></figure><p>保存为文件并运行，输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">1963.4375000000002</span></span><br><span class="line">r= <span class="number">25</span> area= <span class="number">1963.4375000000002</span></span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.44</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/6407f373bbc6a.png" alt="34-2.png"></p><p><strong>import math</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r = <span class="number">25</span></span><br><span class="line">area = math.pi * r * r</span><br><span class="line"><span class="built_in">print</span>(r,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=&quot;</span>,r,<span class="string">&quot;area=&quot;</span>,area)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r=%2d,area=%.2f&quot;</span>%(r,area))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">1963.4954084936207</span></span><br><span class="line">r= <span class="number">25</span> area= <span class="number">1963.4954084936207</span></span><br><span class="line">r=<span class="number">25</span>,area=<span class="number">1963.50</span></span><br></pre></td></tr></table></figure><p><code>import</code>：python 保留字，引用函数库</p><p><code>math</code>：python 中内置的标准库</p><ul><li><code>math.pi</code> $\quad$ 常量值</li><li><code>math.pow(x,y)</code> $\quad$ 返回 x 的 y 次幂</li><li><code>math.sqrt(x)</code> $\quad$ 求 x 的平方根</li></ul><h3 id="实例：同切圆绘制"><a href="#实例：同切圆绘制" class="headerlink" title="实例：同切圆绘制"></a>实例：同切圆绘制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.pensize(<span class="number">2</span>)</span><br><span class="line">turtle.circle(<span class="number">10</span>)</span><br><span class="line">turtle.circle(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> pensize </span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> circle</span><br><span class="line">pensize(<span class="number">2</span>)</span><br><span class="line">circle(<span class="number">10</span>)</span><br><span class="line">circle(<span class="number">40</span>)</span><br><span class="line">circle(<span class="number">80</span>)</span><br><span class="line">circle(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/03/08/640832a82b715.png" alt="34-3.png"></p><h3 id="实例：温度转换"><a href="#实例：温度转换" class="headerlink" title="实例：温度转换"></a>实例：温度转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一条性感的注释</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C = (<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])-<span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F = <span class="number">1.8</span>*<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>])+<span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多</span></span><br><span class="line"><span class="string">    行</span></span><br><span class="line"><span class="string">        注</span></span><br><span class="line"><span class="string">            释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在 python 中，缩进是语法的一部分，缩进不正确程序运行错误。<strong>长度一致：</strong> 程序内一致即可，一般用 4 个空格或 1 个<code>TAB</code>。</p><p>变量的命名：</p><p><img src="https://bu.dusays.com/2023/03/10/640adc07a10af.png" alt="34-4.png"></p><p><img src="https://bu.dusays.com/2023/03/10/640add42a0744.png" alt="34-5.png"></p><p>数据类型：</p><ul><li>整数类型：<code>10011101</code></li><li>字符串类型：<code>&quot;10,011,101&quot;</code></li><li>列表类型：<code>[10, 011, 101]</code></li></ul><p>字符串，由0个或多个字符组成的有序字符序列：</p><ul><li>字符串由一对单引号或一对双引号或一对三引号表示<ul><li><code>&quot;请输入带有符号的温度值: &quot;</code>或者   <code>&#39;C&#39;</code>或者<code>&#39;&#39;&#39;C&#39;&#39;&#39;</code>（<a href="https://blog.csdn.net/woainishifu/article/details/76105667">？详见该内容</a>，另外，虽然三个单引号可以用于表示多行字符串和多行注释，但它们不会相互干扰或冲突。）</li></ul></li><li>字符串是字符的有序序列，可以对其中的字符进行索引<ul><li><code>&quot;请&quot;</code>是<code>&quot;请输入带有符号的温度值: &quot;</code>的第0个字符（这个中文字符串暂且存疑）</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/03/10/640ae1191ede7.png" alt="34-6.png"></p><p><img src="https://bu.dusays.com/2023/03/10/640ae1da7d012.png" alt="34-7.png" title="左闭右开，谢谢"></p><script type="math/tex; mode=display">examples</script><p>提取最后N个字符：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[-<span class="number">3</span>:]</span><br><span class="line"><span class="string">&#x27;xyz&#x27;</span></span><br></pre></td></tr></table></figure><p>从开头到结尾，step为N：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[::<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;afkpuz&#x27;</span></span><br></pre></td></tr></table></figure></p><p>将字符串倒转(reverse)， 通过设置步长为负数：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letter[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span></span><br></pre></td></tr></table></figure></p><p>列表类型，由 0 个或多个数据组成的有序序列：</p><ul><li>列表使用<code>[]</code>表示，采用<code>,</code>分隔各元素<ul><li><code>[&#39;F&#39;,&#39;f&#39;]</code>表示两个元素<code>&#39;F&#39;</code>和<code>&#39;f&#39;</code></li></ul></li><li>使用保留字<code>in</code>判断一个元素是否在列表中<ul><li><code>TempStr[-1] in [&#39;C&#39;,&#39;c&#39;]</code>判断前者是否与列表中某个元素相同</li></ul></li></ul><p><code>eval()</code>，去掉参数最外侧引号并执行余下语句的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>( <span class="string">&#x27;3 * x&#x27;</span> )</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;pow(2,2)&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;2 + 2&#x27;</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;n + 4&quot;</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p>一些其他的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;&quot;1+2&quot;&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;1+2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;print(&quot;hello&quot;)&#x27;</span>)</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><code>r = eval(input(&quot;input r=&quot;))</code>，如果键盘输入数值<code>5</code>，x 值是<strong>数字</strong><code>5</code>。</p><p><code>print()</code>中格式化输出：字符串的<code>format()</code>方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Python-课程概述&quot;&gt;&lt;a href=&quot;#Python-课程概述&quot; class=&quot;headerlink&quot; title=&quot;Python 课程概述&quot;&gt;&lt;/a&gt;Python 课程概述&lt;/h2&gt;&lt;h3 id=&quot;实例：hello-world&quot;&gt;&lt;a href=&quot;#实例：</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="https://loveofpeach.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>离散数学笔记</title>
    <link href="https://loveofpeach.github.io/posts/de63d40a.html"/>
    <id>https://loveofpeach.github.io/posts/de63d40a.html</id>
    <published>2023-03-03T02:16:02.000Z</published>
    <updated>2023-03-06T03:00:23.376Z</updated>
    
    <content type="html"><![CDATA[<p>正在学，学完放笔记。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正在学，学完放笔记。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="慢毕业" scheme="https://loveofpeach.github.io/tags/%E6%85%A2%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>chatgptalk-1</title>
    <link href="https://loveofpeach.github.io/posts/1b45ac71.html"/>
    <id>https://loveofpeach.github.io/posts/1b45ac71.html</id>
    <published>2023-02-28T12:32:06.000Z</published>
    <updated>2023-03-14T04:24:05.338Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，别再试了。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="028d0748bd0be3144dff9a3e9c6882c01aefce51b961dcc2488974542e7e53d0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章包含色色的内容呢，如果要访问的话请输入"sese"</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="杂" scheme="https://loveofpeach.github.io/categories/%E6%9D%82/"/>
    
    
    <category term="chatgpt" scheme="https://loveofpeach.github.io/tags/chatgpt/"/>
    
    <category term="色色" scheme="https://loveofpeach.github.io/tags/%E8%89%B2%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>北漂日记</title>
    <link href="https://loveofpeach.github.io/posts/a7090f56.html"/>
    <id>https://loveofpeach.github.io/posts/a7090f56.html</id>
    <published>2023-02-20T12:44:37.000Z</published>
    <updated>2023-03-14T04:35:36.554Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，别再试了。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a2b8e18e76165769fc4c8ccc0f8eefd2562f62d055dea6e6ec5a68f7b0c26661">24719063c26315786363b6db71f55f46b7da82127ab671ae211e2d1e04e303e679f25e0d4821cec8a3796324c9e1370b7a0086c89b4295e495e90deb8cfa2d5951d867c5bef55714820389dcf1c99b4469e9ac85a3dc51bb5892e211fd672b0421960b2324c3534477a7fbef0e4fedeb0a2f66523e44874a907626f94ee55a20b3e7ae5fe7b0b7abbf9a05c71cb2ba6bbc66580222ddd3583b6d7be45c761bb1660b8c4c5a1af96d12c31a341a8ad1dccf55f02c39d5e0896070aefff4e569bec61792d89eebe1fff97b941c397d33babe7678b1caca060a64d76733c099568cbfc6734f85fb0db3d7379f84404dfdf760e0564dd98e3774256d747001fd6d1e13ab550dc7e76bf0c8cde7a9b019cb1403cbc6c9e1e1c48989e01e44bca771e718e4f0c17694d72461f659ecbb60b36a00375d57c83338774d8d41ac7f57b95a2dc1d365963bacb8a89ad148e4fa8e8a3ee61b6b0b0cf4ff9252071354040571657bb20912498f929958f0f91b02dbf5ab32aaf20397536d6d44535eb2e4c1b5eb874b9cc6fbe44e2c8e601b61df04597ee4774bfaf242369107b2f4d704758e5e435ba46edafffaa32a1341ed25fd0d553482aefc8b63edd23234a209a8ae814f095a0335ecc876f1aeaa9cc5e9745e91c63d217e18706d33c487a8914e7892e2fedfa22c617ddbb235b4952f0269d858905a0d1b1371250d1bbcb39a2ea3c967edddda839d0f4beef318b55c7091936ce94c9b0c3ba46e2a462c96952fa13dae6c89ade0cf6ad3b2ad94f9c86eafac256e9d94a86ff3ec24f5061b3e6d7f6167f551a9c0d25d4077cc864b2d7bb469d41d1b7198287616ea92406f6dd2dab811f35f2cb324169ccfb71d6b819e1f614b986ecbf71261e3cfae1f986d714acc4906ff8da9477f059e14b3b40f52c87e91da316e37d75ff441dd5f4f1bea69de409db0d97acc2159c3b79ebf817f195987719c6045ff42fb96adfe6c78ca365a9059c096064f156a3e0483680b4125fa8bcff5dbbf3ce18825ec7682d541f1c5b126501f8a36feb71f7bf23ab36321397531d8da091bfd45ecfc08ea0b17514c96f50c91e58102ff9e4783a46c78ee4828fe22a3b6fc2d2d4a8b087fc5a7ce2fbdc76798f15b4a9ebdbb752705ad8543516372e54834f181f784a68435b6c3dc9462bbfb1ed502ff83c9196098d7f0e0b46f860a3d5f981a21f4b7097c809d3bf4f82c1ff32aad100c932b78a36eb6daafe821c5bbdf8455655eb61c93ab2a73a4ed3d083a0ea83523ed375be6c8a0e56125a716f758e20d2af4f3540fb51ff9c2fc7080d29940e9db6294a18733deed2a0bfd46f7129288ee48983c20385feb3763183a143159b37db3a4e0c179a3634c8fd4eff818019bb845a3ff31c3c474782df33d0015cf1f0bd70f7984d6eddd44c99af08c945e0cccd21ce78165f9b14d8457229f30bf298e9aa82b11c4159e24dd47a43cdb474332948fab35f2b0d5b1bc6cd8ef5e5ec35c00e79cbf98397b1ea4cf1d1ea120394c0d77d85d5de375bde4aa9804421b82bc219fef11c5051f525bb9ee85279b4959f316b541c83eb6cc92d2cb8aed203a1037386bd1c8cd092280cdbc32d6902ed524afef244014edbd13eff116bb189c429d3c06e1a4045679f837c20f67e0528cf90a18961706edb517b9c9bf33d5b8371d1d2599b6583d28a4869868e898b9176885596bd1654413ca0facf3973d1b6c136d47aad5cb2c444688cc4450a63b4bb39ec3fd4e2409361d816e1e0f63fca67cb2a7afb36757dfda27c394ab0299ba6980e00ea6d422623ad8d2f34c6c2c2df3fd34e3359a45ae714884313c939b48bcf4f1cdc2b5b2e2c9ad57066bbe866854823a92a2dc36374950fcb1798387f64e91d6bc3ee10b3022a6581f5f31cbe4497e203618ab5d59dd5e4da1b45c99e1e4e55d19e9025db8fd753d89546ad5ee0d7453fd1ed699cd964a5b3a50e3e87095499e5a060b832c32d624f4d64ea223b8405c4b3a65e9aec9693484355def1be2da29e507ee8f80033961ad0358e816122d07b3b675af7b5df33f4257726808d9da37d744edee6e3baa17cc2b1ef41de41318026e79de09d3eeb3ea759169c3deceaafe0fe38baa047637d305d5aefe8a273a79fedee3e635b0d758b4b990b739c72ccb551a3c2bad004dd54c4c7798538cb4458b70017e03becc7d1eef6e4367c7f995f9e5c18aec378d696b1d6a329432d6e424d1cb219fc48c1d1a9dcd804a4aedd7abba0b4f9dc731560f7e92f0a936e7f824f945d14c7a997a3329b8c96dc420d0d3ca0440513c9317213dec12f1fef06f17616fff696d0d6f68e497fc9f0f7e2cfbd21e9c6cecfad03eaa47c383152a5edd6810f64ac0dcacb906b008398e593a373f08ffd753ae8262ce1bc7ed6c0ffac4d4baee16c0b23669ba880fabdda28e113c8b52bd940d275d4caee0996a07439dd3d7b462d14e8b1a98f0ef6c4ea28b587bee96821e093000136684b7661113edddfc4aeabd10e243f41c3a48c3e7336fe6b8f2be70acef2c8a333e0d5e3b64c12408e4cb5b84301bb506d281a3c86028081a4e835f8b24a8d693d2cc31dfede72e8db249e1c9be77a5c45473316d5c9ebf553d0932f36973bf50d649377011739d87a98972eb18ff749b6b2732f06f530c9e66b00908ab833b2678845c77ae4c75ca57a46956e9983a96a5d4dceedfa687dba1a4396a5c77c84ebd01c31f6e65a5408662730fb9c5846a03e72bc597c16b22325183b644256543b1b66cf82c57b08b28fe3e1f13507b85952031f3db42ca46cb35c031fb3866d791ab355806722bfdb3249ca7e97a477d7b51e51ef751d5bacb32fb919cbf0a845da36f20a193408cb026f70c957041c9bad9816b591d9d144c5353e9649284db95fd1958bf14e8e481304597e05eccb326b0d6dd53c87c418373694c669722dada8da574fb70a2dcf08e9e87eb71e652fa28886df8761ee682927e488901d1a4b6a52b7df557d63e3c5e1a22cb2ec22068a2c2fe4b3f6af1ccfbc06ca9e8fdc309e3b4190849cbff91b364664f3f86da2050178cb8a4492dadc13522439330b6c81451a774557a03b5c9dc576177599f6935f0a00634bfffc74d4c81a0a86a0f8fa340fd42b5d17439712a5ad139f38d1582ba1750c94038219f0495c9a39e11497be0e9e42b04328ec4d63b3fd17a897842765316d234afd43485c4d034a4ec55519b58caf49b530bede4bbff0651fc1a147b874bd11740717db41da3ca49c4b3e7c096fe5a72aa7ec9a4e740f8c64eeeb52163496c7f9d22dccc7d8fff36c683ff7382c8b3bd8699c6257c1a45994ab519e789064fb2ed44eedaeef210daa9c77d2b590895fdae68fdda7c1c46f8923ed1a5623b3517d05ded4c7ca854a9bfcadf20ea15e5f37f00b39d126180be6c2605759cbf1e3ba8b3408487880c5e474165c33c6a34950a8413b9e05458ca72d9bcb72280f37f1517ba12cebe36c8685d908185ba6dcf3e487fa4f44e75b3f2b81da0aebf23020a2d7f9eca2a775e4cce358b06e6fac2f436ee8f22e5a77ff85937f48473a00d07198531ea55a8c295fc84fe39d0a19f1dedf762e44522e44ccdff0f83e8876e662a34389a4309e99d549366a8f46c9e1839bf01a08def22ed0b24fc0540b5157d00c716f1805e4522bc47fe9f80181a3d39ac44f746ed6a8a6820fcac4f7eb79e1022a4ec71f83d617aeb70a1fe3b0f3c027a950069df1b4dc237c1508e57b33d9ddd1372602bdfa07a530119ec7a6b01cb7c07d3fab56315044d54587ead6faee21f61358e8c38e70d699ff93c3bc18a180dad8dadd005877cb302a86745fa6cf97616e5c50ec5d0f9a473c514452a6e105cee3c88632eb2534157973e086d151a6da11375b0653d9a26d0652566d68cae28397e3fd38a25e491fbc3a546c2191d44cbcb4278251a2227f4cb2c498ea0e5d4d6661379ba14cb9bf0555f77628129bc3e272984641ecdf77967ea1f7c10fae759a4c3635b3c0e1c7c165c72773c4882e9a895fd58c0fcba794660b37019b5fb4e6bde59b4e7c813d09173be202c5074ae60ff9ea7e7de53e49ce99370081544a64189a333fc448ffca9973b8c21e29ff5045a843b410f6b14e08692a02f427ffad6ce99dc3bbbf16d2e75dae8fcff5d9db1f13d4582eaccd42e98ed9824873bdf1a47e7debfa675698c19d011b63fcfc8f176dd2578a587cf4c7d56579f7ad8057d346b0f8ae0998ff4ce474d754c537ce87055e5b9e3eaf9473e6dd06a78aa8120acf1c4ef2cd8a505cf59b77fcf9e079df1268a76842348b9f197003cb79305f6f553b76834567efc59a3c76a7a0dd49b3a9a9970531334e44cd1157669f38f38704d3c28660d4fe723cc97fd8c9d621b35d10a83c1c0cebfd766eda6000a09802fd5a641fc9063a962f49c741dbd088a5ccb8bc354dcde02bd064a66d6af52e7fe763fb2a2cd5c65eae5eb318c5204edaef89aeb37d58b52632f4819bf6775716256e5a1976b86da5109c3adbaa75b4b275f3f3c9259bb21ca25e628af156623ee4c683d8a9399bbc095012ae2c5f81431538482afd62dc347894f411068747db87b35c4028b32c671b5f7126438cfaa6113469a4377a61aef425693ddc797e3940732a3d3e0a2b866cdf91c54e8802afa3f9b26a853e85c236fbba2a508c97ad2fb559f17d5581b2c7d7b84b29253ce84b521e47ad3cc2aca1170f047d2a7da865ed6556322acef4fb5640122720b1dde5dba7a709e2e2207eb475e8289cf917cec17f194d52b8bb7d487821e7d7ec1749e4ffb8e69a544260cd98c96d1c1731773b6e88f738574ee797c1ad6443626ed673673516aa975c74ed68b536ff108f7a408adaa14e6ce3be7716d00ec9795ae9296e6ee571548887ff52da455c85d7690239e7229e1327b419ca4c58c45f1e3178d8e9c5b2488b17e43aed745ad5b160e5304e8497866e5ca19d31f22f6670321f58df89e45be223ac07a511c92b864d09d9343f2939bb717bdec671312dc36b3b10bd6ece807a7c4f28be8cd3408d0058bb054b0638a99b555915efb831d491da83cd3b66101d05f1dca5bde3603906c0bdb72d68f88737361eb3e314a8c51a7e33802647354d592477bdb62713e7678b667c449cda66fa96cfd96a6c265426b601e71e91ac8067ed9a7eb3cfa8d4051ee0d72de7f16bfc350a5f3ebdf3054a398452d2b46301f81a22664c9f28c1a1111fe5aa7630633812eccea318b6103ab8ef2a18322148917bdcfe5b62ac5a8e226fb5eb6c440f74f333702af3187d8cfc67c9441b5721508ed4192feef9e8457f320dda5bdad7d89b09787c75d5b11648ec02eee28f71e1f7745a9b8ebe5890b55191e7c659c9612f77585a485317874ea0ce76e965d283c0b3e645acd8d413b43f79d9b79a6ec805a6e36065f3da68bbdc8d6b9de5f944302e1a1ccdc6ea6223bf174acbc5397ef02964951cf8bddc938fc2cd5c771803faca750397357fa1f87e6f1e22cb688d67e407d5ae1cb9db77a1f62811cf7e06333910d308b92890f72543a80627a4ca966a57745c03df9d2466bbd0361b2a96625daa0711bcef8a9694f0b150cbc8e838b79068b49e0dd1228fce8989bf3c63f83898045e3ab7dbd65a5b793829b48b20c205a0414a856de65906b539d9e252c78de59c56c4c6c0537ed9ea297f4934e1bcea3e06e3284c21d3ee881839a1fee6cd1eafe79cb38d801f28a328bd211c75b9465263b25604b03d9f3b24081ec8bff4ac98f0fa5014ab4615276e6a446a8c1b7f56eb33b7dced1047b277297b2b89888a617bab3581be63c8404522d63a8abb6e186bf0cae665634bb241d23401a7e89646563c48b62ae894136ff028fd513f95588acb56537a95ce51f795235454bcb501bc1cd9d0a3f3538ebcd93054ae3f0a6df5fc1373c3e76de5dc7f814debf5b89f115f20526434617678ac2f2b408125c756dd74f99be8cfe9c09355aa12e715fcf2b9a2b9fb2d7e15e84d17e2e26e6282cb0f5fcead07f35d590f7075d7bdd237ba0d3effbd143cb400c823043e9b6eed11ae06d3c127185c3498f5574380bc2a611d6c5fa29261ac274819548798075b9e173840aa85bed0589561cc3598cd152020067f8c11eeceddaaa96909a1572f514d7bdc77bd9b3aac82260162d29432b381f2d56a2eb28a85b00b2d93c59b765916aee274ea5ca102a10116519e8248a2b6563fdcbb9ae47d0132982a34e7c1e894e08515675d39f259d453d0360b422bd5d6b4c64279029a2893892d6e39c2abb07a95b0d00fb25137cca183a8a806e36031644ecb0adec08ff7f5a834aa2194dc2a62373f18738b259100489e9be186871cb481bc563eeb6a17f1756d38f40dc194013b9c97111e7055a55fe8fc9572e8c33f54f89d98b86af9218cb84cace3bce49e2f1ec6963efddf4976dc1cd7d77468374567479e5524bd808a96056bc0e76d2826b09550593c212afb3d4b555a65cf681635c1056bfdf1207214b6a768fe41088576c090f5a99a0823c5eb8efed31f702180691b051f490c35fd8a6fd8e791497eac0c3392111d04cb4aedda5194a930e26ace222500afbbc67c6b317dcb0eec33717a947615278b4d7d55946b12e7e9c0c89f5e53231ee2dab40227c259e7694a02e13a5147606e2184fd552ab9a1e8b691c0feed8ebf729558d368f90f5fa239e13a20cc1848482ad71d89486585894e1e124769bf8d5eac76b83d5b485c8c118f3c2f0f29b08637d5e3702ec4f616d9d2c6a7444618181a1555ecf4e6139f1640f745cfc51d6371185e87ba042d24d7801d2b1a9091bc5620e79c37d9f50fb1aea81fa15137ab682d09de04e4fdd5f598990673287e91978436360ec62528b2627d98d1d27bea82e8228aeba6334e2230754999a8fa2cac71cf591b58ec8ed9687af6186f6098d4110cfdc07c5968d45864750901e834ccf6a55a81422bf8a916a179bf52bd710df31d96dfe346476567e00a5e1339e2a84fbd9a5805250306508a310a593c29780225355ff64a7410f96683dbe1afc08466d8e3480ec0cf0ff75544cdaed6f6a659cf92698cd1ec828cbf11257a189a41f39bdb43bf19bbee5ab7ad1c6b50775e1af421744c3b393a0adfc04ac37e033ce2ebad23b1602c9f8ed822e7191b9eea2dd462639c3457d65c57d6fe5e9c80e048bd05ede3fc0319f65f5ce790b6720fc13cc70db3e9da3bef1e35ac1e7b7e6ef528e7581635e8bec21b81af98fc77af2b3ac2cb3fcbfca3c0a5847f2d6d6fe03117290a9475af93f5d0452de32a0b4764fe398f2fedbd395750af1a2345ba43f70e2f74023fc9233b7be34cac01207d1bb3e6959d56fe8f3d570ca7d34cc022c9ed73cdca9dd38adf8153daa3fde70a08ded8f964b86a5d370436ee54ea53ea24b3c523413e8c256d70c9ab55927f70de5d4ed81b5a0739b045b90696a731a668309c145d970f4e486cc27909f3e3e4e29f8f516e34c901bbcf4d2e78217ae584ef99a0f53d876a67a3a86955186a0e2f9a7011f2e87dff2f774c9d19c1f9fe0b8d8447906a6fd8dcdd2a6c86f6b28c6d9d0fbac905d033656e9f5331e4ef5e8dec720f12da4583a9a599f1dd81bdef2ee0c57dd7a6578004c44eff06a7a7d869030c17f190b15907fac0cfbed69beb10123e160977f058201e1671d2f73e9b6dae3aae8c1a923eaaed4af65a24c755c3181f56c95fda993752db7fee2012e0d895ada5cc80b5e5a1677a126097a8be34c9f7696a90700f36ebc7f18af129c3cd0a5602585aa0d27786a36224fc35f58c60065d8e2320956496c394fab281ed372a0f97f8d07fa5de7104dccfe9564745764070ee144fd47f4711c6049115cdb0ba04d3e4a467c06eb50ebc168500d5b9551c62e62f552c0cc2807a826570303f2a20ae88689ab0839e4bbb75b4f6a83df757d566dc81743061b88ec10e646bf19986ea11cd0b9ce9eebae1c4757cc645c3e30c6dce930e10fb2ef965582ba871808b291820fa0584a97c35fb55cc82d2dee861c7d6dc593917d4be5e74192532e06b1c964a6a5486aa8fa8b3af9ce72113058cfcb884eec5dd3d8f5c8189b7c48405968f450ba15f762f94caaffb2ded07f94b71d5291744775f5be223741a61af042c3c152a637dd6bf2f158631c196c3e6fc52b0537d06a8adeea79d279171a57a94e5776e1efe66f6023d0278df391d00ba1aa3098d131d68fa4690737ee82a3b5a265295ff2ca67862de0c6c6abed7ae9c8609bbd3bff97d0f09c363497063dc9bae7f67e9ed89930f76af12f54889a489beb023bc48f7f620d238cfdedd9d94197e797e6fbc6184a49eab898d29b5ced3910a03e3277020dbf812c4af51e7b2122aeba4d22cfd6469d5fc3575212f205a623372db78ffe549871667e8abf04878c683cbcfe589e4789efd9eaaf2180dcb835041016da59f4dc22ff4e4e4cbb103c654826000daaea92757f520b6649d1101c391955f54289f6ae590a12d88ef7a727c80eb41451bd4c5d04e6269eb74c13208bc864a6da7135c2ec737197755d464f9e021d92b27e10b773d42e3fcd1fe593e7960b326e1504174c05daeadf8466fe29c310ea1e18c4c93fb80c9dabdd05f8a93aa1fa6bec11ceb98494398cc4e3a3952fb20b53440b34400087eb986d5c2e7c6b1f1edda2adcd448b06acef4d15fa61444c39c3a5f8d41f6276d137f863cfc21784341de2ee270a4d9b5f300a45454ad77d60955810f0084587f1b06a48c21ae9192cd84573f290518e2e0d9e98947f0dfc9db611413aa3e4016a3211f30ba270d807b72ec90c298c44f470913a712c9fbe1c0f19c95810e0b5d2552b4a65b38b3204b45895e0e8cf1f3ff886aa784cb010d48ee848795096fcbcbbff984e9b62db83f507593e64187173ec24c412572ff9a2acf3e9bcdee997869c7adaf612ba835d912751c030560cbb69565d4587b66442a0e1b15746374fbd98bdf193d942e4e04e139b71d701013c04a1b56da20cd5f7773541d60cc6b45c19044a262178cba2eb530a8688eb9e792d41aad2d2bb6a1459ef125844acfdd23ca8b984814fb73a3a35bd90e100d89f05be8fae56274aa7637785dc1246348faedec4418bd9378fb4245c0e1beffcabd97b2c213005ffe429e8aa8044126b002880d427af7b2d602e6aa7ce7891661dafbb09f0d928e9d918a953775d6c61b58c7ee7db185d5bc1102b9d1f4403b405f3caaaec7834798b69d7ec6f9a61b37d0835f5d372f9ca0c7188aae0fd320a1d3a048456b3d2bc109cbb8f26f2d5ada68690506393675c9d1883e68385d411dc478da5906fd35b361817a7f4aa0a8db5aa5c46049b41fd0c027845f586f498ed10516ae6f8567d135cd0e2acf1a18aed15986ab5455e96e0c67295dc61e962ea74622ce064c431a476b854f2f70ba1f4b005f000567eb0440249208ef5535ad9df73d11c0372f9317be79f26c79b13e26dfa8fd38729813f7b1b08925b34e8d1b79f827d202a158f02f95276b0dfb49e224b97ba321e1592b7d26f42ad87396f7193c4e198ebe5ad38da58e70d506441351b9c02d6b164902020bd1ceec72831aa0db763a0deef1f07cb248d83f11bbd0996f4ce37bd2c8df002671c2eacf279138afe8b9de4b80f1f5a2097f45378087b51012c006c701f63cffbe5d92627a4923adafbd947e14f336b949da91b9a69af9b9b05b3d84043f0b07acb21dbfe7f376ae05f1f977979ef671d9d8ca9a8558a309e4740480ff38aafe4399a18714ad08ad7bebc728ba4bfb7d25ddcceccc452c465446e5d2027ee93b469383bba1fcf4a438a4f534603dc270181050a368cdc4cfa474ea7caf31ba71e01789c8022c532bf319059ff7744785484aef8a410456fd30e3a628215f6ff2213abccc768347b8b6e41546ba97440cfb1b8f68213cabfde5d4482a3f2bcbd497e86b6d5df1f1f863a0ebdaf913787c1a5e571a2b3f38c6e600a527c6935719a598226334d44735cc16c97ebc88e262edd3ae0bd7e96ceaa9905ba879d44bf649cb6956a06cd6327648ae7f774a70c080ffd915d8b23596424d4fd8a6ff7c53cc014975e118446dbe5b72595df62f18475d44e95d728c2509152d0a6d4621c36158d38e8ac7f3feba466ef0d0c97f54782b649b0e14e5b466f09aea748e54d24cac337283e33dd310263c5e9a6dd6b091d485a854b82c95eb79f4e9519fc95c6e3e629ddb652330393a2579119a123b106e5360d744551247187fb455270d39210e7b96cd38908471d7ec97731ccf03e9a06581c7298e44a03428158d0ee6903eca2cac931ddf10d2240774bb8fb067d38ad51dfe2d3415f7c5f2a8cb165b20f7c6ef9d4250383e7334d155775565662d2bab8c77f1f7af4f505ac30ed7e07bb64b7342b9bdbffa1827058d3cae5421748e6b5795d14b154bdab517d979dc199f050bf33f2ea3cb6de644592f850f2e7d6dbd9fbd9158918b013818ae05242d93f3ad4562ade185d68ae8fef96a5845bb79a88d3691eb08f8d6094879cb28f26184518590e08e0fc4a9fb489cf918fc8ce3d8bed884a1f176924d0402f25af51a5d257e0b3af54b1e4c9db2b3df30ded10cfaf09e3b930137c9558f29bca2d38d51ab4f79b8ba3b035023b3de0109371b78287b14aad8e4e0b4f4f2a6992e3156d61e69ef678871af7e55fd4756f8aa58b238e9d80784552326efc17af7fdf43a4c64fbe72d05dbad96a09c30daa4230d0fe9efca7b73e5a8e074066aa2b3a8582d56c6d3e90bcaf2f187cb1032e7ae8350e9655785c4e2a1eb638d82d05578423fbacb58c3c91415f2f6f1c89149f612a3781a6b199ed6d4ccfa1b85f1a0001966cce9972666148e76d2901233b72a730925f6066732901391fd0849f5c3b1e40a754dc4d05b4159f4b0977386262f33cc3957dd292b0fa56784988569550b7322d5ad17634a6179667ffe2b51c50386232eaafc1c7acffd8d9441a65295f7877317d74a78dfacb2c8b36518e04a518b7a2cdb787850e936b3984f3d4cb09ffd6e8c03fc6341529640c6a08771dfa33846157ee0e53cc20c506e7fe3168091157bac664fc135614a7e83b709f29c3ded42d38de8925f66988738f70207ab92fb39c76bdde5ef4d095588187e3687d33f4284e878fc62df5fd0c1426f36c587be6e9364eff17db3d8e95cd3e0a96c1e5cdedb3287caa270af57524e48dac5920a6965296229f6e9e805ecd6c0f42c07b821de3275bce9bd4cb74edc08e7897fafff03d1fe6cc286afc214f61377e55068d55016f31bf63fe57a19a1c6b4b48204ef68077545873dbe5df5c19cd9fec2a1be963bb39121d7a28c0e1110877b26183abaa92c0959cf3bbfa36ebcd31888e405707075f2358ceae139f91d98c91052ba4d286faea72e1ad3c0a87e2da4f78f55b09b24bba5be155489313b983322b76262b3cd25a80a036bb3286e43f145f9d8dec22a34aabf0aa743125bc9d6bea88f1f21ed6f8523f842d3cb333559691828f0242ea01387bddbd6abca0b0e64a95b5321ae7d1ea111074705f8d6bdd6ee2867770afef6ec3ec2953c8ae5425987672475832789aa4be64de8f664268b1336cd921f49b8498a1eb0bf0dfc842d98480242d7da77d4829d162befe7685269fe224903da3a7bc2cbefcd037a437ec06c1ad87aa46f5166292b4bd280f065b694ce825bbd0e650f8e75c633496bc44e7118a3c726d016c8a8428015c0a1cce049c17a763fdd1e4814e249765a1f08d82c373ab17439c75c9e6c3a6c3375b0b82d1f38a5a668004d64c1ca4ce5283a834db2ae8499f97c4c24c3dbcff260a7b2467cb6a64e5a83345f91d9dfa7448598872ae30a8cbf3254b82c13b874f8dff9c0acca2f8f69cdf5e7157efae0f6486a838d13f88b8ea4e9589c97fcd093c8d17c01fae7be30ddaa0f71398a399c2bd64fd199900abb79ee5508e8a1f0f25c826fa9fb6692b9ec78686d292f373f8cfc68aa1132a9c1299ee8b1159a44582b51f6c9de57db49d7ed4d95749872195c113c1b414d77135d747fb0ec9ea2610ad9aee5ea3ce0e7da58113b90c437fdfbf641a4c5c1bfb3eb88f50383f5249bf109a55cb8feefce25c6831880c9b73833a4477c0ff8fe850c944327b6ddc94cd185a42962a12991bbc7ec17c59856de308961ed4328a1625d93cf41c6107818721cb6a78c416f7cc2bf7c3a265efd3426883cbc34a20757b2a6869273d86d068c65cc672a2a0cc14ccb14602cb99dc800b92a82d35182641756d76b6c208d2a97ca689c7ee3b3948011d02d2d905eb41801d3f5cac89d946c06cbb214094d001f7016c303ad61f4f7b39d445252bea66338d762e75e6c3269555eb24999cdebb6d25f17a1ce32770aeea6f625b8cb033fc182e3035c9f6e2a9bc2578863d1d2266f1a702e4abfb69afd2baca69352ae2a3b2c1ecc7ff934e18afa9e4e1345f337a4ba73d7c8bb4900d388d470d3cb499808dbac7570cc060170aa21a3573bd93d16a245acb0efd627b311408b4ddb59b536ea4927504cc36485fa0449b4a8a01664b978294c44e8133f86aded9fc36d9db9da616ac5862838234e05d8e49d91050be284ba2f5b2f701d8c6ee7448a6eaccb3d457baa5328e462656ef368c6aa22f111c37684eb238d1c7d36486c3f0ea6e542962800e790b2200f97d81ff108579ba6a9f2732ea446f538f93a6e762c6645e45f0d92440e2a190baf64cca29a029b5df869f59a6be892a20a206045367aebfacf4b68fb5388b200b875e1b9b973b61417f72af2b82e8c0cca7a6ed6bb57938c7ede696afe6d0552468747e640cf666b739a7fe4b902eceb1f8d2dcf9b20da40c4cafd47aa88bb8254eff3090bdf3c841adb74f02bcad52f078e053f8c492fa61536fd5c62ddba6bd01197171520a3ffd2c6c4539f346d105f23a808d150b8351548522f8ee6b0a57881c72849ed02f298a2d26c257e90b60197566b3f822d23707c5aeb646e02e8ecc7d89237a2005777a9c8e436e2239dbb5fdd14c79344035db4b174852d0226ba933d41ae7b96e3b1f145298b62638b577180587031732f4b0e422426299539e931bcc129e777178bbd3d2bfa03d769b7d52bd7c90b70af9fcc30114d209b70d778bb3de0d4f374f46a9cee1430697433f5726f5c39f7d73979893f1aac2c594dac4871eba54b42a60d997dbbb3d498d7c6294676e8f6a7d82f642b2278ef63b36c0f1bc6b1e12a6e71e933b293da059fbd303efc4e00df67c0369a092bafeee17651770be0e54bc6c227dcbab7c49d1ca3a108900e9d0c86ffe43189805622081ca8d5f6bc3d2216abc2e788101cc4271be82c2e8f7611522f778a18be18032f8d9e7b6895f2c26c9fdbaf42ab45e052b1d17e66eab18a00627d8f7cbe36ab238274d29e238985bf90cb45d2eee91eea1a649cf28257f8213e2cae674c64fcd41661b2a49f92353f7b4d8627ba6c992109e3dafcbd44f52e1a4d5ec6ea49afce892828deb8debfb684c80da1b103ddd7dfb8048cd49596c9749b3e0f85520599d5bff2960487669ef2bf00c43a9940b0996ecb8dabe4118104d90ee7ed4536a72022dd9c15ed48d0892df3b7147392027a966f2324cfc8add3d4e7e95a6d1a5317081600798361f98c2b824265fad6fe8ba3f68bd8c96d6e9b3be90f7891aa29d11ef56fcee92edcbaae7adba67e6ee4090f0f24d12c37072c58eafd25bf0e19ff97881c3340748411a505bba6d42a23efc7d69455e379fc9fa8a235c9c1961324bbbf6b30d2795b3b015362381ac606963462f21fcb499acf5408b15534734f116e70fbc0f357d2959448a6232c5d595175129d7d83bd7f10368b0f7e3185176f2d15b6846ae412c12e0b9a9c8152226760c606e6173c1dd35109ed48ced18e845845cdebaaa7cecd7e022096fbc37263905bba463ee1f6711878c501f97dff762a083ecc2a51f1e458e9fb12ad0334b523ca1579ae9854509b3330df5809ecab7f6d99596346a9c50c99dd412b84db390700a16ce03f8b4ea83683d83db8a70b014d97f1b63ffbc4ea3018da7c3c25a1cb0095d55553926bc95aa113caf3a16f2b6f4362d6bf149a6c34e92a68b2b5b61f3f4d74725ac81dec84653f262659a0a9ba18b22604a3b5a55f027529ba1217f92a1dcae51fde74b70281a1fa50ac2df311d480f11ddcb9b6da5e288ceeddfddb84cec8eb84c806c0be1898ca4dbf736b1c9f1bc81d0c8a1a87c72913623f47a22d73f112b872e83107d74e064cbe349cbb97e93f8c2d4982d035c3aeea71343e7a55f1e45a838350132435624aa595599be66c96fd7305cbc5deb1802cdc40736cd077aac73e41875d24baf8e41175ea007e271cfceb8f34bc388df54ea1f672a43a9da4ef08bc4760f9cd22bc783fdb50d3e6bbc8bceed7b38f53e293fe8712d880a9a58a3d491887111f95568fc3a13b061389950acbe86b5f119855d921cff4401b3affce8d7edcbe4ea4c0b113e87f38540287908edbd3dc1d2b05dc59640c79efc27b3cc62cf1b43765ba759c66a9d9dc1763af0cf82d35bc8538dc42a15d522a8a21ae844e04420580d3be9de06d45bdf2cff03686da0e5b68b804197a67461474fee63f8e00ac212dc976d19a9c9f41565456953531c979b617a36cc9ca05c9cfbdb16b9b38fdfa85f7ea5b6f4f669a344bdcbd74ec009c5168b5213b26e1409573f0961e9fb5b505f5045469069fbcab21f74c8305f51406f8d8c334f5f7a009855e9474aaca0c8a08a5beda7a4866c8c585f49b503a5191f2dbf311394b0d2fe17940f8d619f4879912a8766dddee90a2c4d85c975ccda3887383dd4c5707f65b5b7dd9550e4cdc21e482d4499fc2fe0030112ad24da5a6f48841af59bd4dd1fcf7429f1ba4b99f7a3c862845fbf3f8e83534e20f786d951597c89b4c95503d26a8a21e726118ecd51a04c6094702bccbe3ecac0ea6216b61482fe612c17d107ea83e25ebdaa2af61d666e2e83e8745e5b425fcc532a13e11815bd09845f7ec7554516eaf96889425e800d8fa2dc5fab5272c65339bb8b2ef5527f511e7b85433ed3cfb4e7b363773e417d8b280ebaa05414285c3206015a95551227f3daa3502b516cd4997d93cbcf6cfa0531e0769aa4984295ee304b3e36135af7becfd64e3e03929fab1afabd1a8761afcfe5311f07d68f9d99edd363321838163aa55f5480534e263c31813cb661a2bab9ed2e564947f852af9e6bf0d059cf50ad14445e13d1e14478062aed1a2a28f8b53847b14bc4bd8eb3fb312eea841ebe4860487a800cbac710724fc8ffd4407ecaf84641a50c4430161d82b05087e1b61300ee003930852ec3036d564a8d842f75d286bb71204ba3140484f8bab419460a53726af06e1cfc8bc3401efff923b9878f851b9e352dbd556e70f84b4324390314ed1d01627ff4e578277d0d3a21280fb1ee97539c8c7f9496448701bebe83d62b8b7e81256d5a4517f4ec1bb8e4fe784150eb18c8eb95f119bb5b331512ca5efd1a72040ce3c7e337c5ad67826576cdd9784bce3340d813bc152b149a2ef2900b58ff8b3f705fa58bf14de128d89dea6848fdf115a9c476a7cab4359e478165a34ddc9b91e177575f707fbc92092e1d0bf8bf3736aa843432a1c3994bdc0bf222ee7218e51ea8eaf832669255cfc3f40f8ae96fc0ef8fbcc7083966fa6717c8694fd261bd7c2a5fb7b512272e4aafaee64982edcd6b692eaac1b5c579aeb30151309bbd736e2bb0f9dc61ac1c529d82c2b39064cae53e3199ba3f4904a1f109653ece0536aff614f6372965bedcf216e059a4c6cdb575f515bb7ae96061cc3dae557f0fe52bd2d7d319ec3b5a337447a2da70155abc64f823e8260f6840c50b1fb23a774ca0d8c4c2b0e1a25997c00f5cee5e4ba146faa50ccfa3f8c79291e01ff6a54bc86ac2bcb4ce32ad3a67794f1a7f1c2fbd5c5bc0880e4f024383aeab9c0f04bcfb744e23a11e29f193496baac846f35db28391cc6517451ecc5bd3fd12effaee4a343f63096c1ff32dca7da22c571ba87e6515e8deba9145ef8cf11471905fdb82091cee615c4d272fd75706567c2f2e8996889cf41b36b29ebc0d58c8f95fdd995dd2fd5321958c6a87dd37feb3e89bca12e600b7005d388aa20c0138309ca4002d35ea15e87f2d71950f548e279f01587d484972eda36eb4afe6cef23a2ca489c6c5d0abbb9d52df441490b16071485ee67cca0ad8e7f59734f1d307cfc3610f6641384226c7fc54e3b64716fa25452a5e2ef22125b2308f6c7a4fc811ae062941d5ed4475848c0f0e58b93103f0d51c2bb013b8c1579e3a26f54f8dc6c00d5a31e1e1e2850847c628a4924ae94363374b4d8af83cb528f1477639cc631fcbeeab3e3b952ce4396a03564f708945f10ca1653ed73f345bdc337c48bce973c3750857211170124616fddf9e2b9324c40f4c55c1de9dee0eaa9a3dde006e73b85c060acc6eb885afa8fffc755f8a21186bcf3e9b802327477d953c8eb1185b0399a6975d6af1921754271f63e3d80c7c6a61cea965faa85b12bfd37d4376e85ef9fffbcda45e50f12ba14bb25e0ccf2c57606ac889b2cc01d3a12fc6d1742628a650a0e0f4e5c51005b624ef0b787f0f871f5f14e7fe6c0b4aa729d5085b80650c8e262a6555abb2b56692643130191c890088598b70f09943fabeddd4074be0c2d46b63d1314d1a73ec1ea1dc5cfb1dce71e976299ac65c1e4e7aad6293fd95499d47c56edf45fb361bbf5389f5fd4a7f7bfb79324c3f3530bb1b5d1ad78376d3ff5acf2691462c50d22750602cd8e956b849d153e818449a539ce1a62e3aaa105b05f80df77a2edaeeb8b9e3286dc48dd2c03ac970b57bf7a6983efb87c673165d397d87f52a14530beb09cbe5c76dda6755a3dd918dc86ea36a6d2c618fab34ebdd577d0e0e3f6faa1101c0ce0b93d5e0b9ad579b47fb32ccc2a77a540e06a99e074ef662c357d7dc050d94edb19e8379baffc639689b55acdda9f0d5f0894b6660c946f016981bc1a66b6b15c9e9ee58f0040cc55039be4c2768916395a84da01f1f444843b8938dfb049245d619314cad50d0a242bf75f88421a196b8ddfce4b528904d668402ddc14b37f42e4f2a3deff3a7e47af87c6b416e9542636e66aaaad1b9206847e580d62feffb2f73b458ef5ca6f9e8388ba9b2a83da207d93af8b3c1c31b09d9992b97011e3ecdfb990e630476503327ae9adf84c1e55664a0bb694be1f5ce889c595e06eae9e83816ffe4a29f0f0a472d446513aee54c1028bacc2997a110c6f738685da000ba4449a5e53b6f30181387fcf994115a3de0622677a2aad25abfc956c3e9baedb8b525bb6415898b3afdc849e072948b8bc9797e5d55f81ea7168d556633558fd1b12c4ed5c0538e4480ba6a027b2d1575313d3f1508bd07dd5f8dcd9b30991b92ed1aaf40f176b40a2073e6d874e782299570604ec77372a3a2dd9cb288c4c83295add8ff613f16bdbeb551d7d93bf1b455216dd0af39bfe1299d93c6fc0c11d83e2b9673618ab568a6263e2ed90508072e9d4a117778b8071a529dc5a5de17d04fab98b330c0fc1522a8fa6673a75f0b19f5f7c8c1682c3de85423984dc5122b6926e03d5db66262fec435d35a6e685ded805b21601f52cab2e206488607d827632e12b52051f7485a0a76083800738a495ad171ae6f1631f1afae8efcda7b861de1e58352bb09166af56a3503cab809b5d337c055371052333227528ba5ca61bc11d6cc4375dfa0eb15b24d7d68e1b654eb321f03309342779c4775e09c7724e92a0ada4ed64ae465a87dd1ed1264fe5e1beadd643108343162f1cc12988155741cd3baaa5fb80d6476ae43e0fb9166c73b6af9a7c7564d10eecde01652d20eb1d7bfb97ac31e19dd7285c02b271304791d865fa98647f4601d0a102c34fe7f79fc5abc802c353cc5ab46451586fddd3bda8c5dbd6ae1ff97f5f2ad0693b1455e3e84c2dc8daa2bbcbe41607c1dc85561c2b80e5e4bc8c4582b69f8368fb35612e2e25313289714c79340be5dd52775efb0469430713cd9ac8e55cd3c89c31ce560aac564bbebe67454489ff4bf132bcb416b1b5a1ed6b7f40c960c6960d874343108440e48a5d8f72d322fb12d00a5aec48462c85d2a5bf99bd5eabed377293e8a740e48a190ada6170a868530033c67501499d76b4c8c7189a830c566cef8f30449fb4f58a80607d9347bcdaab15c627c13bc7f34b383dfb750f69a85968d04f6b5f51aad95015f99846ee5a2adfec7238b436336525b569b0d651942c64969fc4daf29d3e528f20365535aae86779c374de88cb2e2b9fc80b933962ba37cf90367e7812c50b8ad7ea0731f1df3b99d8255e87862f20e2736a050ae9964f1de7e265e10d4959d8d5c139949d0cefd0013a07e1f426fa1747aa5c950458202d608746783d8f19763e4c61a0e4d0c5df26105e23444f3d4c669c1dce1c9ba1b50c37d8d1fc55bede29b664207ffdd3c1d721ee57f48ebc2708c4ceccb2d7995a718dd484050250aab0762f4a1d0649c1788c59407bfd43a08438f45d1516d415bad324e5e25e7008781d1d3ce89356184e32602d35e5fe05ff0aea329cec7646315f7f7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="北京" scheme="https://loveofpeach.github.io/tags/%E5%8C%97%E4%BA%AC/"/>
    
  </entry>
  
  <entry>
    <title>旅游照片</title>
    <link href="https://loveofpeach.github.io/posts/e413b481.html"/>
    <id>https://loveofpeach.github.io/posts/e413b481.html</id>
    <published>2023-02-19T05:27:28.000Z</published>
    <updated>2023-02-19T13:22:30.145Z</updated>
    
    <content type="html"><![CDATA[<p>label是摄影，其实就是拿着手机随手拍。</p><p>有两张原图丢失，只有清晰度低的版本。</p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9baa2cc.jpg" alt="1.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b98e275a.jpeg" alt="2.jpeg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9c53029.jpg" alt="2dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9b7ff7b.jpg" alt="2dot6.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9bd0ef5.jpg" alt="3.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b98e32bd.jpeg" alt="4.jpeg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9c9cf7c.jpg" alt="5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9c7143f.jpg" alt="5dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9ca0346.jpg" alt="6.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9b8a1d7.jpg" alt="7.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9ce2757.jpg" alt="8.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21b9ce1f1a.jpg" alt="9.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4170397.jpg" alt="m1.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e41e0820.jpg" alt="m2.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e43d7573.jpg" alt="m3.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e3d78a80.jpg" alt="m4.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4244e56.jpg" alt="m5.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e40e4455.jpg" alt="m6.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e42bd7e7.jpg" alt="m7.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4121bd7.jpg" alt="m8.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4384d6b.jpg" alt="m9.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e431dc22.jpg" alt="m10.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e463cd07.jpg" alt="m11.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e4942f8b.jpg" alt="m12.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e489ea04.jpg" alt="m13.jpg"></p><p><img src="https://bu.dusays.com/2023/02/19/63f21e49afc4a.jpg" alt="m14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;label是摄影，其实就是拿着手机随手拍。&lt;/p&gt;
&lt;p&gt;有两张原图丢失，只有清晰度低的版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/02/19/63f21b9baa2cc.jpg&quot; alt=&quot;1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://loveofpeach.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>优菲的笔记</title>
    <link href="https://loveofpeach.github.io/posts/7145501b.html"/>
    <id>https://loveofpeach.github.io/posts/7145501b.html</id>
    <published>2023-02-08T10:00:58.000Z</published>
    <updated>2023-02-08T10:08:48.008Z</updated>
    
    <content type="html"><![CDATA[<p>致我最可爱的女儿婕德：</p><p>给你一千个拥抱，一千个吻，愿不变的月光赐你一千种幸福，愿专权的烈日唯独宽宥你，宠爱你！</p><p>等你读到这一页的时候，想必一定长成一个聪明漂亮的大姑娘了吧？</p><p>我希望你知道，这天夜里，我正在这里想象着你亭亭玉立的样子，继承了我的智慧与美貌和你父亲的坚韧与执拗，我想象着你身穿教令院毕业服的样子，想象着你作为一家之主的骄傲模样，想象着我和哲伯莱勒已经老去，看着你正度过最幸福的生活…</p><p>哈哈，我知道你是什么想法，你这个坏姑娘！你一定是想要把这些话读给我听，故意要我难堪吧！</p><p>即使那样，我也希望你能看到，我曾写下过这些期许与祝福，我曾幻想过这样的幸运。</p><p>真是奇怪，这个本子原本是学术笔记才对！我却不知不觉写满了对你的期望…唉，做了母亲，就会这样多愁善感吗？</p><p>真希望有这样一天，我们会为彼此感到骄傲——即使命运的风把我们的沙丘刮得一团糟，让我们失却了一切美好期望…我也希望你能看着我的眼睛，告诉我，我这个没经验的母亲带给你的…并不全然是遗憾。</p><p>对不起，我没能给你最好的家。</p><p>但能成为你的母亲，哲伯莱勒的妻子，我非常开心。</p><p>唉，真是的。在我写下这篇日记时，小小的你还在我的怀里不停地捣乱，用黝黑的小手蘸着墨汁，给自己画大花脸…你是想要做小画家吗？还是想要为妈妈驱走噩梦，吓退夜晚沙漠中游荡的妖灵呢？</p><p>好啦，睡吧，睡吧，我的小羚羊。</p><p>让我记录下这首让你安然入睡的歌谣，希望你能记住它，就像你记住我那样：</p><p>群星升起在荒原之上，<br>夜莺也厌倦了时日的无穷，<br>是时候摘下蔷薇的冠冕，<br>洗去俗世的尘土，用葡萄的酒浆。</p><p>睡吧，睡吧，<br>永恒的绿洲将迎接孤独的游子，<br>在这里流淌着清冽的澧泉，<br>在这里记忆永远甘甜。</p><p>睡吧，睡吧，<br>黄金的梦乡在召唤流浪的沙子，<br>在这里不必将那苦涩的盐水掬饮，<br>在这里不会再有明日的愁肠。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;致我最可爱的女儿婕德：&lt;/p&gt;
&lt;p&gt;给你一千个拥抱，一千个吻，愿不变的月光赐你一千种幸福，愿专权的烈日唯独宽宥你，宠爱你！&lt;/p&gt;
&lt;p&gt;等你读到这一页的时候，想必一定长成一个聪明漂亮的大姑娘了吧？&lt;/p&gt;
&lt;p&gt;我希望你知道，这天夜里，我正在这里想象着你亭亭玉立的样子，</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="https://loveofpeach.github.io/posts/db0b4310.html"/>
    <id>https://loveofpeach.github.io/posts/db0b4310.html</id>
    <published>2023-02-01T09:21:58.000Z</published>
    <updated>2023-02-04T02:55:29.840Z</updated>
    
    <content type="html"><![CDATA[<p>以后填坑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以后填坑。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="网络" scheme="https://loveofpeach.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>P6175 无向图的最小环问题</title>
    <link href="https://loveofpeach.github.io/posts/a050ca88.html"/>
    <id>https://loveofpeach.github.io/posts/a050ca88.html</id>
    <published>2023-01-31T12:13:41.000Z</published>
    <updated>2023-03-06T08:17:43.129Z</updated>
    
    <content type="html"><![CDATA[<p>提交入口：<a href="https://www.luogu.com.cn/problem/P6175">https://www.luogu.com.cn/problem/P6175</a></p><p>网上没找到满意的题解，大佬们微言大义，不是很能看懂。我在这里留下分析的大致思路，不保证正确，欢迎讨论。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一张无向图，求图中一个至少包含 $3$ 个点的环，环上的节点不重复，并且环上的边的长度之和最小。该问题称为无向图的最小环问题。在本题中，你需要输出最小的环的边权和。若无解，输出 <code>No solution.</code>。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个正整数 $n,m$ 表示点数和边数。</p><p>接下来 $m$ 行，每行三个正整数 $u,v,d$，表示节点 $u,v$ 之间有一条长度为 $d$ 的边。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出边权和最小的环的边权和。若无解，输出 <code>No solution.</code>。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 7</span><br><span class="line">1 4 1</span><br><span class="line">1 3 300</span><br><span class="line">3 1 10</span><br><span class="line">1 2 16</span><br><span class="line">2 3 100</span><br><span class="line">2 5 15</span><br><span class="line">5 3 20</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>样例解释：一种可行的方案：$1-3-5-2-1$。</p><p>对于 $20\%$ 的数据，$n,m \leq 10$。</p><p>对于 $60\%$ 的数据，$m\leq 100$。</p><p>对于 $100\%$ 的数据，$1\le n\leq 100$，$1\le m\leq 5\times 10^3$，$1 \leq d \leq 10^5$。</p><p><strong>无解输出包括句号。</strong></p><hr><h2 id="分析-amp-代码"><a href="#分析-amp-代码" class="headerlink" title="分析 &amp; 代码"></a>分析 &amp; 代码</h2><h3 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h3><p>本题不存在优于$O(n^3)$很多的算法，请停止无谓的尝试。</p><p>不过在尝试的过程中我也理解了一些东西…改动的<code>tarjan</code>部分也许可以记一下，所以还是决定贴出来备忘。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">103</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = <span class="number">5003</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="type">int</span> head[maxn],tot,depth[maxn],fa[maxn],fa2[maxn],dis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> low[maxn],dfn[maxn],stac[maxn],num,ans,n,m,top,uset[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> vis[maxn],ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            fa2[y]=x;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y]&amp;&amp;y!=fa2[x])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--];</span><br><span class="line">            ins[y]=<span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span>&#123; <span class="comment">//可能有重边</span></span><br><span class="line">    vis[x]=<span class="literal">true</span>;</span><br><span class="line">    depth[x]=dep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line">            fa[y]=x;</span><br><span class="line">            <span class="built_in">dfs</span>(y,depth[x]+dis[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y!=fa[x]&amp;&amp;(depth[x]-depth[y]&gt;<span class="number">0</span>)&amp;&amp;(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y)))&#123;</span><br><span class="line">            ans=<span class="built_in">MIN</span>(ans,dis[x][y]+depth[x]-depth[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ans=INF;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(z&lt;dis[x][y]||(!dis[x][y]))&#123;</span><br><span class="line">            <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">            <span class="built_in">addedge</span>(y,x,z);</span><br><span class="line">            dis[x][y]=dis[y][x]=z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=n;s++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="built_in">sizeof</span>(fa));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(depth,<span class="number">0</span>,<span class="built_in">sizeof</span>(depth));</span><br><span class="line">        <span class="built_in">dfs</span>(s,<span class="number">0</span>); <span class="type">int</span> i=s+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])<span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])<span class="built_in">dfs</span>(j,<span class="number">0</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">&quot;No solution.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下数据将得不到正确答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 10</span><br><span class="line">4 2 3</span><br><span class="line">5 2 5</span><br><span class="line">3 4 2</span><br><span class="line">5 3 4</span><br><span class="line">2 3 3</span><br><span class="line">1 5 5</span><br><span class="line">2 1 1</span><br><span class="line">5 4 2</span><br><span class="line">1 4 2</span><br><span class="line">1 3 4</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/31/63d90cdbe1f01.jpg" alt="27-1.jpg" title="其实就是五芒星，这样画便于展示"></p><p>原因在于，上面那个算法假了，想要穷尽所有情况，复杂度还得上一维，且常数巨大。</p><h3 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h3><p><strong>定义：</strong> 设 $R_{i,j,k}$ 为经过编号为$i$，$j$，$k$ 节点的最小环。</p><p>$R_{i,j,k}$ 可以不存在。</p><p>考虑集合 $Ring=\{ R_{i,j,k}|1\leqslant i&lt;j&lt;k \leqslant n \}$ ，我们指出，符合题目要求的最小环 $r\in Ring$ 。</p><p><strong>证明：</strong> $r$ 的节点数大于等于3，任取其中3个$a$，$b$，$c$ ，不妨设$a&lt;b&lt;c$。因为 $r$ 是全图中最小的环，所以 $r$ 也是经过 $a$，$b$，$c$ 的最小环。则 $r=R_{a,b,c}\in Ring$ ，证毕。</p><p>于是在算法上，只需要枚举集合 $Ring$ ，并不断更新<code>ans</code>。这提示我们从$floyd$考虑。简述$floyd$算法如下：</p><blockquote><p>设$D_{i,j,k}$为 $i$ 到 $j$ 的只以 $(1…k)$ 集合中的节点为中间节点的最短路长度。<br>若最短路经过点 $k$，则$D_{i,j,k}=D_{i,k,k-1}+D_{k,j,k-1}$<br>若最短路不经过点 $k$，则$D_{i,j,k}=D_{i,j,k-1}$<br>因此，$D_{i,j,k}=\mathrm{min}(D_{i,j,k-1},D_{i,k,k-1}+D_{k,j,k-1})$</p></blockquote><p>先给出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e13</span>+<span class="number">3</span>;</span><br><span class="line">LL n,m,ans=INF;</span><br><span class="line">LL dis[<span class="number">103</span>][<span class="number">103</span>],mcopy[<span class="number">103</span>][<span class="number">103</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j)dis[i][j]=mcopy[i][j]=INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        LL x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        dis[x][y]=dis[y][x]=<span class="built_in">MIN</span>(dis[x][y],z);</span><br><span class="line">        mcopy[x][y]=mcopy[y][x]=dis[x][y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;k;j++) <span class="comment">//k=2时也不会执行</span></span><br><span class="line">                ans=<span class="built_in">MIN</span>(ans,dis[i][j]+mcopy[j][k]+mcopy[k][i]);      </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">&quot;No solution.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来有点奇怪。记住我们的目标是枚举集合$Ring$，这里解释以下核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环首次不满足条件便退出</span></span><br><span class="line"><span class="comment">//奇怪的现象，不知道自己为什么会为此产生疑问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;k;j++) <span class="comment">//k=2时也不会执行</span></span><br><span class="line">            ans=<span class="built_in">MIN</span>(ans,dis[i][j]+mcopy[j][k]+mcopy[k][i]);      </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，由枚举顺序，已经有 $1\leqslant i&lt;j&lt;k \leqslant n$ 。</p><p>在Floyd枚举k的时候，已经得到了 $i,j (1\leqslant i\ne j \leqslant n)$ 只以 $\{ 1,…,k-1\}$ 集合中的节点为中间节点的最短路长度 $D_{i,j,k-1}$，它在代码中就是<code>dis[i][j]</code>。</p><p>为什么第6行<code>dis[i][j]</code>加的是<code>mcopy[][]</code>？</p><p>从生成的角度去理解它：k要在环中，必然要从k中伸出边，设伸出的两个边连的点是 i 和 j 。那么 $D_{i,j,k-1}$ 加上两个边的长度就是环的长度。而这两个边是原始数据输入的长度。</p><p>一个可能的疑惑：$D_{i,j,k-1}$ 不是 $D_{i,j,n}$ ，为什么要这样，直觉上用$D_{i,j,n}$ 不是更好吗？</p><p>答案是不能且不必要：</p><ul><li>若 $D_{i,j}$ 经过 k 点，不成环，使用$D_{i,j,n}$ 会得到错误答案。因此不能。</li><li>若 $D_{i,j}$ 不经过 k 及编号以后的点，$D_{i,j,n}=D_{i,j,k-1}$，</li><li>若 $D_{i,j}$ 经过 k 以后的点，考虑下图：<img src="https://bu.dusays.com/2023/02/01/63d9d029eb381.png" alt="27-2.png"> 这里需要反过来考虑：设 $p$ 为 $D_{i,j}$ 经过的最大的节点编号，则就长度而言 $R_{i,j,k}\geqslant R_{i’,j’,p}$ （这里$R_{i’,j’,p}$的存在性已经保证），因为 $D_{i’,j’}\leqslant \mathrm{len}\{i’,i,k,j,j’ \}$ 。而在后面的计算中，$R_{i’,j’,p}$ 会被计算到，如果合适，它会作为更优解更新<code>ans</code>。</li></ul><p>顺带一提，集合 $Ring$ 中所有元素都会被枚举到。</p><script type="math/tex; mode=display">\mathcal{THE}\quad \mathcal{END}</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;提交入口：&lt;a href=&quot;https://www.luogu.com.cn/problem/P6175&quot;&gt;https://www.luogu.com.cn/problem/P6175&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上没找到满意的题解，大佬们微言大义，不是很能看懂。我在这里留下分</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>产假问题所想到的</title>
    <link href="https://loveofpeach.github.io/posts/2cbce842.html"/>
    <id>https://loveofpeach.github.io/posts/2cbce842.html</id>
    <published>2023-01-23T09:58:08.000Z</published>
    <updated>2023-02-11T15:05:35.674Z</updated>
    
    <content type="html"><![CDATA[<p>在我所学的无法在现代社会中掌握专业技能的专业的某门专业课上，我曾想过一种设计，一种尝试解决产假问题的机制。虽然后来被我否定，它不成熟且欠考虑，也许幼稚，但我已克服了为自己尴尬和替别人尴尬的毛病，因此我将忠实地记录思考它的过程。</p><p>因为正好有毕业论文的要求，我拟题时曾向指导老师提起过：</p><blockquote><p>题目：现代企业的产假管理（暂定）</p><p>简述：在□□□□□□这门课中我了解到『pool』的概念，我想将这个概念运用到产假管理的方面。人们在休产假前，可通过为同单位的在休人员分担工作，积累额外工作天数，这个天数在需要休产假时可以取出。它的目标是促进两性就业机会的平等并为年轻家庭的生育提供保障。</p><p>以下是暂时想到的：</p><ol><li>个人在pool中积累的天数由社会公共机构把持，不随工作变更清空。</li><li>取出天数休产假时，由男女双方的数据计算总天数。为促进两性平等的就业机会、保障家庭的生育过程，男方也休产假（尽管天数未必相等）。</li><li>为防止就业时的歧视，该天数在正式录用前对招聘单位不可见。</li><li>若将在休人员的工作划分为不同模块由不同人员分担，需要设计额外工作天数的计算方法。</li><li>可以提前预支天数，但在产假后需在一定时期内偿完。该措施为不同选择的人群提供更加人性化的休假方式。</li></ol><p>论文会结合本专业所学的知识，作具体的、既有定性又有定量的分析。</p></blockquote><p><img src="https://bu.dusays.com/2023/01/25/63d13994236e5.png" alt="26-1"></p><p>当时我得到的被拒答复是：</p><blockquote><p>“从年龄性别和人生经验的角度，我觉得你做起来有难度，而且对本科生这个题目看起来过于醒目，容易被人关注。”</p></blockquote><p>老师的意见中肯委婉。想思考社会问题必须增长见识、丰富阅历，去学习先进国家的成功经验，去总结过去的失败教训，不能沉溺于无用的空想。但我囿于自身原因，暂时无法做到这些。</p><p>不过我也有没告诉老师的。在那门课上摸鱼乱想时，我已经否定了自己的设想。之所以还要交这个题目，是因为我实在不知道写什么好了。</p><p>该设想的最大问题是，它实质上没有解决『它想要解决的问题』。这是一个隐含的问题（或者你也可以说“隐式的”？），即“既要又要”的问题——在某种隐秘的语境下，该设想似乎是想做到既给大家放产假，又不想耽误经济发展。</p><p>但这是不可能的。</p><p>仔细想想，我上面所作的设计最多只是一种产假在休人员撂下的工作的分配方案。而类似用途的方案，实际上在各个单位、公司里都有自己的做法和规定，它们也许粗放、不公平、设计不合理，但确实是有的。</p><blockquote><p>不过也有雇佣年轻人的老板，只希望员工作为“人矿”在最年轻的时候出最多的力，至于由此带来的生理心理上的恶果——超过一定年龄开了就好了。甚至有不少以折磨人为乐的人，就是不想给你放假，就是不想看你闲着。这里我不得不得出扫兴的结论：比起制度的设计和改良，现今社会更先需要的是价值的共识。但这不是论证的重点，不谈。</p></blockquote><p>更进一步，社会是分工的，术业有专攻，让一个人分担他人的工作，效率的降低是不可避免的。即便是同质的工作，让一个人承担过多也必然导致效率的下降。因此不存在『既要又要』的解决方案，想要放产假，支付成本是必须的。</p><p>这里会转向一种价值选择，即要经济还是要产假？</p><p>我的回答是要产假。更长的产假、更普惠的产假、包含两性双方的产假。</p><p>在说明为什么要产假之前，首先需要驳斥一种短视的、透着酸气的实用主义。出于一种共产政权下颇具代表性的急功近利心态，社会上有不少人相信（至少是声称），休息和娱乐会腐化群众，他们必须努力地工作。如果我说人们需要远比现在多的多的空闲时间——哪怕是穷人，一定会有不少人无法理解吧。打个未必恰当的比方，他们就好比只会用功而不知休息的学生一样，走向内卷和低效，最后成为<code>frustrated students</code>，<code>frustrated men</code> &amp; <code>frustrated women</code>。</p><p>当然，虽然也有“磨刀不误砍柴工”“休息是为了更好地工作”之类的说法鼓励人们休息，列宁也说过“会休息的人，才会工作”，但这些说法带着值得玩味的目的。因为它们最终又回到“工作”上去，休息是为了工作，如果不以“能更好地工作”为前提，休息便是可耻的罪恶。这种说法彷佛是对人类肉体的无奈妥协，如果真如宣传所言有“钢铁的意志、钢铁的身躯”，恐怕这种道德——以前是封建道德现在是共产道德，会要求人们为了一个飘渺的欺骗的目标而一直工作下去吧。同时这些话带着略恐怖的意味，以着一种类似于大家都是热爱劳动的同志的身份，默认听者“喜欢工作”——必须如此，工作是你的道德。</p><p>但休息就是休息，休息和娱乐有自身的重要意义。人是需要休息和娱乐的，勤勉工作本身并不幸福，承认人类的不理性才是最大的理性。可现在，极端的实用主义和焦虑不安的情绪充斥着中国社会的每个角落，哪怕幼儿园的小孩都不能尽情玩耍。除非有良好的家庭氛围或者深刻的自我反思和教育，这种焦虑感一定会在人身上留下烙印——缺少休息和娱乐正让人们变得残忍。</p><blockquote><p>节选自《谁能够筑墙垣，围得住杜鹃》：<br>艰难给个人造成的最大伤害，是忘记什么是美好：认为美好是不存在的，进而站在了施虐的一方；或者把艰难视为美好，开始热爱受虐。两者又是一体的，朱英诞曾在文章中谈到过“虐他狂和自虐狂”（《余波》，一九七五）。摆脱这种困境的方式是在艰难中保有美好。当艰难唤起的不是恶，而是美好，恶就失败了。“美好出艰难”不是美化艰难，不是盲目乐观，而是承认艰难，并对人性保有信心。在那个人心惟危的时代，朱英诞接着写道：<br><strong>我们漂流在奇异的海洋里；</strong><br><strong>一个小岛，那么美丽而寂寞，</strong><br><strong>两个陌生者相遇也会握手言欢，</strong><br><strong>他们将于此重建家园。</strong></p></blockquote><p>然而，“在艰难中保有美好”对人性还是苛求了些。我们应当破除艰难，或者至少在艰难中创造喘息的余地。仔细翻阅一个模板式中国人的人生，TA好像一直在忙，而很少真正休息过：忙完学业忙工作，边忙工作边忙结婚，然后生养，又要操心下一代的人生直到孩子们也有了孩子，也许还要为照顾孙辈搭把手，等闲下来的时候自己已经老了，同时很可能捞着个麻烦但还不致命的病。我主张产假，正是要给人们<strong>一个有保障的心灵躺平的机会</strong>，一个为人生按下<code>pause</code>的机会。trust me bro, it works. 只有在这种时间里，人才有余裕收拾自己的心情。而且产假也是相对较好的“躺平”时机，以中国高度竞争的现状而言，太早躺平损失严重，再后则没有多少机会了。</p><p>最后，需要回应一个潜在的争议，即怀孕对于女性来说是负担，因而产假中女性可能无法得到上文提到的“收拾自己的心情”的机会。对此：</p><ol><li>无论产假中女性是否缓解了焦虑，产假都是必须的，这是一个不会更坏的方案。</li><li>我在上文提到要“更长的产假”，它既包括向前的延长，也包括向后的。</li><li>前面已经说过，产假提供了一个有保障的心灵躺平的机会，而机会是要自己争取的。能否得到放松与个人的精神境界有关，在人有认知的时刻起就不可能一点压力也没有了。</li><li>肉体的痛苦确实难耐，但心灵的痛苦更持久且较为无解。本文关注更多的是精神层面的疗愈。</li></ol><script type="math/tex; mode=display">\mathcal{THE}\quad \mathcal{END}</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我所学的无法在现代社会中掌握专业技能的专业的某门专业课上，我曾想过一种设计，一种尝试解决产假问题的机制。虽然后来被我否定，它不成熟且欠考虑，也许幼稚，但我已克服了为自己尴尬和替别人尴尬的毛病，因此我将忠实地记录思考它的过程。&lt;/p&gt;
&lt;p&gt;因为正好有毕业论文的要求，我拟题</summary>
      
    
    
    
    <category term="观点" scheme="https://loveofpeach.github.io/categories/%E8%A7%82%E7%82%B9/"/>
    
    
    <category term="诡辩" scheme="https://loveofpeach.github.io/tags/%E8%AF%A1%E8%BE%A9/"/>
    
  </entry>
  
  <entry>
    <title>BOI2009 Radio Transmission</title>
    <link href="https://loveofpeach.github.io/posts/ac682fe9.html"/>
    <id>https://loveofpeach.github.io/posts/ac682fe9.html</id>
    <published>2023-01-22T14:49:40.000Z</published>
    <updated>2023-02-01T15:18:23.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 $s_1$，它是由某个字符串 $s_2$ 不断自我连接形成的。但是字符串 $s_2$ 是不确定的，现在只想知道它的最短长度是多少。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $L$，表示给出字符串的长度。 </p><p>第二行给出字符串 $s_1$ 的一个子串，全由小写字母组成。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅一行，表示 $s_2$ 的最短长度。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">cabcabca</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h3 id="样例输入输出-1-解释"><a href="#样例输入输出-1-解释" class="headerlink" title="样例输入输出 1 解释"></a>样例输入输出 1 解释</h3><p>对于样例，我们可以利用 $\texttt{abc}$ 不断自我连接得到 $\texttt{abcabcabc}$，读入的 $\texttt{cabcabca}$，是它的子串。</p><h3 id="规模与约定"><a href="#规模与约定" class="headerlink" title="规模与约定"></a>规模与约定</h3><p>对于全部的测试点，保证 $0 &lt; L \le 10^6$。</p><hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我首先想到的是二分答案，但仔细想想不太可行。</p><p>样例中<code>cab</code>首尾相接，各不相同，next全0，而后一直增加，这大概可以从next数组考虑。于是打表找规律。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abcdabcdab</span><br><span class="line">0000123456</span><br></pre></td></tr></table></figure><p>猜想大概是要找后面的<code>123456...</code>，而答案就是前面0的个数，因为abcd各不相同，而循环节之后next数组就应该一直增加。</p><p>但这只是循环节各不相同的简单情形，如果有相同的呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xbbxbbx</span><br><span class="line">0001234</span><br></pre></td></tr></table></figure><p>嗯，好像也一样。那这样呢：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abaabaab</span><br><span class="line">00112345</span><br></pre></td></tr></table></figure><p>事情正起变化，因为循环节本身的结构，<code>123456...</code>前面不全是0了，但可喜可贺这似乎不是很影响，我们只要修正已有的结论：答案是<code>123456...</code>前面元素的个数。这里有一个trick，其实答案就是<code>123456...</code>中<code>1</code>的位置（下标从0开始算）。</p><p>但是，有一个很讨厌的情况！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abaabaak</span><br><span class="line">00112340</span><br></pre></td></tr></table></figure><p>这个时候答案是多少呢？根据题意我们只能把整个<code>abaabaak</code>作为循环节了，因此答案是<code>8</code>。这似乎只要加个特判？并非如此，因为next数组递减不一定是减到0，所以还有其他情况，结论需要大修特修。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">position   0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15</span><br><span class="line">    next   0  0  0  0  1  2  3  1  2  3  4   5   6   7   4   0</span><br><span class="line"> content   a  g  c  t  a  g  c  a  g  c  t   a   g   c   t   g</span><br></pre></td></tr></table></figure><p>上面这个例子就包含很多了。结论是令ans为next数组中第一个1的位置，在后续的扫描中若next数组递减，则更新<code>ans=pos-next[pos]+1</code>。</p><p>回顾之前的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abaabaab</span><br><span class="line">00112345</span><br></pre></td></tr></table></figure><p>为追求形式的统一，将结论进一步修正为：令ans为next数组中第一个1的位置，在后续的扫描中若next数组不增，则更新<code>ans=pos-next[pos]+1</code>。</p><p>这个结论的原理其实就在next数组的定义中，这里不展开。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXL = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s1[MAXL];</span><br><span class="line"><span class="type">int</span> mynext[MAXL], L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">()</span></span>&#123; <span class="comment">//前置知识点，next数组</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    mynext[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;L; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; s1[i]!=s1[j]) j=mynext[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s1[j]) j++;</span><br><span class="line">        mynext[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>,&amp;L,s1); <span class="comment">//C风格字符串</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125; <span class="comment">//特判</span></span><br><span class="line">    <span class="built_in">getNext</span>();</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>, ans = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!mynext[pos])&#123;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">if</span>(pos == L)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,L); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//指向尾后，next全0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans = pos; <span class="comment">//此时pos指向next数组中第一个1</span></span><br><span class="line">    <span class="keyword">for</span>(; pos&lt;L; pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mynext[pos] &lt;= mynext[pos<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="comment">//next数组第一个一定是0，所以不会越界</span></span><br><span class="line">            ans = pos-mynext[pos]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个字符串 $s_1$，它是由某个字符串 $s_2$ 不断自我连接形成的。但是字符串 $s_2$ 是不确定的，现在只想知</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo踩坑记录</title>
    <link href="https://loveofpeach.github.io/posts/2b780dd.html"/>
    <id>https://loveofpeach.github.io/posts/2b780dd.html</id>
    <published>2023-01-14T04:49:42.000Z</published>
    <updated>2023-03-01T14:57:40.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="live2d和aplayer"><a href="#live2d和aplayer" class="headerlink" title="live2d和aplayer"></a>live2d和aplayer</h2><p>有时加载会很慢或者无法加载，这可能只是live2d和aplayer自身的问题。尤其是aplayer，偶尔会有几天在任何设备上都无法加载（我只遇到过一次）。</p><p>注意如果要使用网易的服务，要写成<code>data-server=&quot;netease&quot;</code>，我这里因为不知道网易的英文名试了半天 -_-#</p><h2 id="Gitalk加载失败"><a href="#Gitalk加载失败" class="headerlink" title="Gitalk加载失败"></a>Gitalk加载失败</h2><p>Gitalk配置完成之后，仍有可能无法加载。这是因为其部分服务在墙外，需要翻墙访问文章页面以创建issue。之后即使不翻墙也可正常显示。</p><h2 id="MathJax渲染失败"><a href="#MathJax渲染失败" class="headerlink" title="MathJax渲染失败"></a>MathJax渲染失败</h2><p>Hexo默认使用<code>hexo-renderer-marked</code>引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，会产生语义冲突。</p><p>解决方案：更换Hexo的markdown渲染引擎。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>接下来到博客根目录下，找到<code>node_modules\kramed\lib\rules\inline.js</code>，把第11行的escape变量的值做相应的修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/</span><br></pre></td></tr></table></figure><p>同时把第20行的em变量也要做相应的修改:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><br></pre></td></tr></table></figure><p>重新启动hexo即可。</p><p><strong>问题（未解决）：</strong> 在 Hexo 中使用 MathJax 渲染数学公式时，行内公式可能会遇到左撇被渲染成右撇的问题。这是因为 MathJax 默认使用美国数学协会（American Mathematical Society，简称 AMS）的数学符号字体，而该字体中的左撇和右撇是相反的。</p><h2 id="代码缩进混乱"><a href="#代码缩进混乱" class="headerlink" title="代码缩进混乱"></a>代码缩进混乱</h2><p>这是tab缩进的问题。</p><p>找到站点配置文件中<code>tab_replace</code>，设置<code>tab_replace: &#39;    &#39;</code>（4个空格）即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;live2d和aplayer&quot;&gt;&lt;a href=&quot;#live2d和aplayer&quot; class=&quot;headerlink&quot; title=&quot;live2d和aplayer&quot;&gt;&lt;/a&gt;live2d和aplayer&lt;/h2&gt;&lt;p&gt;有时加载会很慢或者无法加载，这可能只是liv</summary>
      
    
    
    
    <category term="杂" scheme="https://loveofpeach.github.io/categories/%E6%9D%82/"/>
    
    
    <category term="hexo" scheme="https://loveofpeach.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理笔记</title>
    <link href="https://loveofpeach.github.io/posts/aae04aa8.html"/>
    <id>https://loveofpeach.github.io/posts/aae04aa8.html</id>
    <published>2023-01-12T14:27:45.000Z</published>
    <updated>2023-03-14T04:33:32.126Z</updated>
    
    <content type="html"><![CDATA[<p>以后填坑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以后填坑。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>蓝色笔记</title>
    <link href="https://loveofpeach.github.io/posts/6bc19761.html"/>
    <id>https://loveofpeach.github.io/posts/6bc19761.html</id>
    <published>2023-01-04T13:25:45.000Z</published>
    <updated>2023-01-22T14:46:01.686Z</updated>
    
    <content type="html"><![CDATA[<p>考研的原因：</p><p><img src="https://bu.dusays.com/2023/01/04/63b5789893aa1.png" alt="考研只为慢就业"></p><p>个人笔记，存档。</p><p><img src="https://bu.dusays.com/2023/01/05/63b653bf90fe1.jpg" alt="考研蓝色笔记-01.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f41fdac.jpg" alt="考研蓝色笔记-02.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f4c52fd.jpg" alt="考研蓝色笔记-03.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f5a5e7d.jpg" alt="考研蓝色笔记-04.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f59d4ef.jpg" alt="考研蓝色笔记-05.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f604ef0.jpg" alt="考研蓝色笔记-06.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f5ca516.jpg" alt="考研蓝色笔记-07.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f5bb43f.jpg" alt="考研蓝色笔记-08.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f549d93.jpg" alt="考研蓝色笔记-09.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b653f610a7d.jpg" alt="考研蓝色笔记-10.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654441c8b6.jpg" alt="考研蓝色笔记-11.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544426434.jpg" alt="考研蓝色笔记-12.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65446b0048.jpg" alt="考研蓝色笔记-13.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65447d50f3.jpg" alt="考研蓝色笔记-14.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65448c282d.jpg" alt="考研蓝色笔记-15.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544a50fb2.jpg" alt="考研蓝色笔记-16.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544a50fb2.jpg" alt="考研蓝色笔记-17.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65449a3b41.jpg" alt="考研蓝色笔记-18.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b65449ad4b4.jpg" alt="考研蓝色笔记-19.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6544a5e7ee.jpg" alt="考研蓝色笔记-20.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549f445d5.jpg" alt="考研蓝色笔记-21.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549d6a227.jpg" alt="考研蓝色笔记-22.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549f6c73b.jpg" alt="考研蓝色笔记-23.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a02f503.jpg" alt="考研蓝色笔记-24.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a0b3468.jpg" alt="考研蓝色笔记-25.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a027760.jpg" alt="考研蓝色笔记-26.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a0e1d2d.jpg" alt="考研蓝色笔记-27.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b6549e9b427.jpg" alt="考研蓝色笔记-28.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a1e322e.jpg" alt="考研蓝色笔记-29.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654a19b2d5.jpg" alt="考研蓝色笔记-30.jpg"></p><p><img src="https://bu.dusays.com/2023/01/05/63b654ee3f9b8.jpg" alt="考研蓝色笔记-31.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考研的原因：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/01/04/63b5789893aa1.png&quot; alt=&quot;考研只为慢就业&quot;&gt;&lt;/p&gt;
&lt;p&gt;个人笔记，存档。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.du</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="慢就业" scheme="https://loveofpeach.github.io/tags/%E6%85%A2%E5%B0%B1%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>数学错题集</title>
    <link href="https://loveofpeach.github.io/posts/a731e7f0.html"/>
    <id>https://loveofpeach.github.io/posts/a731e7f0.html</id>
    <published>2023-01-04T12:51:31.000Z</published>
    <updated>2023-01-22T14:45:05.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多元函数微分学"><a href="#多元函数微分学" class="headerlink" title="多元函数微分学"></a>多元函数微分学</h2><p><img src="https://bu.dusays.com/2023/01/04/63b5799722887.jpg" alt="数学错题集-01.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57995ec2b5.jpg" alt="数学错题集-02.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57990c09f3.jpg" alt="数学错题集-03.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799429574.jpg" alt="数学错题集-04.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57998a1afc.jpg" alt="数学错题集-05.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799984587.jpg" alt="数学错题集-06.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b579925e8f3.jpg" alt="数学错题集-07.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57993ecde2.jpg" alt="数学错题集-08.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799341f85.jpg" alt="数学错题集-09.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b5799914d57.jpg" alt="数学错题集-10.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa92d944.jpg" alt="数学错题集-11.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa968384.jpg" alt="数学错题集-12.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aaab8d66.jpg" alt="数学错题集-13.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aaa3c26f.jpg" alt="数学错题集-14.jpg"></p><h2 id="极值"><a href="#极值" class="headerlink" title="极值"></a>极值</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57aa778d11.jpg" alt="数学错题集-15.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa9d91a8.jpg" alt="数学错题集-16.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa897966.jpg" alt="数学错题集-17.jpg"></p><h2 id="积分与极限"><a href="#积分与极限" class="headerlink" title="积分与极限"></a>积分与极限</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57aa22c1de.jpg" alt="数学错题集-18.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa8b882f.jpg" alt="数学错题集-19.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57aa7ab852.jpg" alt="数学错题集-20.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b190d605.jpg" alt="数学错题集-21.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b1796e5e.jpg" alt="数学错题集-22.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b183ddde.jpg" alt="数学错题集-23.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b21d0358.jpg" alt="数学错题集-24.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b20698dd.jpg" alt="数学错题集-25.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b2116299.jpg" alt="数学错题集-26.jpg"></p><h2 id="一元函数"><a href="#一元函数" class="headerlink" title="一元函数"></a>一元函数</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57b1eb564b.jpg" alt="数学错题集-27.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b200004e.jpg" alt="数学错题集-28.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b1f6d84c.jpg" alt="数学错题集-29.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b1f76647.jpg" alt="数学错题集-30.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b9059203.jpg" alt="数学错题集-31.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b8fde903.jpg" alt="数学错题集-32.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b94a0f86.jpg" alt="数学错题集-33.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b955dabf.jpg" alt="数学错题集-34.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b94151f2.jpg" alt="数学错题集-35.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b98c1752.jpg" alt="数学错题集-36.jpg"></p><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57b983feaa.jpg" alt="数学错题集-37.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b97eea10.jpg" alt="数学错题集-38.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57b98c7d1a.jpg" alt="数学错题集-39.jpg"></p><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57b98dd08b.jpg" alt="数学错题集-40.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c018d404.jpg" alt="数学错题集-41.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57bff85b9e.jpg" alt="数学错题集-42.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c000837f.jpg" alt="数学错题集-43.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04ec643.jpg" alt="数学错题集-44.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04f36f2.jpg" alt="数学错题集-45.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04424fd.jpg" alt="数学错题集-46.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c046d6d8.jpg" alt="数学错题集-47.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c046a2bb.jpg" alt="数学错题集-48.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04e666f.jpg" alt="数学错题集-49.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c04e951a.jpg" alt="数学错题集-50.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c6da5b3a.jpg" alt="数学错题集-51.jpg"></p><h2 id="2022数二"><a href="#2022数二" class="headerlink" title="2022数二"></a>2022数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57c70289c4.jpg" alt="数学错题集-52.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c6ec3006.jpg" alt="数学错题集-53.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c71bbdf8.jpg" alt="数学错题集-54.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c7261dd7.jpg" alt="数学错题集-55.jpg"></p><h2 id="2020数二"><a href="#2020数二" class="headerlink" title="2020数二"></a>2020数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57c720d789.jpg" alt="数学错题集-56.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c7259a69.jpg" alt="数学错题集-57.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c721e84f.jpg" alt="数学错题集-58.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c71f19b9.jpg" alt="数学错题集-59.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57c6feba9d.jpg" alt="数学错题集-60.jpg"></p><h2 id="2019数二"><a href="#2019数二" class="headerlink" title="2019数二"></a>2019数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57cef090a9.jpg" alt="数学错题集-61.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cef07015.jpg" alt="数学错题集-62.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cefe52a9.jpg" alt="数学错题集-63.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf0d4784.jpg" alt="数学错题集-64.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf154d21.jpg" alt="数学错题集-65.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf07c19b.jpg" alt="数学错题集-66.jpg"></p><h2 id="2018数二"><a href="#2018数二" class="headerlink" title="2018数二"></a>2018数二</h2><p><img src="https://bu.dusays.com/2023/01/04/63b57cf18e05d.jpg" alt="数学错题集-67.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf13d8e0.jpg" alt="数学错题集-68.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf176324.jpg" alt="数学错题集-69.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57cf1879eb.jpg" alt="数学错题集-70.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57d76908cf.jpg" alt="数学错题集-71.jpg"></p><p><img src="https://bu.dusays.com/2023/01/04/63b57d76a5afe.jpg" alt="数学错题集-72.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多元函数微分学&quot;&gt;&lt;a href=&quot;#多元函数微分学&quot; class=&quot;headerlink&quot; title=&quot;多元函数微分学&quot;&gt;&lt;/a&gt;多元函数微分学&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/01/04/63b5799</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="慢就业" scheme="https://loveofpeach.github.io/tags/%E6%85%A2%E5%B0%B1%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>信与回信</title>
    <link href="https://loveofpeach.github.io/posts/d1e8cada.html"/>
    <id>https://loveofpeach.github.io/posts/d1e8cada.html</id>
    <published>2022-12-28T04:33:57.000Z</published>
    <updated>2023-01-01T14:31:28.175Z</updated>
    
    <content type="html"><![CDATA[<p>可以看作是《春宵苦短，少女前进吧》的后续。</p><blockquote><p>原文：<a href="https://movie.douban.com/review/8521843/">https://movie.douban.com/review/8521843/</a><br>作者：豆瓣用户 一切顺利！</p></blockquote><p><img src="https://bu.dusays.com/2023/01/01/63b198d0d1c47.png" alt="20-3v2.png" title="电影中的进进堂"></p><h2 id="【剧场特典】给“乙女”的信（渣翻）"><a href="#【剧场特典】给“乙女”的信（渣翻）" class="headerlink" title="【剧场特典】给“乙女”的信（渣翻）"></a>【剧场特典】给“乙女”的信（渣翻）</h2><p>拜启。</p><p>问候并祝安康。</p><p>此前能够同往“进进堂”及旧书店，我感到非常欣喜。</p><p>当时怀着邀请你就不能有不周到的想法，心情也变得紧张。但在和你交谈这一年的回忆时，渐渐变得平稳，就像是肚子上顶着刚出锅的肉包子舒服躺下般的惬意。上次有这么美好的感觉，大概是婴儿时初次洗澡的事吧。再次表达谢意。</p><p>不过最近也实在是寒冷呀。为了和无情的寒冷对抗，现在的我正钻在四叠半宿舍的被窝里写下这封信。请原谅这随意的行为。在这连叹气都能冻结住的四叠半内，一切脑力活动不得不在完成在从来都是摊开的被窝上，我强撑着这种严酷生活。</p><p>话说回来，写这封信的理由有两个。</p><p>第一个理由，我仅仅是想要试着给你写信。如果你觉得困扰，今后罢手。</p><p>还有一个是，之前见面的时候忘记约定下次的碰面。实在是大意了。如果你没有觉得“真是受够了”的话，可以再次一起做些什么吗？</p><p>关于应该一起去哪里，请允许我说明一个提案。</p><p>要讲述这个像天启一般进入我脑内的提案，就得从前些日子我和樋口一起去北白川天神宫说起。</p><p>那天早上开始下起雪，东边的群山像撒了层砂糖似的变得洁白。这种天气当然再适合不过读书。我便在宿舍里大口吃着肉馒头熟读玩味康德的《纯粹理性批判》。正用纯粹的心情批判自己理性的时候，樋口穿着落满雪花的夹克突然来了。</p><p>“呀，你。我能拜托件事儿吗？”</p><p>从樋口氏处得知，洛中有个“狸猫文学赏”，似乎会挑选每年写就的狸猫小说中最优一作来进行表彰。“那是什么呀”我还是无法想象。而且再继续听下去，樋口根本连小说都没写过，却由于“常年过着狸猫般生活之事的功绩”而得得到了文学赏的荣誉奖。真是充满狸猫气息的可疑，再加上授奖式还是在东山山麓北白川天神宫内举行这点，愈发令人怀疑。这种《漫画日本昔话》一样的文学赏真的存在吗？毕竟樋口一直就是故弄玄虚的好手。</p><p>“但是说是狸猫，樋口更该是天狗吧。”</p><p>“天狗啦狸猫啦都是同样的呦。不管得到的是马粪还是柿子的茎叶，我是能得到好主义。听说有奖品可以拿，来帮忙搬运吧。”就这样，我们在雪天出门了。</p><p>走在通向北白川天神宫志贺越道上，我就“男女间合适的幽会”一事向樋口请教。不过是想向可以信任的前辈问些一般论的东西罢了。于是樋口给我讲述了“与画中女性梦中相会之术”和“与看不见的恋人互通书信之术”之类的事情。但这些事情对现在的我来说完全没用，只觉得一头雾水。</p><p>听我“想听些更加平凡的方法”之后，樋口唰啦唰啦摸着胡子发出“唔—”的声音。</p><p>“……平凡的东西一点也不了解。”</p><p>向樋口寻求一般论的我真是笨蛋。</p><p>“一牵扯到实际利益就没辙了呀。”</p><p>“喂喂，你的奉承话就免了吧。”</p><p>终于到达北白川天神宫的我们，走过架设在白川上的小桥，穿过阴暗的树林登上了石制台阶。但是周围完全没有举办授奖式的迹象。当我觉得肯定是被谁戏弄之时，樋口突然小声说了句“是柑橘呀”。</p><p>在拜殿后方，我终于发现了满满一纸箱的柑橘。上边还用修行僧人用的法螺压着一张草纸，写着拙劣的“之后的事就交给你了”。</p><p>“你看，很豪气吧！”</p><p>“……这真的是奖品吗？明明是授奖式却谁也不在。简直像是被狸猫骗了。”</p><p>“所以说是自助的形式吧。”</p><p>尽管仍旧半信半疑，我们还是遵从写着“之后的事就交给你了”的草纸，严肃地完成授奖式。然后带着可疑的蜜柑开始返回。搬运大量蜜柑显而易见是我的任务，樋口只负责走在前边随意地吹着法螺。在降雪的东山里，回响出说不上是舒畅还是悲伤的声音。</p><p>说起在“进进堂”共饮咖啡。这旁人看来小小的一步对我们来讲确实是巨大的一步。已经往新世界踏出第一步的当下，犹豫是不会带来进步的。我们应当趁此鼓起勇气向前迈步。但是呀，下一步应该怎么做呢？即使用被《纯粹理性批判》锤炼的理性，我也找不到合适的方案。这是什么缘故呢？</p><p>在白川桥上夸张地跌倒，大概就是因为深陷这些想法而没注意脚下吧。从整个跌落的纸箱里蜜柑咕噜咕噜地滚落出来。滚落出的蜜柑中有一个喊着“老子就从这启程了”纵身跃下川流。只顾着慌慌张张收集其他蜜柑，对落下白川的那个家伙只能放弃。樋口则透过栏杆一边眺望着河面，一边吹起法螺，发出了有些悲伤的响声。</p><p>“嘛别失落呀，你，” 樋口说道，“说不定在不知何处它会被美丽的少女捡到呢。”</p><p>无论如何这种事也是不可能的吧，可能是自己使它掉落的罪恶感使然，我不由得为那颗小小圆圆蜜柑的幸福祈祷起来。小小的圆圆的，又使我联想起你来，我变得更加同情那颗蜜柑。</p><p>正要再次出发的时候，小巧洁白又软乎乎的东西从灰色天空降下。开始还以为是雪花，但是它们粘在肩膀上并没有融化。仔细看发现，那是可爱的羽毛。这东西是从哪里飞来的呢。用手指拈起向着远处，太阳的光线穿透云彩的缝隙染得羽毛银光闪闪。不知为何感到扔掉的话太过可惜，就在我把羽毛收进口袋的瞬间，脑内冷不丁地浮现出“银幕”这个词语。</p><p>银幕。银幕。银幕的冒险！</p><p>银幕的冒险，正是指明去往电影院！这不就是我所探求的下一步吗！昏暗中紧紧依靠着落座，在闪耀着光芒的另一侧进入同样的梦境。从咖啡厅到电影院——这才是正确的发展方向呀！善男信女该行之路。</p><p>我把这件事说出来。</p><p>“这样啊”，樋口如是说到。</p><p>“原来如此，这就是所谓平凡呀。但是平凡才是王道，王道才是王道！世人就是这般催人泪下苦苦用心，在难以分辨的黑暗中紧紧握住意中人的手的吧。”</p><p>之后我们抱着狸猫文学赏奖品的蜜柑箱一路返回。</p><p>那么，因为给你写信浮现出太多开心的事，我不知不觉就写了许多没用的东西。再次献上歉意。总之这封信不过就是“不一起去电影院吗”这种朴素的邀请。平凡才是王道，王道才是王道。以防万一，容我做个补充，我保证不会在黑暗中，不经允许就做握住你的手之类的羞耻事情。如果能有机会共同享受银幕的冒险，荣幸之极。</p><p>静候回音，</p><p>$\qquad$ $\qquad$ $\qquad$ 恐惶谨言。</p><p><img src="https://s2.loli.net/2022/12/28/MtZd3B4heqyo7sn.webp" alt="20-1.webp" title="现实中的进进堂"></p><hr><blockquote><p>原文：<a href="https://www.douban.com/note/643884651">https://www.douban.com/note/643884651</a><br>作者：豆瓣用户 一切顺利！</p></blockquote><h2 id="【剧场特典2】乙女给前辈的回信（自翻）"><a href="#【剧场特典2】乙女给前辈的回信（自翻）" class="headerlink" title="【剧场特典2】乙女给前辈的回信（自翻）"></a>【剧场特典2】乙女给前辈的回信（自翻）</h2><p>拜启。</p><p>你好，感谢之前的郑重来信。</p><p>托你的福，我现在就像才刚擦亮的苹果一样精神。</p><p>拜见了前辈的来信之后，有些无论如何都想传达的记忆咕噜咕噜地涌上心来，所以我就默念着“迸发吧，我的文才！”写下了回信。</p><p>前几天，应羽贯的邀请，我们一起出门要去银阁寺散步。早上开始飘起雪花，从今川通路往上看，能看到大文字也着了美丽的银装。但是一点也不冷。因为我本来就是不怕冷的类型，再加上还穿了羽贯给的软蓬蓬的羽绒服。</p><p>考虑到要去银阁寺，我们在门前町吃了热乎乎的鸡蛋馄饨。吃完之后感觉自己变成了刚出烤箱的面包，热气腾腾的。落在脸颊的雪转瞬就融化了。</p><p>“只是站在旁边就能感受到你传来的热乎空气”，羽贯惊讶地说到，“你为什么那么热乎呢？真想每家放一个取暖呢。”</p><p>非常荣幸，但是到了夏天一定就变得碍事了吧。</p><p>看着周围卖的伴手礼商品穿过门前町的时候，我们和一位不可思议的绅士变成了并行的状态。是位穿着西装套着高级外套、胡子漂亮翘起的老人。并不知道对方的名字，但是感觉和萨尔瓦多•达利非常像，我就在心里决定以“萨尔瓦多老爷爷”来称呼他了。萨尔瓦多老爷爷因为寒冷而瑟瑟发抖，大概他是被我身上多余的热气腾腾吸引过来的吧。可能我这种人真是随身暖炉（小型）一般的存在也说不定。</p><p>“到坡下为止，能允许我同行吗，小姑娘。”（“小姑娘”原文为法语源外来词，后文所有“小姑娘”同此。）</p><p>萨尔瓦多老爷爷行了一礼。</p><p>羽贯回了句“是，先生。”（“是，先生。”原文为法语源外来词。）</p><p>为什么是法语呢？我不明白。难道达利不是西班牙人吗。</p><p>边走下充满观光客的门前町，边和萨尔瓦多老爷爷交谈的内容是：适合刚结识的男女出门的合适的地方。和前辈一样，我也想向可以信赖的过来人寻求智慧的答案。</p><p>“不必困扰。请去电影院吧。”萨尔瓦多老爷爷晃动着手杖如是说。</p><p>“银幕的冒险才是，能为刚结识的男女互相间加深理解的可称为心的旅途的东西。在幕布另一侧展现开的是，从这个世界的偏颇现实中解放出来的梦之世界。电影院的黑暗是人工的甘美的夜晚。独自个体的男女肩靠肩，听着对方的呼吸声，清澈悦耳。时而欢笑时而哭泣，两人感受着相同的梦。这是多么雅致诱人的恋情经营法呀。如何呢，小姑娘？并不是只靠视线相交就可以明白对方的事情。只是费力互相瞪眼的话，前路只会变成争斗。如果不是共同度过短短的夜晚，如果不是共同观看美梦，那可是看不到对方的灵魂呦。”</p><p>从萨尔瓦多老爷爷的大演讲中，我受到了深深的启发。想着必须邀请前辈去感受银幕的冒险，我一下子握紧了热乎乎的小小拳头。</p><p>“受教了。”</p><p>但是羽贯似乎有所不满。“电影什么的不行啦。你想呀，每个人想看的电影都不尽相同。要是勉强两人一起去看电影的话……”</p><p>“有和樋口前辈一起去看过吗？”</p><p>“也不是没去过。我是想看时髦的外国影片啦。但樋口不是只看些低级的东西嘛。看合我口味的电影，樋口就会打瞌睡，看合樋口口味的，我就会打瞌睡。两个人都能看到最后的电影简直一部都没有。”</p><p>“这是说了些什么杀气腾腾的话呀，小姑娘！”</p><p>看着没什么精神的萨尔瓦多老爷爷，不知为何我有点同情。</p><p>不知不觉我们走过门前町，都到了银阁寺的路口。在正好要踏上白川上方小桥的时候，萨尔瓦多老爷爷停住了。从栏杆上注视着河面嘟囔道：“是从哪里流过来的呢？”</p><p>我也驻足去看，有一只颜色鲜艳的蜜柑，在河底非常活跃叽里咕噜地翻来转去。看起来，它简直像是在拼尽全力向我冲过来。</p><p>萨尔瓦多老爷爷突然一下子越过栏杆，羽贯和我都吃惊地屏住了呼吸。真是让人无法联想到是老人的敏捷身手。老爷爷像羽毛似的站在河里，捡起流过去的蜜柑，又轻轻地爬了上来。</p><p>听羽贯说完“吓死了!”，老爷爷边拿手帕擦拭湿漉漉的蜜柑边用得意的语气说：“以前，我可是曾作为杂技员出入过摄影棚呢。”</p><p>老爷爷把那个蜜柑放在了我的手上。</p><p>“就把这个蜜柑给苹果一样的小姑娘吧。”</p><p>“万分感谢。”</p><p>“没问题吧，小姑娘。请去感受银幕的冒险。如果能够共同度过短短的夜晚，共同观看美梦的话——”</p><p>萨尔瓦多老爷爷很熟练地眨眼使了个眼色，抚摸下胡子摇着手杖朝南边的方向走去了。我连向老爷爷道谢，感谢他提供了宝贵意见的机会都没有。如风来，似风去。我想，这简直就像是和电影之神擦肩而过一样。我保持抱着蜜柑的姿势，目送老爷爷的背影离去。</p><p>“真是奇怪的老爷爷呀。”羽贯如是说。</p><p>“是非常出色的人。”</p><p>“你打算拿着那个蜜柑回去吗？没事吧，那可是河里流过来的东西呀。”</p><p>“毕竟也是难得的馈赠之物。”</p><p>那个蜜柑小小圆圆的，滑溜溜地大放光芒。</p><p>从白川上流的方向处传来了“咘—”的奇怪声音。那是修行僧的法螺吧，羽贯这么说到。这么说的话，也真是挺宝贵的声响。</p><p>就这么要踏上归途的时候，羽贯“啊”的一声叫起来，抓住了我羽绒服的下摆。</p><p>“这种地方居然开了个洞？！”</p><p>羽贯给我的软蓬蓬桃色羽绒服上居然开了一个小洞。从中一直有羽毛漏出。这是怎么回事呀。之前还因为身边有那么多软乎乎的白色东西，在想“这雪还真是一时停不下来呀”。</p><p>结果竟然是从羽绒服里漏出的羽毛—真是太羞耻了。真想钻进衣服上的小洞里。话虽如此，这么下去也不行，我就用从萨尔瓦多老爷爷那里得到的蜜柑挡住了破洞，边保护着剩余的羽毛边急匆匆地往回赶。</p><p>到此为止就是想传达给前辈的事情。</p><p>已经明白了我在意的东西，前辈也不需要担心流入白川的蜜柑的去向啦。因为那个蜜柑由我好好地带回家了。还有在北白川天神落在前辈肩头的羽毛，也一定是被我在银阁寺门前掉落又乘风到你身边的吧。</p><p>真是奇遇呢！</p><p>然后，关于接下来要迈出的一步，前辈进行了那么认真的研究，我非常开心。当然我也赞成前辈的提议。</p><p>来吧，向着人工的夜晚中映出的梦之世界。春宵苦短，少女前进吧！</p><p>自心底期待和你的见面。         </p><p>$\qquad$ $\qquad$ $\qquad$ 敬具。</p><p><img src="https://s2.loli.net/2022/12/28/QyLcBd5EPrpICs3.webp" alt="20-2.webp" title="银阁寺"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可以看作是《春宵苦短，少女前进吧》的后续。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://movie.douban.com/review/8521843/&quot;&gt;https://movie.douban.com/review/8521843/&lt;</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>影评《春宵苦短，少女前进吧》</title>
    <link href="https://loveofpeach.github.io/posts/dc1dbc8f.html"/>
    <id>https://loveofpeach.github.io/posts/dc1dbc8f.html</id>
    <published>2022-12-27T04:52:14.000Z</published>
    <updated>2023-02-08T10:13:08.756Z</updated>
    
    <content type="html"><![CDATA[<p>姑且放个免费的观看链接：<a href="https://www.yhdmp.live/showp/17348.html">https://www.yhdmp.live/showp/17348.html</a> ，如果你的浏览器没有广告屏蔽插件，可能会看到形形<strong>色色</strong>的广告，但是不影响，没有恶意遮挡的广告，并且全屏观看时没有广告。</p><p>不建议在B站观看，不仅要会员，而且可能是审核阉割版的。</p><p>似乎是官方网站：<a href="https://kurokaminootome.com/">https://kurokaminootome.com/</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我的记忆力很差，因而电影、小说之类的东西，只在脑海里留下一个模糊的印象。譬如小时候读曹文轩的书，漫长的时间过去，只觉得像薄荷糖一般。这部改编自森见登美彦小说的电影，看完也只觉得很好，很清爽，但要将这模糊的感觉写下，做出一个影评来，对我来说实在勉强。</p><p>在网上参考了网评、论文等，也发现了一些问题。</p><p>我大致能理解为什么有一些人会在充分代入女主之后，得出各种奇怪的结论。不过以我之愚见，观看一部动画电影时，首要义务是抛弃自己的经验，进入银幕另一侧的世界中去。『在幕布另一侧展现开的是，从这个世界的偏颇现实中解放出来的梦之世界』，这梦之世界中的男女都是自由的，他们的一切行动都可以看作是象征、隐喻、夸张、想象，一切的象征、隐喻、夸张、想象，也都可以是他们的实际行动。因此不必试图在电影中寻求现实的影子，也毋须将现实中的人际关系与行动逻辑与电影对比。</p><blockquote><p>《日本动画“无影作画”技法的美学研究（张长）》：<br>在爱森斯坦看来，动画中的形象就具有这种特性。它们作为一种被画出来的形式，拥有特定的外观，但却如原生质一般活动，总是处在一种尚不具备稳定形式的状态中，<strong>简言之，就是一种可以成为任何事物的潜在能力。这是一种兼具了破坏性与创造性的暴力，它让人们相信，动画形象可以被用来冲破各种限制，从而自由地去进行表达。</strong>……不过，随着迪士尼后来的现实主义转向，动画原生的自由也逐渐被抛弃和抑制了。正像韦尔斯所说，“随着迪士尼的每一次技术进步，他们就越来越远离他们在早期的《糊涂交响曲》中所表现出的原生质的灵活性，强行将动画形式裹挟到新现实主义的实践当中。”从此以后，“动画电影中图形和叙事的无政府状态般的意识形态自由，也让位给了现实情境中的道德评比。” 由此可见，放大和张扬动画“原生质性”的做法就意味着一条与现实主义截然相反的道路，它能够将人们从物质的、现实的、既定的法则和限制中解放出来，以自由的、精神的形态去活动、去表达。</p></blockquote><p>我相信，若是能真正放下姿态，放下电影指导现实、从中获得启迪教益的急切心态，沉浸到银幕另一侧的世界中，一定能更好地领悟《春宵》（简称，以下同）本身的美和幽默。</p><div class="tip error"><p>以下包含剧透</p></div><h2 id="整体印象"><a href="#整体印象" class="headerlink" title="整体印象"></a>整体印象</h2><p>《春宵》是一部非常“日本”的动画，包含了很多鲜明的文化元素。</p><blockquote><p><em><a href="https://www.diva-portal.org/smash/record.jsf?pid=diva2%3A1717186">BEYOND REALIA –CULTURAL ASSOCIATIONS IN THE ENGLISH TRANSLATION OF THE NIGHT IS SHORT, WALK ON GIRL BY MORIMI TOMIHIKO</a> :</em><br>By carefully selecting these cultural elements, the author constructs a literary style that is reminiscent of modern Japanese literature from Taisho (1912-1926) and early Showa (1926-1989). His style also effectively creates a universe that exudes traditional Japanese aesthetic associations expressed by both cultural objects (e.g., food, art, music, decorative objects) and legendary beings (e.g., gods, monsters).</p></blockquote><p><img src="https://bu.dusays.com/2023/01/01/63b1944f75a28.png" alt="拼酒的场景布置"></p><p><img src="https://bu.dusays.com/2023/01/01/63b1944d81ff1.png" alt="五山送火"></p><p>这些颇具历史文化气息的元素，在银幕和观众间砌起高墙，并与现实划清界限：它是现代社会的避难所、田园诗式的保留地。没有高楼大厦，没有通勤的人流——鸭川中站着苹果一般的女孩。</p><p>这匿藏于银幕中的保留地里，一切事物都是『以自由的、精神的形态去活动』，而这正是汤浅政明所擅长的：</p><p><img src="https://bu.dusays.com/2023/01/02/63b1d22f55bcf.png" alt="愿作深海鱼，四周便填满海水"></p><p><img src="https://bu.dusays.com/2023/01/02/63b1d22f23a23.png" alt="被抓住的书像鱼一样挣扎（需要在电影中观看）"></p><p><img src="https://bu.dusays.com/2023/01/02/63b1d22da884d.png" alt="杯中液体表现出果冻般的性质"></p><p>与之相应的是视觉上的艳丽，它一方面强调了作品的非现实性和自由的基调，另一方面色彩的对比也暗示了人物的心理状态：</p><p><img src="https://bu.dusays.com/2023/01/02/63b24f644ce0c.png" alt="酒吧里的酒水"></p><p><img src="https://bu.dusays.com/2023/01/05/63b695a7d1a67.png" alt="色彩对比"></p><p><img src="https://bu.dusays.com/2023/01/02/63b24f674624e.png" alt="羽贯骗酒"></p><p>附《春宵》中《四叠半》的彩蛋：</p><p><img src="https://s2.loli.net/2023/01/02/BHA7xTcblf2tgoI.jpg" alt="《四叠半时光机布鲁斯》，羽贯（右）"></p><p><img src="https://bu.dusays.com/2023/01/02/63b255260828d.png" alt="明石的饼熊玩偶"></p><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p><img src="https://bu.dusays.com/2023/01/05/63b69667d937a.png" alt="东堂的初次登场"></p><p>东堂是个妻离女散的中年大叔，平日爱好收集色图：（虽然不是很懂这些好像随时都能发出“哟噫——”的色图色在哪了）</p><p><img src="https://s2.loli.net/2023/01/05/LDmNVQcRXu3gsaP.png" alt="将要失去春宫画时的发言" title="色胚发言"></p><p><img src="https://bu.dusays.com/2023/02/08/63e375a2ed34b.png" alt="动作细节"></p><h2 id="不写了，摆烂啦"><a href="#不写了，摆烂啦" class="headerlink" title="不写了，摆烂啦"></a>不写了，摆烂啦</h2><p>已经有写的更好的了，为什么我要写？总之这是一部蛮好看的电影，大家快去看吧！</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><blockquote><p>张长（华东师范大学） 《日本动画“无影作画”技法的美学研究》：</p></blockquote><p>他的很多动画都给人一种没有阴影的感觉，不仅仅是没有深色色块所表示的角色暗部，通常也没有角色投影，就连背景也时常没有阴影。或者说，在他的作品中没有“现实”的阴影，即使偶尔在角色身上出现了阴影，那多半也是内心的阴影、想象的阴影、主观的阴影。在汤浅政明看来，阴影就是自然世界和客观现实的符号，它之所以将阴影排除在他的作品之外，就是因为比起外部的现实世界，他更乐意表现内部的心灵世界。</p><p>……</p><p>汤浅政明在这部影片里有意地以时间而非空间为舞台，让形形色色的人们登台表演，上演丰富而又离奇的人生戏剧。有的人在这里上演的只是人生的一个瞬间，有的人则在这里演完了一生——在相同的能指时间内，不同的角色经历了不同的所指时间。在年轻的女主人公的心里，每一个短促的瞬间体验都是丰沛而又鲜活的，时间因此被拉扯地悠远绵长；而在年迈的长者那里，他的感受力早已被岁月磨损，数载年华也如白驹过隙。这一点在片中也有较为直接地表述——当女主角和一群老人一同抬起手表看时间的时候，老人们的指针走得飞快，而女主角的指针则走得十分缓慢。心理时间是相对的、主观的、可以伸缩变形的。在这部影片里，汤浅政明通过各种生动的意象和巧妙的叙事手法，将自身的影像风格很好地融入到对多层次的心理时间的探索当中。 </p><p>……</p><p>外部的现实世界对应着一系列物理法则，这些法则总是限制着事物自我显现的方式。外部世界中的事物遵循着这些法则，因而角色总是被阴影牢牢跟随着。……<strong>我们可以将阴影看成是现实的注脚，在现实之光的朗照之下，事物就不能自行摆脱阴影。而一旦阴影被藏匿起来，影像表征现实的合法性就遭到了动摇，由此观众便会自然地将影像过渡到非现实的领域当中，也即幻觉与想象的精神领域中。</strong> 换言之，阴影通过缺席的方式把叙述的视点从人物的外部引向了内部。在这个过程中我们可以看到，阴影自始至终都被看成是意指现实的符号，它从一开始就肩负着表意的任务，只不过它所肩负的表意任务是通过缺席的方式来履行的。如果说阴影的在场意味着我们所看到的都是现实形象，那么阴影的缺席就意味着眼前的都是心理形象。在汤浅政明这里，他就是通过刻意隐匿各类阴影的方式，使他的观众对其动画影像所表征的对象“另眼相看”的。</p><p>……</p><p>我们也可以这样理解，汤浅政明动画中的角色之所以没有阴影，就是因为他们都只是从某个人物受限的视角内所能观察到的极为扁平的他人形象，对角色阴影的排除其实就是为了强调个人主观视角的局限性。 </p><blockquote><p>这篇论文建议大家去知网或者其他地方拿，虽然知网臭不可闻，毕竟是正规渠道。大家千万不要去道客巴巴这种看上去就像是乱拿别人东西的无良网站上白嫖作者。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;姑且放个免费的观看链接：&lt;a href=&quot;https://www.yhdmp.live/showp/17348.html&quot;&gt;https://www.yhdmp.live/showp/17348.html&lt;/a&gt; ，如果你的浏览器没有广告屏蔽插件，可能会看到形形&lt;strong</summary>
      
    
    
    
    <category term="ACG" scheme="https://loveofpeach.github.io/categories/ACG/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
    <category term="汤浅政明" scheme="https://loveofpeach.github.io/tags/%E6%B1%A4%E6%B5%85%E6%94%BF%E6%98%8E/"/>
    
    <category term="电影" scheme="https://loveofpeach.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>我再也受不了校园暴力了</title>
    <link href="https://loveofpeach.github.io/posts/659fb3be.html"/>
    <id>https://loveofpeach.github.io/posts/659fb3be.html</id>
    <published>2022-11-29T02:43:21.000Z</published>
    <updated>2022-12-06T14:21:23.465Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i0.sinaimg.cn/edu/2014/1121/U5926P42DT20141121134611.jpg" alt="18-1.jpg"></p><p>事情是这样的。</p><p><img src="https://s2.loli.net/2022/11/29/eoEL3b6w7QT8GPD.jpg" alt="18-2.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://i0.sinaimg.cn/edu/2014/1121/U5926P42DT20141121134611.jpg&quot; alt=&quot;18-1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;事情是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.lol</summary>
      
    
    
    
    <category term="杂" scheme="https://loveofpeach.github.io/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>CppNote</title>
    <link href="https://loveofpeach.github.io/posts/54b4d7a2.html"/>
    <id>https://loveofpeach.github.io/posts/54b4d7a2.html</id>
    <published>2022-11-12T10:23:40.000Z</published>
    <updated>2023-03-14T03:17:15.838Z</updated>
    
    <content type="html"><![CDATA[<p>本文是通过第五版《C++ primer》进行的查漏补缺。</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>标准库定义了4个IO对象：</p><ul><li>cin : istream类型的对象，标准输入（standard input）</li><li>cout : ostream类型的对象，标准输出（standard output）</li><li>cerr : ostream类型的对象，标准错误（standard error）</li><li>clog : ostream类型的对象，用来输出程序运行时的一般信息</li></ul><p>一种不用namespace std的写法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;enter two numbers:&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="type">int</span> v1=<span class="number">0</span>, v2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    std::cin&gt;&gt;v1&gt;&gt;v2;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;the sum of &quot;</span>&lt;&lt;v1&lt;&lt;<span class="string">&quot; and &quot;</span>&lt;&lt;v2&lt;&lt;<span class="string">&quot; is &quot;</span>&lt;&lt;v1+v2&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::cout</code> 两个冒号是一个运算符，作用域运算符。它表示我要把<code>std</code>作用域里面的<code>cout</code>拿出来用。</p><p><code>endl</code> 操作符，结束当前行，将设备相关的缓冲区内容刷到屏幕上。</p><p><code>cin</code>可以跳过空格、制表符、换行符等空白字符。</p><p>一般来说，自己创建的头文件，用双引号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>, value=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(std::cin&gt;&gt;value)&#123; <span class="comment">//读取数值直到文件结尾，或读入错误</span></span><br><span class="line">        sum+=value;       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;the sum is &quot;</span>&lt;&lt;sum&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上例中，无效的istream对象会使条件变为假，例如输入一个字母（非int型）。</p><h2 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h2><p><code>char</code>比较特殊，分为三种：<code>char</code>、<code>signed char</code>、<code>unsigned char</code>，<code>char</code>是<code>signed char</code>或<code>unsigned char</code>其中的一种，由编译器决定：VC编译器、x86上的GCC都把char定义为<code>signed char</code>，而arm-linux-gcc把char定义为<code>unsigned char</code>。</p><p>为了保持程序的移植性，应当明确指出到底是哪一种。</p><p>三者都占1个字节。<code>signed char</code>取值范围是<code>-128~127</code>(有符号位)，<code>unsigned char</code>取值范围是<code>0~255</code>。</p><p>原始的ASCII标准里，定义的字符码值是只有<code>0~127</code>，所以怎么定义的char都刚好装得下。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>记一种写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">book</span><span class="params">(<span class="string">&quot;newbrush&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//what...?</span></span><br><span class="line">    std::cout&lt;&lt;book&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果（输出了字符串）：</span></span><br><span class="line"><span class="comment">//newbrush</span></span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> units_sold = <span class="number">0</span>; <span class="comment">//以前的写法</span></span><br><span class="line"><span class="type">int</span> units_sold = &#123;<span class="number">0</span>&#125;; <span class="comment">//列表初始化（C++11）</span></span><br><span class="line"><span class="type">int</span> units_sold&#123;<span class="number">0</span>&#125;; <span class="comment">//列表初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">units_sold</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>若使用列表初始化，且初始值存在丢失信息的风险，则编译器报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld=<span class="number">3.1415926536</span>;</span><br><span class="line"><span class="type">int</span> a&#123;ld&#125;,b=&#123;ld&#125;; <span class="comment">//报错，转换未执行</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(ld)</span>,d</span>=ld; <span class="comment">//旧写法，不报错，转换执行，同时丢失了部分值</span></span><br></pre></td></tr></table></figure><p>若只声明而不定义，就在变量前添加<code>extern</code>关键字，且不要显式地初始化变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i; <span class="comment">//声明 i 而非定义 i</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">//声明并定义 j</span></span><br></pre></td></tr></table></figure><p>若不希望别的文件通过<code>extern</code>引用，可以使用<code>static</code>，这样作用域就是本文件。</p><p><strong>总结：</strong><code>extern</code>不是定义，是引入（声明）在其他源文件中定义的非<code>static</code>全局变量。</p><p>名字的作用域（scope）：</p><ul><li>同一个名字出现在程序的不同位置，也可能指向不同的实体。</li><li>C++中大多数作用域都以花括号分隔。</li><li>名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端作为结束。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个不好的例子</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> reused = <span class="number">42</span>; <span class="comment">// 全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> unik = <span class="number">0</span>; <span class="comment">//块作用域</span></span><br><span class="line">    std::cout&lt;&lt;reused&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;unik&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> reused = <span class="number">0</span>; <span class="comment">//同名的新建局部变量，覆盖了全局变量</span></span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;reused&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;unik&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;::reused&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;unik&lt;&lt;std::endl;</span><br><span class="line">    <span class="comment">//显式地访问全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*------------运行结果-----------</span></span><br><span class="line"><span class="comment">42 0</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">42 0</span></span><br><span class="line"><span class="comment">-------------------------------*/</span></span><br></pre></td></tr></table></figure><h2 id="复合类型（compound-type）"><a href="#复合类型（compound-type）" class="headerlink" title="复合类型（compound type）"></a>复合类型（compound type）</h2><p>引用（reference），为对象起的别名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> &amp;refVal = ival; <span class="comment">//refVal 指向ival (是ival的另一个名字)</span></span><br><span class="line"><span class="type">int</span> &amp;refVal2; <span class="comment">//报错，引用必须初始化</span></span><br></pre></td></tr></table></figure><p>定义引用时，把引用和它的初始值绑定在一起，而不是把初始值拷贝给引用。引用不是对象，所以不能定义引用的引用，不能定义指向引用的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reVal = <span class="number">2</span>; <span class="comment">//把2给refVal指向的对象，即赋给了ival</span></span><br><span class="line"><span class="type">int</span> li = refVal; <span class="comment">//等同于li=ival</span></span><br><span class="line"><span class="type">int</span> &amp;refVal3 = refVal; <span class="comment">//正确：refVal3绑定到了那个与refVal绑定的对象上，即绑定了ival</span></span><br></pre></td></tr></table></figure><p>可以使用取地址符<code>&amp;</code>获取指针所封装的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival; <span class="comment">//p是指向ival的指针</span></span><br><span class="line"><span class="type">double</span> *dp = &amp;ival; <span class="comment">//错误！类型不匹配</span></span><br></pre></td></tr></table></figure><p>对于“指针的值+1”的解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;hello this is a test&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">233</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;a;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;adress: &quot;</span>&lt;&lt;p&lt;&lt;std::endl;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;neirong: &quot;</span>&lt;&lt;*p&lt;&lt;std::endl;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;adress+1: &quot;</span>&lt;&lt;p+<span class="number">1</span>&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*---------------运行结果----------------</span></span><br><span class="line"><span class="comment">hello this is a test</span></span><br><span class="line"><span class="comment">adress: 0x61fe14</span></span><br><span class="line"><span class="comment">neirong: 233</span></span><br><span class="line"><span class="comment">adress+1: 0x61fe18</span></span><br><span class="line"><span class="comment">---------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------explanation-----------</span></span><br><span class="line"><span class="comment">p+1的效果反映在地址上（单词拼错小问题）</span></span><br><span class="line"><span class="comment">在博主本人的机器上，int型占4个字节</span></span><br><span class="line"><span class="comment">--------------------------------*/</span></span><br></pre></td></tr></table></figure><p>可以使用解引用符<code>*</code>利用指针访问对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival; <span class="comment">//p是指向ival的指针</span></span><br><span class="line">std::cout&lt;&lt;*p; <span class="comment">//输出42</span></span><br><span class="line">*p=<span class="number">0</span>;</span><br><span class="line">std::cout&lt;&lt;*p <span class="comment">//输出0</span></span><br></pre></td></tr></table></figure><p>空指针（null pointer），不指向任何对象。在使用一个指针前，可以先检查它是否为空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1 = <span class="literal">nullptr</span>; <span class="comment">//C++11 ，推荐写法</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p3 = <span class="literal">NULL</span>; <span class="comment">//需要 #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="type">int</span> zero = <span class="number">0</span>;</span><br><span class="line">p1 = zero; <span class="comment">//错误！类型不匹配</span></span><br></pre></td></tr></table></figure><p>void *指针，纯粹的地址封装，与类型无关。可以用于存放任意对象的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;</span><br><span class="line"><span class="type">void</span> *pv = &amp;obj;</span><br><span class="line">pv = pd;</span><br></pre></td></tr></table></figure><p>指向指针的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *pi = &amp;ival;</span><br><span class="line"><span class="type">int</span> **ppi = &amp;pi; <span class="comment">//ppi指向一个int型的指针</span></span><br></pre></td></tr></table></figure><p>指针的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p; <span class="comment">//r是一个对指针p的引用</span></span><br><span class="line">r = &amp;i; <span class="comment">//r引用了一个指针，就是令p指向i</span></span><br><span class="line">*r = <span class="number">0</span>; <span class="comment">//解引用得到i，将i的值改为0</span></span><br></pre></td></tr></table></figure><h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><p><code>const</code>对象必须初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="built_in">get_size</span>(); <span class="comment">//正确，运行时初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> j = <span class="number">42</span>; <span class="comment">//正确，编译时初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> k; <span class="comment">//错误！未初始化</span></span><br></pre></td></tr></table></figure><p>默认状态下，<code>const</code>对象仅在文件内有效，若想在多个文件间共享<code>const</code>对象，必须在变量的定义之前添加关键字<code>extern</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file_1.cc定义并初始化了一个常量，该常量能被其他文件访问</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize = <span class="built_in">fcn</span>();</span><br><span class="line"><span class="comment">//file_1.h头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize;</span><br></pre></td></tr></table></figure><p><code>const</code>的引用，对常量的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r1 = ci; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> &amp;r2 = ci; <span class="comment">//错误！存在通过r2改变ci（const）的风险</span></span><br></pre></td></tr></table></figure><p>一个奇怪的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;ri = dval; <span class="comment">//允许</span></span><br><span class="line"><span class="type">int</span> &amp;ri = dval; <span class="comment">//错误！因为改变的是编译器生成的中间量</span></span><br></pre></td></tr></table></figure><p>指向常量的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> *ptr = &amp;pi; <span class="comment">//错误！存在通过ptr指针修改pi的风险</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *cptr = &amp;pi;</span><br><span class="line">*cptr = <span class="number">42</span>; <span class="comment">//错误！</span></span><br><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line">cptr = &amp;dval; <span class="comment">//正确，但不能通过cptr修改dval的值</span></span><br></pre></td></tr></table></figure><p>const指针（必须初始化）：不变的是指针本身的值，而不是它指向的那个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> curErr = &amp;errNumb; <span class="comment">//常指针，顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> *<span class="type">const</span> pip = &amp;pi; <span class="comment">//指向常量的常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*curErr)&#123;</span><br><span class="line">    <span class="built_in">errorHandler</span>();</span><br><span class="line">    *curErr = <span class="number">0</span>; <span class="comment">//正确，试图修改变量errNumb</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*pip = <span class="number">2.71</span>; <span class="comment">//错误！试图修改常量pi</span></span><br></pre></td></tr></table></figure><p>顶层<code>const</code>：表示变量本身是一个常量。底层<code>const</code>：表示指针所指向的对象是一个<code>const</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p1 = &amp;i; <span class="comment">//顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">42</span>; <span class="comment">//顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2 = &amp;ci; <span class="comment">//底层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = p2; <span class="comment">//（左：底层），（右：顶层）</span></span><br><span class="line"></span><br><span class="line">p2 = p3; <span class="comment">//正确。从顶层的角度来说，p2是个变量，p3是个常量，</span></span><br><span class="line">         <span class="comment">//这个赋值没有问题。从底层的角度来说，都是一样的，</span></span><br><span class="line">         <span class="comment">//指向的内容都是不会去修改的</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = p3; <span class="comment">//错误！存在通过*p修改*p3（const）的风险</span></span><br><span class="line">             <span class="comment">//p3的底层是const int ，而这个是int</span></span><br><span class="line"></span><br><span class="line">p2 = &amp;i; <span class="comment">//正确。只是不能通过p2修改i而已</span></span><br></pre></td></tr></table></figure><p><code>constexpr</code>变量（C++11标准）：允许将变量声明为<code>constexpr</code>类型，以便由编译器来验证变量的值是否是一个常量表达式。</p><ul><li>一定是一个常量</li><li>必须用常量表达式初始化</li><li>自定义类型、IO库、string等类型不能被定义为<code>constexpr</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mf = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> limit = mf + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sz = <span class="built_in">size</span>(); <span class="comment">//只有当size是一个constexpr函数时才正确</span></span><br></pre></td></tr></table></figure><p>指针和<code>constexpr</code>：限定符仅对指针有效，对其所指的对象无关。（对顶层有效，底层无效）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *np = <span class="literal">nullptr</span>; <span class="comment">//常指针</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">......</span><br><span class="line"><span class="comment">//i和j必须定义在函数之外</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">const</span> <span class="type">int</span> *p = &amp;i; <span class="comment">//p是常指针，指向常量</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *p1 = &amp;j; <span class="comment">//p1是常指针，指向变量j</span></span><br></pre></td></tr></table></figure><h2 id="typedef、auto、decltype"><a href="#typedef、auto、decltype" class="headerlink" title="typedef、auto、decltype"></a>typedef、auto、decltype</h2><p>类型别名，提高可读性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> wages;</span><br><span class="line"><span class="keyword">typedef</span> wages base, *p; <span class="comment">//base是double的同义词，p是double *的同义词</span></span><br><span class="line"><span class="keyword">using</span> SI = Sales_item; <span class="comment">//C++11，别名声明。左边是别名</span></span><br></pre></td></tr></table></figure><p>对于指针，类型别名的使用可能会产生意想不到的结果（平时不用就好了）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *pstring;</span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="number">0</span>; <span class="comment">//指向char的常量指针</span></span><br><span class="line"><span class="type">const</span> pstring *ps; <span class="comment">//ps是指针变量，它的对象是指向char的常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *cstr = <span class="number">0</span>; <span class="comment">// ! 是对 const pstring cstr = 0; 的错误理解</span></span><br></pre></td></tr></table></figure><p>auto类型说明符，C++11，让编译器通过初始值推断变量的类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">0</span>, *p = &amp;i; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>; <span class="comment">//错误！auto已经被推断为int，后面却不一致</span></span><br></pre></td></tr></table></figure><p>看看就好，不要较真，我觉得一般不会用到这些：</p><p><img src="https://s2.loli.net/2022/11/14/UkY4gMpC5uBAzGT.png" alt="17-1.png"></p><p><code>decltype</code>类型说明符，获取表达式的类型。在编译时推导出一个表达式的类型，并且不会计算表达式的值。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(x) y = <span class="number">1</span>;             <span class="comment">// y -&gt;  int</span></span><br><span class="line"><span class="keyword">decltype</span>(x+y) z = x + y;     <span class="comment">// z - &gt;  int</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; i = x;</span><br><span class="line"><span class="keyword">decltype</span>(i) j = y;            <span class="comment">// j -&gt; const int&amp;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">const</span> <span class="title">decltype</span><span class="params">(z)</span> *p </span>= &amp;z;    <span class="comment">// p-&gt; const int *</span></span><br><span class="line"><span class="keyword">decltype</span>(z) *pi = &amp;z;         <span class="comment">// pi -&gt; int*</span></span><br><span class="line"><span class="keyword">decltype</span>(pi) *pp = π        <span class="comment">//pp -&gt; int**</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) sum = x;      <span class="comment">//sum的类型就是函数f返回的类型</span></span><br></pre></td></tr></table></figure><p>auto与decltype类似但是又不同，auto只能根据变量的初始化表达式推导出变量应该具有的类型。decltype将精确的推导出表达式定义的类型，不会舍弃和弃用cv限定符。</p><p>一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(*p) c; <span class="comment">//错误！解引用表达式，c的类型为引用，需要初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(i) e; <span class="comment">//正确，e是一个未初始化的int</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d; <span class="comment">//错误！d是int&amp;类型，必须初始化</span></span><br><span class="line"><span class="keyword">decltype</span>(((i))) d1 = i; <span class="comment">//正确，d1是int&amp;类型，且已初始化</span></span><br></pre></td></tr></table></figure><h2 id="自定义数据结构、类和头文件"><a href="#自定义数据结构、类和头文件" class="headerlink" title="自定义数据结构、类和头文件"></a>自定义数据结构、类和头文件</h2><p>类定义可以使用关键字<code>class</code>或<code>struct</code>，二者默认的继承、访问权限不同，<code>struct</code>是<code>public</code>的，<code>class</code>是<code>private</code>的。</p><p>编写自己的头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H <span class="comment">//习惯大写</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="标准库类型string"><a href="#标准库类型string" class="headerlink" title="标准库类型string"></a>标准库类型string</h2><p><img src="https://s2.loli.net/2022/11/25/HXwmQflsYF41znv.png" alt="17-2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string s1,s2;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">cout&lt;&lt;s1&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line"><span class="comment">//输入：hello world</span></span><br><span class="line"><span class="comment">//输出：helloworld</span></span><br><span class="line"><span class="comment">//s1装的是hello，s2是world</span></span><br></pre></td></tr></table></figure><p><code>getline</code>得到的<code>string</code>对象不包含换行符:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="comment">//每次读入一整行，包括空白，直到文件末尾</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin,line))&#123;</span><br><span class="line">        cout&lt;&lt;line&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字面值和<code>string</code>对象相加：</p><p><img src="https://s2.loli.net/2022/11/25/yMczalb4n3OQCLm.png" alt="17-3.png"></p><p><code>cctype</code>中的一些函数：</p><p><img src="https://s2.loli.net/2022/11/25/b9YDqtAjkcyR2M5.png" alt="17-4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(string::size_type i=<span class="number">0</span>; i!=s.<span class="built_in">size</span>(); i=i+<span class="number">2</span>)</span><br><span class="line">    s[i]=<span class="string">&#x27;x&#x27;</span>;  <span class="comment">//一个使用string::size_type的例子</span></span><br></pre></td></tr></table></figure><p>从逻辑上讲，<code>size()</code>成员函数应该似乎返回整型数值，但事实上，size操作返回是<code>string::size_type</code>类型的值。string类类型和其他许多库类型都定义了一些配套类型（companion type）。通过这些配套类型，库函数的使用就与机器无关（machine-independent）。size_type就是这些配套类型中的一种。它定义为与unsigned型（<code>unsigned int</code>或<code>unsigned long</code>）具有相同含义，而且保证足够大的能够存储任意的string对象的长度。<code>string::size_type</code>在不同的机器上长度可以不同，并非固定。但只要使用该类型，就使得程序适合机器。string对象的索引也应为size_type类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序例子</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;Hello World!!!&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">decltype</span>(s.<span class="built_in">size</span>())punct_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123; <span class="comment">//for every char in s</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ispunct</span>(c))++punct_cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">    string orig = s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c : s)&#123; <span class="comment">//需要修改字符串s</span></span><br><span class="line">        c = <span class="built_in">toupper</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准库类型vector"><a href="#标准库类型vector" class="headerlink" title="标准库类型vector"></a>标准库类型vector</h2><p><img src="https://s2.loli.net/2022/11/25/jYlGPQ4V6nuig8J.png" alt="17-5.png"></p><p>访问<code>vector</code>的一种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i : v)&#123; <span class="comment">//与上例类似</span></span><br><span class="line">        i*=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)&#123;</span><br><span class="line">        std::cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/2JFIf4hT1QczuP3.png" alt="17-6.png"></p><h2 id="迭代器（iterator）"><a href="#迭代器（iterator）" class="headerlink" title="迭代器（iterator）"></a>迭代器（iterator）</h2><p>有迭代器的类型都拥有<code>begin</code>和<code>end</code>成员。如果容器为空，则<code>begin</code>和<code>end</code>返回的是同一个迭代器，都是<code>尾后迭代器</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> b = v.<span class="built_in">begin</span>(), e = v.<span class="built_in">end</span>();</span><br><span class="line"><span class="comment">//b表示v的第一个元素，e表示v尾元素的下一位置</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/01/YQj2wMSRmpxkAZ8.png" alt="17-7.png"></p><p>迭代器类型，<code>iterator</code>和<code>const_iterator</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">//it能读写vector&lt;int&gt;元素</span></span><br><span class="line">string::iterator it2; <span class="comment">//it2能读写string对象中的字符</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator it3; <span class="comment">//it3只能读，不能写</span></span><br><span class="line">string::const_iterator it4; <span class="comment">//it4只能读，不能写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----分--割--线--QAQ-----*/</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt; cv;</span><br><span class="line"><span class="keyword">auto</span> it1 = v.<span class="built_in">begin</span>(); <span class="comment">//it1的类型是vector&lt;int&gt;::iterator</span></span><br><span class="line"><span class="keyword">auto</span> it2 = cv.<span class="built_in">begin</span>(); <span class="comment">//it2的类型是vector&lt;int&gt;::const_iterator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----分--割--线--QAQ-----*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有时我们希望即使对象不是常量，也使用const_iterator，</span></span><br><span class="line"><span class="comment">//C++11引入了cbegin和cend</span></span><br><span class="line"><span class="keyword">auto</span> it3 = v.<span class="built_in">cbegin</span>(); <span class="comment">//it3的类型是vector&lt;int&gt;::const_iterator</span></span><br></pre></td></tr></table></figure><p>结合解引用的成员访问：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; v;</span><br><span class="line"><span class="keyword">auto</span> it = v.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">(*it).<span class="built_in">empty</span>();</span><br><span class="line">*it.<span class="built_in">empty</span>(); <span class="comment">//错误！</span></span><br><span class="line">it-&gt;<span class="built_in">empty</span>(); <span class="comment">//箭头运算符：把解引用和成员访问两个操作合在一起</span></span><br></pre></td></tr></table></figure><p><strong>任何一种可能改变vector对象容量的操作，都会使得相应的迭代器失效。</strong></p><p>迭代器运算：</p><p><img src="https://s2.loli.net/2022/12/01/Dh14EGjnps7Kf6H.png" alt="17-8.png"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>一种写法：<code>int a[]=&#123;1,2,3&#125;;</code>，<code>[]</code>内可以不填数字。</p><p>字符数组的特殊性：字符串字面值的结尾处有一个空字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a1[] = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;; <span class="comment">//列表初始化，没有空字符</span></span><br><span class="line"><span class="type">char</span> a2[] = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;; <span class="comment">//列表初始化，显式写出了空字符</span></span><br><span class="line"><span class="type">char</span> a3[] = <span class="string">&quot;C++&quot;</span>; <span class="comment">//将自动包含空字符</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> a4[<span class="number">6</span>] = <span class="string">&quot;Danial&quot;</span>; <span class="comment">//错误！没有空间放空字符</span></span><br></pre></td></tr></table></figure><p>复杂的数组声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptrs[<span class="number">10</span>]; <span class="comment">//ptrs是含有10个整型指针的数组</span></span><br><span class="line"><span class="type">int</span> &amp;refs[<span class="number">10</span>] = <span class="comment">/* ？ */</span>; <span class="comment">//错误！不存在引用的数组</span></span><br><span class="line"><span class="built_in">int</span> (*Parray)[<span class="number">10</span>] = &amp;arr; <span class="comment">//Parray指向一个含有10个整数的数组</span></span><br><span class="line"><span class="built_in">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr; <span class="comment">//arrRef引用一个含有10个整数的数组</span></span><br><span class="line"><span class="type">int</span> *(&amp;arry)[<span class="number">10</span>] = ptrs; <span class="comment">//arry是数组的引用，该数组含有10个指针</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/12/MzaSUBXNf5W8rdi.png" alt="17-9.png"></p><p>数组的<code>begin</code>和<code>end</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p1 = std::<span class="built_in">begin</span>(a);</span><br><span class="line">    <span class="type">int</span> *p2 = std::<span class="built_in">end</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;p1 != p2; p1++)&#123;</span><br><span class="line">        std::cout&lt;&lt;*p1&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----运行结果-----</span></span><br><span class="line"><span class="comment">1 2 3 4</span></span><br><span class="line"><span class="comment">-----------------*/</span></span><br></pre></td></tr></table></figure><p>指针运算：</p><p><img src="https://s2.loli.net/2022/12/12/t3onZmyICzw1viH.png" alt="17-10.png"></p><p>下标和指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = &amp;ia[<span class="number">2</span>]; <span class="comment">// 指向“4”</span></span><br><span class="line"><span class="type">int</span> j = p[<span class="number">1</span>]; <span class="comment">// j = 6</span></span><br><span class="line"><span class="type">int</span> k = p[<span class="number">-2</span>]; <span class="comment">// k = 0  , string和vector的下标不可以为负</span></span><br></pre></td></tr></table></figure><p>C风格字符串：处理函数定义在<code>cstring</code>头文件中。</p><p><img src="https://bu.dusays.com/2023/01/03/63b3fb10a29b4.png" alt="17-11.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ca[]=&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(ca)&lt;&lt;endl; <span class="comment">//错误！ca[]没有以 &#x27;\0&#x27; 结束</span></span><br></pre></td></tr></table></figure><p>与旧代码的接口：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> *str = s; <span class="comment">//错误！不能这样用</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *str = s.<span class="built_in">c_str</span>(); <span class="comment">//正确，c风格的string</span></span><br></pre></td></tr></table></figure><p>使用数组初始化<code>vector</code>对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> int_arr[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ivec</span><span class="params">(std::begin(int_arr),std::end(int_arr))</span></span>;</span><br><span class="line"><span class="comment">// 左闭右开</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">subVec</span><span class="params">(int_arr+<span class="number">1</span>,int_arr+<span class="number">4</span>)</span></span>; <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>将所有元素初始化为0：<code>int arr[10][20][30]=&#123;0&#125;;</code></p><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ia2[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;</span><br><span class="line">&#125;;              <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> ia3[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> ia4[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;,&#123;<span class="number">4</span>&#125;,&#123;<span class="number">8</span>&#125;&#125;; <span class="comment">// &#123;0,0,0,0,4,0,0,0,8,0,0,0&#125;</span></span><br><span class="line"><span class="type">int</span> ia5[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;     <span class="comment">// &#123;0,3,6,9,0,0,0,0,0,0,0,0&#125;</span></span><br></pre></td></tr></table></figure><p>下标引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (&amp;row)[<span class="number">4</span>] = ia[<span class="number">1</span>]; <span class="comment">//把row绑定到ia的第二个4元素数组上</span></span><br></pre></td></tr></table></figure><p>使用范围for语句处理多维数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;row : ia)        <span class="comment">//对于外层数组的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;col : row) &#123; <span class="comment">//对于内层数组的每一个元素</span></span><br><span class="line">        col = cnt;</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*----------------------</span></span><br><span class="line"><span class="comment">在上面的例子中，因为要改变数组元素的值，所以使用引用类型。</span></span><br><span class="line"><span class="comment">对于没有写操作的，可以参考下例：避免数组被自动转成指针</span></span><br><span class="line"><span class="comment">----------------------*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;row : ia)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> col : row)</span><br><span class="line">        cout &lt;&lt; col &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>指针和多维数组：</p><p><img src="https://bu.dusays.com/2023/01/04/63b4f8690ecd0.png" alt="17-12"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p指向含有4个整数的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p=ia; p!=ia+<span class="number">3</span>; p++)&#123;</span><br><span class="line">    <span class="comment">//q指向4个整数数组的首元素，也就是说，q指向一个整数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> q=*p; q!=*p+<span class="number">4</span>; q++)</span><br><span class="line">        cout &lt;&lt; *q &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名简化多维数组的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和上例一样</span></span><br><span class="line"><span class="keyword">using</span> int_array = <span class="type">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (int_array *p = ia; p!=ia+<span class="number">3</span>; p++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> *q = *p; q!=*p+<span class="number">4</span>; q++)</span><br><span class="line">        cout &lt;&lt; *q &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表达式基础"><a href="#表达式基础" class="headerlink" title="表达式基础"></a>表达式基础</h2><p>概念：左值和右值，上网查。</p><p>如果表达式的求值结果是左值，<code>decltype</code>作用于该表达式（不是变量）得到一个引用类型。例如，对于<code>int *p</code>：</p><ul><li>因为解引用运算符生成左值，所以<code>decltype(*p)</code>的结果是<code>int&amp;</code></li><li>因为取地址运算符生成右值，所以<code>decltype(&amp;p)</code>的结果是<code>int **</code></li></ul><p><strong>如果改变了某个运算对象的值，在表达式的其他地方不要再使用这个运算对象。</strong></p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><code>m%(-n)</code>等于<code>m%n</code>，<code>(-m)%n</code>等于<code>-(m%n)</code>。</p><h2 id="成员访问、条件、位运算符"><a href="#成员访问、条件、位运算符" class="headerlink" title="成员访问、条件、位运算符"></a>成员访问、条件、位运算符</h2><p>成员访问运算符，<code>ptr-&gt;mem</code>等价于<code>(*ptr).mem</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;a string&quot;</span>, *p = &amp;s1;</span><br><span class="line"><span class="keyword">auto</span> n = s1.<span class="built_in">size</span>();</span><br><span class="line">n = (*p).<span class="built_in">size</span>();</span><br><span class="line">n = p-&gt;<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><p>位运算符作用于整数类型。关于符号位如何处理没有明确的规定，所以强烈<strong>建议仅将位运算符用于处理无符号类型</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设char占8位，int占32位</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> bits = <span class="number">0233</span>; <span class="comment">//八进制，二进制为 10011011</span></span><br><span class="line">bits &lt;&lt; <span class="number">8</span>; <span class="comment">//bits提升为int型，然后左移8位</span></span><br></pre></td></tr></table></figure><p>使用位运算符：假设班级中有30个学生，用一个二进制位表示某个学生在测试中是否通过。例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> quizl = <span class="number">0</span>;</span><br><span class="line">quizl |= <span class="number">1UL</span> &lt;&lt; <span class="number">27</span>; <span class="comment">//学生27通过了测试</span></span><br><span class="line">quizl &amp;= ~(<span class="number">1UL</span> &lt;&lt; <span class="number">27</span>); <span class="comment">//学生27没有通过测试</span></span><br><span class="line"><span class="type">bool</span> status = quizl &amp; (<span class="number">1UL</span> &lt;&lt; <span class="number">27</span>); <span class="comment">//查询学生27是否通过了测试</span></span><br></pre></td></tr></table></figure><h2 id="sizeof和逗号运算符"><a href="#sizeof和逗号运算符" class="headerlink" title="sizeof和逗号运算符"></a>sizeof和逗号运算符</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sales_data data, *p;</span><br><span class="line"><span class="built_in">sizeof</span>(Sales_data); <span class="comment">// Sales_data类型的对象所占空间的大小</span></span><br><span class="line"><span class="keyword">sizeof</span> data; <span class="comment">//和上一行结果一样</span></span><br><span class="line"><span class="keyword">sizeof</span> *p;   <span class="comment">//和上一行结果一样</span></span><br><span class="line"><span class="keyword">sizeof</span> p; <span class="comment">//指针所占空间的大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span> data.revenue; <span class="comment">//对象里的成员的大小</span></span><br><span class="line"><span class="keyword">sizeof</span> Sales_data::revenue; <span class="comment">//C++11，和上一行结果一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sizeof运算能够得到整个数组的大小</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span> sz = <span class="built_in">sizeof</span>(ia) / <span class="built_in">sizeof</span>(*ia);</span><br><span class="line"><span class="type">int</span> arr2[sz]; <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>看看就好，一般不用：</p><p><img src="https://bu.dusays.com/2023/01/06/63b7acd5aa3a6.png" alt="17-13.png"></p><p>指针的转换：</p><ul><li><code>0</code>或字面值<code>nullptr</code>能够转换成任意指针类型</li><li>指向任意非常量的指针能够转换成<code>void*</code></li><li>指向任意对象的指针能够转换成<code>const void*</code></li></ul><p>显式转换：强制转换<code>cast-name&lt;type&gt;(expression)</code>，<code>cast-name</code>是<code>static_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>和<code>reinterpret_cast</code>中的一种。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">double</span> slope = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(j) / i;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="type">void</span> *p = &amp;d;</span><br><span class="line"><span class="type">double</span> *dp = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>*&gt;(p); <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p><code>const_cast</code>只能改变运算对象的底层<code>const</code>，对于将常量对象转换成非常量对象的行为，称为『去掉const性质（cast away the const）』。</p><p><code>const_cast</code>可以移除底层<code>const</code>，或是给普通的类型添加底层<code>const</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *cp = &amp;a;</span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(cp);</span><br><span class="line">    *p = <span class="number">4</span>;  <span class="comment">//允许</span></span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------- 对 比 ---------*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *cp = &amp;a;</span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(cp);</span><br><span class="line">    *p = <span class="number">4</span>; <span class="comment">//没有定义</span></span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>static_cast</code>不能去掉const性质。<code>const_cast</code>不能改变类型。</p><p><code>reinterpret_cast</code>通常为运算对象的位模式提供较低层次上的重新解释。</p><p><img src="https://bu.dusays.com/2023/01/07/63b859b8c8e1e.png" alt="17-14.png"></p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p><code>switch-case</code>,case标签必须是整型（小整型、bool型、short、char也都可以）常量表达式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于switch-case里面的初始化的一个例子</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">switch</span>(<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="type">int</span> c; <span class="comment">//不能初始化！</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;before c = &quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">            c = <span class="number">1</span>; <span class="comment">//在case1中声明并定义的c可以在这里使用</span></span><br><span class="line">            <span class="type">int</span> a = <span class="number">1</span>; <span class="comment">//用大括号括起来，则可以初始化</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;after c = &quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><p>范围<code>for</code>语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//范围变量必须是引用类型，这样才能对元素执行写操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;r : v)&#123;</span><br><span class="line">    r *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------- 对 比 ---------*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg=v.<span class="built_in">begin</span>(),end=v.<span class="built_in">end</span>(); beg!=end; ++beg)&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;r = *beg; <span class="comment">//r是引用类型才能对元素执行写操作</span></span><br><span class="line">    r *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><p><code>goto</code>语句：无条件跳转到同一函数内的另一条语句。一般情况下不要使用<code>goto</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">    <span class="type">int</span> ix = <span class="number">10</span>; <span class="comment">//错误！goto语句绕过了一个带初始化的变量定义</span></span><br><span class="line">end:</span><br><span class="line">    <span class="comment">//错误！此处的代码需要使用ix</span></span><br><span class="line">    ix = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向后跳过一个初始化的变量定义是合法的</span></span><br><span class="line">begin:</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">get_size</span>();</span><br><span class="line">    <span class="keyword">if</span>(sz&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">goto</span> begin; <span class="comment">//goto语句执行后，将销毁sz</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>运行时的反常行为，例如读取或写入数据时失去数据库链接。</p><p><code>throw</code>表达式：异常检测部分使用<code>throw</code>表达式来表示它遇到了无法解决的问题。</p><p><code>runtime_error</code>是标准库异常类型的一种，定义在<code>stdexcept</code>头文件。它抛出一个异常，终止当前的函数，并把控制权交给处理异常的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于简单的小程序</span></span><br><span class="line">Sales_item item1,item2;</span><br><span class="line">cin &gt;&gt; item1 &gt;&gt; item2;</span><br><span class="line"><span class="keyword">if</span>(item1.<span class="built_in">isbn</span>() == item2.<span class="built_in">isbn</span>())&#123;</span><br><span class="line">    cout &lt;&lt; item1+item2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//表示成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Data must refer to same ISBN&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------- 对 比 -----------------*/</span></span><br><span class="line"><span class="keyword">if</span> (item1.<span class="built_in">isbn</span>() != item2.<span class="built_in">isbn</span>())&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;Data must refer to same ISBN&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果程序执行到这里，表示两个ISBN是相同的</span></span><br><span class="line">cout &lt;&lt; item1+item2 &lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><code>try</code>语句块：异常处理部分使用<code>try</code>语句块处理异常，可以有一个或多个<code>catch</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(cin&gt;&gt;item1&gt;&gt;item2)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//执行添加两个Sales_item对象的代码</span></span><br><span class="line">        <span class="comment">//如果添加失败，代码抛出一个runtime_error异常</span></span><br><span class="line">    &#125;<span class="built_in">catch</span>(runtime_error err)&#123;</span><br><span class="line">        <span class="comment">//提醒用户两个ISBN必须一致，询问是否重新输入</span></span><br><span class="line">        cout &lt;&lt; err.<span class="built_in">what</span>() <span class="comment">//返回初始化对象时填入的参数（const char*）</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;\nTry Again? Enter y or n&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span> (!cin || c==<span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>; <span class="comment">//跳出while</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一套异常类：<code>throw</code>表达式和相关的<code>catch</code>子句之间传递异常的具体信息。这些异常分别定义在4个头文件中：</p><ul><li><code>exception</code>头文件：最通用的异常类<code>exception</code>，只报告异常的发生，不提供额外信息</li><li><code>stdexcept</code>头文件：定义了几种常用的异常类</li><li><code>new</code>头文件：<code>bad_alloc</code>异常类</li><li><code>type_info</code>头文件：<code>bad_cast</code>异常类</li></ul><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><p>局部对象：</p><ul><li>自动对象：生命周期从变量声明开始，到函数块末尾结束</li><li>局部静态对象：生命周期从变量声明开始，直到程序结束才销毁</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">count_calls</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a; <span class="comment">//自动对象</span></span><br><span class="line">    <span class="type">static</span> <span class="type">size_t</span> ctr = <span class="number">0</span>; <span class="comment">//局部静态对象</span></span><br><span class="line">    <span class="keyword">return</span> ++ctr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>指针型变量在函数体中需要被改变的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> *&amp;x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维数组作为参数，除了将数组名传入函数外，为了规范化，还要将数组的大小作为参数传入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span> <span class="params">(<span class="type">int</span> att[] , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组名是首元素的地址，因此还可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span> <span class="params">(<span class="type">int</span> *att , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">   <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是哪种定义，使用函数时都是将数组名作为参数，比如：<code>sum_arr (Ss , 66);</code>。在函数内部对传入的数组进行修改，该数组本身的值也会改变。</p><p>若要防止在函数中修改数组，可以使用<code>const</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> att[] , <span class="type">int</span> size)</span></span></span><br></pre></td></tr></table></figure><p>前面将数组的首元素的地址和长度传入，这样就可以处理所有元素。C++中引入了新的方式，即数组区间：传入数组的首元素地址和末尾地址，参数就是【数组名，数组名+长度】，这样也可以处理所有元素。进一步，也可以传入任意区间。例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum_arr</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *begin,<span class="type">const</span> <span class="type">int</span> *end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *pt;</span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(pt = begin ; pt != end ; pt++)</span><br><span class="line">    &#123;</span><br><span class="line">        total = total + *pt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[Size] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125; ;</span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">sum_arr</span>(A,A+<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>二维数组作为参数，与一维类似，有两种声明方式，但有所区别：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> A[ ][<span class="number">4</span>] , <span class="type">int</span> size)</span> <span class="comment">//不能写成 int sum(int A[ ][ ] , int size)，必须将列数写进去，size的值是行数</span></span></span><br><span class="line"><span class="function"><span class="comment">//下面一种写法看看就好：</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> (*A)[<span class="number">4</span>] , <span class="type">int</span> size)</span> <span class="comment">//同样，必须将列数写进去，size的值是行数，而且必须要将*和数组名括起来。</span></span></span><br></pre></td></tr></table></figure><p>至于使用方法都是一样，<code>sum(A，4);</code>。第二维长度有较严格的要求：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x[][<span class="number">5</span>] , <span class="type">int</span> mysize)</span></span>&#123;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">f</span>(a,<span class="number">10</span>); <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">f</span>(b,<span class="number">10</span>); <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><p>如果函数无需改变引用形参的值，最好将其声明为常量引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isShorter</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>()&lt;s2.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++允许将变量定义为数组的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确：形参是数组的引用，维度是类型的一部分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> (&amp;arr)[<span class="number">10</span>])</span></span>&#123; <span class="comment">// ()不能少</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> elem : arr)&#123;</span><br><span class="line">        cout&lt;&lt;elem&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>处理命令行选项。有时需要给<code>main</code>传实参，一种常见的情况是用户设置一组选项来确定函数所要执行的操作。例如，假定<code>main</code>函数位于可执行文件<code>prog</code>内，可以向程序传递下面的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prog -d -o ofile data0</span><br></pre></td></tr></table></figure><p>这些命令行选项通过两个（可选的）形参传递给<code>main</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;<span class="comment">/* do something */</span>&#125;</span><br><span class="line"><span class="comment">/* 第二个形参argv是一个数组，它的元素是指向C风格字符串的指</span></span><br><span class="line"><span class="comment">针；第一个形参argc表示数组中字符串的数量。因为第二个形参是</span></span><br><span class="line"><span class="comment">数组，所以main函数也可以定义成如下的方式： */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;<span class="comment">/* do something */</span>&#125;</span><br><span class="line"><span class="comment">//其中argv指向char*</span></span><br></pre></td></tr></table></figure><p>以上面提供的命令行为例，<code>argc</code>应该等于5，<code>argv</code>应该包含如下的C风格字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;prog&quot;</span>; <span class="comment">//或者argv[0]也可以指向一个空字符串</span></span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">&quot;-d&quot;</span>;</span><br><span class="line">argv[<span class="number">2</span>] = <span class="string">&quot;-o&quot;</span>;</span><br><span class="line">argv[<span class="number">3</span>] = <span class="string">&quot;ofile&quot;</span>;</span><br><span class="line">argv[<span class="number">4</span>] = <span class="string">&quot;data0&quot;</span>;</span><br><span class="line">argv[<span class="number">5</span>] = <span class="number">0</span>; <span class="comment">//最后一个指针之后的元素值保证为 0</span></span><br></pre></td></tr></table></figure><p>含有可变形参的函数：参数个数不固定。如果所有的实参类型相同，可以传递一个名为<code>initializer_list</code>的标准库类型。</p><p><img src="https://bu.dusays.com/2023/01/09/63bbb301623b0.png" alt="17-15.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和vector不一样，initializer_list对象中的元素永远是常量值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_msg</span><span class="params">(initializer_list&lt;string&gt; il)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> beg=il.<span class="built_in">begin</span>(); beg!=il.<span class="built_in">end</span>(); ++beg)&#123;</span><br><span class="line">        cout&lt;&lt;*beg&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//excepted和actual是string对象</span></span><br><span class="line"><span class="keyword">if</span>(excepted!=actual)</span><br><span class="line">    <span class="built_in">error_msg</span>(&#123;<span class="string">&quot;functionX&quot;</span>,excepted,actual&#125;);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">error_msg</span>(&#123;<span class="string">&quot;functionX&quot;</span>,<span class="string">&quot;okey&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>省略符形参：上网查。</p><h2 id="返回类型和return语句"><a href="#返回类型和return语句" class="headerlink" title="返回类型和return语句"></a>返回类型和return语句</h2><p><strong>不要</strong>返回局部对象的引用或指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//严重错误：这个函数试图返回局部对象的引用</span></span><br><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">manip</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string ret;</span><br><span class="line">    <span class="comment">//以某种方式改变一下ret</span></span><br><span class="line">    <span class="keyword">if</span>(!ret.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> ret;     <span class="comment">//错误！返回局部对象的引用</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Empty&quot;</span>; <span class="comment">//错误！&quot;Empty&quot;是一个局部临时变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表初始化返回值（C++11）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//expected和actual是string对象</span></span><br><span class="line">    <span class="keyword">if</span>(expected.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;; <span class="comment">//返回一个空vector对象</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(expected==actual)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;functionX&quot;</span>,<span class="string">&quot;okay&quot;</span>&#125;; <span class="comment">//返回列表初始化的vector对象</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;functionX&quot;</span>,expected,actual&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>的返回值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一种写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(some_failure)</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE; <span class="comment">//定义在cstdlib头文件中</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> EXIT_SUCCESS; <span class="comment">//同上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/11/63becdd957edf.png" alt="17-16.png"></p><p><img src="https://bu.dusays.com/2023/01/09/63bc1b6ef129c.png" alt="17-17.png"></p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数重载：函数名称相同但形参列表不同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Account&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">lookup</span><span class="params">(<span class="type">const</span> Account&amp;)</span></span>; <span class="comment">//错误！有第一行的情况下不能这么写</span></span><br><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Phone&amp;)</span></span>;</span><br><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Name&amp;)</span></span>;</span><br><span class="line">Account acct;</span><br><span class="line">Phone phone;</span><br><span class="line">Record r1 = <span class="built_in">lookup</span>(acct);</span><br><span class="line">Record r2 = <span class="built_in">lookup</span>(phone);</span><br></pre></td></tr></table></figure><p><code>const_cast</code>和重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较两个string对象的长度，返回较短的那个引用</span></span><br><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">shorterString</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>()&lt;=s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string &amp;<span class="title">shorterString</span><span class="params">(string &amp;s1, string &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;r = <span class="built_in">shorterString</span>(<span class="built_in">const_cast</span>&lt;<span class="type">const</span> string&amp;&gt;(s1),</span><br><span class="line">                            <span class="built_in">const_cast</span>&lt;<span class="type">const</span> string&amp;&gt;(s2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_cast</span>&lt;string&amp;&gt;(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊用途语言特性"><a href="#特殊用途语言特性" class="headerlink" title="特殊用途语言特性"></a>特殊用途语言特性</h2><p>默认实参：一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string::size_type sz;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht=<span class="number">24</span>, sz wid=<span class="number">80</span>, <span class="type">char</span> backgrnd=<span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">string mwindow;</span><br><span class="line">mwindow = <span class="built_in">screen</span>(); <span class="comment">//等价于screen(24,80,&#x27; &#x27;)</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="number">66</span>); <span class="comment">//等价于screen(66,80,&#x27; &#x27;)</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="number">66</span>,<span class="number">256</span>); <span class="comment">//screen(66,256,&#x27; &#x27;)</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="number">66</span>,<span class="number">256</span>,<span class="string">&#x27;#&#x27;</span>); <span class="comment">//screen(66,256,&#x27;#&#x27;)</span></span><br><span class="line"></span><br><span class="line">mwindow = <span class="built_in">screen</span>(,,<span class="string">&#x27;?&#x27;</span>); <span class="comment">//错误！只能省略尾部的实参</span></span><br><span class="line">mwindow = <span class="built_in">screen</span>(<span class="string">&#x27;?&#x27;</span>); <span class="comment">//会发生隐式转换</span></span><br></pre></td></tr></table></figure><p><code>constexpr</code>函数：能用于常量表达式的函数，函数的返回类型及所有的形参都是字面值类型。</p><ul><li>函数体中必须有且仅有一条<code>return</code>语句</li><li><code>constexpr</code>函数被隐式地指定为内联函数</li><li><code>constexpr</code>函数并不要求返回常量表达式</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">new_sz</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">42</span>;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> foo = <span class="built_in">new_sz</span>(); <span class="comment">//正确，foo是一个常量表达式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">size_t</span> <span class="title">scale</span><span class="params">(<span class="type">size_t</span> cnt)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">new_sz</span>()*cnt;&#125;</span><br><span class="line"><span class="type">int</span> arr[<span class="built_in">scale</span>(<span class="number">2</span>)]; <span class="comment">//正确，scale(2)是常量表达式</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> a2[<span class="built_in">scale</span>(i)]; <span class="comment">//错误！scale(i)不是常量表达式</span></span><br></pre></td></tr></table></figure><p>调试帮助：只在开发过程中使用的代码，发布时屏蔽掉。</p><p><code>assert</code>预处理宏，位于<code>cassert</code>头文件中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果表达式为假，assert输出信息并终止程序的执行</span></span><br><span class="line"><span class="comment">//如果表达式为真，assert什么也不做</span></span><br><span class="line"><span class="built_in">assert</span>(word.<span class="built_in">size</span>()&gt;threshold);</span><br></pre></td></tr></table></figure><p><code>NDEBUG</code>预处理变量：<code>assert</code>的行为依赖<code>NDEBUG</code>预处理变量的状态，如果定义了<code>NDEBUG</code>，则<code>assert</code>无效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NDEBUG <span class="comment">//关闭调试状态，必须在cassert头文件上面</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br></pre></td></tr></table></figure><p>除了用于<code>assert</code>外，也可以使用<code>NDEBUG</code>编写自己的调试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ia[], <span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="comment">//__func__是编译器定义的一个局部静态变量，用于存放函数的名字</span></span><br><span class="line">    cerr &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;: array size is &quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/11/63bec9792c01a.png" alt="17-18.png"></p><h2 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a>函数匹配</h2><p>这一节看看就好，感觉用处不太。</p><p><img src="https://bu.dusays.com/2023/01/11/63becd3f25693.png" alt="17-19.png"></p><p>例子如下：</p><p><img src="https://bu.dusays.com/2023/01/11/63becd3f51959.png" alt="17-20.png"></p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针，指针指向的是函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">lengthCompare</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="built_in">bool</span> (*pf)(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;); <span class="comment">//括号不能少</span></span><br><span class="line"></span><br><span class="line">pf = lengthCompare;</span><br><span class="line">pf = &amp;lengthCompare; <span class="comment">//与上一行等价，取地址符是可选的</span></span><br><span class="line"><span class="comment">//可以直接使用指向函数的指针调用该函数，无需提前解引用</span></span><br><span class="line"><span class="comment">/*------------ 以下三行语句是等价的 ------------*/</span></span><br><span class="line"><span class="type">bool</span> b1 = <span class="built_in">pf</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b2 = (*pf)(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b3 = <span class="built_in">lengthCompare</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="comment">/*--------------------------------------------*/</span></span><br></pre></td></tr></table></figure><p>在指向不同函数类型的指针间不存在转换规则（<strong>必须很精准的匹配才可以</strong>）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和上个例子连起来看</span></span><br><span class="line"><span class="function">string::size_type <span class="title">sumLength</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cstringCompare</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span></span>;</span><br><span class="line">pf = <span class="number">0</span>; <span class="comment">//正确，pf不指向任何函数</span></span><br><span class="line">pf = sumLength; <span class="comment">//错误！返回类型不匹配</span></span><br><span class="line">pf = cstringCompare; <span class="comment">//错误！形参类型不匹配</span></span><br><span class="line">pf = lengthCompare; <span class="comment">//正确，精确匹配</span></span><br></pre></td></tr></table></figure><p>函数指针形参：</p><p>不能定义函数类型的形参，但形参可以是指向函数的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三个形参是函数类型，它会自动地转换成指向函数的指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="type">bool</span> pf(<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;))</span></span>;</span><br><span class="line"><span class="comment">//等价的声明：显式地将形参定义成指向函数的指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="type">bool</span> (*pf)(<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接把函数作为实参使用，会自动转换成指针</span></span><br><span class="line"><span class="built_in">useBigger</span>(s1,s2,lengthCompare);</span><br></pre></td></tr></table></figure><p>通过使用类型别名，简化使用函数指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Func和Func2是函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="type">bool</span> <span class="title">Func</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(lengthCompare)</span> Func2</span>; <span class="comment">//等价的类型</span></span><br><span class="line"><span class="comment">//FuncP和FuncP2是指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(*FuncP)</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(lengthCompare)</span> *FuncP2</span>; <span class="comment">//等价的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//useBigger的等价声明，其中使用了类型别名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;, Func)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useBigger</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">const</span> string&amp;, FuncP2)</span></span>;</span><br></pre></td></tr></table></figure><p>返回指向函数的指针：虽然不能返回一个函数，但是可以返回指向函数类型的指针。<strong>必须把返回类型写成指针形式，编译器不会自动处理。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> F = <span class="built_in">int</span>(<span class="type">int</span>*, <span class="type">int</span>); <span class="comment">//F是函数类型，不是指针</span></span><br><span class="line"><span class="keyword">using</span> PF = <span class="built_in">int</span>(*)(<span class="type">int</span>*, <span class="type">int</span>); <span class="comment">//PF是指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="function">PF <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">//正确，PF是指向函数的指针，f1返回指向函数的指针</span></span><br><span class="line"><span class="function">F <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span></span>;  <span class="comment">//错误！F是函数类型，f1不能返回一个函数</span></span><br><span class="line"><span class="function">F *<span class="title">f1</span><span class="params">(<span class="type">int</span>)</span></span>; <span class="comment">//正确，显式地指定返回类型是指向函数的指针</span></span><br></pre></td></tr></table></figure><p>也可以用下面的形式直接声明f1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*<span class="built_in">f1</span>(<span class="type">int</span>)) (<span class="type">int</span>*, <span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>从里往外读：<code>f1(int)</code>是一个函数，这个函数返回的是一个指针<code>(*f1(int))</code>，这个指针指向的是一个函数 <code>(int*, int)</code>，这个函数<code>(int*, int)</code>返回的是int型。</p><p>使用尾置返回类型的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> -&gt; <span class="title">int</span> <span class="params">(*)</span><span class="params">(<span class="type">int</span>*, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/12/63bfa6a382fb2.png" alt="17-21.png"></p><h2 id="定义抽象数据类型"><a href="#定义抽象数据类型" class="headerlink" title="定义抽象数据类型"></a>定义抽象数据类型</h2><p>考虑如下的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Sales_data的非成员接口函数</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>成员都必须在类的内部<strong>声明</strong>，但成员函数体可以<strong>定义</strong>在类内也可以在类外。</p><p>常量成员函数：类的成员函数后面加<code>const</code>，表明这个函数不会修改这个类对象的数据成员。</p><p>两种效果相同的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Sales_data内：</span></span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line"><span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo;&#125; <span class="comment">//尽管没有必要</span></span><br></pre></td></tr></table></figure><p>关于<code>this</code>的详细解释参考《C++ primer》。</p><p>编译器分两步处理类：首先编译成员的声明，然后才轮到成员函数体。因此成员体可以随意使用类中的其他成员而无需在意这些成员出现的次序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类的外部定义成员函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(units_sold)</span><br><span class="line">        <span class="keyword">return</span> revenue/units_sold;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个返回<code>this</code>对象的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟复合运算符+=，为了和+=一致，返回为左值，因此需要返回引用</span></span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="type">const</span> Sales_data &amp;rhs)</span></span>&#123; <span class="comment">//right hand side</span></span><br><span class="line">    units_sold += rhs.units_sold; <span class="comment">//把rhs的成员加到this对象的成员上</span></span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回调用该函数的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义类相关的非成员函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果非成员函数是类接口的组成部分，则应该与类在同一个头文件中声明</span></span><br><span class="line"><span class="comment">//IO对象不能拷贝，只能引用。 需要修改IO对象，不能用底层const</span></span><br><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream &amp;is, Sales_data &amp;item)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.uints_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">       &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.<span class="built_in">combine</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数：</p><ul><li>构造函数与类名同名，没有返回值，用来初始化类对象的数据成员。</li><li>类可以包括多个构造函数。</li><li>构造函数不能被声明为<code>const</code>的<ul><li>当我们创建类的一个<code>const</code>对象时，直到构造函数完成初始化，对象才能真正得到“常量”属性</li></ul></li></ul><p><strong>合成的默认构造函数（synthesized default constructor）</strong>：如果我们的类没有显式地定义构造函数，编译器会为我们隐式地定义一个默认构造函数。对于大多数类来说，这个『合成的默认构造函数』将按照如下规则初始化类的数据成员：</p><ul><li>若存在类内的初始值，用它来初始化成员。</li><li>否则，默认初始化该成员。</li></ul><p><strong>只有当类没有声明任何构造函数时，编译器才会自动生成默认构造函数。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这段代码慢慢读不难懂，详细解释可以参阅《C++ primer》</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="comment">//新增的构造函数</span></span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s): <span class="built_in">bookNo</span>(s) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;);</span><br><span class="line">    <span class="comment">//之前已有的其他成员</span></span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//...之前的代码略</span></span><br><span class="line"><span class="comment">//在类的外部定义构造函数：</span></span><br><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream &amp;is)&#123;</span><br><span class="line">    <span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝、赋值和析构：</p><p>管理动态内存的类通常不能依赖于编译器合成的版本。使用<code>vector</code>或<code>string</code>除外。</p><h2 id="访问控制与封装"><a href="#访问控制与封装" class="headerlink" title="访问控制与封装"></a>访问控制与封装</h2><p>使用访问说明符加强类的封装性：</p><ul><li><code>public</code>：类的接口，在整个程序内可以被访问</li><li><code>private</code>：封装（即隐藏）类的实现细节</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class和struct定义类唯一的区别就是默认的访问权限不同</span></span><br><span class="line"><span class="comment">//struct默认public， class默认private</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s): <span class="built_in">bookNo</span>(s) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp;);</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或函数成为它的<strong>友元</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="comment">// 为Sales_data的非成员函数所做的友元声明</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="comment">// 其他内容与之前一致</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s): <span class="built_in">bookNo</span>(s) &#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream&amp;);</span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Sales_data接口的非成员组成部分的声明</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::istream&amp; <span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>友元声明只能出现在类定义的内部，但具体位置不限。友元不是类的成员，不受访问控制级别的约束。友元的声明仅指定访问的权限，不是通常意义上的函数声明。因此若希望类的用户能调用某个友元函数，最好在友元声明之外再对函数进行一次声明（有些编译器必须声明，有些可以省略。出于移植性的考虑，最好声明一下）。</p><h2 id="类的其他特性"><a href="#类的其他特性" class="headerlink" title="类的其他特性"></a>类的其他特性</h2><p>定义一个类型成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Screen表示显示器中的一个窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="comment">//等价于 using pos = std::string::size_type;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    std::string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面这样做的原因是，Screen的用户不需要知道Screen使用了一个string对象来存放它的数据，pos隐藏了细节。</p><p>成员函数也支持重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Screen</span>(pos ht, pos wd, <span class="type">char</span> c): <span class="built_in">height</span>(ht),<span class="built_in">width</span>(wd),<span class="built_in">contents</span>(ht*wd,c)&#123;&#125;</span><br><span class="line">    <span class="comment">// string初始化的一种方法：使用单个字符初始化。</span></span><br><span class="line">    <span class="comment">// string s(10,&#x27;a&#x27;); //直接初始化，s的内容是aaaaaaaaaa</span></span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> contents[cursor];&#125; <span class="comment">// 隐式内联</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">get</span><span class="params">(pos ht, pos wd)</span> <span class="type">const</span></span>; <span class="comment">// 显式内联</span></span><br><span class="line">    <span class="function">Screen&amp; <span class="title">move</span><span class="params">(pos r, pos c)</span></span>;       <span class="comment">// 能在之后被设为内联</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    std::string contents;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">Screen::move</span><span class="params">(pos r, pos c)</span></span>&#123;</span><br><span class="line">    pos row = r*width;</span><br><span class="line">    cursor = row+c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//以左值的形式返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">Screen::get</span><span class="params">(pos r, pos c)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    pos row = r*width;</span><br><span class="line">    <span class="keyword">return</span> contents[row+c];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可变数据成员（mutable data member）：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">some_member</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">size_t</span> access_ctr; <span class="comment">//即使在一个const对象内也能被修改</span></span><br><span class="line">    <span class="comment">//其他成员与之前的版本一致，略</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Screen::some_member</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    ++access_ctr; <span class="comment">//保存一个计数值，用于记录成员函数被调用的次数</span></span><br><span class="line">    <span class="comment">//该成员需要完成的其他工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类数据成员的初始值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 这个窗口管理类，管理一组Screen</span></span><br><span class="line">    std::vector&lt;Screen&gt; screens&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>返回<code>*this</code>的成员函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Screen&amp; <span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line">    <span class="function">Screen&amp; <span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 其他成员和之前的版本一致</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">Screen::set</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    contents[cursor] = c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">Screen::set</span><span class="params">(pos r, pos col, <span class="type">char</span> ch)</span></span>&#123;</span><br><span class="line">    contents[r*width+col] = ch;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把光标移动到一个指定的位置，然后设置该位置的字符值</span></span><br><span class="line">    myScreen.<span class="built_in">move</span>(<span class="number">4</span>,<span class="number">0</span>).<span class="built_in">set</span>(<span class="string">&#x27;#&#x27;</span>);      <span class="comment">// 神之一手</span></span><br></pre></td></tr></table></figure><p>从<code>const</code>成员函数返回<code>*this</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//根据对象是否是const重载了display函数</span></span><br><span class="line">    <span class="function">Screen&amp; <span class="title">display</span><span class="params">(std::ostream &amp;os)</span></span>&#123;</span><br><span class="line">        <span class="built_in">do_display</span>(os);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> Screen&amp; <span class="title">display</span><span class="params">(std::ostream &amp;os)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="built_in">do_display</span>(os);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">do_display</span><span class="params">(std::ostream &amp;os)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        os &lt;&lt; contents;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他成员与之前的一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类的声明：我们可以仅声明类而暂时不定义它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>;   <span class="comment">// Screen类的声明</span></span><br></pre></td></tr></table></figure><p>这种声明也叫<strong>前向声明（forward declaration）</strong>，对于类型Screen来说，它在声明之后定义之前是一个<strong>不完全类型（incomplete type）</strong>，不完全类型只能在有限的情况下使用：</p><ul><li>可以定义指向这种类型的指针或引用</li><li>可以声明（但不能定义）以不完全类型作为参数或返回类型的函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Link_screen</span>&#123;</span><br><span class="line">    Link_screen *next; <span class="comment">//正确</span></span><br><span class="line">    Link_screen *prev; <span class="comment">//正确</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类之间的友元关系：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line">    <span class="comment">// Window_mgr的成员可以访问Screen类的私有部分</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Window_mgr</span>;</span><br><span class="line">    <span class="comment">// Screen类的剩余部分，略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 如果一个类指定了友元类，则友元类的成员函</span></span><br><span class="line"><span class="comment">数可以访问此类包括非公有成员在内的所有成员。*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 窗口中每个屏幕的编号</span></span><br><span class="line">    <span class="keyword">using</span> ScreenIndex = std::vector&lt;Screen&gt;::size_type;</span><br><span class="line">    <span class="comment">// 按编号将指定的Screen重置为空白</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Screen&gt; screens&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// s是一个Screen的引用，指向我们想清空的那个屏幕</span></span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = <span class="built_in">string</span>(s.height*s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>友元关系不存在传递性。</strong></p><p>令成员函数作为友元：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line">    <span class="comment">// Window_mgr::clear必须在Screen类之前被声明</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line">    <span class="comment">// Screen类的剩余部分，略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*-------------- 顺 序 ---------------*/</span></span><br><span class="line"><span class="comment">//1、定义Window_mgr类，声明clear函数，但不能定义它</span></span><br><span class="line"><span class="comment">//2、定义Screen，包括对于clear的友元声明</span></span><br><span class="line"><span class="comment">//3、定义clear，此时才能使用Screen的成员</span></span><br></pre></td></tr></table></figure><p>友元声明和作用域：参考《C++ Primer》</p><h2 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Screen::pos ht=<span class="number">24</span>, wd=<span class="number">80</span>; <span class="comment">//使用Screen类定义的pos类型</span></span><br><span class="line"><span class="function">Screen <span class="title">scr</span><span class="params">(ht, wd, <span class="string">&#x27; &#x27;</span>)</span></span>; <span class="comment">//创建了一个Screen对象并初始化</span></span><br><span class="line">Screen *p = &amp;scr;</span><br><span class="line"><span class="type">char</span> c = scr.<span class="built_in">get</span>(); <span class="comment">//访问scr对象的get成员</span></span><br><span class="line">c = p-&gt;<span class="built_in">get</span>(); <span class="comment">//访问所指对象的get成员</span></span><br></pre></td></tr></table></figure><p>对比以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> Window_mgr::clear<span class="comment">/*一旦遇到类名*/</span>(ScreenIndex i)&#123;</span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = <span class="built_in">string</span>(s.height*s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;   <span class="comment">//直到定义的结束，都是类的作用域之内</span></span><br><span class="line"><span class="comment">/*------------------ 对 比 ---------------------*/</span></span><br><span class="line"><span class="function">Window_mgr::ScreenIndex <span class="title">Window_mgr::addScreen</span><span class="params">(<span class="type">const</span> Screen &amp;s)</span></span>&#123;</span><br><span class="line">    screens.<span class="built_in">push_back</span>(s);</span><br><span class="line">    <span class="keyword">return</span> screens.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">&#125;   <span class="comment">//首先处理返回类型，之后才进入Window_mgr的作用域</span></span><br></pre></td></tr></table></figure><p>成员定义中的名字查找。以下代码仅作原理展示，不能作为作为写代码的满分参考（：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dummy_fcn</span><span class="params">(pos height)</span></span>&#123;</span><br><span class="line">        cursor = width*height;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//尽管外层的对象被隐藏了，但我们仍可以用作用域运算符访问它</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Screen::dummy_fcn</span><span class="params">(pos height)</span></span>&#123;</span><br><span class="line">    cursor = width * <span class="keyword">this</span>-&gt;height; <span class="comment">//成员height</span></span><br><span class="line">    cursor = width * Screen::height; <span class="comment">//成员height</span></span><br><span class="line">    cursor = width * ::height; <span class="comment">//全局height</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数再探"><a href="#构造函数再探" class="headerlink" title="构造函数再探"></a>构造函数再探</h2><p>有时候初始化列表必不可少。如果成员是<code>const</code>、引用，或者属于某种未提供默认构造函数的类类型，必须通过构造函数初始列表提供初始值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConstRef</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConstRef</span>(<span class="type">int</span> ii);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ci;</span><br><span class="line">    <span class="type">int</span> &amp;ri;</span><br><span class="line">&#125;;</span><br><span class="line">ConstRef::<span class="built_in">ConstRef</span>(<span class="type">int</span> ii)&#123;<span class="comment">//赋值：</span></span><br><span class="line">    i = ii;  <span class="comment">//正确</span></span><br><span class="line">    ci = ii; <span class="comment">//错误！</span></span><br><span class="line">    ri = i;  <span class="comment">//错误！ri没有初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确做法，显式地初始化引用和<code>const</code>成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConstRef::<span class="built_in">ConstRef</span>(<span class="type">int</span> ii):<span class="built_in">i</span>(ii), <span class="built_in">ci</span>(ii), <span class="built_in">ri</span>(i)&#123;&#125;</span><br></pre></td></tr></table></figure><p>成员初始化的顺序，构造函数初始值列表中的顺序不会影响实际的初始化顺序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>(<span class="type">int</span> val):<span class="built_in">j</span>(val), <span class="built_in">i</span>(j)&#123;&#125; <span class="comment">//未定义的：i在j之前被初始化</span></span><br><span class="line">    <span class="comment">//尽量使用参数作为初始化值</span></span><br><span class="line">    <span class="comment">// X(int val):j(val), i(val)&#123;&#125;</span></span><br><span class="line">    <span class="comment">//这样就与i和j的初始化顺序无关了</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认实参和构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//定义默认构造函数，令其与只接受一个string实参的构造函数功能相同</span></span><br><span class="line">    <span class="built_in">Sales_data</span>(std::string s = <span class="string">&quot;&quot;</span>):<span class="built_in">bookNo</span>(s)&#123;&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>委托构造函数（把自己的一些或全部职责给了其他构造函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//非委托构造函数使用对应的实参初始化成员</span></span><br><span class="line">    <span class="built_in">Sales_data</span>(std::string s, <span class="type">unsigned</span> cnt, <span class="type">double</span> price):</span><br><span class="line">        <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(cnt), <span class="built_in">revenue</span>(cnt*price)&#123;&#125;</span><br><span class="line">    <span class="comment">//其余构造函数委托给另一个构造函数</span></span><br><span class="line">    <span class="built_in">Sales_data</span>():<span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::string s):<span class="built_in">Sales_data</span>(s,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;is):<span class="built_in">Sales_data</span>()&#123;<span class="built_in">read</span>(is,*<span class="keyword">this</span>);&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当一个构造函数委托给另一个构造函数时，受委托的构造函数的初始值列表和函数体被依次执行。在<code>Sales_data</code>类中，受委托的构造函数体恰好是空的。假如函数体包含有代码的话，将先执行这些代码，然后控制权才会交还给委托者的函数体。</p><p>默认构造函数的作用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoDefault</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NoDefault</span>(<span class="type">const</span> std::string&amp;);</span><br><span class="line">    <span class="comment">//还有其他成员，但没有其他构造函数了</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    NoDefault my_mem;</span><br><span class="line">&#125;;</span><br><span class="line">A a; <span class="comment">//错误！不能为A合成构造函数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="built_in">B</span>()&#123;&#125; <span class="comment">//错误！b_member没有初始值</span></span><br><span class="line">    NoDefault b_member;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在实际中，如果定义了其他构造函数，最好也提供一个默认构造函数。</strong></p><p>隐式的类类型转换:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string null_book = <span class="string">&quot;9-999-99999-9&quot;</span>;</span><br><span class="line"><span class="comment">//构造一个临时的Sales_data对象</span></span><br><span class="line"><span class="comment">//该对象的units_sold和revenue等于0，bookNo等于null_book</span></span><br><span class="line">item.<span class="built_in">combine</span>(null_book);</span><br></pre></td></tr></table></figure><p>只允许一步类类型转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item.<span class="built_in">combine</span>(<span class="string">&quot;9-999-99999-9&quot;</span>);</span><br><span class="line"><span class="comment">//错误！这里试图经历两种转换：</span></span><br><span class="line"><span class="comment">//1. 把“9-999-99999-9”转换成string</span></span><br><span class="line"><span class="comment">//2. 再把这个（临时的）string转换成Sales_data</span></span><br></pre></td></tr></table></figure><p>下面这三种写法是允许的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">string</span>(<span class="string">&quot;9-999-99999-9&quot;</span>));</span><br><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">Sales_data</span>(<span class="string">&quot;9-999-99999-9&quot;</span>)); <span class="comment">//隐式地转换成string，再显式地转换成Sales_data</span></span><br><span class="line">item.<span class="built_in">combine</span>(cin);</span><br></pre></td></tr></table></figure><p>抑制构造函数定义的隐式转换：explicit（清楚、明白的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>()=<span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p):</span><br><span class="line">        <span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(n), <span class="built_in">revenue</span>(p*n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span>:bookNo(s)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(std::istream&amp;)</span></span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">item.<span class="built_in">combine</span>(null_book); <span class="comment">//错误！string构造函数是explicit的</span></span><br><span class="line">item.<span class="built_in">combine</span>(cin);       <span class="comment">//错误！istream构造函数是explicit的</span></span><br></pre></td></tr></table></figure><p><code>explicit</code>关键字只允许出现在类内的构造函数声明处：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误！</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data::Sales_data</span><span class="params">(istream&amp; is)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>explicit</code>构造函数只能用于直接初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">item1</span><span class="params">(null_book)</span></span>; <span class="comment">//正确，直接初始化</span></span><br><span class="line">Sales_data item2 = null_book;</span><br><span class="line"><span class="comment">//错误！不能将explicit构造函数用于拷贝形式的初始化过程</span></span><br></pre></td></tr></table></figure><p>为转换显式地使用构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确，实参是一个显式构造的Sales_data对象</span></span><br><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">Sales_data</span>(null_book));</span><br><span class="line"><span class="comment">//正确，static_cast可以使用explicit的构造函数</span></span><br><span class="line">item.<span class="built_in">combine</span>(<span class="built_in">static_cast</span>&lt;Sales_data&gt;(cin));</span><br></pre></td></tr></table></figure><p>聚合类 <strong>（aggregate class）</strong>：</p><ul><li>所有成员都是<code>public</code>的</li><li>没有定义任何构造函数</li><li>没有类内初始值</li><li>没有基类，也没有<code>virtual</code>函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="type">int</span> ival;</span><br><span class="line">    string s;</span><br><span class="line">&#125;;</span><br><span class="line">Data val1 = &#123;<span class="number">0</span>, <span class="string">&quot;Anna&quot;</span>&#125;; <span class="comment">//可以使用初始值列表</span></span><br></pre></td></tr></table></figure><p>字面值常量类：（或称“字面值类”）</p><ul><li>数据成员都必须是字面值类型</li><li>类必须至少含有一个<code>constexpr</code>构造函数</li><li>如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的<code>constexpr</code>构造函数</li><li>类必须使用析构函数的默认定义，该成员负责销毁类的对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个例子，其具体作用暂时不必关心</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Debug</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span><span class="params">(<span class="type">bool</span> b=<span class="literal">true</span>)</span>:hw(b), io(b), other(b)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span><span class="params">(<span class="type">bool</span> h, <span class="type">bool</span> i, <span class="type">bool</span> o)</span>:hw(h),io(i),other(o)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">bool</span> <span class="title">any</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> hw||io||other;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_io</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;io=b;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_hw</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;hw=b;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_other</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123;hw=b;&#125; <span class="comment">//这里原书可能有误？</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> hw;        <span class="comment">//硬件错误，而非IO错误</span></span><br><span class="line">    <span class="type">bool</span> io;        <span class="comment">//IO错误</span></span><br><span class="line">    <span class="type">bool</span> other;     <span class="comment">//其他错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>constexpr</code>构造函数用于生成<code>constexpr</code>对象以及<code>constexpr</code>函数的参数或返回类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">io_sub</span><span class="params">(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span></span>; <span class="comment">//调试IO</span></span><br><span class="line"><span class="keyword">if</span>(io_sub.<span class="built_in">any</span>())    <span class="comment">//等价于if(true)</span></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;print appropriate error messages&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">prod</span><span class="params">(<span class="literal">false</span>)</span></span>;                <span class="comment">//无调试</span></span><br><span class="line"><span class="keyword">if</span>(prod.<span class="built_in">any</span>())      <span class="comment">//等价于if(false)</span></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;print an error message&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h2><p>与类本身关联，而不需要与每个对象关联。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span>&#123;amount+=amount*interestRate;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">rate</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> interestRate;&#125;</span><br><span class="line">    <span class="comment">//static函数不包含this指针，所以不能定义为const函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">rate</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string owner;</span><br><span class="line">    <span class="type">double</span> amount;</span><br><span class="line">    <span class="type">static</span> <span class="type">double</span> interestRate;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">initRate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>静态成员存在于任何对象之外，所有对象共享:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> r;</span><br><span class="line">r = Account::<span class="built_in">rate</span>();</span><br><span class="line">Account ac1;</span><br><span class="line">Account *ac2 = &amp;ac1;</span><br><span class="line">r = ac1.<span class="built_in">rate</span>();</span><br><span class="line">r = ac2-&gt;<span class="built_in">rate</span>(); <span class="comment">//与上一行效果相同</span></span><br></pre></td></tr></table></figure><p>可以在类的内部也可以在类的外部定义<strong>静态成员函数</strong>。在外部定义时，不能重复<code>static</code>关键字，<code>static</code>关键字只出现在类内部的声明语句中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Account::rate</span><span class="params">(<span class="type">double</span> newRate)</span></span>&#123;</span><br><span class="line">    interestRate = newRate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态数据成员：</strong></p><p><img src="https://bu.dusays.com/2023/02/04/63dde8a1d30f3.png" alt="17-22.png"></p><p>想要确保对象只定义一次，最好的办法是把静态数据成员的定义与其他非内联函数的定义放到同一个文件中。</p><p>静态成员的类内初始化。通常，类的静态成员不该在类的内部初始化（因为里面仅仅是一个声明）。以下是特殊情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">double</span> <span class="title">rate</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> interestRate;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">rate</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> period = <span class="number">30</span>; <span class="comment">//period是常量表达式，可以用字面值替换</span></span><br><span class="line">    <span class="type">double</span> daily_tbl[period];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如果在类的内部提供了一个初始值，则成员的定义不能再指定一个初始值了：</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> Account::period;</span><br><span class="line"><span class="comment">//即使一个常量静态数据成员在类内部被初始化了，通常情况下也应该在类的外部定义一下该成员</span></span><br></pre></td></tr></table></figure><p>静态成员能用于某些场景，而普通成员不能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Bar mem1; <span class="comment">//正确：静态成员可以是不完全类型</span></span><br><span class="line">    Bar *mem2;       <span class="comment">//正确</span></span><br><span class="line">    Bar mem3;        <span class="comment">//错误！数据成员必须是完全类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以使用静态成员作为默认实参，因为它本身不是对象的一部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//bkground表示一个在类中稍后定义的静态成员</span></span><br><span class="line">    <span class="function">Screen&amp; <span class="title">clear</span><span class="params">(<span class="type">char</span> = bkground)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> bkground;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h2><p><img src="https://bu.dusays.com/2023/03/13/640ec200609a3.png" alt="17-23.png"></p><p>关于<strong>宽字符</strong>：参见《C++ primer》278 页。</p><p>类型<code>ifstream</code>和<code>istringstream</code>都继承自<code>istream</code>。因此，可以像使用<code>istream</code>对象一样来使用<code>ifstream</code>和<code>istringstream</code>对象。例如，可以对<code>ifstream</code>或<code>istringstream</code>对象调用<code>getline</code>，也可以用<code>&gt;&gt;</code>从一个<code>ifstream</code>或<code>istringstream</code>对象中读取数据。类似的，类型<code>ofstream</code>和<code>ostringstream</code>都继承自<code>ostream</code>。</p><p>IO对象无拷贝或赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream out1, out2;</span><br><span class="line">out1 = out2;               <span class="comment">//错误！不能对流对象赋值</span></span><br><span class="line"><span class="function">ofstream <span class="title">print</span><span class="params">(ofstream)</span></span>;  <span class="comment">//错误！不能将形参或返回类型设为流类型</span></span><br><span class="line">out2 = <span class="built_in">print</span>(out2);        <span class="comment">//错误！不能拷贝流对象</span></span><br></pre></td></tr></table></figure><p>读写一个 IO 对象会改变其状态，因此传递和返回的引用不能是<code>const</code>的。</p><p><img src="https://bu.dusays.com/2023/03/13/640edc3ca07fe.png" alt="17-24.png"></p><p>查询流的状态：</p><p>IO 库定义了一个与机器无关的<code>iostate</code>类型，它提供了表达流状态的完整功能。这个类型应作为一个位集合来使用。IO 库定义了 4 个<code>iostate</code>类型的<code>constexpr</code>值，表示特定的位模式。这些值用来表示特定类型的 IO 条件，可以与位运算符一起使用来一次性检测或设置多个标志位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同机器里面可能不一样 (?)</span></span><br><span class="line">goodbit = <span class="number">0x0</span></span><br><span class="line">eofbit = <span class="number">0x1</span></span><br><span class="line">failbit = <span class="number">0x2</span></span><br><span class="line">badbit = <span class="number">0x4</span></span><br></pre></td></tr></table></figure><p><code>badbit</code>表示系统级错误，如不可恢复的读写错误。通常情况下，一旦<code>badbit</code>被置位，流就无法再使用了。在发生可恢复错误后，<code>failbit</code>被置位，如期望读取数值却读出一个字符等错误。这种问题通常是可以修正的，流还可以继续使用。如果到达文件结束位置，<code>eofbit</code>和<code>failbit</code>都会被置位。<code>goodbit</code>的值为 0 ，表示流未发生错误。如果<code>badbit</code>、<code>failbit</code>和<code>eofbit</code>任一个被置位，则检测流状态的条件会失败。</p><p>标准库还定义了一组函数来查询这些标志位的状态。操作<code>good</code>在所有错误位均未置位的情况下返回 true，而<code>bad</code>、<code>fail</code>和<code>eof</code>则在对应错误位被置位时返回 true。此外，在<code>badbit</code>被置位时，<code>fail</code>也会返回true 。这意味着，使用<code>good</code>或<code>fail</code>是确定流的总体状态的正确方法。实际上，我们将流当作条件使用的代码就等价于<code>!fail()</code>。而<code>eof</code>和<code>bad</code>操作只能表示特定的错误。</p><p>管理条件状态：</p><p>流对象的<code>rdstate</code>成员返回一个<code>iostate</code>值，对应流的当前状态。<code>setstate</code>操作将给定条件位置位，表示发生了对应错误。<code>clear</code>成员是一个重载的成员：它有一个不接受参数的版本，而另一个版本接受一个<code>iostate</code>类型的参数。</p><p><code>clear</code>不接受参数的版本清除（复位）所有错误标志位。执行<code>clear()</code>后，调用<code>good</code>会返回 true 。我们可以这样使用这些成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> old_state = cin.<span class="built_in">rdstate</span>(); <span class="comment">//记住 cin 的当前状态</span></span><br><span class="line">cin.<span class="built_in">clear</span>();                    <span class="comment">//使 cin 有效</span></span><br><span class="line"><span class="built_in">process_input</span>(cin);             <span class="comment">//使用 cin</span></span><br><span class="line">cin.<span class="built_in">setstate</span>(old_state);        <span class="comment">//将 cin 置为原始状态</span></span><br></pre></td></tr></table></figure><p>带参数的<code>clear</code>版本接受一个<code>iostate</code>值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复位 failbit 和 badbit ，保持其他标志位不变</span></span><br><span class="line">cin.<span class="built_in">clear</span>(cin.<span class="built_in">rdstate</span>() &amp; ~cin.failbit &amp; ~cin.badbit);</span><br><span class="line"><span class="comment">/*-------------位运算，比较好理解：----------</span></span><br><span class="line"><span class="comment">这里 0 代表无错，1 有错。failbit 中的 1 取反后</span></span><br><span class="line"><span class="comment">变成 0，任何一个数(0/1) &amp; 0 都变成 0，完成置位。</span></span><br><span class="line"><span class="comment">同时 failbit 中的 0 取反后变成 1，任何一个数(0/1)</span></span><br><span class="line"><span class="comment">&amp; 1 都不变。</span></span><br><span class="line"><span class="comment">badbit 同理。</span></span><br><span class="line"><span class="comment">------------------------------------------*/</span></span><br></pre></td></tr></table></figure><p>管理输出缓冲：</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p><a href="https://www.bilibili.com/video/BV1z64y1U7hs/?p=42">https://www.bilibili.com/video/BV1z64y1U7hs/?p=42</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是通过第五版《C++ primer》进行的查漏补缺。&lt;/p&gt;
&lt;h2 id=&quot;输入输出&quot;&gt;&lt;a href=&quot;#输入输出&quot; class=&quot;headerlink&quot; title=&quot;输入输出&quot;&gt;&lt;/a&gt;输入输出&lt;/h2&gt;&lt;p&gt;标准库定义了4个IO对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>几何角度下的一个公式</title>
    <link href="https://loveofpeach.github.io/posts/12839668.html"/>
    <id>https://loveofpeach.github.io/posts/12839668.html</id>
    <published>2022-11-11T12:25:56.000Z</published>
    <updated>2023-03-06T02:58:51.394Z</updated>
    
    <content type="html"><![CDATA[<p>公式在同济高数七版下册第182页。</p><script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y=\int_{\alpha (x)}^{\beta (x)} f_{x}^{'}(x,y)\, \mathrm{d}y+f[x,\beta (x)]\beta ^{'}(x)-f[x,\alpha (x)]\alpha ^{'}(x)</script><p>不详细推导，只作几何直观的展示。</p><p><strong>NOTICE：</strong> 以下推导中，高阶无穷小忽略没有写出，因为它会在除以$\Delta x$再取极限之后变为$0$.</p><p>先考虑 $\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y$ 的几何直观。现在想象一个三维的曲面$z=f(x,y)$，它也许是这样的（随便画一个）：</p><p><img src="https://s2.loli.net/2022/11/10/2tlz85oCXny3qZQ.png" alt="matlabpic.png"></p><p>固定某个选定的$x$值，取曲面$z=f(x,y)$与平面$X=x$的截线：</p><p><img src="https://bu.dusays.com/2023/01/01/63b1960bb292e.png" alt="16-2.png"></p><p>当$x$固定时，$\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y$ 是从$\alpha (x)$到$\beta (x)$对$y$的定积分，在上图中它表示红色曲边梯形的面积。</p><p>上图中，红色曲线在曲面$z=f(x,y)$中，清晰起见，曲面$z=f(x,y)$没有画出。$\alpha (x)$和$\beta (x)$是 $x$ 的函数。当$x$变化时，$\alpha (x)$和$\beta (x)$ 的值会相应变化，同时，曲边梯形的形状也会跟着变化。</p><p>$\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y$ 即曲边梯形面积对$x$的变化率。为此，我们考察当$x$获得一个很小的增量$\Delta x$时，曲边梯形面积将如何变化。</p><p>先考虑简单情形: $\alpha (x)$和$\beta (x)$为常函数。在此之前，简单回顾一下微分的几何意义：</p><p><img src="https://bu.dusays.com/2023/01/01/63b1960cdbe03.png" alt="16-3.png"></p><p>由此得到启发，既然现在是三维的，我们把“在局部范围内用来近似替代非线性函数的<strong>线性函数</strong>（下图中的蓝色部分）”积起来，就是曲边梯形面积的增量了。</p><p><img src="https://bu.dusays.com/2023/03/06/640556c67dc1e.png" alt="16-4.png"></p><p>它就是$\Delta x \int_{\alpha (x)}^{\beta (x)} f_{x}^{‘}(x,y)\, \mathrm{d}y$ 。问题还没解决，刚刚只是 $\alpha (x)$和$\beta (x)$ 为常函数的情形，在其他情形中，还需要考虑边界处的增量。<strong>注意：</strong> 我们考虑的是曲边梯形面积的增量，而不是什么东西的体积的增量。</p><p><img src="https://bu.dusays.com/2023/01/01/63b1960c62aad.png" alt="16-5.png"></p><p>为区分起见，上图将小矩形挪了位置。宽为$\beta ^{‘}(x) \Delta x$，高可用$f[x,\beta (x)]$替代（连续性），因此小矩形的面积为 $f[x,\beta (x)]\beta ^{‘}(x) \Delta x$ 。同理在另一处也有一个小矩形，面积为 $f[x,\alpha (x)]\alpha ^{‘}(x) \Delta x$ ,它们都是我们关注的曲边梯形面积的增量的一部分。因为积分是从$\alpha$积到$\beta$（或者从N-L公式的角度理解），$f[x,\alpha (x)]\alpha ^{‘}(x) \Delta x$ 前面需要加负号，即 $-f[x,\alpha (x)]\alpha ^{‘}(x) \Delta x$ 。</p><p>将上述所有的增量（<strong>高阶无穷小忽略没有写出</strong>）加起来，两边同除$\Delta x$，再令$\Delta x \rightarrow 0$ ，得：</p><script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{d}y=\int_{\alpha (x)}^{\beta (x)} f_{x}^{'}(x,y)\, \mathrm{d}y+f[x,\beta (x)]\beta ^{'}(x)-f[x,\alpha (x)]\alpha ^{'}(x)</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公式在同济高数七版下册第182页。&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\mathrm{d}}{\mathrm{d}x}\int_{\alpha (x)}^{\beta (x)} f(x,y)\, \mathrm{</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学笔记</title>
    <link href="https://loveofpeach.github.io/posts/bfc2f920.html"/>
    <id>https://loveofpeach.github.io/posts/bfc2f920.html</id>
    <published>2022-11-07T15:13:54.000Z</published>
    <updated>2023-01-22T14:47:28.199Z</updated>
    
    <content type="html"><![CDATA[<p>本文是视频 <a href="https://www.bilibili.com/video/BV1AT4y137Fp">微观经济学-中国农业大学</a> 的笔记。</p><p><img src="https://s2.loli.net/2022/11/07/iAHJGzdSeRKCumV.png" alt="Newbrush.png"></p><h2 id="经济与经济学"><a href="#经济与经济学" class="headerlink" title="经济与经济学"></a>经济与经济学</h2><p>为取得经济品的有代价的活动就是<strong>经济</strong>。</p><p><strong>经济学</strong>是研究人们如何利用<strong>稀缺资源</strong>来满足人们<strong>无限需求</strong>的一门社会科学。</p><ul><li>稀缺：相对稀缺</li><li>短缺：绝对</li><li>需求是无限的：生存（有）、享受（好）、发展（自我）</li></ul><p>经济学：解决资源的稀缺性和需求的无限性之间的矛盾。</p><h2 id="经济理论认知"><a href="#经济理论认知" class="headerlink" title="经济理论认知"></a>经济理论认知</h2><p>经济人假说：理性人、利益追求、个性追求</p><ul><li>消费者：满足最大化</li><li>生产者：利润最大化</li></ul><p>社会人：适应社会、</p><p>信息完备性假说：（。。。）</p><p>表达方法：表格法、图线法、文字描述法、数学函数法</p><p>生产可能曲线：在资源一定的情况下，所能够生产的两种商品的最大组合的运动轨迹。</p><h2 id="微观经济学的研究对象"><a href="#微观经济学的研究对象" class="headerlink" title="微观经济学的研究对象"></a>微观经济学的研究对象</h2><p>以价格为核心（价格学、资源稀缺性——价格）、以单个经济单位为研究对象（消费者，生产者）、单个经济单位的经济行为</p><p>说白了就是，解决资源的配置问题。</p><ul><li>生产什么</li><li>生产多少</li><li>为谁生产</li></ul><h2 id="怎样才能学好经济学"><a href="#怎样才能学好经济学" class="headerlink" title="怎样才能学好经济学"></a>怎样才能学好经济学</h2><p>两种研究方法：实证分析法、规范分析法</p><ul><li>实证经济学：就事论事（无价值判断）</li><li>规范经济学：就事论理（有价值判断）<ul><li>福利经济学</li><li>公共财政学</li><li>税收学</li><li>法律</li></ul></li></ul><h2 id="欲望与需求"><a href="#欲望与需求" class="headerlink" title="欲望与需求"></a>欲望与需求</h2><p>定义：需求是消费者在一定时期内，在一定价格水平上，<strong>愿意购买</strong>且<strong>能够购买</strong>的商品量。</p><ul><li>只满足一个，潜在需求</li><li>满足两个，有效需求<ul><li>有效需求=市场容量</li></ul></li></ul><h2 id="影响需求的因素"><a href="#影响需求的因素" class="headerlink" title="影响需求的因素"></a>影响需求的因素</h2><p>因素：</p><ul><li>商品本身的价格(P)</li><li>收入水平(I)<ul><li>第一类：I增Q增，正常品</li><li>第二类：I增Q减，低档品</li></ul></li><li>偏好<ul><li>引导方式：广告、宣传</li></ul></li><li>相关商品的价格<ul><li>$P_x$增，$Q_y$降$\rightarrow$互补品</li><li>$P_x$增，$Q_y$增$\rightarrow$替代品</li><li>$P_x$无论增减，$Q_y$不变$\rightarrow$独立品</li></ul></li><li>未来预期<ul><li>好：Q增加</li><li>差：Q减少</li></ul></li></ul><h2 id="需求规律及其表达"><a href="#需求规律及其表达" class="headerlink" title="需求规律及其表达"></a>需求规律及其表达</h2><p>需求规律：在其他条件不变的情况下，消费者对某种商品的需求量与商品本身的价格呈反向变化。</p><p>需求曲线以符号$D$标记。</p><p>$notice$：需求量是表示的是消费者在<strong>一定时间内</strong>的它的需求量。</p><h2 id="需求规律及其表达（2）"><a href="#需求规律及其表达（2）" class="headerlink" title="需求规律及其表达（2）"></a>需求规律及其表达（2）</h2><p>需求函数：$Q=f(p,p_x,a,c,…)$</p><ul><li>$p:$本身的价格</li><li>$p_x:$有关商品的价格</li><li>$a:$个人偏好</li><li>$c:$预期</li></ul><p>简化：$Q=f(p)$</p><ul><li>当其他条件不变时，$Q$只是$p$的函数</li></ul><p>$e.g.$<br>解释方程$Q=200-5P+2p_x$的含义</p><ul><li>解释：这种商品本身价格提高1单位，需求量减少5单位；$x$的价格提高一单位，需求量增加2单位。这里$x$是替代品。</li></ul><p>市场需求与个人需求：个人需求的加和等于市场。</p><h2 id="需求规律的例外"><a href="#需求规律的例外" class="headerlink" title="需求规律的例外"></a>需求规律的例外</h2><p>情况一：</p><p><img src="https://s2.loli.net/2022/11/07/jT9wQBqL6YlxFrM.png" alt="2dot4case1.png"></p><ul><li>例如：黄金、紧俏物资</li></ul><blockquote><p>无需广告</p></blockquote><p>情况二：</p><p><img src="https://s2.loli.net/2022/11/07/Bv6NX9O5esuwjCp.png" alt="2dot4pic2.png"></p><ul><li>例如：生活必需品(药品、食盐、收费厕所(国外居多；吐槽一下驾照考点外的扫码撒尿服务)、殡葬用品)</li></ul><blockquote><p>提价</p></blockquote><p>情况三：</p><p><img src="https://s2.loli.net/2022/11/07/F4Ul123ReSqTu7W.png" alt="2dot4pic3.png"></p><ul><li>买涨不买跌</li><li>高档消费品（奢侈品）、非生活必需品</li></ul><blockquote><p>定价宜高</p></blockquote><p>情况四：</p><p><img src="https://s2.loli.net/2022/11/07/H2WR4TFEvybg7nl.png" alt="2dot4pic4.png"></p><ul><li>金融产品</li></ul><h2 id="其他因素对需求的影响"><a href="#其他因素对需求的影响" class="headerlink" title="其他因素对需求的影响"></a>其他因素对需求的影响</h2><p>一、价格与需求</p><p><img src="https://s2.loli.net/2022/11/07/mHp8BWEK2cn7oJa.png" alt="2dot5pic1.png"></p><p>单纯由商品价格本身价格变化引起的需求量的变化，叫做<strong>需求量变动</strong>。</p><p>二、非价格因素对需求的影响</p><p>$I_1\rightarrow I_2$时，$Q_1\rightarrow Q_2\quad$  //需求变动</p><p><strong>需求变动</strong>：非价格因素变化所引起的需求量的变化。</p><p><img src="https://s2.loli.net/2022/11/07/QmqM4kz3XiePxKo.png" alt="2dot5pic2.png"></p><h2 id="产量与供给"><a href="#产量与供给" class="headerlink" title="产量与供给"></a>产量与供给</h2><p>定义：<strong>供给</strong>是生产者在一定时期内，一定的价格水平上，愿意而且能够提供的商品量。</p><ul><li>供给$\approx$出售愿望+产量<ul><li>如果只满足其中之一，称为<strong>潜在供给</strong>。</li><li>两个条件都满足，称为<strong>有效供给</strong>。</li><li>区分有效供给、潜在供给$\rightarrow$衡量生产者的实际收入</li></ul></li></ul><h2 id="影响供给的因素"><a href="#影响供给的因素" class="headerlink" title="影响供给的因素"></a>影响供给的因素</h2><ol><li>本身价格 $\quad P$增，$Q_s$增； $\quad P$减，$Q_s$减</li><li>生产成本 $\quad C$增，$Q_s$减； $\quad C$减，$Q_s$增</li><li>技术</li><li>相关商品的价格</li><li>生产者的目标<ul><li>利润最大化</li><li>总产量最大</li><li>平均产量最大</li></ul></li><li>未来预期<ul><li>好$\rightarrow Q_s$增</li><li>差$\rightarrow Q_s$减</li></ul></li></ol><h2 id="供给规律及其表达"><a href="#供给规律及其表达" class="headerlink" title="供给规律及其表达"></a>供给规律及其表达</h2><p>供给规律：在其他条件不变的情况下，某种商品的供给量与商品本身的价格呈同向变化。</p><p>供给曲线：</p><p><img src="https://s2.loli.net/2022/11/07/NhQTanfkAVOwgrY.png" alt="2dot8pic1.png"></p><p>供给函数：$Q_s=f(p,p_x,c,t,…)$</p><p>市场供给=个别供给的总和</p><h2 id="供给规律的例外"><a href="#供给规律的例外" class="headerlink" title="供给规律的例外"></a>供给规律的例外</h2><p>情况一</p><p><img src="https://s2.loli.net/2022/11/07/MJ1AGzIKPwBrfcU.png" alt="2dot9pic1.png"></p><p>例如：饮料类、某些公共产品（地铁、自来水、电力）</p><p>情况二：</p><p><img src="https://s2.loli.net/2022/11/07/M5jpqPnNb4Qz8f2.png" alt="2dot9pic2.png"></p><p>例如：土地、古玩古董</p><p>情况三：</p><p><img src="https://s2.loli.net/2022/11/07/fBnMm43HwDQuyP6.png" alt="2dot9pic3.png"></p><p>举例：流水线作业的、大规模生产的</p><p>情况四：</p><p><img src="https://s2.loli.net/2022/11/07/Tu62kwrYFRiyIsC.png" alt="2dot9pic4.png"></p><p>例如：劳动力（在上图中，$L$表示提供的劳动量，$W$表示工资）</p><h2 id="其他因素对供给的影响"><a href="#其他因素对供给的影响" class="headerlink" title="其他因素对供给的影响"></a>其他因素对供给的影响</h2><p>供给量变动：</p><p><img src="https://s2.loli.net/2022/11/07/DzSE3COImNWRqPB.png" alt="2dot10pic1.png"></p><p><strong>供给变动</strong>：非价格变化引起的</p><p><img src="https://s2.loli.net/2022/11/07/bCs91XAdRaf45BO.png" alt="2dot10pic2.png"></p><h2 id="市场均衡及其形成"><a href="#市场均衡及其形成" class="headerlink" title="市场均衡及其形成"></a>市场均衡及其形成</h2><p>均衡状态：供求力量对比的结果</p><p><img src="https://s2.loli.net/2022/11/07/x3W4tiELfYXqpAl.png" alt="2dot11pic1.png"></p><p>定义：当需求和供给相等的时候，这个状态叫均衡状态，此时的价格叫均衡价格$(P_e)$，此时的数量叫均衡数量$(Q_e)$。</p><p><img src="https://s2.loli.net/2022/11/07/K64ZGbCjOkhoVyl.png" alt="2dot11pic2.png"></p><h2 id="市场均衡的变动"><a href="#市场均衡的变动" class="headerlink" title="市场均衡的变动"></a>市场均衡的变动</h2><p>一、消费者与均衡的问题</p><p><img src="https://s2.loli.net/2022/11/07/6CeElVhcn234oRL.png" alt="2dot12pic1.png"></p><p>总结：单纯需求变动会引起均衡价格和均衡数量同向变化。</p><p>二、生产者与均衡的问题</p><p><img src="https://s2.loli.net/2022/11/07/cI6XOAqiyrN79Rm.png" alt="2dot12pic2.png"></p><p>供给变动：均衡价格反向变化；均衡数量同向变化。</p><p>三、消费者和生产者行为都在变引起的变化</p><p><img src="https://s2.loli.net/2022/11/07/5IcACwT18VavsKB.png" alt="2dot12pic3.png"></p><p>（其他情况的分析方法与之类似。。。）</p><h2 id="支持价格与限制价格"><a href="#支持价格与限制价格" class="headerlink" title="支持价格与限制价格"></a>支持价格与限制价格</h2><p>$notion:\quad$工农业产品的剪刀差</p><p><img src="https://s2.loli.net/2022/11/07/Ml4Uebq3Oj8iRZy.png" alt="2dot13pic1.png"></p><p>$definition:\quad$支持价格，政府制定的高于市场均衡价格的最低销售价格。</p><p><img src="https://s2.loli.net/2022/11/07/XzrUh1vwHIYeJKu.png" alt="2dot13pic2.png"></p><p>方法：政府收购多余商品。</p><p>$definition:\quad$限制价格，低于市场均衡价格的最高销售价。</p><p><img src="https://s2.loli.net/2022/11/07/R9OUoICN2JMWVaw.png" alt="2dot13pic3.png"></p><p>限制价格可能导致的市场现象：黑市、贿赂等。应对方法：凭票供应。</p><h2 id="政府税收"><a href="#政府税收" class="headerlink" title="政府税收"></a>政府税收</h2><p>$notion:$</p><ul><li>消费者剩余，消费者从市场里面的得益。</li><li>生产者剩余，生产者从市场里面的得益。</li></ul><p><img src="https://s2.loli.net/2022/11/07/ZwQgz1yhncE7eaU.png" alt="2dot14pic1.png"></p><p>国家收的税：$E_1A$</p><p><img src="https://s2.loli.net/2022/11/07/mSUniWtgT9yOd6B.png" alt="2dot14pic2.png"></p><p>设$A$点对应价格为$P_2$。$P_0P_1$=消费者税负，$P_0P_2$=生产者税负</p><p><img src="https://s2.loli.net/2022/11/07/VvE2XWZrs8zGdpF.png" alt="2dot14pic3.png"></p><h2 id="政府补贴"><a href="#政府补贴" class="headerlink" title="政府补贴"></a>政府补贴</h2><p><img src="https://s2.loli.net/2022/11/07/UarCBNcSWVXx7wD.png" alt="2dot15pic1.png"></p><p><img src="https://s2.loli.net/2022/11/07/a6E9yexc8uIjJpT.png" alt="2dot15pic2.png"></p><h2 id="需求价格弹性及其计算（1）"><a href="#需求价格弹性及其计算（1）" class="headerlink" title="需求价格弹性及其计算（1）"></a>需求价格弹性及其计算（1）</h2><p>一、弹性</p><script type="math/tex; mode=display">e=\frac{\frac{\Delta Y}{Y}}{\frac{\Delta X}{X}}</script><p>二、需求价格弹性</p><script type="math/tex; mode=display">e=\frac{\Delta Q/Q}{\Delta P/P}</script><p>$definition:\quad$价格变动$1\%$引起的需求量变动的百分比</p><p>$notice:\quad$在一个正常的需求曲线的计算中，为方便$(?)$起见，在公式中加一个负号，则$e$变为正。公式如下：</p><script type="math/tex; mode=display">e=-\frac{\Delta Q/Q}{\Delta P/P}</script><h2 id="需求价格弹性及其计算（2）"><a href="#需求价格弹性及其计算（2）" class="headerlink" title="需求价格弹性及其计算（2）"></a>需求价格弹性及其计算（2）</h2><p>一、点弹性</p><script type="math/tex; mode=display">e=-\frac{\Delta Q/Q}{\Delta P/P}=-\frac{\Delta Q}{\Delta P}\cdot \frac{P}{Q}=-\frac{\Delta Q}{\Delta P}\cdot \frac{P_1}{Q_1}</script><p>精确计算：</p><script type="math/tex; mode=display">e=-\lim_{\Delta P \to 0} \frac{\Delta Q}{\Delta P}\cdot \frac{P}{Q}=-\frac{P}{Q}\cdot \frac{\mathrm{d}Q}{\mathrm{d}P}</script><p>二、弧弹性</p><script type="math/tex; mode=display">e=-\frac{\Delta Q}{\Delta P}\cdot \frac{P}{Q}=-\frac{\Delta Q}{\Delta P}\cdot \frac{\frac{P_1+P_2}{2}}{\frac{Q_1+Q_2}{2}}</script><h2 id="需求价格弹性的类型"><a href="#需求价格弹性的类型" class="headerlink" title="需求价格弹性的类型"></a>需求价格弹性的类型</h2><p>情况一：</p><p><img src="https://s2.loli.net/2022/11/07/FbuEYWQJltmqLRd.png" alt="3dot2pic1.png"></p><p>情况二：</p><p><img src="https://s2.loli.net/2022/11/07/Cgq9eK6tQydPADN.png" alt="3dot2pic2.png"></p><p>情况三：</p><p><img src="https://s2.loli.net/2022/11/07/QYfIE8WDvN5xzap.png" alt="3dot2pic3.png"></p><p>例如：接近于生活必需品的</p><p>其他情况：</p><p><img src="https://s2.loli.net/2022/11/07/hC3v9K1RcqZNmEF.png" alt="3dot2pic4.png"></p><p><strong>总结：</strong></p><p><img src="https://s2.loli.net/2022/11/07/tgpdVYabc2l5XM8.png" alt="3dot2pic5.png"></p><p>$notice:\quad$同一种商品在不同价位上有不同的弹性值。高价位富有弹性，低价位缺乏弹性。</p><h2 id="影响需求价格弹性的因素"><a href="#影响需求价格弹性的因素" class="headerlink" title="影响需求价格弹性的因素"></a>影响需求价格弹性的因素</h2><p>一、商品本身被需要的程度</p><ul><li>越被需要，弹性越小</li><li>越不需要，弹性越大</li></ul><p>二、本身被替代的程度</p><ul><li>易被替代，弹性越大</li></ul><p>三、商品本身占总支出的比重</p><ul><li>比重大$\rightarrow$弹性大</li></ul><p>四、商品的用途的多少</p><ul><li>用途越多，弹性越大</li></ul><p>五、商品的种类的大小</p><ul><li>种类越大，弹性越小</li></ul><p>种类的含义如下图：</p><p><img src="https://s2.loli.net/2022/11/07/gEiQNImjXbchwPn.png" alt="3dot3pic1.png"></p><p><strong>解释</strong>：种类越小，越容易被替代，弹性就大了。</p><p>六、时间因素</p><ul><li>近期弹性小</li><li>远期弹性大</li></ul><p>解释：近期可能没有替代品；长期可能因为技术进步等原因，出现替代品。</p><h2 id="需求价格弹性的用途"><a href="#需求价格弹性的用途" class="headerlink" title="需求价格弹性的用途"></a>需求价格弹性的用途</h2><ul><li>大件$\rightarrow$价格特别关心$\rightarrow$弹性大</li></ul><p>总结：通过人们对价格的关心程度来判断。</p><ul><li>需求价格弹性就是帮助企业进行定价的</li><li>总收益（TR）=P$\cdot$Q</li></ul><p><img src="https://s2.loli.net/2022/11/07/Ke82YCrZjUIuwxB.png" alt="3dot4pic1.png"></p><p><strong>富有弹性，定低价。</strong></p><p><img src="https://s2.loli.net/2022/11/07/qzBrQcRZ6FCsYAX.png" alt="3dot4pic2.png"></p><p><strong>缺乏弹性，定高价。</strong></p><h2 id="需求收入弹性"><a href="#需求收入弹性" class="headerlink" title="需求收入弹性"></a>需求收入弹性</h2><p>$definition:\quad$消费者的收入变化1%所引起的商品需求量的变动百分比。</p><script type="math/tex; mode=display">e_I=\frac{\frac{\Delta Q}{Q}}{\frac{\Delta I}{I}}</script><p>$notion:\quad$公式前<strong>没有负号</strong></p><ul><li>$e_I&gt;0$，正常品<ul><li>$0&lt; e_I&lt;1$，必需品</li><li>$e_I&gt;1$，高档品</li></ul></li><li>$e_I&lt;0$，低档品</li></ul><p>通过$e_I$判断生活水平的高低：</p><p><img src="https://s2.loli.net/2022/11/07/WTz39FPj4o5QSEq.png" alt="3dot5pic1.png"></p><h2 id="需求交叉弹性"><a href="#需求交叉弹性" class="headerlink" title="需求交叉弹性"></a>需求交叉弹性</h2><script type="math/tex; mode=display">e_{yx}=\frac{\frac{\Delta Q_y}{Q_y}}{\frac{\Delta P_x}{P_x}}</script><p>$e_{yx}:\quad x$的价格变化引起的$y$的需求量的改变。</p><p>$notion:\quad$前面<strong>没有负号</strong>。</p><p><img src="https://s2.loli.net/2022/11/07/FgsjxMJ9w5Q8mBu.png" alt="3dot6pic1.png"></p><p>通过需求交叉弹性帮助企业调整产业结构、产品结构：</p><p><img src="https://s2.loli.net/2022/11/07/6xecVNFiIpus9R8.png" alt="3dot6pic2.png"></p><h2 id="供给弹性及其类型"><a href="#供给弹性及其类型" class="headerlink" title="供给弹性及其类型"></a>供给弹性及其类型</h2><p>$definition:\quad$供给弹性，商品的价格变化引起的供给量的变化。</p><script type="math/tex; mode=display">e_s=\frac{\frac{\Delta Q_s}{Q_s}}{\frac{\Delta P}{P}}</script><p>$notice:\quad$<strong>没有负号</strong></p><p>含义：价格变化1%引起的供给量的变动百分比</p><p>$notice:\quad$有和之前相似的<strong>点弹性</strong>、<strong>弧弹性</strong>概念</p><p>类型一：$\quad e_s=\infty \quad$完全有弹性</p><p><img src="https://s2.loli.net/2022/11/07/Yr9bWzihkp42NvC.png" alt="3dot7pic1.png"></p><p>类型二：$\quad e_s=0\quad$完全无弹性</p><p><img src="https://s2.loli.net/2022/11/07/KpQqG9dzTcyMbmj.png" alt="3dot7pic2.png"></p><p>类型三：$\quad e_s=1\quad$单位弹性</p><p>类型四：$\quad e_s&lt;1\quad$缺乏弹性</p><p>类型五：$\quad e_s&gt;1\quad$富有弹性</p><p><img src="https://s2.loli.net/2022/11/07/QTYSxcUK2zvC8gE.png" alt="3dot7pic3.png"></p><blockquote><p>影响大的弹性大，影响小的弹性小</p></blockquote><h2 id="影响供给弹性大小的因素"><a href="#影响供给弹性大小的因素" class="headerlink" title="影响供给弹性大小的因素"></a>影响供给弹性大小的因素</h2><ul><li>生产的难易程度（难$\rightarrow e_s$小）</li><li>生产成本增加幅度的大小（成本增加的幅度大$\rightarrow e_s$小）</li><li>生产规模的大小（规模大的供给弹性小）</li><li>派生供给的难易程度（易$\rightarrow e_s$大）<ul><li>$definition:$ 派生供给：对生产最终产品的原材料、机器设备、半成品和燃料等中间产品的供给。</li></ul></li><li>时间因素（现在$e_s$小，将来$e_s$大）</li></ul><h2 id="4-1-欲望与效用"><a href="#4-1-欲望与效用" class="headerlink" title="4.1 欲望与效用"></a>4.1 欲望与效用</h2><p>效用是一种对欲望的满足程度。</p><p>效用的大小和个人的经济条件是有关的。</p><h2 id="边际效用递减规律"><a href="#边际效用递减规律" class="headerlink" title="边际效用递减规律"></a>边际效用递减规律</h2><p>总效用（total utility）：消费一定量的物品获得的总满足程度</p><p>边际效用（marginal utility)：多消费一个单位的商品增加的效用值</p><script type="math/tex; mode=display">MU=\frac{\Delta TU}{\Delta Q}\quad MU=\frac{\mathrm{d}TU}{\mathrm{d}Q}</script><p>解释：增加的消费量引起的总效用的该变量。即：多消费一个产品获得的满足程度。</p><blockquote><p>满足与消费量有关。</p></blockquote><p>边际效用的加和等于总效用 $TU_x=\begin{matrix} \sum_{i=1}^n MU_{xi} \end{matrix}$</p><p><strong>边际效用递减规律</strong>：随着消费量的不断增加，后一单位的边际效用小于前一单位的边际效用。</p><h2 id="消费者最佳决策"><a href="#消费者最佳决策" class="headerlink" title="消费者最佳决策"></a>消费者最佳决策</h2><p>一、为什么要进行消费决策？</p><ul><li>收入是有限的</li><li>时间是有限的</li><li>商品是有限的</li><li>价格是变化的</li></ul><p>二、货币效应</p><script type="math/tex; mode=display">一元钱的边际效用=\frac{一单位的边际效用}{商品价格}</script><p><img src="https://s2.loli.net/2022/11/07/oku7Ycwn2tU5SzP.png" alt="4dot3pic1.png"></p><p><img src="https://s2.loli.net/2022/11/07/rjNtu2nfKBEMyhZ.png" alt="4dot3pic2.png"></p><p>总结：</p><script type="math/tex; mode=display">\begin{cases}\frac{MU_x}{P_x}=\frac{MU_y}{P_y}(最佳条件)\\P_x\cdot X+P_y\cdot Y=I(约束条件)\end{cases}</script><h2 id="消费者剩余"><a href="#消费者剩余" class="headerlink" title="消费者剩余"></a>消费者剩余</h2><p>消费者剩余=愿意支付的货币-实际支付的货币</p><ul><li>愿意支付是根据边际效用的大小来决定的。</li></ul><p><img src="https://s2.loli.net/2022/11/07/nqSoKEfPZiTdXrx.png" alt="4dot4pic1.png"></p><p>启示：</p><ul><li>政府要维持物价水平</li><li>说明发展市场经济是有好处的<ul><li>市场越发达，剩余越多</li></ul></li><li>剩余是存在的</li></ul><h2 id="消费者偏好假设与无差异曲线"><a href="#消费者偏好假设与无差异曲线" class="headerlink" title="消费者偏好假设与无差异曲线"></a>消费者偏好假设与无差异曲线</h2><p>消费者偏好：消费者对商品的喜好程度。</p><blockquote><p>消费的是商品的组合。</p></blockquote><p><strong>三个假设：</strong></p><ol><li>完全性$(completeness)$：消费者在不同的组合中能够区分(tell)，自己更偏向(喜欢)哪个组合</li><li>传递性$(transitivity)$：$a&gt;b,b&gt;c\Rightarrow a&gt;c$</li><li>非饱和性：两个不同的组合，消费者总是喜欢数量大的组合</li></ol><p>无差异曲线（等效用曲线）：</p><p><img src="https://s2.loli.net/2022/11/07/XO5UVbYATBcd6Hj.png" alt="4dot5pic1.png"></p><p>$definition:\quad$能够获得相同满足的两种商品的各种组合的运动轨迹，叫做<strong>无差异曲线</strong>。</p><p>特点：</p><ul><li>无数条。每一条无差异曲线代表唯一的效用水平；位置越高的线代表的效用水平越大。</li><li>任意两条无差异曲线不相交。</li><li>无差异曲线凸向原点。</li></ul><p>一些特例：</p><p><img src="https://s2.loli.net/2022/11/07/NZKCyBV3vrAOqeY.png" alt="4dot5pic2.png"></p><p><img src="https://s2.loli.net/2022/11/07/FNzcb75Rom3wgls.png" alt="4dot5pic3.png"></p><h2 id="预算约束线"><a href="#预算约束线" class="headerlink" title="预算约束线"></a>预算约束线</h2><p>$definition\quad$<strong>预算约束线</strong>：在收入一定的情况下，消费者所能购买的两种商品的<strong>最大</strong>组合的运动轨迹。</p><p><img src="https://s2.loli.net/2022/11/07/eZpx3EVrfkcl2CJ.png" alt="4dot6pic1.png"></p><p>影响因素：</p><ul><li>收入$I$</li><li>价格</li></ul><p><img src="https://s2.loli.net/2022/11/07/sUjyEuAJnedYc9p.png" alt="4dot6pic2.png"></p><p>边际替代率：$MRS_{xy}=\frac{\Delta Y}{\Delta X}$</p><ul><li>指标越大，说明替代越容易</li><li>指标越小，说明替代越难</li><li>边际替代率递减</li></ul><p><img src="https://s2.loli.net/2022/11/07/MkyLaVCqu7ZwsdO.png" alt="4dot6pic3.png"></p><p>证明：</p><p><img src="https://s2.loli.net/2022/11/07/PubljBdtZgo3YsC.png" alt="4dot6pic4.png"></p><h2 id="消费者均衡"><a href="#消费者均衡" class="headerlink" title="消费者均衡"></a>消费者均衡</h2><p>消费者最佳选择问题又称<strong>消费者均衡</strong>。</p><p><img src="https://s2.loli.net/2022/11/07/jeIx3VlvDpOKS4L.png" alt="4dot7pic1.png"></p><p>$definition\quad$ 在收入一定情况下，消费者所买到的能够使效用最大的商品组合，就叫做<strong>消费者均衡</strong>。</p><p>E点的条件：（其中包含一些简单的推导，如果忘记不会可以看视频）</p><p><img src="https://s2.loli.net/2022/11/07/HYniWSXImFVo6xe.png" alt="4dot7pic2.png"></p><p>（和之前用表格推的那节课道理一样）</p><script type="math/tex; mode=display">\begin{cases}\frac{MU_x}{P_x}=\frac{MU_y}{P_y}(均衡条件)\\P_x\cdot X+P_y\cdot Y=I(约束条件)\end{cases}</script><h2 id="消费者均衡的变动"><a href="#消费者均衡的变动" class="headerlink" title="消费者均衡的变动"></a>消费者均衡的变动</h2><p>一、收入变动对消费者均衡的影响</p><p><img src="https://s2.loli.net/2022/11/07/zc8TemMR3yXFb6s.png" alt="4dot8pic1.png"></p><p>$definition\quad$ 收入改变引起的消费者的均衡变动的运动轨迹叫做<strong>收入——消费线</strong>。</p><p><strong>恩格尔曲线：</strong></p><p><img src="https://s2.loli.net/2022/11/07/2JTflcnoSiyDj91.png" alt="4dot8pic2.png"></p><p>二、价格变动对消费者均衡的影响</p><p>研究的假设：$I_0,P_y$ 不变，$P_x$ 变化</p><p><img src="https://s2.loli.net/2022/11/07/hFSo7lGBRaOc2uN.png" alt="4dot8pic3.png"></p><p>$definition\quad$ 收入不变的情况下，由于价格变化所引起的消费者的均衡位置的移动轨迹，就是<strong>价格消费曲线</strong>。</p><p><img src="https://s2.loli.net/2022/11/07/DkQOG4aPUx2Ev87.png" alt="4dot8pic4.png"></p><h2 id="替代效应与收入效应"><a href="#替代效应与收入效应" class="headerlink" title="替代效应与收入效应"></a>替代效应与收入效应</h2><p><img src="https://s2.loli.net/2022/11/07/aChBSw5qR7WDp1G.png" alt="4dot9pic1.png"></p><p>$definition\quad$ 相对价格的变化导致了产品的替代，影响了消费者的需求，叫<strong>替代效应</strong>。</p><p>$definition\quad$ 由于价格变化导致了实际收入的改变，引起了消费者需求改变，叫<strong>收入效应</strong>。</p><p>总效应=替代效应+收入效应</p><p>向政府提供建议：</p><ul><li>替代效应&lt;收入效应：要提高收入</li><li>替代效应&gt;收入效应：调整比价关系</li></ul><h2 id="生产与生产函数"><a href="#生产与生产函数" class="headerlink" title="生产与生产函数"></a>生产与生产函数</h2><p><strong>生产</strong>就是将投入要素转化为产出的活动。</p><p>生产要素：劳动、土地、资本、才能</p><p>产出：有形产品——实体、无形产品——劳务（第三产业）</p><p>$definition\quad$ <strong>生产函数：</strong> 在一定时期内，在技术水平不变的情况下，生产中所使用的各种生产要素与所能生产的最大产量之间的关系。</p><script type="math/tex; mode=display">Q=f(L,K,D)</script><blockquote><p>L劳动、K资本、D土地</p></blockquote><p><strong>柯布$\cdot$道格拉斯生产函数</strong></p><script type="math/tex; mode=display">Q=AL^{\alpha}K^{\beta}</script><p>A：技术进步因素（所有的其他说不清楚的影响因素的集合）</p><p><strong>不变要素和可变要素</strong>：</p><ul><li>不变要素（variable input）：不随着产量变化而变化的要素</li><li>可变要素（fixed input）：随着产量变化而变化的要素</li></ul><p><strong>短期生产和长期生产</strong>：</p><ul><li>短期生产（short run）：在这个时期内，至少有一种不变要素的生产</li><li>长期生产（long run）：在这个时期内，所有要素都是可变的</li></ul><h2 id="短期生产分析"><a href="#短期生产分析" class="headerlink" title="短期生产分析"></a>短期生产分析</h2><script type="math/tex; mode=display">Q=f(L,K_0)</script><blockquote><p>资本要素不变</p></blockquote><p><strong>三个产量指标：</strong></p><ol><li>总产量（Total Product of Labor)<br>$TP_L=Q$</li><li>平均产量（Average Product of Labor）<br>$AP_L=TP_L/L$</li><li>边际产量（Marginal Product of Labor）<br>$MP_L=\frac{\Delta TP_L}{\Delta L}=\frac{\Delta Q}{\Delta L}$</li></ol><p><img src="https://s2.loli.net/2022/11/07/LEzRxk8Mt5JG3p7.png" alt="5dot2pic1.png"></p><p>结论：</p><ul><li>这三条线都有一个最高点</li><li>当$MP_L=0$时，$TP_L$最大<ul><li>总产量等于边际产量的加和（其实就是数学上的求导和积分QAQ）</li></ul></li><li>当$MP_L$与$AP_L$相交时，$AP_L$最大</li></ul><p><strong>边际报酬递减规律：</strong></p><p>$definition\quad$ 在其他条件不变的情况下，单纯增加一种可变要素的使用量，一开始产量以递增的速度增长，然后以递减的速度增长，再继续增加该种要素的使用量，产量就会绝对的减产。这种现象称为边际报酬递减规律。</p><h2 id="生产的合理阶段"><a href="#生产的合理阶段" class="headerlink" title="生产的合理阶段"></a>生产的合理阶段</h2><p>第二阶段是合理阶段。</p><p><img src="https://s2.loli.net/2022/11/07/HKsU8XOBfDpJmai.png" alt="5dot3pic1.png"></p><p>第一阶段可能存在设备的闲置问题。</p><p>具体如何选定第二阶段的$L$值，与生产者的目标有关：</p><ul><li>平均产量最大</li><li>总产量最大</li></ul><p><strong>管理方法：</strong></p><ul><li>第一阶段：开拓市场</li><li>第二阶段：合理阶段</li><li>第三阶段：劳动过剩，浮于事，裁员</li></ul><h2 id="生产决策的工具"><a href="#生产决策的工具" class="headerlink" title="生产决策的工具"></a>生产决策的工具</h2><script type="math/tex; mode=display">Q=f(L,K)</script><p><strong>决策工具——等产量线</strong></p><p>生产同样的产量，可以采取不同的要素组合。</p><p><img src="https://s2.loli.net/2022/11/07/tEXkWKxQ47IyfZC.png" alt="5dot4pic1.png"></p><p>$definition\quad$<strong>等产量线</strong>$\quad$ 能够取得相同产量的两种要素的组合的运动轨迹</p><p>特征：</p><ul><li>有无数条等产量曲线，位置越高，产量水平越高</li><li>任意两条等产量曲线不相交</li><li>凸向原点</li></ul><p><strong>决策工具——等成本线</strong></p><script type="math/tex; mode=display">C_0=P_L\cdot L+P_K\cdot K</script><p><img src="https://s2.loli.net/2022/11/08/g17wxAOVSEGihQb.png" alt="5dot4pic2.png"></p><p>$definition\quad$等成本线$\quad$ 在成本一定的情况下，企业所能购买的两种要素的最大组合的运动轨迹</p><p><img src="https://s2.loli.net/2022/11/08/IychvAu8xCkLqaF.png" alt="5dot4pic3.png"></p><h2 id="生产的合理区域（1）"><a href="#生产的合理区域（1）" class="headerlink" title="生产的合理区域（1）"></a>生产的合理区域（1）</h2><script type="math/tex; mode=display">MRTS_{LK}=\frac{\Delta K}{\Delta L}</script><blockquote><p>T：边际技术替代率<br>LK：劳动对资本替代<br>左式读作：“劳动对资本的边际技术替代率”</p></blockquote><script type="math/tex; mode=display">\Delta Q=0=\Delta TP_L+\Delta TP_K</script><script type="math/tex; mode=display">0=MP_L\cdot \Delta L+MP_K\cdot \Delta K</script><script type="math/tex; mode=display">MRTS_{LK}=-\frac{\Delta K}{\Delta L}=\frac{MP_L}{MP_K}</script><blockquote><p>为方便起见，在前面加个负号。（搞不懂哪里方便了QAQ）</p></blockquote><p>$MP_L$下降，$MP_K$增加，所以$MRTS_{LK}$下降</p><p>结论：要素之间的替代是有限的</p><h2 id="生产的合理区域（2）"><a href="#生产的合理区域（2）" class="headerlink" title="生产的合理区域（2）"></a>生产的合理区域（2）</h2><p><img src="https://s2.loli.net/2022/11/08/lTVS4ofRrAFHhLq.png" alt="5dot5pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/ZYsyVqEUw5KiDPr.png" alt="5dot5pic2.png"></p><h2 id="生产者的最佳决策"><a href="#生产者的最佳决策" class="headerlink" title="生产者的最佳决策"></a>生产者的最佳决策</h2><p><strong>成本一定，产量决策：</strong></p><p><img src="https://s2.loli.net/2022/11/08/OlxXHFeGkTPiw23.png" alt="5dot6pic1.png"></p><p><strong>产量一定，成本决策：</strong></p><p><img src="https://s2.loli.net/2022/11/08/KsIz7AmjrBtbf9J.png" alt="5dot6pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/48cMEUtIQnpG9b2.png" alt="5dot6pic3.png"></p><blockquote><p>这里的最佳决策也可以称为<strong>生产者均衡</strong>。</p></blockquote><h2 id="生产扩展线"><a href="#生产扩展线" class="headerlink" title="生产扩展线"></a>生产扩展线</h2><p><img src="https://s2.loli.net/2022/11/08/A2Ke5q1jOtYBvhf.png" alt="5dot7pic1.png"></p><p>不同企业类型划分：</p><p><img src="https://s2.loli.net/2022/11/08/HhQFt6Xq1m78CLb.png" alt="5dot7pic2.png"></p><p>生产扩展线方程：</p><script type="math/tex; mode=display">\frac{MP_L}{P_L}=\frac{MP_K}{P_K}</script><p>为什么有些国家（企业）采取资本密集型，有些国家（企业）采取劳动密集型：</p><p><img src="https://s2.loli.net/2022/11/08/r68sC4FbHY9M1ej.png" alt="5dot7pic3.png"></p><h2 id="规模经济"><a href="#规模经济" class="headerlink" title="规模经济"></a>规模经济</h2><p>$definition\quad$规模经济$\quad$在一个生产过程当中，当所有的要素按照相同的倍数增加的时候，所表现出的产出的变化特征</p><p><strong>规模经济的三种形式（三个阶段）：</strong></p><ol><li>规模报酬递增</li><li>规模报酬不变</li><li>规模报酬递减</li></ol><p><img src="https://s2.loli.net/2022/11/08/mgLNbrZqVU3FGca.png" alt="5dot8pic1.png"></p><p>规模报酬递增的原因</p><ol><li>生产专门化</li><li>管理专门化</li><li>几何因素（重工业等）</li><li>便利条件</li></ol><p>规模报酬不变的原因：</p><ul><li>规模报酬递增的因素吸收完了，受到某种技术的限制</li></ul><p>规模报酬递减的原因：</p><ul><li>管理效率低下</li></ul><h2 id="多角度的成本"><a href="#多角度的成本" class="headerlink" title="多角度的成本"></a>多角度的成本</h2><p>在生产过程中实际发生的支出，为显性成本；在生产过程中经营者主观上感觉到的损失，为隐性成本。</p><p><img src="https://s2.loli.net/2022/11/08/gGRzl6SfiBXaLuT.png" alt="6dot1pic1.png"></p><p>$definiton\quad$ 当一种资源有多种用途时，生产者选择了收益最大的用途后，必然放弃的该资源用于其他用途所可能获得的最大收益，就是<strong>生产这种产品的机会成本</strong>。</p><p>经济成本=会计成本+机会成本</p><p><img src="https://s2.loli.net/2022/11/08/2jTF8lmdwG9qXaZ.png" alt="6dot1pic2.png"></p><h2 id="短期成本分析"><a href="#短期成本分析" class="headerlink" title="短期成本分析"></a>短期成本分析</h2><p>成本函数 $C=f(Q)$</p><p><img src="https://s2.loli.net/2022/11/08/qJgFWxGZOMmbLPR.png" alt="6dot2pic1.png"></p><p>短期总成本=短期固定成本(不变要素的花费)+短期可变成本(可变要素的花费)</p><script type="math/tex; mode=display">STC=TFC+TVC</script><p>或（明确特指短期成本）：</p><script type="math/tex; mode=display">TC=TFC+TVC</script><p><img src="https://s2.loli.net/2022/11/08/wYvR4izQGqALjTn.png" alt="6dot2pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/m2dyVquj3TgI9bA.png" alt="6dot2pic3.png"></p><h2 id="边际成本分析"><a href="#边际成本分析" class="headerlink" title="边际成本分析"></a>边际成本分析</h2><script type="math/tex; mode=display">MC=\frac{\Delta TC}{\Delta Q}</script><p><img src="https://s2.loli.net/2022/11/08/FvJjcVEXxORQbsL.png" alt="6dot3pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/7NIdKw2LxsnCoOT.png" alt="6dot3pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/uEMvOweoY8zNTpj.png" alt="6dot3pic3.png"></p><p>证明思路：</p><p>在AVC的最低点，有：</p><script type="math/tex; mode=display">AVC'=(\frac{TVC}{Q})'=0</script><script type="math/tex; mode=display">TVC'\cdot Q=TVC\cdot Q'</script><script type="math/tex; mode=display">\frac{TVC}{Q}=\frac{TVC'}{Q'}=\frac{\mathrm{d}TVC}{\mathrm{d}Q}</script><script type="math/tex; mode=display">AVC=MC</script><h2 id="长期总成本分析"><a href="#长期总成本分析" class="headerlink" title="长期总成本分析"></a>长期总成本分析</h2><p>规模与成本</p><p><img src="https://s2.loli.net/2022/11/08/McQt2rn9YsxJpiA.png" alt="6dot4pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/gUzZMAFH7WCNdL2.png" alt="6dot4pic2.png"></p><h2 id="长期平均成本与长期边际成本（1）"><a href="#长期平均成本与长期边际成本（1）" class="headerlink" title="长期平均成本与长期边际成本（1）"></a>长期平均成本与长期边际成本（1）</h2><p>长期平均成本（LAC） $\quad$ 长期边际成本（LMC）</p><script type="math/tex; mode=display">LAC=\frac{LTC}{Q}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视频此处有图画错了</span></span><br><span class="line"><span class="comment">//本笔记中只放正确的</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/08/hKSipPIoXsH9yzA.png" alt="6dot5pic1.png"></p><h2 id="长期平均成本与长期边际成本（2）"><a href="#长期平均成本与长期边际成本（2）" class="headerlink" title="长期平均成本与长期边际成本（2）"></a>长期平均成本与长期边际成本（2）</h2><script type="math/tex; mode=display">LMC=\frac{\Delta LTC}{\Delta Q}</script><p><img src="https://s2.loli.net/2022/11/08/j2VFZCUaTJu1rnp.png" alt="6dot5pic2.png"></p><p><strong>在SAC和LAC决定的这个产量水平上，SMC=LMC</strong></p><blockquote><p>从导数的角度去理解这块内容：STC的导数是SMC，LTC的导数是LMC，LTC是STC的包络线。对于任意一个给定资本规模的STC（当然也可以是给定labor规模的STC，只不过老师的视频中一直以给定资本规模为例），它和LTC在两者的切点处导数值相同。因此在对应的Q值，有：SMC=LMC</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/ISwFQh4YZ7NonsV.png" alt="6dot5pic3.png"></p><p>规模经济的实质就是成本不断降低的经济。</p><h2 id="收益与利润分析（1）"><a href="#收益与利润分析（1）" class="headerlink" title="收益与利润分析（1）"></a>收益与利润分析（1）</h2><p>总收益$\quad TR=P\cdot Q$</p><p>平均收益$\quad AR=\frac{TR}{Q}=\frac{P\cdot Q}{Q}=P$</p><p>边际收益$\quad MR=\frac{\Delta TR}{\Delta Q}$</p><p><img src="https://s2.loli.net/2022/11/08/L6z9TXi8GQWs2Vo.png" alt="6dot6pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/IiASpYrabT2GJhk.png" alt="6dot6pic2.png"></p><h2 id="收益与利润分析（2）"><a href="#收益与利润分析（2）" class="headerlink" title="收益与利润分析（2）"></a>收益与利润分析（2）</h2><p>利润$\quad \pi =TR-TC$</p><p><img src="https://s2.loli.net/2022/11/08/JKIrxGzj9kXpsRu.png" alt="6dot6pic3.png"></p><blockquote><p>利润最大化的条件是边际收益等于边际成本</p></blockquote><h2 id="完全竞争的四个假设条件"><a href="#完全竞争的四个假设条件" class="headerlink" title="完全竞争的四个假设条件"></a>完全竞争的四个假设条件</h2><p>四种市场：$\quad$完全竞争$\quad$完全垄断$\quad$垄断竞争$\quad$寡头垄断</p><p>完全竞争的条件：</p><ul><li>大数假定<ul><li>有无数多生产者和消费者</li><li>完全竞争厂商没有定价权</li></ul></li><li>产品同质性<ul><li>所有同名产品都是一样的</li><li>厂商没有必要做广告</li></ul></li><li>信息完备性<ul><li>信息是公开、免费的，人们无所不知</li><li>不会出现假冒伪劣等现象</li></ul></li><li>资源完全流动性<ul><li>生产者想生产什么就生产什么</li><li>人（资源）想干什么工作就干什么工作</li><li>人口自由流动</li><li>意味着资源可以达到最佳配置</li></ul></li></ul><p>接近于完全竞争市场的：</p><p>证券市场 $\qquad$ 农产品市场</p><p><img src="https://s2.loli.net/2022/11/08/48WUiDeKcFnJBuN.png" alt="7dot1pic1.png"></p><h2 id="完全竞争厂商的短期均衡"><a href="#完全竞争厂商的短期均衡" class="headerlink" title="完全竞争厂商的短期均衡"></a>完全竞争厂商的短期均衡</h2><p><img src="https://s2.loli.net/2022/11/08/xBrQeNJzqy6g17Z.png" alt="7dot2pic1.png"></p><blockquote><p>注意：这里的利润是<strong>经济利润</strong>，只能说赚的钱比正常的利润要少。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/7JdncRvCoKbqV2H.png" alt="7dot2pic2.png"></p><blockquote><p>注意这里的小于号，它的记法是出于经济学的习惯而非数学<br>P=AVC，停产点</p></blockquote><h2 id="完全竞争的长期均衡"><a href="#完全竞争的长期均衡" class="headerlink" title="完全竞争的长期均衡"></a>完全竞争的长期均衡</h2><p><img src="https://s2.loli.net/2022/11/08/DHzlPtF6von7UVO.png" alt="7dot3pic1.png"></p><p>完全竞争厂商的长期均衡条件：</p><script type="math/tex; mode=display">MR=SMC=LMC=SAC=LAC</script><p><img src="https://s2.loli.net/2022/11/08/ZGR9Mzy34YWPJag.png" alt="7dot3pic2.png"></p><p>长期均衡是在最佳规模下的最佳产量，是一个行业长期均衡的达到的结果。</p><p>当个别厂商均衡的时候，行业未必均衡。当行业均衡的时候，整个厂商都均衡了。</p><h2 id="完全垄断市场的条件"><a href="#完全垄断市场的条件" class="headerlink" title="完全垄断市场的条件"></a>完全垄断市场的条件</h2><p>三个条件：</p><ol><li>只有一个厂商</li><li>无很近的替代品</li><li><strong>其他厂商无法进入</strong>（最重要）<ul><li>政府特许</li><li>材料垄断</li><li>技术垄断</li><li>不当竞争</li></ul></li></ol><p><img src="https://s2.loli.net/2022/11/08/frz4onIhyQNWjRC.png" alt="8dot1pic1.png"></p><h2 id="完全垄断厂商的短期决策"><a href="#完全垄断厂商的短期决策" class="headerlink" title="完全垄断厂商的短期决策"></a>完全垄断厂商的短期决策</h2><p><img src="https://s2.loli.net/2022/11/08/9LNIEcfqbABuWPw.png" alt="8dot2pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/QnvObdeGP5FAUYj.png" alt="8dot2pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/xBvKgtw7QCZspUL.png" alt="8dot2pic3.png"></p><p>少数情况的应对方法：降低成本、刺激消费</p><h2 id="完全垄断厂商的长期决策"><a href="#完全垄断厂商的长期决策" class="headerlink" title="完全垄断厂商的长期决策"></a>完全垄断厂商的长期决策</h2><p><img src="https://s2.loli.net/2022/11/08/xNl92HfESkuhKWz.png" alt="8dot3pic1.png"></p><h2 id="完全垄断厂商的价格歧视"><a href="#完全垄断厂商的价格歧视" class="headerlink" title="完全垄断厂商的价格歧视"></a>完全垄断厂商的价格歧视</h2><p><strong>一级价格歧视</strong></p><ul><li>需求者少</li><li>十分了解消费者的支付能力</li><li>两次、多次收费现象</li></ul><p><img src="https://s2.loli.net/2022/11/08/pG2hyaOuZg3zrDe.png" alt="8dot4pic1.png"></p><p><strong>二级价格歧视</strong>（一部分一部分地单独定价）</p><ul><li>例如：邮政计费、电话计费</li></ul><p><strong>三级价格歧视</strong>（同一个产品在不同的市场上制定不同的价格）</p><p>条件：</p><ul><li>市场之间是分割的</li><li>消费者的需求不同</li></ul><p><img src="https://s2.loli.net/2022/11/08/y8DCZzH61XsSkhW.png" alt="8dot4pic2.png"></p><h2 id="垄断竞争市场的条件"><a href="#垄断竞争市场的条件" class="headerlink" title="垄断竞争市场的条件"></a>垄断竞争市场的条件</h2><p>三个条件：</p><ol><li>有很多厂商</li><li><strong>有很近的替代品</strong> $\rightarrow$ 产品是有差别的</li><li>其他厂商自由进出</li></ol><p>整体产品的三个层次：</p><ul><li>产品的核心（功能）</li><li>产品的实体</li><li>产品的附加服务</li></ul><p><img src="https://s2.loli.net/2022/11/08/pLJkDlXbeITwRuK.png" alt="9dot1pic1.png"></p><p>垄断竞争市场竞争特别激烈</p><p><img src="https://s2.loli.net/2022/11/08/i1CXQ2vWDwFRSgM.png" alt="9dot1pic2.png"></p><h2 id="垄断竞争厂商的短期决策"><a href="#垄断竞争厂商的短期决策" class="headerlink" title="垄断竞争厂商的短期决策"></a>垄断竞争厂商的短期决策</h2><p>垄断竞争厂商达到短期决策均衡满足的条件：</p><ol><li>MR=MC</li><li>在MR=MC决定的产量上D与d相交</li></ol><p><img src="https://s2.loli.net/2022/11/08/PJuoS72Dzn1RBZ9.png" alt="9dot2pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/HftRExAPzVTkQpe.png" alt="9dot2pic2.png"></p><p>垄断竞争厂商在短期之内，不管怎样调，在市场里的份额没有增加。</p><h2 id="垄断竞争厂商的长期决策"><a href="#垄断竞争厂商的长期决策" class="headerlink" title="垄断竞争厂商的长期决策"></a>垄断竞争厂商的长期决策</h2><p><img src="https://s2.loli.net/2022/11/08/Uydt63jNeqFGL12.png" alt="9dot3pic1.png"></p><p><img src="https://s2.loli.net/2022/11/08/KXreCdG4OZRgQfk.png" alt="9dot3pic2.png"></p><p>垄断竞争长期决策的条件：</p><ol><li>MR=SMC=LMC</li><li>在MR=SMC=LMC决定的产量水平上，d线与LAC相切</li><li>D过d与LAC的切点</li></ol><p>短期决策$\rightarrow$预期变化$\qquad$长期决策$\rightarrow$份额变化</p><blockquote><p>完全竞争价格最低产量最高<br>完全垄断价格最高产量最低<br>垄断竞争居于中间</p></blockquote><h2 id="古诺模型"><a href="#古诺模型" class="headerlink" title="古诺模型"></a>古诺模型</h2><p>寡头垄断市场：只有少数几个大的厂商垄断着市场</p><p>特点：</p><ul><li>只有少数大厂商</li><li>厂商间相互影响</li><li>达成协议</li><li>价格相当稳定</li></ul><p>寡头垄断市场举例：$\quad$ 钢铁公司、化工集团</p><p><img src="https://s2.loli.net/2022/11/08/yfa6QpJGcFHIACs.png" alt="10dot1pic1.png"></p><p>古诺模型的意义：说明寡头之间是相互影响的</p><p><strong>推论：</strong> 如果有$n$个寡头，每一个寡头的产量为$Q_i= \frac{1}{n+1}\cdot Q_0$</p><h2 id="斯威齐模型"><a href="#斯威齐模型" class="headerlink" title="斯威齐模型"></a>斯威齐模型</h2><p><img src="https://s2.loli.net/2022/11/08/JEhBDMNLIOioQgs.png" alt="10dot2pic1.png"></p><p>斯威齐模型认为，寡头垄断的需求曲线<strong>有折弯</strong></p><p><img src="https://s2.loli.net/2022/11/08/sMCZVrEqzpKRcI5.png" alt="10dot2pic2.png"></p><p>寡头垄断市场中，寡头的规模也不是完全相等</p><h2 id="价格领袖制"><a href="#价格领袖制" class="headerlink" title="价格领袖制"></a>价格领袖制</h2><p>目的：确定价格、维护价格稳定</p><p>充当价格领袖的条件：</p><ul><li>成本低的企业</li><li>规模大的寡头</li></ul><p><img src="https://s2.loli.net/2022/11/08/12RhL8ysMKCJawS.png" alt="10dot3pic1.png"></p><h2 id="囚徒困境"><a href="#囚徒困境" class="headerlink" title="囚徒困境"></a>囚徒困境</h2><p><img src="https://s2.loli.net/2022/11/08/aDWA5nNxfYiBS3V.png" alt="10dot4pic1.png"></p><p><strong>卡特尔（cartel）：</strong> 生产者之间的价格和产量协议</p><p>卡特尔本身是个囚徒博弈的问题。</p><h2 id="智猪博弈"><a href="#智猪博弈" class="headerlink" title="智猪博弈"></a>智猪博弈</h2><p><img src="https://s2.loli.net/2022/11/08/QyeUrIp6A19Md3b.png" alt="10dot5pic1.png"></p><p>博弈矩阵：</p><!--网上找资料缝了一个表格，可能会有细节上的错误qwq--><p><style type="text/css"><br>.mytable{<br>    width: 300px;<br>    height: 200px;<br>    margin: 0 auto;<br>}</style></p><table class="mytable"><th class="row-0" style="150px;height:50px;" >    <div class="biaotou">         <div class="biaotoutxt1">小猪策略</div>         <div class="biaotoutxt2">大猪策略</div>    </div> </th> <style>    .biaotou {          line-height: 5px;        text-align: left;    }    .biaotoutxt1 {        color: #FFFFF;        padding: 1px 0 0 65px;    }    .biaotoutxt2 {        color: #FFFFF;        padding: 15px 0 0 5px;    }</style><th>按</th><th>不按</th><tr><th>按</th><th>大=+3<br>小=+1</th><th>大=+2<br>小=+4</th></tr><tr><th>不按</th><th>大=+7<br>小=-1</th><th>大=0<br>小=0</th></tr></table><p><br></p><p><strong>剔除最劣决策法</strong>，最后结果：大猪按，小猪不按</p><blockquote><p>寡头之间是相互影响的，决策是相互依赖的</p></blockquote><h2 id="生产要素市场认知"><a href="#生产要素市场认知" class="headerlink" title="生产要素市场认知"></a>生产要素市场认知</h2><p>生产者使用要素的原则：利润最大化</p><p>产品市场：</p><script type="math/tex; mode=display">MR=MC</script><script type="math/tex; mode=display">MP_L\cdot MR=MC\cdot MP_L</script><script type="math/tex; mode=display">\frac{\Delta Q}{\Delta L}\cdot \frac{\Delta TR}{\Delta Q}=\frac{\Delta TC}{\Delta Q} \cdot \frac{\Delta Q}{\Delta L}</script><script type="math/tex; mode=display">\frac{\Delta TR}{\Delta L}=\frac{\Delta TC}{\Delta L}</script><script type="math/tex; mode=display">\Downarrow</script><script type="math/tex; mode=display">MRP_L=MFC_L</script><p>$notion\quad$边际收益产品（$MRP_L$） $Marginal$ $Rvenue$ $Product$</p><p>$notion\quad$边际要素成本（$MFC_L$） $Marginal$ $Factor$ $Cost$</p><p>生产当中<strong>使用要素的原则</strong>：$MRP_L=MFC_L$</p><p>在完全竞争的要素市场上，工资是一个常数。$MFC_L=W_0(工资)$</p><p><img src="https://s2.loli.net/2022/11/08/2MNwpUZcsABf5mq.png" alt="11dot1pic1.png"></p><blockquote><p>劳动量是工资的函数<br>图形解释：在上图中，因为边际收益产品和工资的单位相同，所以可以一起放在纵轴。边际收益产品先增后减，可以由其含义推得。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/JYrDnf51qZcvNGd.png" alt="11dot1pic2.png"></p><blockquote><p>粗线部分是劳动的需求曲线<br>解释：上图中的W0,W1,W2可以理解为不同的薪资水平。如果一个企业（or whatever…）的工资水平高，<strong>那就应该</strong>少雇人。在视频中，是以劳动为例来讲的，如果<strong>把横轴变成资本，纵轴变成利息，就形成了资本的需求曲线</strong>；如果<strong>把横轴变成土地，纵轴变成土地价格，就是土地的需求曲线</strong>。</p></blockquote><p>AFC：平均要素成本</p><p><img src="https://s2.loli.net/2022/11/08/HXvJ2VgASKckdoD.png" alt="11dot1pic3.png"></p><p><img src="https://s2.loli.net/2022/11/08/Nj8k62KybTCQI4O.png" alt="11dot1pic4.png"></p><p><img src="https://s2.loli.net/2022/11/08/GvRericVwA7aLfN.png" alt="11dot1pic5.png"></p><h2 id="工资的决定"><a href="#工资的决定" class="headerlink" title="工资的决定"></a>工资的决定</h2><p><img src="https://s2.loli.net/2022/11/08/IUVuKna7xcDYtMq.png" alt="11dot2pic1.png"></p><p>替代效应：$W_\uparrow \rightarrow L_\uparrow$</p><p>收入效应：$W_\uparrow \rightarrow L_\downarrow$</p><p><img src="https://s2.loli.net/2022/11/08/zDMZ9UsYlJ5SPBA.png" alt="11dot2pic2.png"></p><p>提高工资水平的策略：</p><ol><li>需求：<ul><li>提高生产率</li><li>支持涨价</li><li>贸易保护</li></ul></li><li>供给：（减少供给）<ul><li>对移民的限制</li><li>最长工作时间立法</li><li>规定工作的年龄</li><li>禁止使用童工</li><li>强制退休</li><li>制定最低工资法</li></ul></li></ol><h2 id="利息的决定与变动"><a href="#利息的决定与变动" class="headerlink" title="利息的决定与变动"></a>利息的决定与变动</h2><p>$notion\quad$迂回生产论</p><p><img src="https://s2.loli.net/2022/11/08/XMnGpKQiNuoB8cH.png" alt="11dot3pic1.png"></p><p>宽松政策：供给增加，利率下调</p><p>紧缩政策：供给减少，利率上调</p><h2 id="地租的决定"><a href="#地租的决定" class="headerlink" title="地租的决定"></a>地租的决定</h2><script type="math/tex; mode=display">土地价格=\frac{地租(或土地的收入)}{(银行)利率}</script><p><img src="https://s2.loli.net/2022/11/08/lfb3WKXzqSDFGkO.png" alt="11dot4pic1.png"></p><p>准地租（经济地租）：固定资产在短期内获得的报酬</p><script type="math/tex; mode=display">\begin{alignedat}{2}准地租&=固定成本+经济利润 \\     &= \pi +TFC \\\end{alignedat}</script><p><img src="https://s2.loli.net/2022/11/08/myNXLUGR7SFuIO2.png" alt="11dot4pic2.png"></p><p><img src="https://s2.loli.net/2022/11/08/lMqW62d5porfnyw.png" alt="11dot4pic3.png"></p><script type="math/tex; mode=display">\begin{aligned}\int_{0}^{Q_0}(P_0-MC)\,{\rm d}Q &= \int_{0}^{Q_0}P_0\,{\rm d}Q-\int_{0}^{Q_0}MC\,{\rm d}Q \\&= \int_{0}^{Q_0}P_0\,{\rm d}Q-(TC-TFC) \\&= (\int_{0}^{Q_0}P_0\,{\rm d}Q-TC)+TFC \\&= (TR-AVC\cdot Q_0)+TFC\\&= \pi +TFC\end{aligned}</script><script type="math/tex; mode=display">生产者剩余=\pi +TFC</script><p>寻租行为</p><p><img src="https://s2.loli.net/2022/11/08/LvRXmPIMfyYkcNU.png" alt="11dot4pic4.png"></p><h2 id="社会福利及其衡量"><a href="#社会福利及其衡量" class="headerlink" title="社会福利及其衡量"></a>社会福利及其衡量</h2><p><strong>个人福利</strong>是人们的欲望和需要所得到的满足。</p><p><strong>社会福利</strong>是个人福利的总和。</p><p><strong>经济福利</strong>是可以直接或间接用货币衡量的社会福利；<strong>非经济福利</strong>是不能用货币衡量的社会福利。</p><p>对社会福利的研究属于<strong>规范性</strong>的研究。</p><p><strong>帕累托效率</strong>指的是这样一种情况：这时经济已不可能通过改变资源配置，在其他人（至少1人）的效用水平至少不降的情况下，使任何别人（至少1人）的效用水平有所提高。</p><script type="math/tex; mode=display">帕累托无效率 \stackrel{帕累托改进}{\longrightarrow}帕累托效率</script><p>表现：</p><ol><li>交换的帕累托效率</li><li>生产的帕累托效率</li><li>交换与生产的帕累托效率</li></ol><p><img src="https://s2.loli.net/2022/11/08/xcW84nHKuMCOvgN.png" alt="12dot1pic1.png"></p><blockquote><p>交换的帕累托效率<br>解释：A的$MRS_{xy}$大于B，意味着在资源有限的前提下，应当根据贪心的策略将X优先配给A，将Y配给B。由边际效用的规律知，A和B两者的$MRS$值最终会趋于相等。这就是帕累托改进的过程在数值上的表现。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/4hiuH52DKseJG9c.png" alt="12dot1pic2.png"></p><blockquote><p>生产的帕累托效率</p></blockquote><p>$MRT_{xy}$：边际产品转化率</p><p><img src="https://s2.loli.net/2022/11/08/z4dM3HvmkX5GwJF.png" alt="12dot1pic3.png"></p><blockquote><p>MRT即是此图中的替代率</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/FKHBhtvQ95GapTE.png" alt="12dot1pic4.png"></p><blockquote><p>生产与交换的帕累托效率<br>当$MRS_{xy}=MRT_{xy}$时，社会出清。</p></blockquote><h2 id="收入分配公平程度的衡量"><a href="#收入分配公平程度的衡量" class="headerlink" title="收入分配公平程度的衡量"></a>收入分配公平程度的衡量</h2><p>洛伦茨曲线</p><p><img src="https://s2.loli.net/2022/11/08/vQVUeKGFZD5Im4r.png" alt="12dot2pic1.png"></p><script type="math/tex; mode=display">基尼系数=\frac{A}{A+B}</script><p><img src="https://s2.loli.net/2022/11/08/pGir5DWC4Bnv7t9.png" alt="12dot2pic2.png"></p><ul><li>基尼系数在0.3以下，平均状态</li><li>0.3-0.4，合理状态</li><li>大于0.4，收入差距过大</li><li>大于0.6，暴发户和赤贫阶层同时出现</li></ul><h2 id="外部性及其影响"><a href="#外部性及其影响" class="headerlink" title="外部性及其影响"></a>外部性及其影响</h2><p>消费的外部性：</p><ul><li>正外部性：消费者的消费为其他消费者带来的利益</li><li>负外部性：消费者为其他消费者带来的损害</li></ul><p>生产的外部性：</p><ul><li>正外部性：（例如）养蜜蜂、行业经济</li><li>负外部性：（例如）环境污染</li></ul><blockquote><p>解决生产的负外部性：明确产权、 . . .</p></blockquote><h2 id="信息不完全性"><a href="#信息不完全性" class="headerlink" title="信息不完全性"></a>信息不完全性</h2><p>次品市场和逆向选择$\quad$错误选择（逆向选择）</p><p>信息不对称的情况下，可能产生道德风险。</p><blockquote><p>在市场经济当中，存在市场的失灵。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>祝大家考试稳过，生活愉（$y\grave{u}$）快，阖家欢乐（$l\grave{u}o$）！</p><script type="math/tex; mode=display">\mathcal{THE}\quad \mathcal{END}</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1AT4y137Fp&quot;&gt;微观经济学-中国农业大学&lt;/a&gt; 的笔记。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/11/07/iAHJGzd</summary>
      
    
    
    
    <category term="笔记" scheme="https://loveofpeach.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="经济" scheme="https://loveofpeach.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
</feed>
