<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loveofpeach&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://loveofpeach.github.io/atom.xml" rel="self"/>
  
  <link href="https://loveofpeach.github.io/"/>
  <updated>2022-10-17T05:18:32.406Z</updated>
  <id>https://loveofpeach.github.io/</id>
  
  <author>
    <name>love of peach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语错题集</title>
    <link href="https://loveofpeach.github.io/posts/e69d6a3b.html"/>
    <id>https://loveofpeach.github.io/posts/e69d6a3b.html</id>
    <published>2022-10-17T01:52:57.000Z</published>
    <updated>2022-10-17T05:18:32.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sentence"><a href="#Sentence" class="headerlink" title="Sentence"></a>Sentence</h2><p>Swithing to a seven-hour workday paid off: output went up. In addition, the staff, many of <strong>whom</strong> have been with the company for decades, appreciated getting home earlier.</p><p>The refuge farm itself is actually a nonprofit organization, <strong>one</strong> aiding survivors of drug and alcohol addiction, violence and other horrible experience.</p><p>Competed in 1891, in <strong>what</strong> was known as <em>The Gilded Age</em>, the five-story mansion is now owned by a famous actor who decides to stage a special production of Shakespeare’s <em>Hamlet</em>.</p><p>-We are looking for somebody who is fluent in Spanish. -No problem. I <strong>studied</strong> Spanish for four years at college.</p><p>I hope that we will be able to make it through the tough times and back to the business of working together <strong>on</strong> <strong>behalf</strong> <strong>of</strong> our common goals.</p><p>The laptops made by our company sell best, but nobody could have guessed the place in the market that they <strong>were</strong> <strong>to</strong> <strong>have</strong> 20 years ago.</p><p>In my driving lesson, a traffic rule that impressed me most is that in on time <strong>all</strong> <strong>vehicles</strong> <strong>should</strong> <strong>stop</strong> when the traffic lights turn red.</p><p><strong>Intending</strong> the concert to raise money for hunger relief and to make the public aware of the problem, Geldof invited many famous musicians to take part in  it.</p><p>Whether to favor urban development or the preservation of historical sites is especially controversial in China, where there exists rich history, diversified tradition and cultural <strong>deposits</strong>.(沉积物)</p><p><strong>Had</strong>  <strong>it</strong> <strong>not</strong> <strong>been</strong> for the timely investment from the outside, this company would not be so thriving as it is.</p><p>She <strong>had  intended</strong> to clean out the spare room last week, but it was much too occupied at that time.</p><p>Jinyong, considered one of the greatest ever kongfu fiction writers in China, built a magic land <strong>that</strong> people could escape into every now and then.</p><p><strong>Blanketed</strong>(被覆盖) in smog as winter approached, quite a lot of northen cities nationwide had to close the freeways constantly.</p><p>The regin of the next Japanese emperor will be known as “Reiwa”(令和) era, in <strong>whose</strong> name the character for “harmony” is included.</p><p>Nowadays, the Internet is a popular <strong>channel</strong>(频道；手段) for the public to access  information and voice their opinions.</p><p>The man <strong>circulating</strong> the fake news that 18 firefighters lost their lives in the explosion was arrested.</p><p>-I spent a week in Xiamen last month. -Then you must have been overcharged for sea food many a time, <strong>weren’t</strong> you? This city is known for that.</p><p>-Don’t forget to drop me a line(写信) when you settle down. -Trust me! I won’t. I’ll keep you <strong>posted</strong>.</p><p>I think that conflict is unlikely to happen, but if it <strong>were</strong> <strong>to</strong> <strong>occur</strong>, the interest of both China and the U.S. would be severely damaged.</p><p>Just tell Mike <strong>whoever</strong> has a good knowledge of physics and history is qualified for the position.</p><p>Bella, who is always cheerful, creates a friendly work atmosphere in her office every day, <strong>which</strong> her colleagues find pleasant and relaxing.</p><p>-Many optimistic teenagers owe their personalities to their outgoing parents. -It makes sense. As we all know, a happy parent <strong>makes</strong> <strong>for</strong> a happy child.</p><p>-I can’t understand why he <strong>should</strong> <strong>have</strong> <strong>been</strong> so angary. I meant no offence. -It’s typical of him to be so sensitive.</p><p>The lecture <strong>having</strong> <strong>been</strong> <strong>given</strong>, a lively question-and-answer session followed.</p><p>According to the new regulation, every employee shall be paid <strong>in</strong> <strong>proportion</strong> <strong>to</strong> their work so that productivity can be increased.</p><p>-How was the journey? -Tiring! All the seats in the train <strong>occupied</strong>, I stood all the way.</p><p>A case of suspected food poisoning in the New York has led to 6 high school students <strong>being</strong> <strong>sent</strong> to hospital.</p><p>-I wonder what makes him a good English teacher. -He <strong>served</strong> as a volunteer in the UK for two years, which helps him with his work a lot.</p><p>Despite the heavy snow outside yesterday, everybody in the company <strong>went</strong> <strong>about</strong> their daily tasks as usual.</p><p>Never say anything behind a person’s back <strong>that</strong> you wouldn’t say to his face.</p><p>Unpleasant advice is a good medicine, <strong>which</strong> tastes bitter but is good for health.</p><p>We think the Internet is one of the most important sources <strong>that</strong> we can turn to for new information.</p><p>We will only discuss such problems <strong>as</strong> have something to do with our own interests.</p><p>The great wall is the only one of the buildings on the earth <strong>that</strong> is seen from the moon.</p><p>Zhang Han has determined to go to France for further study. Therefore, <strong>whatever</strong> difficulty it is, she will try her best to make her dream come true.</p><p>Large quantities of water <strong>are needed</strong> for cooling purposes in the iron and steel making process.</p><p>Richness of nightlife is one of the standards that <strong>are  used</strong> to measure a region’s living standard.</p><p>In recent years, many a teacher at the college <strong>has</strong> abandoned teaching in favor of a career as a businessman and more than one of them <strong>has</strong> achieved success.</p><p>All I want to tell you <strong>is</strong> that all <strong>are</strong> equal before the law.</p><p>Every means <strong>has  been</strong> tried to solve the problem, but none is effective.</p><p>Many a student <strong>has</strong> been to Beijing and more than one student <strong>has</strong> ever been to the Great Wall.</p><p>Every boy and every girl in our school <strong>is</strong> required to wear their school uniforms on weekdays.</p><p>Now that the road <strong>has</strong> <strong>been</strong> <strong>completed</strong> and villagers can safely walk all the way to the bottom of the mountain without fear of injury, Mr.Zhang has started working on a second road that leads to a water spring.</p><p>Even if there was a gun in my hand and he <strong>was</strong> <strong>standing</strong> in front of me, I would not shoot him.</p><p><strong>As</strong> <strong>a</strong> <strong>rule</strong>(通常情况下), John works till six o’clock in the afternoon except weekends.</p><p>According to the timetable, the train for Shanghai <strong>leaves</strong> at seven o’clock in the morning.</p><p>-Is Wang Huan a teacher? -Yes. But she <strong>served</strong> in the army for two years.</p><p>-Where is the telephone book? -I <strong>will</strong> <strong>get</strong> it for you.</p><p>David said he would climb Mount Tai with his friends next Sunday if it <strong>didn’t</strong> <strong>rain</strong>.</p><p>The audience burst into laughter because of the <strong>slip</strong> (错误) of the tongue from the host, who said, “ Good ladies, evening and gentlemen! “</p><p>-It was the third time that Rodger <strong>had</strong> <strong>phoned</strong> me to say he had a new job. -It’s difficult to keep a young man in one job for life nowadays.</p><p>When you feel alone, just look at the spaces between your fingers, and remember that’s <strong>where</strong> my fingers fit perfectly.</p><p>Next year’s key challenges include risks in the financial area and old issues that have yet <strong>to</strong> <strong>be</strong> <strong>solved</strong>.</p><p>The application of modern technology like AI in classroom teaching increasingly received a mixed <strong>reception</strong>(欢迎) among students.</p><p>I felt like giving up. I probably <strong>would  have</strong>, but my Dad whispered,”come on! You can make it!”</p><p>“But for the fact that you <strong>studied</strong> here for 3 years, I <strong>wouldn’t</strong> <strong>be</strong> <strong>studying</strong> in this key high school now, facing its endless homework and exams!” the poor girl cried to her helpless father.</p><p>-What makes you so nervous? -The China vs Iran World Cup qualifier will <strong>kick</strong> <strong>off</strong> tonight.</p><p>Just surf the Internet and then call one <strong>of  which</strong> the telephone number is provided.</p><p>Molly finally agreed, <strong>somewhat</strong>(等价于to some degree) reluctantly, to go and see a doctor.</p><p>I know he feels upset about his failure, and I can <strong>relate</strong> <strong>to</strong>(理解) that.</p><p>The company needs to <strong>shake</strong> <strong>off</strong> its outdated image to promote its newly-released product. (shake off one’s image摆脱 $\cdots$ 的形象)</p><p>He was offered a position at the local church school, <strong>after</strong> <strong>which</strong> he went to the Cambridge.</p><p>Usually, I spend my money carefully, as I have to, <strong>given</strong> that I don’t earn that much.</p><p>-Did you tell others that I’m leaving the company soon? You heave such a big mouth ! -I am so sorry about that. It was just a <strong>slip</strong> of the tongue.</p><p>-Would you like to give me the <strong>formula</strong> for success? -Make some mistakes. That’s where you’ll find success<br> (recipe意为“食谱、方法”；receipt意为“收据、契据”)</p><p>Liza <strong>may</strong> well not want to go on the trip —- she hates traveling. (“may well”和“might well”意为“很可能”)</p><p>Morris ordered the flowers and chocolates he would present to his wife on Valentine’s Day <strong>well</strong> <strong>in</strong> <strong>advance</strong>.</p><p>“The Wandering Earth” tells a story that the world goverment decides to move Earth to a new solar system as the sun dies, but unfortunately the Earth is on an apparent <strong>collision</strong> (碰撞) course with Jupiter.</p><h2 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a>Vocabulary</h2><p><strong>consensus</strong>【共识】Secondly,what would be a sufficient(足够) consensus to ground an appeal to social justice?</p><p><strong>fish  in  the  air</strong>【白费力气】</p><p><strong>sit  on  the  fence</strong>【观望.jpg】</p><p><strong>caught  red</strong> <strong>-handed</strong>【抓个现行】</p><p><strong>by  virtue  of</strong>【凭借】</p><p><strong>fat  chance</strong>【渺茫的希望/可能性】</p><p><strong>good  Samaritan</strong>【乐善好施的人】</p><p><strong>fly  off  the  handle</strong>【勃然大怒】</p><p><strong>beat  around  the  bush</strong>【拐弯抹角】</p><p><strong>pull  through</strong>【康复】</p><p><strong>efficient</strong>【高效】</p><p><strong>budget</strong>【预算】</p><p><strong>pension</strong>【退休金】</p><p><strong>on</strong> <strong>account</strong> <strong>of</strong>【由于】</p><p><strong>no  sweat</strong>【小事一桩、没问题】</p><p><strong>associate</strong>【关联】The Reserve has been in the traditional associate unit business since 1968, where reservists fly and maintain aircraft owned by the active duty.</p><p><strong>reserve</strong> 【保留】</p><p><strong>revision</strong> 【调整】Reference works, like guide books, need constant revision and sometimes replacement.</p><p><strong>get</strong> <strong>over</strong>【克服】</p><p><strong>the</strong> <strong>salt</strong> <strong>of</strong> <strong>the</strong> <strong>earth</strong>【社会中坚】</p><p><strong>a</strong> <strong>big</strong> <strong>potato</strong>【大人物】</p><p><strong>the</strong> <strong>apple</strong> <strong>of</strong> <strong>our</strong> <strong>eye</strong>【掌上明珠】</p><p><strong>pull  yourself  together</strong>【重新振作】</p><p><strong>ample</strong>【充足】</p><p><strong>trembled</strong>【颤抖的】</p><p><strong>twisted</strong>【扭曲的】</p><p><strong>send</strong> <strong>over</strong>【发送】</p><p><strong>tentative</strong>【暂时的】</p><p><strong>consistent</strong>【持续的】</p><p><strong>confidential</strong>【机密的】</p><p><strong>beauty  is  in  the  eye  of  the  beholder</strong>【情人眼里出西施】</p><p><strong>conventional</strong>【传统的】</p><p><strong>concrete</strong>【具体的】</p><p><strong>cater</strong> <strong>to</strong>【迎合】</p><p><strong>contrary</strong>【相反、对立的】</p><p><strong>abrupt</strong>【粗鲁的、突然的】</p><p><strong>object</strong> <strong>to</strong>【反对】</p><p><strong>appeal</strong> <strong>to</strong>【吸引】</p><p><strong>expect  (sb)</strong> <strong>to  do</strong> || <strong>anticipate</strong> <strong>(doing)  sth</strong></p><p><strong>a</strong> <strong>tough</strong> <strong>nut</strong>【难对付的人】</p><p><strong>our</strong> <strong>great</strong> <strong>rock</strong>【我们的支持者】</p><p><strong>bring  out</strong>【呈现(方面)】</p><p><strong>sort  out</strong>【分类；处理(问题)】</p><p><strong>on  top  of</strong>【除了】</p><p><strong>in  no  time</strong>【$Leftrightarrow$ $at  once$】(注意要与$at$ $no$ $time$区分)</p><p><strong>account</strong>【账户；描述；$cdots$】</p><p><strong>pick  up  the  pieces</strong>【收拾残局】</p><p><strong>jump  down  your  throat</strong>【训斥某人】</p><p><strong>put  out</strong>【(另)出版】</p><p><strong>phenomenon</strong>【现象】</p><p><strong>roll  out</strong>【推出；离开；$cdots$】</p><p><strong>throw  in  the  towel</strong>【认输】</p><p><strong>the</strong> <strong>best</strong> <strong>fish</strong>【好人】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Sentence&quot;&gt;&lt;a href=&quot;#Sentence&quot; class=&quot;headerlink&quot; title=&quot;Sentence&quot;&gt;&lt;/a&gt;Sentence&lt;/h2&gt;&lt;p&gt;Swithing to a seven-hour workday paid off: out</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="英语" scheme="https://loveofpeach.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>AIR相关转载</title>
    <link href="https://loveofpeach.github.io/posts/55a0094f.html"/>
    <id>https://loveofpeach.github.io/posts/55a0094f.html</id>
    <published>2022-10-16T14:29:03.000Z</published>
    <updated>2022-10-16T14:49:20.383Z</updated>
    
    <content type="html"><![CDATA[<p>首先应该知道，在《AIR》的故事里，隐含着许多和日本神话、传说有关的元素。例如《鸟之诗》的歌词中有“わたつみのような强さ”（“如海神般坚强”）一句，其中的“わたつみ”当训作“绵津见神”，是神话中的海神。Summer篇里神奈母亲的称号文字“八百比丘尼”也是出自古老的人鱼传说。观铃父亲的名字“橘敬介”，也包含着一样的解释。</p><p>日本最古老的书籍《古事记》中卷，“垂仁天皇”一章中，记载着如下的故事：</p><blockquote><p>“垂仁天皇令多迟摩毛理（たじまもり），到常世之国寻找‘非时香果’（非时の香の木の実）。多迟摩毛理终于来到常世之国，采到那种果实，可是在这期间，天皇已经死了。多迟摩毛理在墓前号啕大哭，终于痛哭而死。这种‘非时香果’，就是现在的橘。”</p></blockquote><p>所谓“常世之国”，就像浦岛太郎故事里的龙宫那样，是“超越了时间的世界”，换言之，“在大海彼方的永恒世界”。而且，“非时香果（非时の香の木の実）”，也就是“永远散发香气的树木所结的果实”的意思。</p><p>由上，“橘敬介”这个名字，可以解读为“尊敬橘——‘非时香果’的人”（「非时の香の木の実を」敬う人），即“寻找‘非时香果’的人”（非时の香の木の実を求める人）——也就是“寻找‘常世之国’(‘永恒的世界’)的人”（常世の国（永远の世界）を求める人）。但问题在于，“寻找‘非时香果’的人”，或称“寻找‘常世之国’的人”，和《AIR》之间又有什么关系呢？</p><p>在Summer篇“空梦”一节里，知德对柳也和里叶说过这样的话：</p><blockquote><p>知德：“对统治者来说，可以到达神身边的羽翼是不需要的东西。这样的话，所有的文书都可以修改了吧。将空作海、将鸟作鱼、将火作水，都可以这么互换过来……”<br>柳也：“（前略）正因如此，朝廷害怕翼人作为传说流传下来，会把关于翼人的一切都巧妙地隐藏起来，焚烧、修改书籍，抹杀我们的存在吧。”</p></blockquote><p>《古事记》成书于公元712年，而当时是995年；这两段对话暗示着，当时那些古文书中的“空”字后来已被置换成了“海”字；所以，对“常世之国”的解释——“在大海彼方的永恒世界”，原本很可能是“在天空彼方的永恒世界”。</p><p>《AIR》中“永恒的世界”一语出现得很少，但我认为《AIR》中的“无限”和“永恒”的意义是一样的。</p><p>AIR篇的结尾，“そら”飞向天空之前，曾有这样的一段话：</p><blockquote><p>“她已经不在这片大地上了，而是在那片天空的彼方。<br>那正是天空悲伤的原因。<br>她一直在面对着天空，<br>那片永无止境的苍穹……<br>永无终结的世界。（何も终わりを知ることもなく，続いていく世界）<br>回到那无限（その无限）中去的少女。”</p></blockquote><p>最后一句里的“那无限”所指的，自然是“永无终结”的状态，而且，“天空的彼方”也是指“永无终结的世界”。因此，“永恒”可以等同于这里的“永无终结”。</p><p>于是，“永恒”＝“永无终结”＝“无限”＝“天空的彼方”。</p><p>在《AIR》中，“天空”属于“憧憬的领域”，同时也是“过去的领域”，是“死者的领域”。在“天空中”的人，有神奈、みちる、佳乃的母亲，她们都已经逝去，观铃梦中对“空中的少女”的回忆，最后的结果也是死亡（佳乃决心到天空中去，也等于死的觉悟），等等。所以，所谓“在天空的彼方”，也就是“在（无法触及的）过去的死者的领域”。</p><p>“常世之国”＝“永恒的世界”＝“永无终结的世界”＝“无限”＝“天空的彼方”＝“（无法触及的）过去的死者的领域”，————“寻找‘常世之国’的人”＝“向往（无法触及的）过去的死者的领域的人”＝“被过去的死者束缚的人”。</p><p>很久以前，橘敬介也曾失去了自己的爱人，神尾郁子【译注：观铃的母亲，晴子的姐姐】。所以，很有可能，他正像观铃、美凪和佳乃一样，也是“被过去的死者束缚的人”。就是因为这样，所以敬介才把观铃托付给晴子，自己逃避、离开了吗？</p><p>事实上，在Air篇的8月11日，晴子和敬介之间的对话就强烈地暗示了这个意思：</p><blockquote><p>女：“我现在终于明白了……抛下这个孩子，自己逃掉的你的心情。你失去了心爱的人啊……那是你所爱的人呀。怀抱着各种回忆，共同生活过的人呀。我能理解，你失去她时的心情了。（下略）”<br>男：“你和观铃一起生活到了现在。和我不同啊。”</p></blockquote><p>根据上述理由，再考虑到Air篇的情节，“橘敬介”＝“寻找‘常世之国’的人”＝“寻找无限世界的人”＝“被过去的死者束缚的人”，这应该是合理的推论。</p><p>至于“非时”，就不需要说明了吧？“非时”就是“与时间无关”，“不知何时会结束，一直持续着”。也就是说，所谓“寻找‘非时香果’的人”，也是“寻求永远的世界的人”，是“被过去的死者所束缚的人”。多迟摩毛理的悲剧在于，他去“常世之国”寻找“橘”，等到回来的时候，物是人非，时光已经以令人吃惊的程度流逝过去了。橘敬介不是和他很像吗？他把观铃托付给晴子，自己也同样去寻求什么；但是，等到他回来的时候，观铃和晴子之间的感情已经深厚得无法分离了……</p><p>不过，最大的问题在于，Key的那些人知道多迟摩毛理的故事吗？上面这些猜测也许仅仅只是猜测而已吧……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先应该知道，在《AIR》的故事里，隐含着许多和日本神话、传说有关的元素。例如《鸟之诗》的歌词中有“わたつみのような强さ”（“如海神般坚强”）一句，其中的“わたつみ”当训作“绵津见神”，是神话中的海神。Summer篇里神奈母亲的称号文字“八百比丘尼”也是出自古老的人鱼传说。</summary>
      
    
    
    
    <category term="动漫" scheme="https://loveofpeach.github.io/categories/%E5%8A%A8%E6%BC%AB/"/>
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>背包九讲</title>
    <link href="https://loveofpeach.github.io/posts/e45f505b.html"/>
    <id>https://loveofpeach.github.io/posts/e45f505b.html</id>
    <published>2022-10-16T01:58:35.000Z</published>
    <updated>2022-10-16T14:43:00.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><p>题目:<br>有N件物品和一个容量为V的背包。第i件物品的费用是$c[i]$，价值是$w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>基本思路:<br>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p><p>用子问题定义状态：即$f[i][v]$表示前$i$件物品恰放入一个容量为$v$的背包可以获得的最大价值。则其状态转移方程便是：$f[i][v]=max(f[i-1][v],f[i-1][v-c[i]]+w[i])$。</p><p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为$v-c[i]$的背包中”，此时能获得的最大价值就是$f[i-1][v-c[i]]$再加上通过放入第i件物品获得的价值$w[i]$。</p><p>注意$f[i][v]$有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是$f[N][V]$，而是$f[N][0..V]$的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项$f[i][v-1]$，这样就可以保证$f[N][V]$就是最后的答案。至于为什么这样就可以，由你自己来体会了。</p><p>优化空间复杂度:<br>以上方法的时间和空间复杂度均为$O(N*V)$，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到$O(V)$。</p><p>先考虑上面讲的基本思路如何实现，肯定是有一个主循环$i=1..N$，每次算出来二维数组$f[i][0..V]$的所有值。那么，如果只用一个数组$f[0..V]$，能不能保证第i次循环结束后$f[v]$中表示的就是我们定义的状态$f[i][v]$呢？$f[i][v]$是由$f[i-1][v]$和$f[i-1][v-c[i]]$两个子问题递推而来，能否保证在推$f[i][v]$时（也即在第i次主循环中推$f[v]$时）能够得到$f[i-1][v]$和$f[i-1][v -c[i]]$的值呢？事实上，这要求在每次主循环中我们以$v=V..0$的顺序推$f[v]$，这样才能保证推$f[v]$时$f[v-c[i]]$保存的是状态$f[i -1][v-c[i]]$的值。伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>其中的$f[v]=max{f[v],f[v-c[i]]}$一句恰就相当于我们的转移方程$f[i][v]=max{f[i-1][v],f[i- 1][v-c[i]]}$，因为现在的$f[v-c[i]]$就相当于原来的$f[i-1][v-c[i]]$。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了$f[i][v]$由$f[i][v-c[i]]$推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。</p><p>总结<br>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>题目:<br>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是$c[i]$，价值是$w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>基本思路:<br>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令$f[i][v]$表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样$f[i][v]=max{f[i-1][v-k<em>c[i]]+k</em>w[i]|0&lt;=k<em>c[i]&lt;= v}$。这跟01背包问题一样有O(N</em>V)个状态需要求解，但求解每个状态的时间则不是常数了，求解状态$f[i][v]$的时间是$O(v/c[i])$，总的复杂度是超过$O(VN)$的。</p><p>将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。</p><p>一个简单有效的优化:<br>完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足$c[i]&lt;=c[j]$且$w[i]&gt;=w[j]$，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得$j$换成物美价廉的$i$，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。</p><p>转化为01背包问题求解<br>既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选$V/c[i]$件，于是可以把第i种物品转化为$V/c[i]$件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。</p><p>更高效的转化方法是：把第i种物品拆成费用为$c[i]<em>2^k$、价值为$w[i]</em>2^k$的若干件物品，其中k满足$c[i]*2^k&lt;V$。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个2^k件物品的和。这样把每种物品拆成$O(log(V/c[i]))$件物品，是一个很大的改进。但我们有更优的O(VN)的算法。 O(VN)的算法这个算法使用一维数组，先看伪代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N <span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>你会发现，这个伪代码与P01的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么P01中要按照$v=V..0$的逆序来循环。这是因为要保证第i次循环中的状态$f[i][v]$是由状态$f[i-1][v-c[i]]$递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果$f[i-1][v-c[i]]$。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果$f[i][v-c[i]]$，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的道理。</p><p>这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：<br>$f[i][v]=max{f[i-1][v],f[i][v-c[i]]+w[i]}$，将这个方程用一维数组实现，便得到了上面的伪代码。</p><p>总结<br>完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“$O(VN)$的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。</p><h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>题目:<br>有N种物品和一个容量为V的背包。第i种物品最多有$n[i]$件可用，每件费用是$c[i]$，价值是$w[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>基本算法:<br>这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有$n[i]+1$种策略：取0件，取1件……取 $n[i]$件。令f[i][v]表示前i种物品恰放入一个容量为v的背包的最大权值，则：$f[i][v]=max{f[i-1][v-k<em>c[i]]+ k</em>w[i]|0&lt;=k&lt;=n[i]}$。复杂度是$O(V*∑n[i])$。</p><p>转化为01背包问题<br>另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为$∑n[i]$的01背包问题，直接求解，复杂度仍然是$O(V*∑n[i])$。</p><p>但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取$0..n[i]$件——均能等价于取若干件代换以后的物品。另外，取超过$n[i]$件的策略必不能出现。</p><p>方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 $1,2,4,…,2^(k-1),n[i]-2^k+1$，且k是满足$n[i]-2^k+1&gt;0$的最大整数。例如，如果$n[i]$为13，就将这种物品分成系数分别为1,2,4,6的四件物品。</p><p>分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于0..n[i]间的每一个整数，均可以用若干个系数的和表示，这个证明可以分$0..2^{k-1}$和$2^k..n[i]$两段来分别讨论得出，并不难，希望你自己思考尝试一下。</p><p>这样就将第i种物品分成了$O(log n[i])$种物品，将原问题转化为了复杂度为$O(V*∑log n[i])$的01背包问题，是很大的改进。</p><p>$O(VN)$的算法<br>多重背包问题同样有O(VN)的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了NOIP的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。</p><p>小结<br>这里我们看到了将一个算法的复杂度由$O(V<em>∑n[i])$改进到$O(V</em>∑log n[i])$的过程，还知道了存在应用超出NOIP范围的知识的O(VN)算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。</p><h2 id="混合三种背包问题"><a href="#混合三种背包问题" class="headerlink" title="混合三种背包问题"></a>混合三种背包问题</h2><p>问题:<br>如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？</p><p>01背包与完全背包的混合<br>考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是O(VN)。伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">if</span>   <span class="comment">//第i件物品是01背包</span></span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>   <span class="comment">//第i件物品是完全背包</span></span><br><span class="line"><span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>再加上多重背包<br>如果再加上有的物品最多可以取有限次，那么原则上也可以给出O(VN)的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成$O(log n[i])$个01背包的物品的方法也已经很优了。</p><p>小结<br>有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。</p><h2 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h2><p>问题:<br>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。</p><p>算法:<br>费用加了一维，只需状态也加一维即可。设$f[i][v][u]$表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是<br>$f[i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}$。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用顺序的循环，当物品有如完全背包问题时采用逆序的循环。当物品有如多重背包问题时拆分物品。</p><p>物品总个数的限制<br>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设$f[v][m]$表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在f[0..V][0..M]范围内寻找答案。</p><p>另外，如果要求“恰取M件物品”，则在f[0..V][M]范围内寻找答案。</p><p>小结:<br>事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。</p><h2 id="分组的背包问题"><a href="#分组的背包问题" class="headerlink" title="分组的背包问题"></a>分组的背包问题</h2><p>问题:<br>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>算法<br>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设$f[k][v]$表示前$k$组物品花费费用v能取得的最大权值，则有$f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]}$。(物品i属于第k组)</p><p>使用一维数组的伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="comment">//所有的组k</span></span><br><span class="line"><span class="keyword">for</span> <span class="comment">//所有的i属于组k</span></span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</span><br></pre></td></tr></table></figure><p>另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。</p><p>小结:<br>分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。</p><h2 id="有依赖的背包问题"><a href="#有依赖的背包问题" class="headerlink" title="有依赖的背包问题"></a>有依赖的背包问题</h2><p>简化的问题:<br>这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。</p><p>算法:<br>这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。</p><p>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有$n$个附件，则策略有$2^{n+1}$个，为指数级。）</p><p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。</p><p>再考虑P06中的一句话：可以对每组中的物品应用P02中“一个简单有效的优化”。这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为$0..V-c[i]$所有这些值时相应的最大价值$f[0..V-c[i]]$。那么这个主件及它的附件集合相当于$V-c[i]+1$个物品的物品组，其中费用为$c[i]+k$的物品的价值为$f[k]+w[i]$。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为 $V-c[i]+1$个物品的物品组，就可以直接应用P06的算法解决问题了。</p><p>更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。</p><p>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01 背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。</p><p>事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p><p>小结:<br>NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。</p><p>我想说：失败不是什么丢人的事情，从失败中全无收获才是。</p><h2 id="泛化物品"><a href="#泛化物品" class="headerlink" title="泛化物品"></a>泛化物品</h2><p>定义:<br>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。</p><p>更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是$h(v)$。</p><p>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组$h[0..V]$，给它费用v，可得到价值h[V]。</p><p>一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c<em>w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有$h(v)=v/c</em>w$仅当v被c整除且$v/c&lt;=n$，其它情况函数值均为0。</p><p>一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则$h(v)=0$，否则$h(v)$为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</p><p>泛化物品的和</p><p>如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即$f(v)=max{h(k) +l(v-k)|0&lt;=k&lt;=v}$。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和 l决定的泛化物品。</p><p>由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足$f(v)=max{h(k)+l(v-k)|0&lt;=k&lt;=v}$，则称f是h与l的和，即f=h+l。这个运算的时间复杂度是O(V^2)。</p><p>泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。</p><p>背包问题的泛化物品<br>一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。</p><p>综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。</p><p>小结<br>本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 $Scheme$ 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。</p><p>我想说：“思考”是一个OIer最重要的品质。简单的问题，深入思考以后，也能发现更多。</p><h2 id="背包问题问法的变化"><a href="#背包问题问法的变化" class="headerlink" title="背包问题问法的变化"></a>背包问题问法的变化</h2><p>以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。</p><p>例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。</p><p>还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。</p><p>下面说一些变化更大的问法。</p><p>输出方案<br>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p><p>还是以01背包为例，方程为$f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}$。再用一个数组$g[i] [v]$，设g[i][v]=0表示推出f[i][v]的值时是采用了方程的前一项（也即f[i][v]=f[i-1][v]），g[i][v]表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为f[N][V]）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i=N</span><br><span class="line">v=V</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(g[i][v]==<span class="number">0</span>)</span><br><span class="line">print <span class="comment">//&quot;未选第i项物品&quot;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(g[i][v]==<span class="number">1</span>)</span><br><span class="line">print <span class="comment">//&quot;选了第i项物品&quot;</span></span><br><span class="line">v=v-c[i]</span><br></pre></td></tr></table></figure><p>另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的g[i] [v]==0改成$f[i][v]==f[i-1][v]$，g[i][v]==1改成f[i][v]==f[i-1][v-c[i]]+w[i]也可。</p><p>输出字典序最小的最优方案<br>这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p><p>一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。</p><p>在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果$f[i][v]==f[i-v]$及$f[i][v]==f[i-1][f-c[i]]+w[i]$同时成立，应该按照后者（即选择了物品i）来输出方案。</p><p>求方案总数<br>对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。</p><p>对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是01背包中的物品，转移方程即为$f[i][v]=sum{f[i-1][v],f[i-1][v-c[i]]+w[i]}$，初始条件$f[0][0]=1$。</p><p>事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。</p><p>最优方案的总数<br>这里的最优方案是指物品总价值最大的方案。还是以01背包为例。</p><p>结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[i][v]=max&#123;f[i<span class="number">-1</span>][v],f[i<span class="number">-1</span>][v-c[i]]+w[i]&#125;</span><br><span class="line">g[i][v]=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(f[i][v]==f[i<span class="number">-1</span>][v])</span><br><span class="line"><span class="built_in">inc</span>(g[i][v],g[i<span class="number">-1</span>][v]</span><br><span class="line"><span class="keyword">if</span>(f[i][v]==f[i<span class="number">-1</span>][v-c[i]]+w[i])</span><br><span class="line"><span class="built_in">inc</span>(g[i][v],g[i<span class="number">-1</span>][v-c[i]])</span><br></pre></td></tr></table></figure><p>如果你是第一次看到这样的问题，请仔细体会上面的伪代码。</p><p>小结<br>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。</p><p>触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;01背包问题&quot;&gt;&lt;a href=&quot;#01背包问题&quot; class=&quot;headerlink&quot; title=&quot;01背包问题&quot;&gt;&lt;/a&gt;01背包问题&lt;/h2&gt;&lt;p&gt;题目:&lt;br&gt;有N件物品和一个容量为V的背包。第i件物品的费用是$c[i]$，价值是$w[i]$。求解将哪些</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>高考数学杂题</title>
    <link href="https://loveofpeach.github.io/posts/edb66c8e.html"/>
    <id>https://loveofpeach.github.io/posts/edb66c8e.html</id>
    <published>2022-10-15T11:10:42.000Z</published>
    <updated>2022-10-16T02:09:59.573Z</updated>
    
    <content type="html"><![CDATA[<p>以前的笔记。</p><h2 id="一些组合题"><a href="#一些组合题" class="headerlink" title="一些组合题"></a>一些组合题</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>已知$(1+\dfrac{1}{2}x)^n$展开式的各项依次记为$a_1(x),a_2(x),…,a_{n+1}(x),$设函数$F(x)=\sum\limits_{k=1}^{n+1}ka_k(x)$。求证：$\forall x_1,x_2 \in [0,2],$恒有$|F(x_1)-F(x_2)|\leqslant 2^{n-1}(n+2)-1$。</p><p><strong>分析：</strong></p><p>答案中给出的解法比较繁琐，其实可以考虑用$\sum\limits$的一些化简技巧和二项式定理。</p><p>由题意 :</p><script type="math/tex; mode=display">F(x)=\sum\limits_{r=0}^n(r+1)C^r_n(\dfrac{1}{2}\ x)^r</script><p>这里把$(r+1)$展开 :</p><script type="math/tex; mode=display">F(x)=\sum\limits_{r=0}^n[rC^r_n(\dfrac{1}{2}\ x)^r+C^r_n(\dfrac{1}{2}\ x)^r]</script><script type="math/tex; mode=display">F(x)=\sum\limits_{r=1}^nrC^r_n(\dfrac{1}{2}\ x)^r+\sum\limits_{r=0}^nC^r_n(\dfrac{1}{2}\ x)^r</script><p>由二项式展开注意到$\sum\limits_{r=0}^nC^r_n(\dfrac{1}{2}\ x)^r=(1+\dfrac{1}{2}\ x)^n$，并且由于$rC^r_n=nC^{r-1}_{n-1}$，我们有: </p><script type="math/tex; mode=display">F(x)=n\sum\limits_{r=1}^nC^{r-1}_{n-1}(\dfrac{1}{2}\ x)^r+(1+\dfrac{1}{2}\ x)^n</script><p>为了配凑得到二项式展开的形式，注意到: </p><script type="math/tex; mode=display">\sum\limits_{r=1}^nC^{r-1}_{n-1}(\dfrac{1}{2}\ x)^r=\dfrac{1}{2}\ x\sum\limits_{r-1=0}^{n-1}C^{r-1}_{n-1}(\dfrac{1}{2}\ x)^{r-1}</script><p>由二项式定理继续化简：</p><script type="math/tex; mode=display">F(x)=\dfrac{1}{2}\ xn(1+\dfrac{1}{2}\ x)^{n-1}+(1+\dfrac{1}{2}\ x)^{n}</script><p>最终得到: </p><script type="math/tex; mode=display">F(x)=(1+\dfrac{1}{2}\ x)^{n-1}[\dfrac{1}{2}\ x(n+1)+1]</script><p>得到$F(x)$的表达式，根据单调性，命题成立。</p><p>另外，还有一种方法，不用求公式也可以证出来，但是很难想到。</p><h3 id="例二-NOIP2013初赛"><a href="#例二-NOIP2013初赛" class="headerlink" title="例二(NOIP2013初赛)"></a>例二(NOIP2013初赛)</h3><p>现有一只青蛙，初始时在$\text{n}$号荷叶上。当祂某一时刻在$\text{k}$号荷叶上时，下一时刻江等概率地随机跳到$1,2,…,k$号荷叶之一上，直至跳到$\text{1}$号荷叶为止。当$\text{n=5}$时，平均一共跳了几次？</p><p><strong>分析：</strong></p><p>设这个期望为$E(n)$，即，我们期望这个蛙在$n$的时候跳$E(n)$次可以到$1$。</p><p>先考虑跳一步会怎么样：显然这只蛙可以以$1/n$的概率跳到$1-n$的任一点。那么，这之后呢？我们设第一步以$1/n$的概率跳到了$k$，<strong>之后这只蛙就要再跳$E(k)$次到终点</strong>。</p><p>得到递归方程：</p><script type="math/tex; mode=display">\begin{cases}E(n)=\dfrac{1}{n}(\sum\limits_{r=1}^nE(i)+n) \\E(1)=0\end{cases}</script><p>代入数据解之即可。</p><h3 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h3><p>已知$\text{A}$与$\text{B}$是集合$\{1,2,,3,\cdots,100 \}$的两个子集，<br>满足:$\text{A}$与$\text{B}$的元素个数相同，且$A\bigcap B=\varnothing .$若$n \in A$时，总有$2n+2 \in B.$试问：集合$A\bigcup B$中最多有多少个元素?</p><p><strong>分析：</strong></p><p>建立一个从$\text{A}$到$\text{B}$的映射:）</p><script type="math/tex; mode=display">f:x\rightarrow2x+2</script><p>因为$\forall n\in A,$都可以通过$f$映射到$B,$并且容易知道这个映射是不会产生冲突的，又因为$A\bigcap B=\varnothing,A,B$元素个数相同。所以$f$建立了一一对应的关系。</p><p>首先考虑，最小的元素是放在$A$还是放在$B$？注意到$f$是将小一点的元素变大,所以最小的元素必然放在$A$集合里面。那么这个元素的象自然在$B$里面。</p><p>反复进行这样的过程：找出未被标记的最小元素放到$A$里面，这个元素的象放到$B$里面，然后标记这两个元素。</p><h3 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h3><p>例：元旦前夕某宿舍的四位同学各写一张贺卡先集中起来，然后每人从中拿一张别人送出的贺卡，则四张贺卡的不同分配方案有多少种？</p><p><strong>分析：</strong></p><p>考虑容斥。$\text{PS:}$<a href="https://oi-wiki.org/math/inclusion-exclusion-principle/">《容斥原理》</a></p><p>由容斥的思想，多加的减回去，然后又多减了，再加回去…列出式子：</p><script type="math/tex; mode=display">A_4^4-A_3^3C_4^1+A_2^2C_4^2-A_1^1C_4^3+A_0^0C_4^4</script><p>例题解决，考虑更一般的情况：$n$个有序元素，全部改变其位置的排列数是多少？</p><p>设$f(n)$表示$n$个元素全部错位的排列数，容斥一下得到：</p><script type="math/tex; mode=display">f(n)=\sum\limits_{k=0}^n(-1)^kA_{n-k}^{n-k}C_n^k</script><p>化简之后就得到了那个公式。</p><p>另外，也可以通过动态规划得到递推关系，参考：<a href="https://www.luogu.org/blog/P6174/post-cuo-pai">小学生都能看懂的错排问题解析</a>。不过由递推式得到公式似乎并不容易，wikipedia上有较为详细的推导。</p><h2 id="一些几何题"><a href="#一些几何题" class="headerlink" title="一些几何题"></a>一些几何题</h2><h3 id="例一-1"><a href="#例一-1" class="headerlink" title="例一"></a>例一</h3><p>已知直线$y=a$交抛物线$y=x^2$于$\text{A,B}$两点，若该抛物线上存在点$\text{C,}$使得$\angle \text{ACB}$为直角，则实数$a$的取值范围是?</p><p><strong>分析：</strong></p><p>直角转化为圆相关，注意到二次函数会在远处的导数趋向于$+\infty$，但仅仅是趋向——而圆不同，圆的“左顶点”处是竖直下来的，所以如果$a$很大，绝对是可行的，所以$a$的范围一定是某个数到正无穷，找到这个特殊情况即可。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p>已知椭圆$\text{C:}\dfrac{x^2}{4}+ \dfrac{y^2}{3}=1$的左右焦点分别为$F_1,F_2,$点$A$在椭圆上且满足$AF_2 \perp F_1F_2$.若$P$是椭圆上的动点，则$\overrightarrow{F_1P}\cdot \overrightarrow{F_2A}$的最大值是？</p><p><strong>分析：</strong></p><p>善用向量乘法的定义（投影那部分）可以看出答案，很多类似的题目也同理。答案是$\dfrac{3}{2} \sqrt{3}$.</p><h3 id="例三-1"><a href="#例三-1" class="headerlink" title="例三"></a>例三</h3><p>已知$A,B,C,D$四点共面$,BC=2$，$AB^2+AC^2=20,$ $\overrightarrow{CD}=3\overrightarrow{CA},$则$|\overrightarrow{BD}|$的最大值为?</p><p><strong>分析：</strong>（袋鼠角度）</p><p>由余弦定理：$AB^2+AC^2-2AB\cdot ACcosA=4$</p><p>所以$AB\cdot CDcosA=24$</p><p>${BD}^2=AB^2+\dfrac{4}{9}CD^2+\dfrac{4}{3}BA\cdot CDcosA$</p><p>即：$BD^2=AB^2+\dfrac{4}{9}CD^2+32$</p><p>又因为$AB^2+\dfrac{1}{9}CD^2=20$</p><p>所以$BD^2=52+\dfrac{1}{3}CD^2$</p><p>由三角形三边关系：$BD+2\geqslant CD$得：</p><script type="math/tex; mode=display">BD+2\geqslant \sqrt{3BD^2-52\cdot 3}</script><p>化简得：$BD^2-2BD-80\leqslant 0$</p><p>得到$BD\in[0,10],$故$BD_{max}=10$。</p><p><strong>拓展：</strong>事实上可以得到$BD \in [8,10]$。</p><h3 id="例四"><a href="#例四" class="headerlink" title="例四"></a>例四</h3><p>如果$\text{A}$的座標為$(1,1),F_1$是橢圓$\dfrac{x^2}{9}+\dfrac{y^2}{5}=1$的左焦點，$\text{P}$是橢圓上的動點，則$|PA|+|PF_1|$的最小值為？</p><p><strong>分析：</strong></p><p>這道簡單題放在這裡給自己提個醒：遇到圓錐曲線題不要一昧想著計算。答案是$6-\sqrt2.$</p><h3 id="例五"><a href="#例五" class="headerlink" title="例五"></a>例五</h3><p>在平面直角坐标系$xOy$中，圆$\text{C1:}(x-1)^2+y^2=2,$圆$\text{C2:}(x-m)^2+(y+m)^2=m^2,$若圆$\text{C2}$上存在点$P$满足：过点$P$向圆$\text{C1}$作两条切线$PA,PB,$切点为$A,B,\triangle ABP$的面积为$\text{1},$则正数$m$的取值范围是?</p><p><strong>分析：</strong></p><p>以下是答案的思路。</p><p>注意到$\triangle ABP$的面积是定值，从而点$P$的位置应该具有某种确定性，故首先由$\triangle ABP$的面积来确定点$P$所满足的条件，进而江问题转化为圆与圆有公共点的问题来加以处理。</p><p>设$P(x,y),$设$PA,PB$的夹角为$2\theta.$</p><p>$\triangle ABP$的面积$S=\dfrac{1}{2}PA^2sin2\theta.$</p><script type="math/tex; mode=display">S=PA^2\cdot sin\theta \cdot cos\theta</script><script type="math/tex; mode=display">S=PA^2\cdot \dfrac{\sqrt2}{PC_1}\cdot \dfrac{PA}{PC_1}=1</script><script type="math/tex; mode=display">\sqrt2 PA^3=PC_1^2=PA^2+2</script><script type="math/tex; mode=display">\therefore PA=\sqrt2,PC_1=2</script><p>$\therefore$点$P$在圆$(x-1)^2+y^2=4$上。</p><p>根据圆与圆的位置关系可知：</p><script type="math/tex; mode=display">|m-2|\leqslant \sqrt{(m-1)^2+m^2}\leqslant m+2</script><p>解得$1\leqslant m\leqslant 3+2\sqrt3$</p><h2 id="矩阵在圆锥曲线中的应用"><a href="#矩阵在圆锥曲线中的应用" class="headerlink" title="矩阵在圆锥曲线中的应用"></a>矩阵在圆锥曲线中的应用</h2><p>高二学完矩阵的时候就有这种想法，用矩阵建立一个平面点集到自身的映射，根据我的瞎猜只能方便的处理斜率相关的问题，如若涉及到长度或是角度关系用它好像不行(?)</p><p>对于椭圆$\dfrac{x^2}{a^2}+\dfrac{y^2}{b^2}=1,(a&gt;b&gt;0)$我们采用矩阵$T=\begin{pmatrix}\dfrac{b}{a}&amp;0\\0&amp;1\end{pmatrix}$建立一个平面点集到自身的映射(这里我是受到$hash$技术的启发)。同时注意到我们找到的矩阵不可以将不同的点映射到同一个点，这体现为：<strong>这个矩阵必须是可逆的。</strong></p><p>显然$T=\begin{pmatrix}\dfrac{b}{a}&amp;0\\0&amp;1\end{pmatrix}$是可逆的。<br>假设两点$A(x_1,y_1),B(x_2,y_2)$在椭圆上，则$k_{AB}=\dfrac{y_1-y_2}{x_1-x_2}$.</p><p>进行变换$T:$ $A-&gt;A^{‘},B-&gt;B^{‘}$。</p><script type="math/tex; mode=display">\begin{pmatrix}\dfrac{b}{a}&0\\0&1\end{pmatrix}A=A'=(\dfrac{bx_1}{a},y_1)</script><script type="math/tex; mode=display">\begin{pmatrix}\dfrac{b}{a}&0\\0&1\end{pmatrix}B=B'=(\dfrac{bx_2}{a},y_2)</script><p>于是得到：</p><script type="math/tex; mode=display">k_{A'B'}=\dfrac{y_1'-y_2'}{x_1'-x_2'}=\dfrac{y_1-y_2}{\dfrac{bx_1}{a}-\dfrac{bx_2}{a}}=\dfrac{a}{b}k_{AB}</script><p>找到了这两者之间的关系，就可以很方便地解决一些问题。</p><h3 id="例一-2"><a href="#例一-2" class="headerlink" title="例一"></a>例一</h3><p><img src="https://i.loli.net/2018/12/01/5c028172d01d1.png" alt="Screenshot_2018-12-01-20-39-51.png"></p><p>在平面直角坐标系$xOy$中，椭圆$\text{E}:\dfrac{x^2}{a^2}+\dfrac{y^2}{b^2}=1(a&gt;b&gt;0)$的离心率为$\dfrac{\sqrt2}{2},$直线$l:y=\dfrac{1}{2}x$与椭圆$\text{E}$相交于$\text{A,B}$两点，$AB=2 \sqrt5,C,D$是椭圆$\text{E}$上异于$\text{A,B}$的两点，且直线$AC,BD$相交于点$M,$直线$AD,BC$相交于点$N$。<br>求证$MN$的斜率为定值。</p><p><strong>分析：</strong></p><p>采用上述矩阵将椭圆变换成圆之后我们发现$M’N’\perp A’B’$那么很容易得到$k_{A’B’}$,然后$k_{M’N’}$也出来了，于是就可以直接得到$k_{MN}$。</p><p><strong>Hint：使用矩阵进行映射处理椭圆，有时可以大大简化计算(有时不可以，具体情况具体分析)。特别注意在处理角度或长度问题时，此种方法不再适用。（因为不方便处理，甚至是无法解决，因为对应的方程组不可解(?)），显然，这种方法不能得全分。</strong></p><h2 id="一些函数题"><a href="#一些函数题" class="headerlink" title="一些函数题"></a>一些函数题</h2><h3 id="例一-3"><a href="#例一-3" class="headerlink" title="例一"></a>例一</h3><p>已知函数$f(x)=\dfrac{log_2x-1}{log_2x+1},$若$f(x_1)+f(2x_2)=1$(其中$x_1,x_2$均大于$2$)，则$f(x_1x_2)$的最小值为?</p><p><strong>分析：</strong>这题本不难，但是因为一些奇怪的原因没有做出来。</p><p>$\because f(x_1)+f(2x_2)=1$</p><p>$\therefore\dfrac{log_2x_1-1}{log_2x_1+1}+\dfrac{log_22x_2-1}{log_22x_2+1}=1$</p><p>$\therefore \dfrac{log_2x_1-1}{log_2x_1+1}+\dfrac{log_2x_2}{log_2x_2+2}=1$</p><p>化简得$log_2x_2=\dfrac{4}{log_2x_1-1}$</p><p>$\therefore log_2(x_1x_2)=log_2x_1+log_2x_2$</p><p>$log_2(x_1x_2)=log_2x_1+\dfrac{4}{log_2x_1-1}\geqslant 5$</p><p>当且仅当$log_2x_1=3$时等号成立。</p><p>$\therefore f(x_1x_2)=\dfrac{log_2(x_1x_2)-1}{log_2(x_1x_2)+1}$</p><p>$\therefore f(x_1x_2)=1-\dfrac{2}{log_2(x_1x_2)+1}\geqslant\dfrac{2}{3}$</p><h3 id="例二-1"><a href="#例二-1" class="headerlink" title="例二"></a>例二</h3><p>函数$f(x)=\sqrt{x-3}+ \sqrt{12-3x}$的值域为?</p><p><strong>分析(三角换元)：</strong>要注意定义域。</p><p>$D=[3,4],$则$(x-3) \in[0,1]$</p><p>令$x-3=sin^2 \theta,\theta \in [0,\dfrac{\pi}{2}],$则：</p><script type="math/tex; mode=display">f(x)=\sqrt{x-3}+\sqrt{3(4-x)}</script><script type="math/tex; mode=display">f(x)=sin \theta+ \sqrt{3(1-sin^2 \theta)}</script><script type="math/tex; mode=display">f(x)=sin \theta+ \sqrt{3}cos \theta=2sin( \theta+ \dfrac{ \pi}{3})</script><p>至此，问题已不难解决。</p><h3 id="洛必达法则的应用"><a href="#洛必达法则的应用" class="headerlink" title="洛必达法则的应用"></a>洛必达法则的应用</h3><h4 id="洛必达法则1："><a href="#洛必达法则1：" class="headerlink" title="洛必达法则1："></a>洛必达法则1：</h4><p>若(1)$\lim\limits_{x\to a(\infty)}f(x)=\lim\limits_{x\to a(\infty)}g(x)=0$；(2)在点$a$的某一邻域(不含点$a$)(或$|a|$充分大)内$f’(x),g’(x)$都存在且$g’(x)\ne 0$；(3)$\lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}$存在(或无穷大)，则$\lim\limits_{x\to a(\infty)}\dfrac{f(x)}{g(x)}= \lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}.$</p><h4 id="洛必达法则2："><a href="#洛必达法则2：" class="headerlink" title="洛必达法则2："></a>洛必达法则2：</h4><p>若(1)$\lim\limits_{x\to a(\infty)}f(x)=\lim\limits_{x\to a(\infty)}g(x)=\infty$；(2)在点$a$的某一邻域(不含点$a$)(或$|a|$充分大)内$f’(x),g’(x)$都存在且$g’(x)\ne 0$；(3)$\lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}$存在(或无穷大)，则$\lim\limits_{x\to a(\infty)}\dfrac{f(x)}{g(x)}= \lim\limits_{x\to a(\infty)}\dfrac{f’(x)}{g’(x)}.$</p><h3 id="例三-2"><a href="#例三-2" class="headerlink" title="例三"></a>例三</h3><p>设函数$f(x)=x-\ln(x+\sqrt{1+x^2}).$若$x\geqslant0$时，恒有$f(x)\leqslant ax^3,$试求实数$a$的取值范围。</p><p><strong>分析：</strong></p><p>求导发现这是一个奇函数，又$f(x)$单调增。猜想$x\to0$时$(ax^3)’\geqslant f’(x).$然后洛必达：</p><script type="math/tex; mode=display">3a\geqslant \lim\limits_{\varepsilon\to0}\dfrac{1}{\varepsilon ^2}(1-\dfrac{1}{\sqrt{1+\varepsilon ^2}})</script><script type="math/tex; mode=display">\lim\limits_{\varepsilon\to0}\dfrac{1}{\varepsilon ^2}(1-\dfrac{1}{\sqrt{1+\varepsilon ^2}})=\dfrac{1}{2}</script><script type="math/tex; mode=display">\therefore a\geqslant \dfrac{1}{6}</script><p>这样就避免了分类讨论。</p><h2 id="一些不等式"><a href="#一些不等式" class="headerlink" title="一些不等式"></a>一些不等式</h2><h3 id="例一-4"><a href="#例一-4" class="headerlink" title="例一"></a>例一</h3><p>若实数$x,y$满足$2x^2+xy-y^2=1,$则$\dfrac{x-2y}{5x^2-2xy+2y^2}$的最大值为?</p><p><strong>分析：</strong></p><p>给出的条件中，独立变量有两个，因为用$x$表示$y$或用$y$表示$x$均不方便，可引入第三个变量来表示$x,y$.</p><p>首先因式分解，由$2x^2+xy-y^2=1,$得$(2x-y)(x+y)=1,$设$2x-y=t,x+y=\dfrac{1}{t},$其中$t\ne 0.$</p><p>解得：</p><script type="math/tex; mode=display">\begin{cases}x=\dfrac{1}{3}t+\dfrac{1}{3t}\\y=\dfrac{2}{3t}-\dfrac{1}{3}t\end{cases}</script><p>現在，已經轉化為一道比較常規的題了。</p><p><strong>拓展：</strong>试求$5x^2-2xy+2y^2$的最值。(hint:构造齐次式)</p><h3 id="Bernoulli不等式"><a href="#Bernoulli不等式" class="headerlink" title="Bernoulli不等式"></a>Bernoulli不等式</h3><script type="math/tex; mode=display">(1+x)^n\geqslant 1+nx(x\geqslant -1)</script><p>可以用数学归纳法证明，或许可以用于放缩。</p><h2 id="一些数列题"><a href="#一些数列题" class="headerlink" title="一些数列题"></a>一些数列题</h2><h3 id="例一-2015江苏卷"><a href="#例一-2015江苏卷" class="headerlink" title="例一 (2015江苏卷)"></a>例一 (2015江苏卷)</h3><p>设$a_1,a_2,a_3,a_4$是各项为正数且公差为$d(d\ne 0)$的等差数列。问是否存在$a_1,d$使得$a_1,a_2^2,a_3^3,a_4^4$依次构成等比数列?</p><p><strong>分析：</strong></p><p>本题主要是计算，计算没问题就行。</p><p>先假设存在。则$q=$</p><script type="math/tex; mode=display">\dfrac{(a_1+d)^2}{a_1}=\dfrac{(a_1+2d)^3}{(a_1+d)^2}=\dfrac{(a_1+3d)^4}{(a_1+2d)^3}</script><script type="math/tex; mode=display">\therefore (a_1+d)^2(a_1+3d)^4=(a_1+2d)^6</script><script type="math/tex; mode=display">\therefore d^2+9a_1d+a_1^2=0</script><p>且$(a_1+d)^2=-7a_1d.$</p><script type="math/tex; mode=display">\therefore q=-7d=\dfrac{(a_1+2d)^3}{-7a_1d}</script><p>$\mathcal{A}:$当$d&gt;0$时，易知$q&lt;0,$不成立。</p><p>$\mathcal{B}:$当$d&lt;0$时</p><script type="math/tex; mode=display">\because \dfrac{(a_1+d)^2}{a_1}=\dfrac{(a_1+2d)^3}{(a_1+d)^2}</script><script type="math/tex; mode=display">\therefore d^3=2a_1^3+4a_1d^2</script><p>显然右式大于零，左式小于零，矛盾。</p><p>综上，不存在$a_1,d$使得$a_1,a_2^2,a_3^3,a_4^4$依次构成等比数列。</p><h3 id="例二-2"><a href="#例二-2" class="headerlink" title="例二"></a>例二</h3><p>已知$\{a_n\}$是公差为$d$的等差数列，$\{b_n\}$是公比为$q$的等比数列，$q\ne1 \&amp; q\ne -1,$正整数组$E=(m,p,r)(m&lt;p&lt;r).$</p><p>问：若数组$E$中的三个数构成公差大于$1$的等差数列，且$a_m+b_p=a_p+b_r=a_r+b_m$，求$q$的最大值。</p><p><strong>分析：</strong></p><p>先用通项公式表示$b_1$,设数组$E$的公差为$d’$，然后。。。具体来讲是这样的(年代久远的混乱的草稿中硕果仅存的步骤)：</p><script type="math/tex; mode=display">\begin{cases}(p-1)d+b_1q^{r-1}=(r-1)d+b_1q^{m-1}\\(m-1)d+b_1q^{p-1}=(p-1)d+b_1q^{r-1}\end{cases}</script><script type="math/tex; mode=display">\therefore (r-m)d=b_1(q^{p-1}-q^{m-1})</script><script type="math/tex; mode=display">\therefore b_1=\dfrac{(r-m)d}{q^{p-1}-q^{m-1}}</script><p>回代到最上面的那个式子：</p><script type="math/tex; mode=display">\dfrac{q^{p-1}-q^{r-1}}{q^{p-1}-q^{m-1}}=\dfrac{p-m}{r-m}</script><script type="math/tex; mode=display">\because \begin{cases}p-m=d'\\r-m=2d'\end{cases}</script><script type="math/tex; mode=display">\dfrac{q^{d'}-q^{2d'}}{q^{d'}-1}=\dfrac{d'}{2d'}=\dfrac{1}{2}</script><p>解得$q^{d’}=-\dfrac{1}{2}$或$q^{d’}=1$（舍）</p><script type="math/tex; mode=display">\because d'>1\& d'\in Z</script><script type="math/tex; mode=display">\therefore d'_{min}=3</script><script type="math/tex; mode=display">\therefore q_{max}=\sqrt[3]{-\dfrac{1}{2}}</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前的笔记。&lt;/p&gt;
&lt;h2 id=&quot;一些组合题&quot;&gt;&lt;a href=&quot;#一些组合题&quot; class=&quot;headerlink&quot; title=&quot;一些组合题&quot;&gt;&lt;/a&gt;一些组合题&lt;/h2&gt;&lt;h3 id=&quot;例一&quot;&gt;&lt;a href=&quot;#例一&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>滤镜-锐黑</title>
    <link href="https://loveofpeach.github.io/posts/c8cced9.html"/>
    <id>https://loveofpeach.github.io/posts/c8cced9.html</id>
    <published>2022-10-13T11:55:10.000Z</published>
    <updated>2022-10-15T12:22:21.413Z</updated>
    
    <content type="html"><![CDATA[<p>好，支持四通bridgeman。</p><p><img src="https://s2.loli.net/2022/10/14/cYA86SWIyeMQfiu.jpg" alt="9-1.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好，支持四通bridgeman。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/10/14/cYA86SWIyeMQfiu.jpg&quot; alt=&quot;9-1.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/categories/%E6%97%B6%E4%BA%8B/"/>
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/tags/%E6%97%B6%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>板子备忘</title>
    <link href="https://loveofpeach.github.io/posts/9e22caea.html"/>
    <id>https://loveofpeach.github.io/posts/9e22caea.html</id>
    <published>2022-09-28T06:24:21.000Z</published>
    <updated>2022-10-15T11:35:33.798Z</updated>
    
    <content type="html"><![CDATA[<p>主要就是整理一下常见的算法模板，个人使用。</p><h2 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h2><p>给定一个范围N，你需要处理M个某数字是否为质数的询问（每个数字均在范围1-N内）</p><p>在没有读入优化的情况下，这份代码提交到洛谷上速度尚可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10000100</span>;</span><br><span class="line"><span class="type">bool</span> composite[MAXN];</span><br><span class="line"><span class="type">int</span> prime[MAXN],tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    composite[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    composite[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!composite[i])prime[tail++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;tail&amp;&amp;i*prime[j]&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            composite[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prime[j]))<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,t,temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;t);</span><br><span class="line">    <span class="built_in">get_prime</span>(n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="keyword">if</span>(composite[temp])<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> uset[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> z,x,y;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;z,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">1</span>)<span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Y\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;N\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>给出一个无向图，求出最小生成树，如果该图不连通，则输出orz</p><p><strong>输入格式：</strong></p><p>第一行包含两个整数N、M，表示该图共有N个结点和M条无向边。（N&lt;=5000，M&lt;=200000）</p><p>接下来M行每行包含三个整数Xi、Yi、Zi，表示有一条长度为Zi的无向边连接结点Xi、Yi</p><p><strong>输出格式：</strong></p><p>输出包含一个数，即最小生成树的各边的长度之和；如果该图不连通则输出orz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kruscal</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> uset[MAXN],n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(uset[x]!=x)uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge x,Edge y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        edge[i].u=x;</span><br><span class="line">        edge[i].v=y;</span><br><span class="line">        edge[i].w=z;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)uset[i]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        ans+=edge[i].w;</span><br><span class="line">        <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h2><p>给出一个有向图，请输出从某一点出发到所有点的最短路径长度。</p><p><strong>输入格式：</strong></p><p>第一行包含三个整数N、M、S，分别表示点的个数、有向边的个数、出发点的编号。</p><p>接下来M行每行包含三个整数Fi、Gi、Wi，分别表示第i条有向边的出发点、目标点和长度。</p><p><strong>输出格式：</strong></p><p>一行，包含N个用空格分隔的整数，其中第i个整数表示从点S出发到点i的最短路径长度（若S=i则最短路径长度为0，若从点S无法到达点i，则最短路径长度为2147483647）</p><p>$SPFA$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> inq[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    </span><br><span class="line">    qwq.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>(); inq[x]=<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[y]&gt;dis[x]+edge[i].w)&#123;</span><br><span class="line">                dis[y]=dis[x]+edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[y])&#123;qwq.<span class="built_in">push</span>(y);inq[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">if</span>(s==i)<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$Dijkstra$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 200010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF =<span class="number">2147483647</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> done[MAXN];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,dist;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist&gt;v.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; qwq;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node front=qwq.<span class="built_in">top</span>(); qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u=front.u,dist=front.dist;</span><br><span class="line">        <span class="keyword">if</span>(done[u])<span class="keyword">continue</span>;</span><br><span class="line">        done[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v,z=edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+z&lt;dis[y])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[u]+z;</span><br><span class="line">                qwq.<span class="built_in">push</span>((node)&#123;y,dis[y]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>已知一个数列，你需要进行下面两种操作：</p><p>1.将某一个数加上x</p><p>2.求出某区间每一个数的和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> c[MAXN],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        s+=c[i];</span><br><span class="line">        i-=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        c[i]+=value;</span><br><span class="line">        i+=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> temp;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">update</span>(i,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> flag,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;flag,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="built_in">update</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sum</span>(y)-<span class="built_in">sum</span>(x<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已知一个数列，你需要进行下面两种操作：</p><p>1.将某区间每一个数数加上x</p><p>2.求出某一个数的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> c[MAXN],n,m,pre,now;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        s+=c[i];</span><br><span class="line">        i-=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        c[i]+=value;</span><br><span class="line">        i+=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;now);</span><br><span class="line">        <span class="built_in">update</span>(i,now-pre);</span><br><span class="line">        pre=now;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> flag,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;flag,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="type">int</span> y,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;y,&amp;k);</span><br><span class="line">            <span class="built_in">update</span>(x,k);<span class="built_in">update</span>(y+<span class="number">1</span>,-k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">sum</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = MAXN<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> max0,n,m,tot,head[MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN][<span class="number">25</span>],dep[MAXN],s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">    <span class="keyword">if</span>(fa[x][i<span class="number">-1</span>])fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=fa[x][<span class="number">0</span>])&#123;</span><br><span class="line">            fa[y][<span class="number">0</span>]=x;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=max0;x++)</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=fa[u][x];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="keyword">if</span>(fa[u][x]!=fa[v][x])&#123;</span><br><span class="line">        u=fa[u][x];</span><br><span class="line">        v=fa[v][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);<span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lcainit</span>(s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lca</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强连通分量缩点"><a href="#强连通分量缩点" class="headerlink" title="强连通分量缩点"></a>强连通分量缩点</h2><p>题目描述：<a href="https://www.luogu.org/problemnew/show/P3387">https://www.luogu.org/problemnew/show/P3387</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;;</span><br><span class="line">Edge edge[maxm],edge2[maxm];</span><br><span class="line"><span class="type">int</span> head[maxn],w[maxn],dfn[maxn],low[maxn],stac[maxn],color[maxn];</span><br><span class="line"><span class="type">int</span> n,m,tot,num,top,cnt,ans;</span><br><span class="line"><span class="type">int</span> head2[maxn],W[maxn],tot2,sum[maxn];</span><br><span class="line"><span class="type">bool</span> ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge2[++tot2].v=y;</span><br><span class="line">    edge2[tot2].next=head2[x];</span><br><span class="line">    head2[x]=tot2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum[x])<span class="keyword">return</span> sum[x];</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head2[x];i;i=edge2[i].next)&#123;</span><br><span class="line">        temp=<span class="built_in">MAX</span>(temp,<span class="built_in">dfs</span>(edge2[i].v));</span><br><span class="line">    &#125;</span><br><span class="line">    sum[x]=W[x]+temp;</span><br><span class="line">    <span class="keyword">return</span> sum[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        ++cnt; <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--]; ins[y]=<span class="literal">false</span>;</span><br><span class="line">            color[y]=cnt;</span><br><span class="line">            W[cnt]+=w[y];</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[y])&#123;</span><br><span class="line">                <span class="built_in">addedge2</span>(color[x],color[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!sum[i])&#123;</span><br><span class="line">            ans=<span class="built_in">MAX</span>(ans,<span class="built_in">dfs</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非压位高精"><a href="#非压位高精" class="headerlink" title="非压位高精"></a>非压位高精</h2><p>虽然重载的运算符两边数据类型都是Bigint，但因为自动强制转换，所以用[Bigint] * [int]也不会错。</p><p>在大数除int、大数对int取余时，效率不及专门功能的函数</p><p>参考：CSDN用户 代号4101</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code by rainman</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXLEN = <span class="number">1000</span>;  <span class="comment">//最长的数字长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bigint</span>&#123;</span><br><span class="line">    <span class="type">int</span> d[MAXLEN],len;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(len&gt;<span class="number">1</span>&amp;&amp;!d[len<span class="number">-1</span>])len--;&#125; <span class="comment">//去前导0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Bigint</span>()&#123;<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));len=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="built_in">Bigint</span>(<span class="type">int</span> num)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line">    <span class="built_in">Bigint</span>(<span class="type">char</span>* num)&#123;*<span class="keyword">this</span>=num;&#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>* num)&#123;</span><br><span class="line">        len=<span class="built_in">strlen</span>(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)d[i]=num[len<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> = (<span class="type">int</span> num)&#123;</span><br><span class="line">        <span class="type">char</span> s[MAXLEN];</span><br><span class="line">        <span class="built_in">sprintf</span>(s,<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">        *<span class="keyword">this</span>=s;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> + (<span class="type">const</span> Bigint&amp; b)&#123; <span class="comment">//只能大数加小数</span></span><br><span class="line">        Bigint c=*<span class="keyword">this</span>; <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">            c.d[i]+=b.d[i];</span><br><span class="line">            <span class="keyword">if</span>(c.d[i]&gt;<span class="number">9</span>)c.d[i]%=<span class="number">10</span>,c.d[i+<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(c.d[i]&gt;<span class="number">9</span>)c.d[i++]%=<span class="number">10</span>,c.d[i]++;</span><br><span class="line">        c.len=<span class="built_in">MAX</span>(len,b.len);</span><br><span class="line">        <span class="keyword">if</span>(c.d[i]&amp;&amp;c.len&lt;=i)c.len=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> - (<span class="type">const</span> Bigint&amp; b)&#123; <span class="comment">//不能用小数减大数</span></span><br><span class="line">        Bigint c=*<span class="keyword">this</span>; <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;b.len;i++)&#123;</span><br><span class="line">            c.d[i]-=b.d[i];</span><br><span class="line">            <span class="keyword">if</span>(c.d[i]&lt;<span class="number">0</span>)c.d[i]+=<span class="number">10</span>,c.d[i+<span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(c.d[i]&lt;<span class="number">0</span>)c.d[i++]+=<span class="number">10</span>,c.d[i]--;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Bigint <span class="keyword">operator</span> * (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="type">int</span> i,j; Bigint c;</span><br><span class="line">        c.len=len+b.len;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;b.len;j++)</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">                c.d[i+j]+=d[i]*b.d[j];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c.len<span class="number">-1</span>;i++)</span><br><span class="line">            c.d[i+<span class="number">1</span>]+=c.d[i]/<span class="number">10</span>,c.d[i]%=<span class="number">10</span>;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> / (<span class="type">const</span> Bigint&amp; b)&#123;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        Bigint c=*<span class="keyword">this</span>,a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            a=a*<span class="number">10</span>+d[i];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)<span class="keyword">if</span>(a&lt;b*(j+<span class="number">1</span>))<span class="keyword">break</span>;</span><br><span class="line">            c.d[i]=j;</span><br><span class="line">            a=a-b*j;</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> % (<span class="type">const</span> Bigint&amp; b)&#123;</span><br><span class="line">        <span class="type">int</span> i,j; Bigint a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            a=a*<span class="number">10</span>+d[i];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)<span class="keyword">if</span>(a&lt;b*(j+<span class="number">1</span>))<span class="keyword">break</span>;</span><br><span class="line">            a=a-b*j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bigint <span class="keyword">operator</span> += (<span class="type">const</span> Bigint&amp; b)&#123;</span><br><span class="line">        *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len!=b.len)<span class="keyword">return</span> len&lt;b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span>(d[i]!=b.d[i])<span class="keyword">return</span> d[i]&lt;b.d[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> b&lt;*<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;= (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(b&lt;*<span class="keyword">this</span>);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt;= (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&lt;b);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> b&lt;*<span class="keyword">this</span>||*<span class="keyword">this</span>&lt;b;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Bigint&amp; b)<span class="type">const</span>&#123;<span class="keyword">return</span> !(b&lt;*<span class="keyword">this</span>)&amp;&amp;!(b&gt;*<span class="keyword">this</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">char</span> s[MAXLEN]=&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)s[len<span class="number">-1</span>-i]=d[i]+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in,Bigint&amp; x)&#123;</span><br><span class="line">    string s; in&gt;&gt;s;</span><br><span class="line">    x=s.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out,<span class="type">const</span> Bigint&amp; x)&#123;</span><br><span class="line">    out&lt;&lt;x.<span class="built_in">str</span>();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;     <span class="comment">//just an example...</span></span><br><span class="line">    Bigint s=<span class="number">0</span>,t;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;t)&#123;</span><br><span class="line"><span class="keyword">if</span>(t.len==<span class="number">1</span>&amp;&amp;!t.d[<span class="number">0</span>])<span class="keyword">break</span>;</span><br><span class="line">s=s+t;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h2><p>题目链接：<a href="https://www.luogu.com.cn/problem/P3386">https://www.luogu.com.cn/problem/P3386</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxvertex=<span class="number">503</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxedge=<span class="number">5e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> tot,n,m,e,ans;</span><br><span class="line"><span class="type">int</span> head[maxvertex],match[maxvertex&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;edge[maxedge];</span><br><span class="line"><span class="type">bool</span> vis[maxvertex&gt;&gt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x],y;i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[y=edge[i].v])&#123;</span><br><span class="line">            vis[y]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>((!match[y]) || <span class="built_in">dfs</span>(match[y]))&#123;</span><br><span class="line">                match[y]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(i))&#123;ans++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要就是整理一下常见的算法模板，个人使用。&lt;/p&gt;
&lt;h2 id=&quot;线性筛素数&quot;&gt;&lt;a href=&quot;#线性筛素数&quot; class=&quot;headerlink&quot; title=&quot;线性筛素数&quot;&gt;&lt;/a&gt;线性筛素数&lt;/h2&gt;&lt;p&gt;给定一个范围N，你需要处理M个某数字是否为质数的询问（每个</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="算法模板" scheme="https://loveofpeach.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode407</title>
    <link href="https://loveofpeach.github.io/posts/5f46c25d.html"/>
    <id>https://loveofpeach.github.io/posts/5f46c25d.html</id>
    <published>2022-09-27T03:33:04.000Z</published>
    <updated>2022-09-27T09:54:22.353Z</updated>
    
    <content type="html"><![CDATA[<p>正经解法比较复杂，这里贴出一个相对简单的解法。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个 m x n 的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= m,n &lt;= 200</span><br><span class="line">0 &lt;= heightMap[i][j] &lt;= 2*10^4</span><br></pre></td></tr></table></figure><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg" alt="8-1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。</span><br></pre></td></tr></table></figure><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p><img src="https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg" alt="8-2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]</span><br><span class="line">输出: 10</span><br></pre></td></tr></table></figure><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>首先需要明确一点，该题中不存在“空洞”，否则数据不足以描述房屋的状态。即不存在以下（左视图）情况：</p><p><img src="https://s2.loli.net/2022/09/27/m8bp5xUGv7jSaL2.png" alt="8-3.png"></p><p>引理：沿水平方向任切一刀去除下层后，接水体积只会减少被切除部分中水的体积（若存在）。</p><p>解释：考虑使用一个锋利的铁板去切，切后仍用铁板托住上层，则上下两层的水均不会流出。</p><p>由引理，问题规模缩小。</p><h3 id="代码实现（无优化）"><a href="#代码实现（无优化）" class="headerlink" title="代码实现（无优化）"></a>代码实现（无优化）</h3><p>记最高高度为<code>MAXH</code>，从第一层（从上往下数）开始切，<code>for k 1 to MAXH</code>，则切下来的上层可记为<code>MAX(0,a[i][j]-MAXH+k)</code>，对新的矩阵dfs元素为零的连通块，同时记录连通块大小。注意若连通块通向边界，则水流出，该连通块作废。遍历完第k层后k++，继续计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> a[<span class="number">203</span>][<span class="number">203</span>];</span><br><span class="line"><span class="type">int</span> MAXH=<span class="number">-1</span>,m,n,ans;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">203</span>*<span class="number">203</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mmap</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">203</span>*(x<span class="number">-1</span>)+y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            MAXH=<span class="built_in">MAX</span>(MAXH,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">bool</span> _myflag,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    vis[<span class="built_in">mmap</span>(x,y)]=<span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>((x==<span class="number">1</span>)||(x==m)||(y==<span class="number">1</span>)||(y==n))&#123;</span><br><span class="line">        _myflag=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;p++)&#123;</span><br><span class="line">        <span class="type">int</span> nx=x+dir[p][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ny=y+dir[p][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(nx,ny)]||(nx&lt;<span class="number">1</span>)||(nx&gt;m)||(ny&lt;<span class="number">1</span>)||(ny&gt;n))<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[nx][ny]-MAXH+k))<span class="keyword">continue</span>;</span><br><span class="line">        cnt+=<span class="built_in">dfs</span>(nx,ny,_myflag,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!_myflag)cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=MAXH;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][j]-MAXH+k))vis[<span class="built_in">mmap</span>(i,j)]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,j)])<span class="keyword">continue</span>;</span><br><span class="line">                ans+=<span class="built_in">dfs</span>(i,j,<span class="literal">true</span>,k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现（优化后）"><a href="#代码实现（优化后）" class="headerlink" title="代码实现（优化后）"></a>代码实现（优化后）</h3><p>上面的代码中，首次找到某一层的全部连通块后，记录连通块的位置，不再进行dfs，改为查询已记录位置下方是否有零。</p><p>该改进的原理是：因不存在空洞，下一层的零元连通块是上层零元连通块的子集。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> a[<span class="number">203</span>][<span class="number">203</span>],pos[<span class="number">202</span>*<span class="number">202</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> MAXH=<span class="number">-1</span>,m,n,ans,cnt;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">203</span>*<span class="number">203</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mmap</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">203</span>*(x<span class="number">-1</span>)+y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            MAXH=<span class="built_in">MAX</span>(MAXH,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k,<span class="type">bool</span> s)</span></span>&#123;</span><br><span class="line">    vis[<span class="built_in">mmap</span>(x,y)]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        pos[++cnt][<span class="number">0</span>]=x;</span><br><span class="line">        pos[cnt][<span class="number">1</span>]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;p++)&#123;</span><br><span class="line">        <span class="type">int</span> nx=x+dir[p][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ny=y+dir[p][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(nx,ny)]||(nx&lt;<span class="number">1</span>)||(nx&gt;m)||(ny&lt;<span class="number">1</span>)||(ny&gt;n))<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[nx][ny]-MAXH+k))<span class="keyword">continue</span>;</span><br><span class="line">        cnt+=<span class="built_in">dfs</span>(nx,ny,k,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=MAXH;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> ha=<span class="number">1</span>;ha&lt;=cnt;ha++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[pos[ha][<span class="number">0</span>]][pos[ha][<span class="number">1</span>]]-MAXH+k&lt;=<span class="number">0</span>)ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[<span class="number">1</span>][j]-MAXH+k))vis[<span class="built_in">mmap</span>(<span class="number">1</span>,j)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(<span class="number">1</span>,j)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">1</span>,j,k,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[m][j]-MAXH+k))vis[<span class="built_in">mmap</span>(m,j)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(m,j)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(m,j,k,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][<span class="number">1</span>]-MAXH+k))vis[<span class="built_in">mmap</span>(i,<span class="number">1</span>)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,<span class="number">1</span>)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i,<span class="number">1</span>,k,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][n]-MAXH+k))vis[<span class="built_in">mmap</span>(i,n)]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,n)])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i,n,k,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">MAX</span>(<span class="number">0</span>,a[i][j]-MAXH+k))vis[<span class="built_in">mmap</span>(i,j)]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(vis[<span class="built_in">mmap</span>(i,j)])<span class="keyword">continue</span>;</span><br><span class="line">                ans+=<span class="built_in">dfs</span>(i,j,k,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ans)<span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正经解法比较复杂，这里贴出一个相对简单的解法。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个 m x n 的矩阵，其中的值均为非负整数，代表二维高</summary>
      
    
    
    
    <category term="做题" scheme="https://loveofpeach.github.io/categories/%E5%81%9A%E9%A2%98/"/>
    
    
    <category term="leetcode" scheme="https://loveofpeach.github.io/tags/leetcode/"/>
    
    <category term="dfs" scheme="https://loveofpeach.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>new918</title>
    <link href="https://loveofpeach.github.io/posts/e1e3cea2.html"/>
    <id>https://loveofpeach.github.io/posts/e1e3cea2.html</id>
    <published>2022-09-18T15:01:30.000Z</published>
    <updated>2022-09-19T04:00:55.363Z</updated>
    
    <content type="html"><![CDATA[<p>呵，今夜无眠。</p><p><img src="https://pic.jitudisk.com/public/2022/09/18/500ef6a118362.jpg" alt="灵车漂移"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;呵，今夜无眠。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.jitudisk.com/public/2022/09/18/500ef6a118362.jpg&quot; alt=&quot;灵车漂移&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/categories/%E6%97%B6%E4%BA%8B/"/>
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/tags/%E6%97%B6%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>How violence dominates relationships in modern society</title>
    <link href="https://loveofpeach.github.io/posts/9c06e4a8.html"/>
    <id>https://loveofpeach.github.io/posts/9c06e4a8.html</id>
    <published>2022-09-16T12:07:05.000Z</published>
    <updated>2022-10-20T09:38:55.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Why is gender equality difficult to achieve? Why are there so few peers in school violence to speak out for the bullied? And why can a social event be dealt with only when it becomes a hot spot of public opinion? This article will show how violence plays a role in modern social relations, especially in China. Violence, as small as between men and women, as large as at the national level, has completed taming people in an imperceptible manner, and invaded every aspect of their lives, becoming a kind of terror that exists in the collective subconscious.</p><h2 id="Men-and-women"><a href="#Men-and-women" class="headerlink" title="Men and women"></a>Men and women</h2><p>Men and women 可以看作个体与个体的特殊情况，但两性角度足够有趣，值得一说。</p><p>一位同事和我提过这么件事，他的母亲动手术需要子女签字，他妹妹去的时候医生却问她：“家里有兄弟吗？有的话这字得他来签，你签了不算。”</p><p><em>“你签了不算。”</em> 为什么？因为这个医生重男轻女，认为家庭中只有男人可以做主？如果止步于此，往往会导向对传统观念的批评之类的陈词滥调，为弄清这类事件背后的逻辑，必须重新审视“家里只有男人可以做主”意味着什么。</p><p>“做主”，表明了一个人的身份地位，但它的另一层意思需要换个说法，“张三替李四做主”。这往往意味着在李四被欺压时，张三会为李四出头。同时，李四将自己的部分权利让渡出去，与张三形成一个捆绑的整体，失去自身的独立性。李四与外面什么人背着张三作出决定，在传统观念里是一件大不韪的事，如果张三不认可这个决定，就很可能是不算数的。这个矛盾的解决可能以一方的妥协而告终，但如果双方都不退让，就只能付诸暴力。而决定张三李四主从关系的，就是谁能够付诸暴力。当然在现在，主从关系也可以是经济上实力的对比，不过这种基于暴力的主从关系仍然存在，并一直发挥其影响力，甚至可与经济上相反的主从关系并行不悖。</p><p>It has always been believed that since the Industrial Revolution, with the advancement of technology, physical strength has become less and less important in production, thus women have been able to participate more in the economy, and their status has improved. Indeed, economic power is a very important part of power, but that’s not enough.</p><p>如果说上文中张三会为李四“出头”的主从关系尚能用捆绑的利益共同体来粉饰的话，不履行“出头”义务、只靠暴力（生理或心理的）维持主从关系的张三，可以说是渣滓了——家暴者是其中的典型。遗憾的是，多数人在现实中仍不会对身边的家暴行为发声（报警未必有效，在小城镇里警察是不会管的），安慰自己别人的家事旁人莫管，这同样是忌惮家暴者的暴力。</p><p><em>“家中只有男人可以做主。”</em> 一旦某人接受了这一观点，哪怕他是一个短视的、无法预测事件发展的人，也能绕过对暴力的想象，在事实上求得一个安稳的局面。对于上文提到的医生而言，则是避开了可能的医闹。</p><p>暴力的不对等所导致的不平等，可能远比常人想象的要严重得多。</p><p>设想这样的情景：一个女人在遇到块头比自己大很多的陌生男人提出冒犯性的要求/攻击性、侮辱性的举动时，能小声地骂一句“傻逼”然后快速溜走，已经算是勇敢了——但这仍是有风险的，因为你不知道陌生人的脾性如何。</p><p>我以前的一个中学同学，身材娇小的女孩子，曾小声回怼老师，具体发生了啥我不清楚，不过这就足以令这位自视甚高的老师勃然大怒了。这位先生除了思想守旧、偏向传统以外（例如他曾在课堂上公开表示，日本人应该被杀光——这是他从小接受的教育导致的，可能在他脑海里，日本人一直是个抽象的概念？），可以算是一个性情温良的人，为人处世也挑不出毛病。可是在面对一个柔弱的女生、一个地位比自己低的学生，对自己不敬之后，出离愤怒了——可能他也从未预想过类似的情况吧。这里我要特别指出，即便是这位勇敢的女性，也是在三个前提之下回怼的：</p><ul><li>她是女性，老师是男性，传统观念里男性打女性是不道德的。</li><li>她是未成年，老师是成年人，成年人打未成年人是可耻的。</li><li>她知道这位老师平时的为人。</li></ul><p>当一个人因为暴力上的不对等而刻意思考回避可能激怒对方的措辞、而对方不会时，两个人就已经不在平等的位置上了。</p><h2 id="Individuals"><a href="#Individuals" class="headerlink" title="Individuals"></a>Individuals</h2><p>前面已经说过，Men and women 可以看作个体与个体的特殊情况，因此道理相仿。举例如下：</p><blockquote><p>(引用自知乎用户 <a href="https://www.zhihu.com/people/feng-yi-nan-77-11">@风衣男</a>)<br><strong>问题：</strong> 湖南一男子车上脱鞋光脚搭前座女子头上，如何看待男子的行为？<br><strong>问题描述：</strong> 9月17日，湖南怀化。一男子在大巴车上脱鞋休息，然后把脚放在前座女子头上，十分没有素质。据目击者称，旁边大哥跟他沟通，但是没什么效果，他就继续把那个腿放在前排，两人就在那理论。 <a href="https://news.hbtv.com.cn/p/2277964.html">新闻链接</a><br><strong>回答原文：</strong><br>有一次坐硬座去武汉，由于接近始发站，车上人很少，当我到达座位的时候，有一个三十五左右的小伙，脱鞋穿袜子躺在三人排的座位上，我的座位在对面，咱也不能说啥，坐下吧。<br>谁知道五分钟后这玩意坐起来了，靠窗坐的，脚伸到对面的座位上放着，在我旁边，咱脸皮薄啊，没好意思说，以为一会就收回去了，结果等了十分钟，这玩意刷上短视频了，还超大声，实在忍不住提醒小伙把鞋穿上，这玩意用眼白翻我一下，装没听到，卧槽，真是婶子能忍你叔不能忍啊！我直接脱鞋脚也放在对面，由于逛了一天的展会，夏天又容易出汗，那味道我都想觉得酸爽，一分钟后小伙又翻白眼瞅我一下，没想到这货挺能坚持，啥话也不说，一直到十分钟后小伙默默地穿上了鞋，又过了十分钟看我没动静，小声提醒我:大哥，这样不好吧，咱把鞋穿上吧！我也学着小伙用眼白翻了它一下，没搭理他，<strong>我感觉要不是我一米八二，一百七十斤的块头小伙没把握，能直接骂我</strong>，就这样又过了十分钟感觉也差不多了，正好也到了下一站，为了不破坏我这个遵纪守法好公民的形象，咱也把鞋穿上了。<br>随着上车的人开始找座位，小伙去车厢交界处抽烟了，这一走就是三小时没见，一直到车厢坐满了才回来！回来也是背靠座位打盹养神，视频也不刷了！<br>有些人，总觉得哪里都是它们家，没有边界感，只有当你用实际行动告诉它该怎么做的时候，它才会有所改变！</p></blockquote><p>A person’s ability to resort to violence greatly affects how he lives.</p><h2 id="State-violence"><a href="#State-violence" class="headerlink" title="State violence"></a>State violence</h2><p>State violence has caused countless disasters in the past few decades, this article does not intend to repeat them, but only from a few small aspects to illustrate that state violence is not only reflected in bloodshed events. We will see that violence still plays a significant role in these aspects.</p><h3 id="抑制民间暴力"><a href="#抑制民间暴力" class="headerlink" title="抑制民间暴力"></a>抑制民间暴力</h3><p>抑制民间暴力，一是违禁品的管制，二是思想文化层面的教育。第一点很好理解，『收天下之兵，聚之咸阳，销锋镝，铸以为金人十二，以弱天下之民…自以为关中之固，金城千里，子孙帝王万世之业也』。这里主要从例子入手谈谈第二点，为什么以暴制暴、复仇等要素在中国电影中不被容许？</p><p>近几年上映的电影里就有一个典型，《误杀》，该片翻自印度电影，但在结尾作了一些“特色”修改。一位父亲为了保护家人而故布疑阵处理尸体，在原版《误杀》中，父亲并没有自首，也没有向被害人的父母道歉；但在国产改编中，父亲道歉并说出真相，最后在监狱中服刑。</p><p>对此，<a href="https://baijiahao.baidu.com/s?id=1728805671273917390&amp;wfr=spider&amp;for=pc">某文章</a>是这样解释的：</p><blockquote><p>肖央饰演的父亲，虽然是出于保护家人的需要而进行了犯罪，但这并不是他逃脱法律惩罚的理由。在一个法律社会中，只有法律才具有惩罚犯罪的资格，个人并没有。所以其坦白真相并接受法律的惩罚，更符合法治社会精神，也更符合绝大多数人朴素的正义观。更值得说的是，电影被称为第七艺术，其对现实生活有重要的影响作用。<strong>这种结局改动，也能对违法犯罪分子进行震慑，借此规劝所有的观众都能遵守法律。</strong></p></blockquote><p>这恐怕就是某些在位者的真实想法了。</p><p>当然网上也有不同观点，只不过真话太容易被淹没，也太容易被攻击了。</p><blockquote><p>引自<a href="https://www.sohu.com/a/385154438_120112342">搜狐</a>：<br>《误杀》的结局让整部影片失去了原有的韵味。<br>影片刻意将符合人们最朴素善恶观的结局改成为了强调法治的结局，本身就不是尊重价值观的做法。<br>不管什么样的价值观，不符合人们最基本的善恶观的，都是矫揉做作的说教，如果没有快意恩仇，自然不会有最初的酣畅爽快。父母为了保护子女，什么事情都可以做，没有子女的人自然不会懂。就像影片中的街头采访一样，如果自己的女儿遭遇此般不幸，你会如何处理？那么李维杰还有错吗？<br>……<br>遵纪守法是每个公民应尽的义务，那秉公执法也是每个执法者的职责。<br><strong>当执法者依靠自己的权力地位，违法乱纪肆意作恶，却没有人能够反制，受害者只有依靠同样违法手段才能自保，何错之有。</strong><br>原版中，男主人带着家人顶住压力，用智慧挑战扭曲的公权，虽身处弱势群体，却每每都能化险为夷，这里的不断反转和化险为夷都让观众感到紧张刺激。<br>《误杀》魔改结局之后，不禁让人怀疑折腾到最后到底为了什么，如果选择相信更大的公权力可以纠正次一级的扭曲公权力，为什么不一开始就选择申冤。<br>寄希望于更高一层的权力，依旧是人治社会的惯性思维，希望有个青天大老爷可以主持公道，本身就不是法治社会该有的样子，强行往法治社会上靠，就是一种很拧巴扭曲的行为。<br>……</p></blockquote><p>Cthulhu会试图控制民众的暴力倾向，严惩暴力事件——不论出于何种动机。历史上也有类似的做法：</p><blockquote><p>引自《现代日本史-从德川时代到21世纪》<br>……<br>虽然它的出处广为人知，但木偶及歌舞伎剧作均没有直接提及1703年的事件，而是把场景移至数百年前。整个故事歌颂武士的忠义，他们的主人被政敌冤枉致死，为了报仇，他们罔顾法令，攻杀其主人的政敌。与家喻户晓的《曾根崎心中》一样，破坏法律及秩序者必须受到惩罚，<strong>因此四十七名武士被幕府赐以自尽，作为其报复私仇的代价。</strong>虽然无论在现实事件中还是在戏剧中，武士们均死的轰轰烈烈，但这亦突出德川政治世界中的一些重要矛盾，即武士究竟是向谁效忠？<br>……<br><strong>当政者亦严加限制歌舞伎演出的剧目、时间及次数，这反映出德川幕府要全面防堵其统治下的各种矛盾。</strong>荻生徂徕曾向幕府献策应付四十七名浪人的复仇事件，亦提及尽忠某一大名与维系整个社会的秩序价值，两者会有冲突。<br>……</p></blockquote><p>暴力往往伴随着激情，而激情意味着现状的改变，这是Cthulhu不能接受的。秀才造反十年不成，也许这些秀才的顾虑都是对的：己方的力量还太弱小、别处的豪杰可能远胜自己云云——然而“一夫夜呼，乱者四应”，最重要的是“一夫”，这位一夫先生可能也没什么计划，但他被激情支配，终于忍无可忍了。</p><p>正如我之前在《千年女优》的影评中所说：</p><p>“非理性”并非无视科学规律、否定经验，也不是拿起锤子重新评估一切价值，“非理性”是一种生活的态度：在认清世界荒诞，人生不必有其意义之后，一个人愿意遵循内心的冲动，肯定激情的力量——哪怕从短期、局部的视角来看它是无益，甚至有害的。在社会中宣扬理性与克制、鼓吹小不忍则乱大谋，往往意味着个人激情的压抑，与此同时，污秽的黑泥也在妥协中滋长。非理性则要求个人尊严和价值的回归，在表现上可以是一句岂有此理，是拍案而起目眦尽裂，也可以是旁人难以理解的固执、沉默和坚守不易。</p><p><strong>无敌之人</strong></p><p>安倍晋三被刺杀后，日本网络上兴起了对『无敌之人』的讨论。这种人无儿无女，无牵无挂，大多一人独居，因此没有软肋，毋须过于忍耐。中国也有类似的人群，比如农村的老光棍们——拆迁队是不会想碰上这些人的。在某地的新闻中，一位光棍先生在面对拆迁队时撂下“换一个不亏，杀两个血赚”之类的狠话。『光脚的不怕穿鞋的』，说的就是无敌之人。</p><p>“无敌之人”的概念可以在某种程度上解释另一问题，即同性婚姻，或者延申到性少数群体（尤其是trans）的问题。一方面这类群体天然没有后代；另一方面，自古以来，爱情相关，或者说性相关的事/情感一直被视为进步的力量，它拥有冲破一切阻碍的决心。因此这类群体较常人更有成为“无敌之人”的潜质，所以不受天上人待见，相关法律也一直没有落实，同时Cthulhu伙同多数保守派规训这类人走到生儿育女的老路上来。当然这是个很复杂的话题，以上只是我颇具阴谋论味道的猜想罢了。</p><p>当然，人群中有好有坏（姑且容我如此粗劣地划分），“无敌之人”中认清自身痛苦来源并实施行动的，会成为人们私下谈论的英雄——至少是个壮士，一如上文的山上先生；而抽刀向无辜者、更弱者的，则是下面一种情况。</p><h3 id="民间暴力的出口：默许、制造对立"><a href="#民间暴力的出口：默许、制造对立" class="headerlink" title="民间暴力的出口：默许、制造对立"></a>民间暴力的出口：默许、制造对立</h3><p>情绪会找到自己的出路，暴力也是如此。cthulhu深知这一点，于是与人斗其乐无穷，默许、制造对立成为其惯用的手段。</p><p>近来最引人关注的措施莫过于各大平台公开IP地址。首先，作为常识，平台方是知道用户IP的，若“有关部门”要求提供某位用户的信息，平台基本无法拒绝，因而该举措的唯一用意在于引导制造人群的对立、分化他们的力量、转移矛盾对象，形成“人斗人”的局面。理想来说，一个人的意见与他来自什么地方无关；如果不承认换位思考和同理心的存在，那么人们根本无须讨论——因为他的身份已经决定了一切。珠玉在前，我就不细说了。</p><p>（一）<a href="https://zhuanlan.zhihu.com/p/508234267">《驳支持公开IP属地的九条谬论》</a></p><blockquote><p>（二） (引用自知乎用户 <a href="https://www.zhihu.com/people/zhuangzexi/creations/19587479">@庄泽曦</a>)<br>……<br>对这一现象的一种描述是福柯所谓的环形监狱，当代人全都生活在相互监视，相互检验的巨型监狱之中，他们吹毛求疵、恶语中伤，但他们的目的并不是要独霸更高的特权，而是文化所赋予并要求他们行使的使命，继而在被大众推举为高等人的同时等于落入了更严酷的监视之中。<br>诚然，福柯的比喻足够描绘今天的现实，但为更生动形象的诉说这种状态，我们不妨把上述文化看成一个无孔不入的环形人种动物园， 身处其间的人无一能逃脱被驯化的厄运，但同时又以享受他人驯化过程，并检验他人的受驯化态度为乐。<br>从这个角度看，我们全都沦为了“女性”——那种必须将他人目光内化为心灵之眼并以此检视自身，又相互监视、依照《女子守则》照本宣科、严于律人的被塑造而成的“女性”。在这种文化制度下，任何偏差与个性都被视为罪恶，同时被磨平的人格本质上又生而愚蠢。<br>这种文化是一种将人向下拽的文化，是生产我们鄙夷的曾被塑造出来的“女性气质”的文化。但这就是当下信息时代的现状，无人能够逃脱，只能坚强面对而已。<br>……</p></blockquote><p>默许并引导对立的典型例子是两性对立。两性之间的矛盾有其自身的原因，但在经济下行的当下被亟剧放大，有理由认为最大公约数默许并引导了这一矛盾。我曾在一平台上发布用文言文暗讽时政的签名，但很快被删除（该平台签名须人工审核后才能被别人看见）。随后改成直球辱男的签名（for test），竟然通过了审核。类似的例子有很多，包括大范围攻击同性恋群体等，这种纵容、引导歧视仇恨言论的现象已经很普遍了。</p><p>转移矛盾的典型例子是对资本（不包括红色资本）的攻击（防杠声明：资本当然“做了很多坏事”，但在最大公约数默许的前提下,很大程度上是因为法律的不健全）。客观来说，『改革开放以来的社会制度』——虽然不完备，确实发展了中国，这不是一句把资本家挂路灯就能否定的，对资本家喊打喊杀只会降低中国的投资价值，还不如想想怎么健全、落实相关的法律。与之相伴的是仇富的舆论，而这其中还有一部分走入误区，即对奢侈品消费的批评。事实上，一个人的消费就是另一些人的收入。如果这些富人不消费奢侈品，和我们一样消费中低档品，省下来的钱继续生钱的话，对我们也不是一件好事——何况这个省下来的钱对富人来说也不算什么。人们常说健康的社会结构是橄榄型，然而就算在这个模型中，也是有富人的。所以重要的不是富人的奢侈品消费，而是一个收入分配的问题——即为什么我们的社会结构是金字塔型而不是橄榄型？不过这里牵扯到另一个问题，即“诚实贫民”的概念：</p><blockquote><p>在支配俄国政治的新的信条中，虽然有许多完全不同于西方传统教义的东西，但也还有些事毫无改变。统治阶层，特别是那些领导教育宣传部门的人，关于劳动高尚的说法几乎同世界上统治阶级一贯宣传的所谓“诚实贫民”的说法完全一样。勤劳、节制、甘心为长远利益而长时间工作的意愿，甚至对权威的服从等等，所有这些仍然存在;而且，权威仍然代表着宇宙主宰的意志，只不过现在换了新的名称——辩证唯物主义。 ——罗素</p></blockquote><p>然而这些对资本的批评，不会涉及红色资本——至少这些言论不会出现在公共视野中。大家都知道中石油有钱，都痛恨地产开发商，都听说过『用计划经济的余威，抢占市场经济的滩头』，都想当公务员，都知道体制内旱涝保收，疫情几年，又是那些人油光满面？有些人是不敢批评，而有些人是心甘情愿地相信红色资本，这就是下面讲到的情况。</p><h3 id="公职人员的神化"><a href="#公职人员的神化" class="headerlink" title="公职人员的神化"></a>公职人员的神化</h3><p>公职人员的神化是维稳必不可少的一环，同时它也强化了国家暴力的合法性。</p><p>这种神化包含两个方面，去人性和人性化，这并不矛盾——树立一个完美无缺的形象同样是造神。</p><p>去人性是宣扬他们在工作中的勤奋、利他和舍生，甘愿为集体付出一切；人性化则选择性地丰富了他们生活中的细节。前者大家已经见得多了，不再赘述。这里针对第二点举例如下：</p><p><a href="https://www.bilibili.com/video/BV1TS4y1r7VJ/">真是羡慕部队狗狗，想撒娇就撒娇</a>、  <a href="https://www.bilibili.com/video/BV1RU4y1P7Uu">看完真觉得，自己连部队的狗都不如了</a></p><p>从侧面凸显□□们友善的一面，同时狗狗也是很可爱的生物，相当高明的手法，比最近一堆阴间内宣好多了。</p><div class="tip error"><p>该文章尚未完成，只是草稿</p></div><p>翼装飞行事件中对“浪费公共资源”的批评</p><p>任何针对Cthulhu的批评和反对，在最后都会承受祂的暴力。（郑州710白衣天使事件）</p><p>当然，公职人员中也会有崇高的人、可爱的人，也更多的是为自己谋求生计的人，而这之中有多少人默默践行着平庸之恶？有多少人无声地做出消极抵抗？这是一个比例问题。在考察一个群体的时候，一定要避免概括化和抽象化，things will get complicated, but we won’t make mistakes.概念化一个群体，去除他们的人性，也许会在初期收割部分人的支持，但它的恶果很快便会显现。</p><h3 id="裂隙：Pelosi访台"><a href="#裂隙：Pelosi访台" class="headerlink" title="裂隙：Pelosi访台"></a>裂隙：Pelosi访台</h3><hr><p>其实写这些东西还蛮丧的，尤其是联系社会现状的时候。《米开朗基罗传》中有一句很火的话：“生活中只有一种英雄主义，那就是在认清生活真相之后依然热爱生活。”我不知道有没有这样的英雄，但如果有自以为的这么一个英雄，也许是他还没有真正认清生活的真相。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;Why is gender equality difficult to achieve? W</summary>
      
    
    
    
    <category term="写作" scheme="https://loveofpeach.github.io/categories/%E5%86%99%E4%BD%9C/"/>
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/tags/%E6%97%B6%E4%BA%8B/"/>
    
    <category term="想法" scheme="https://loveofpeach.github.io/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>直面真实的世界</title>
    <link href="https://loveofpeach.github.io/posts/6e7d8092.html"/>
    <id>https://loveofpeach.github.io/posts/6e7d8092.html</id>
    <published>2022-09-16T03:14:01.000Z</published>
    <updated>2022-09-21T13:29:43.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>偶然读到一篇很好的文章，作者是清华的劳东燕教授，转载如下。</p></blockquote><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>踌躇许久，仍不知道2021年的总结，要从哪里写起。 </p><p>过去的一年于我而言，算是地过得平静，少了明眼可见的中伤，也不复求而不得的失望。然而，内心的郁结之处并未消散，同时迷茫之感与日俱增。 </p><p>记得2019年曾读到一句话，大意是，2019年是过去十年中最糟糕的一年，同时也是未来十年里最美好的一年。当时只道是揶揄，如今回看，倒是颇有些洞察先机的意味。<br>疫情之下，岁月静好的想象终于难以维续，因为兵荒马乱的日子，距离每个人都几乎只有一步之遥。就在不久之前，又一个城市经历了围城之困。谁能保证，武汉与西安所经历的一切，就不会降临到我们自己的身上？即便没有围城之困，在经济下行和失业降薪的风潮之下，谁又知道前方会有什么遭遇在等着我们？ </p><p>在一个到处充斥正能量话语的社会，不安感却像潮水一样，迅速地在全社会蔓延。在不安感的支配下，对自由的追求时常成为被讥讽的对象，而人们对于权力的渐趋集中，对于以安全为名的各式管控，对于以大数据追踪为基础的技术统治，日益表现出无所谓甚至是欢迎的态度。 </p><p>2020年的我，愤慨与感喟都主要围绕自身的遭遇，试着全面接纳在不期然中降临的中年心态；终究，我们中的很多人，都或迟或早地要步入中年，从生理到心理。2021年的我，似乎更多觉察到的是周遭的变化，对于周遭世界与很多事物，都被迫经历重新认识的过程。 </p><h2 id="在荒谬中生活"><a href="#在荒谬中生活" class="headerlink" title="在荒谬中生活"></a>在荒谬中生活</h2><p>疫情的连锁反应，加上时局的变动，导致光怪陆离的社会现象此起彼伏。 </p><p>发表一份记录疫情下日常生活之种种的日记，得做好被约谈的准备。声援一下因课堂言论被开除的同行，甚至要面临“被精神病”的遭遇；在自媒体的接力呼吁之下，好不容易从精神病院出来，最终却只能在年关来临之际，选择从此别离家乡。 </p><p>冰天雪地里，怀胎八月的孕妇在医院门外坐等流产，而突发心脏病的老人，以必须核酸检测为由，在无情的等待中失去救治的机会。一位妈妈接到中学放假的女儿，在已通过十八轮核酸检测的情况下，仍被卡点拦着不让回家，在冬日的寒夜彷徨街头直到天明。 </p><p>山东的某位镇委书记告诫上访人员，有一百种手段“刑事”对方；河南的某位县长更是杀气腾腾地喊话，春节期间要对恶意返乡者先隔离再拘留。 </p><p>以上种种，多么希望只是个例，可惜不是。那位声称有一百种手段“刑事”上访人员的镇委书记，想必不会认为自己说的内容有错，而只会怪自己政治上幼稚，把不能说而一直在做的事说出了口，还不小心被录了音。的确，她道出的是现实。刑法中多的是手段来对付上访人员，包括寻衅滋事罪、敲诈勒索罪以及扰乱国家机关工作秩序罪等，都是实务中常用的罪名。 </p><p>那位在冬日寒夜与女儿一起彷徨街头的妈妈，曾这样哭诉：“如果每一个教训都要付出生命的代价，才能成为教训的时候，这样是不是太惨痛了？……你们是执法部门，但是天理人情呀，我们是不是把人放在了第一位？” 她的哭诉让人潸然泪下。然而，在这起事件中，究竟谁是为恶者，谁需要对结果负责呢？答案是没有。就像当地街道办的工作人员回应的那样，我们无能为力，这个事情也不能说卡点人员做得不对。 </p><p>一切都是以安全或稳定为名，宣称是为了民众的福祉。可悲的是，无论是医院的保安还是卡点的人员，每个人都在尽忠职守，犹如螺丝钉那样，认真贯彻来自上面的规定，同时却对具体个人的苦难视若无睹，甚至本身就是他人苦难的肇因。 </p><p>单纯人性的恶，尽管看起来触目惊心，其实并不那么可怕，因为但凡有正常理性的人，都能做出正确的判断。就像重庆那位男子为实现再婚目的，不惜将一对亲生儿女从高楼抛下，谁都会发出恶魔在人间的斥责。然而，制度造成的恶，因其以日常化甚至是平庸的面目出现，导致人们普遍地不加提防，所以具有高度的传染性。纵观20世纪的浩劫，几乎都是由制度性的恶所造成，恶劣的制度加持人性的黑暗，一再地酿成难以想象的悲剧。 </p><p>在恍惚中，我听到国家机器在那里嘎吱嘎吱转动的声音，反应敏捷，运作有序，却缺乏任何温情，显得理性而冷酷。在这样的国家机器眼中，抽象的群体至高无上，而具体的成员毫无价值。事实上，作为群体的民众被抬举得越高，作为个体的成员就愈发地无足轻重。两种理念竟能并行不悖地存在，世界就是如此的荒谬。 </p><p>荒谬的不止于此。当初以自由为名而得以迅猛发展的网络与数据技术，正在成为新的统治工具，给作为社会成员的我们套上日益沉重的枷锁。技术本身以造福于社会为名而被大力倡导，但现实中它们经常被用于监控与操纵，包括进行愚弄。 </p><p>就比如，个人在朋友圈发布的信息，不时会遇到只有自己可见的情况，而发布者往往还并不知情。同时，与主流不同的声音越来越难以发出，即便侥幸通过发布环节的审查，也会被技术迅速地捕捉。此外，在技术的统治之下，个人被大数据系统所误伤，也经常不知道找谁理论，每个人都身不由己地陷入匿名的魔阵之中。 </p><p>学生时代在王小波的书中读到花剌子模国信使的故事，觉得匪夷所思。怎么会有这样的制度安排呢？凡是给国王带来好消息的信使，就会得到提升，给国王带来坏消息的人，则会被送去喂老虎。坏消息难道会因为信使的不传达而消失吗？然而，此种类似于寓言的故事，在现实中一再地上演。 </p><p>当下的社会治理中，不管什么层级，重要的往往不是出现了相应的问题，而是相应问题是否成为了舆情事件。于是乎，不解决问题，而只解决提出问题的人，成为治理中的惯常手段。把任何有影响力的事件都单纯地当作舆情问题，导致问题不仅没有解决，而且越来越多。本来微不足道的小事，最后变成天大的事。 </p><p>更为荒谬的是，很多被套上枷锁的人，不仅不愤怒于自由的丧失，还颇为怡然自得，就像温水中被煮的青蛙。并且，虽然自己也是被统治者，却特别善于为统治者着想。一切都是为了大局嘛，限制自由算什么，牺牲他人的权益更是不值一提。也正是在这样的社会氛围下，普通个人为维护自身的正当权益，被迫承担越来越多的污名。 </p><p>与此同时，越来越多的人，对于他人的不幸表现出不加掩饰的冷酷，甚至想方设法要从当事人的身上找出错处来。这种下意识的言行，折射出一种颇为微妙的内在心理：那些遭遇不幸的人们，完全（或至少部分）是由于自身的过错所导致，而我没有这样的问题，所以我是安全的，不幸不至于降临到我的身上。 </p><p>可以说，正是真实世界中安全感与稳定预期的严重匮乏，酿生了此类扭曲的自我臆想。当全社会陷入这样的臆想，被害人有错论的泛滥成灾，也就变得容易理解。只有纯洁无辜的被害人才被认为值得同情，而这样的被害人少之又少，人们自然可以心安理得地拒绝施予同情。基本的同情心与同理心，在这个社会，变得越来越稀缺，日渐地成为奢侈品。 </p><h2 id="在迷茫中忙碌"><a href="#在迷茫中忙碌" class="headerlink" title="在迷茫中忙碌"></a>在迷茫中忙碌</h2><p>人到中年，突然发现需要重新认识这个世界，在反思自己是否有些矫情的同时，我有一种不知身在何处的惘然。直面荒谬，又时常无能为力。所以，尽管早过了不惑之年，反而愈加地困惑与迷茫。 </p><p>公众号停更一年，期间除因出版社的提议而发布过新书的信息外，没有专门写过或推送过任何文章。偶尔有朋友或学生问起，多是以忙的理由来搪塞。但从内心来说，停更的主要原因恐怕还是迷茫。 </p><p>迷茫首先表现在，但凡涉及社会性的问题，我已经完全不知道，言说的边界究竟在哪里，也因此不知道自己可以写些什么。当2021年的诺贝尔和平奖揭晓，授予菲律宾记者玛丽亚·蕾莎与俄罗斯《新报》总编辑德米特里·穆拉托夫时，国内报道的是“以表彰二人做出的贡献”，而外媒的报道则是“以表彰二人为捍卫言论ZY做出的贡献”。不知从何时起，言论ZY竟成为讳莫如深的词汇。 </p><p>迷茫还表现在，除了可能给自己带来麻烦之外，我不知道这样的公共写作有什么意义。在公知被普遍污名化的今天，无论是民众还是政府，包括这个时代的青年，都不怎么欢迎指摘社会问题的知识分子。我看过一段视频，是一位年轻女孩挖苦讥讽公知的，被她点名道姓的那些人物，都曾是我们这一代年轻时颇为尊敬的知识界人物。看完之后，心里顿觉一阵寒意，不由地想起鲁迅先生的小说《药》中的人物夏瑜。夏瑜的牺牲有什么意义呢？大概只有作为人血馒头的意义。他为之付出生命的民众，就是那样对待他的。 </p><p>实际上，不止是公号文章的写作，甚至于对学术写作，我也开始陷于意义的迷茫之中。观察近些年来的法律实践，发现学术性写作除了为个人的安身立命提供些许本钱，原以为的推进中国法治的意义，纯属一厢情愿。法学理论的研究，越来越像学界中人的自娱自乐，表面的繁盛掩盖不了内里的空虚与犬儒。在学术日益内卷化的今天，论文写作的意义往往只在于发表。说到底，在理论对法治的设想与实务对法制的践行日益背道而驰的今天，也不要奢望理论能对实务产生多少影响。 </p><p>更为迷茫的是，在这一年中，我试着让自己收敛与合规，但终究发现，很多时候都会被逼到忍无可忍退无可退的地步。也许，是我的忍耐力不够吧。很多事情，但凡还有一点做人的血性，我都疑惑，怎么能忍得下来。无止境的忍耐，无原则的退让，最终会让自己都鄙视自己，那样苟且地活着，真是枉称为人。反之，不想忍耐的话，就要经常处于愤怒的状态，还可能被认为是麻烦人物，免不了陷入四面楚歌的境地。 </p><p>让人迷茫的还有，关于努力的意义。一直笃信越努力越幸运的我，突然间就陷入迷茫之中，不知道努力的意义何在。这些年来，努力前所未有地贬值，就像遭遇了严重的通货膨胀。所谓的“贬值”，不只意味着更多的努力换不来更高的收入，也意味着随着阶层提升渠道的收紧，拼命的努力也不见得能改变自身的命运；“贬值”还意味着，对很多社会问题所作的努力，难以获得真正有意义的改善。 </p><p>就比如，包括我本人在内的法界同行与媒体同仁，这两年在人脸识别的问题上做了不少的努力。两年之前北京地铁在准备推广人脸识别时，因遭遇舆论的反对而搁置；两年之后北京已有五个地铁站悄然推行人脸识别，预计很快就将全面铺开。不止如此，小区、商场、学校等各类公共场合，借疫情防控的东风，人脸识别技术的适用都有愈演愈烈之势。 </p><p>如果所做的努力没有意义，那我们还要继续选择努力吗？然而，不努力又能如何？恐怕只会使处境更为糟糕。所以，就只能在迷茫中忙碌，在忙碌中迷茫。在努力遭遇断崖式贬值的今天，这样的迷茫具有相当的普遍性，也无怪乎“内卷”与“躺平”，会成为具有时代标志性的关键词。 </p><p>“内卷”的本意是不必要的复杂化或缺乏进步的自我重复，对于努力的贬值现象，用“马尔萨斯陷阱”来形容可能更为准确。不过，“内卷”的字面意思直白易懂，也比较形象：既然没法对外使力，那就只能卷入内部的过度竞争。在努力的作用微乎其微的情况下，“躺平”也相应成为一种不失明智的处世立场。不再接受打鸡血式的激励，也许是年轻一代在用自己的方式，来表达消极的抗争，以部分地消解外在环境对个体的规训吧。 </p><h2 id="在适应中反省"><a href="#在适应中反省" class="headerlink" title="在适应中反省"></a>在适应中反省</h2><p>从年轻时候开始，我便认为法治在中国的实现，在自己的有生之年只是时间的问题。然而，这种盲目的乐观遭到了现实的痛殴。眼见着依法治国日益地变成以刑治国，法家主义的法制卷土重来，有时会有悲从中来之感。我不算悲观的人，但仍难以完全消化外部环境的冲击带来的沮丧与失望。我很想兜售正能量，但在春节返乡也要被冠以恶意的年代，实在是说不出口。在程式化的政治话语漫天飞舞的时代，作为学者，至少应该保持起码的真诚。一味地回避现实中的种种，终不免沦为虚伪与投机。 </p><p>我始终认为，与给予虚幻的希望相比，认清与直面现实是第一位的。就像在对女儿的教育上，我选择让她看到世界的真实面目，不会刻意掩饰其中的丑陋与残酷，给她一个修饰过后的美丽新世界。作为初一的学生，我推荐她看《那不勒斯四部曲》，让她自己去思考女性命运与两性平等的话题。前不久她主动提出要看《辛德勒的名单》，我也表示同意，陪她一起观看，并且在看完后与她探讨，为什么这样的影片会有震撼人心的力量。 </p><p>所以，我的女儿虽然成绩平平，在他人看来可能毫不出彩，但在我眼里，她自有她的出色之处。她对优秀影视作品的鉴赏力与领悟力，远超同龄的孩子，对于一些政治与社会问题的判断，也胜过许多脑袋空空的成年人。 </p><p>直面现实，接受世界残酷的一面，是走向成熟必须要经历的过程，不然，心理上就永远只处于蒙昧的幼童时期。就像有句话说的，“凡是听不得残酷真相的人，一般都活在婴儿阶段。人的成熟，一半是对美好事物的追求，一半是对残酷真相的接纳。” </p><p>我始终不认为，将各种社会问题搁在那里，不让人说破，不让大家知晓，便是所谓的正能量。如果正能量要依靠掩饰而获得，连直面的勇气都没有，这样的正能量，未免透着一股掩耳盗铃式的虚弱。 </p><p>只是，在直面现实的同时，如何让自己不至于变得愤世嫉俗或是随波逐流，是颇费思量的事。在外部环境变动的同时，对个人来说，势必面临如何调整与适应的命题。完全坚守原先的自我，会因为与外部环境格格不入而遭受痛苦；反过来，选择成为变色龙，也终究会由于迷失自我而陷于空虚。在两端之间怎样平衡，如何在适应外部环境变动的同时保持独立的自我，可能是很多人正面临的困扰。我也是如此。 </p><p>年岁渐长，终究发现，对任何个人来说，时运都是第一位的。再生猛的人，也强不过时运，中国人喜欢讲天命，或许与此有关。但是，特定的时运之下，作为个人仍会有一些选择的空间。 </p><p>所谓的适应，肯定不是通过一味地扭曲与改变自身而顺从于外部环境。单方面的顺从，只会造就苟且的自我。就像法律一样，作为个人，我们不仅必须适应外部环境的变动，而且需要具备自我演进的能力，通过以我为主的选择不断地实现自我更新。这正是卢曼系统论所给予的启发。 </p><p>相应地，在对外部环境的变动保持敏感并调整认知的同时，需要努力培养内在的生命力，以形成更为强大的自我。一个强健的、具有内在生命力的自我，会更有能力化约外部环境带来的冲击，同时拒绝犬儒与投机。 </p><p>所以，在得知近几年国内位列TOP2的两所大学，70%以上的毕业生都选择公务员与教师等体制内职位时，我在表示理解的同时，也感到有些惋惜。表示理解是因为，我知道身边的这些年轻人面临巨大的生存压力，普遍都高度地焦虑；感到惋惜则是源于，选择体制内的职位意味着选择了安稳，而安稳的职位通常天花板很低，风险变小的同时自然收益也少。 </p><p>我特别期望，无论身处哪个年龄层，都不要因为疫情的久拖不决与经济的低迷下滑，就放弃自己的梦想，降低自我的期待。我们需要做出调整，也需要适应外部环境，但不是通过放弃梦想与降低期待来实现。不应该让疫情偷走自己的梦想。 </p><p>就像我的一个学生对我说的，在遇到眼高手低的批评时，为什么要让高处的眼睛去就低处的双手，而不是反过来努力抬高双手的位置呢？因此，在遇到眼高手低的批评时，或许值得庆幸的是，自己至少还有“眼高”的优势，比眼低手低总是要更胜一筹。就目前的情况来说，所能做的，就是努力让自己的内心安静下来，以一种“面壁十年图破壁”的耐心，在韬光养晦的同时积蓄实力。我对自己的期望也是如此。 </p><p>回看过往的研究，我关注的命题一直是，如何使包括刑法在内的法律系统适应社会外部环境的变化。反思这种研究立场，不足之处在于只关注“社会秩序如何可能”的问题，其实真正需要关注的应当是“良善的社会秩序如何可能”。基于此，实有必要对原先的研究立场做出调整。 </p><p>法律不只是一个功能系统，需要不断适应外部的社会环境；同时它也是一个意义系统，承载着时代的价值观与道德底线。因此，在做法学研究时，不仅需要有社会理论的视野，政治哲学的视角也不可或缺，因为后者关注的恰恰是“良善”的维度。当法律人不断地宣称民众应当信仰法律时，其间的法律显然不应当是法家主义意义上的法律。 </p><p>在为人处世上，也有一些需要调整的地方。遇到不怀好意的攻讦，以往的我，下意识的选择会是忍让退却与保持距离。可能多少是受了“恶人自我恶人磨”的处世哲学的影响。反思这样的做法会发现，很多人都是像我这么想的，总希望有别的恶人去施行惩治。也正是这样的处世哲学，导致在中国社会吃亏的经常是君子与老实人，而小人与恶人们往往占尽便宜。 </p><p>可以说，正是包括我在内的很多人选择忍让退却，才让恶人能肆无忌惮地继续为恶。在某种意义上，对于周遭环境的日渐恶化，选择忍让退却的我们，其实都负有消极不作为的责任。这并非君子之风，而是犬儒懦弱的表现。以德报怨，那何以报德呢？在不拉低自己的前提下，是应该考虑坚决反击的。 </p><p>在微博上读到一句话：“你真正吸引的人，永远欣赏的是你骄傲的样子，而不是你故作谦卑和故作讨喜的样子。”谨将这话送给此刻可能迷茫彷徨的你，也送给我自己。 </p><p>“如果你选择利用自己的地位和影响力，去为那些没有发言权的人发声；如果你选择不仅与强者为伍，还会同情帮扶弱者；如果你时刻设身处地为那些没有像你这般地位的人着想，那么你的存在，将不仅是你家人的骄傲，更是无数因为你的帮助而改变命运的成千上万人的骄傲。”这是J.K.罗琳在哈佛大学毕业典礼致辞中的一段话，我特别喜欢。在我看来，这才是真正的正能量。愿你我都能拥有这样的正能量。 </p><p>2022年1月29日</p><p>完稿于清华园</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;偶然读到一篇很好的文章，作者是清华的劳东燕教授，转载如下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;踌躇许久，仍</summary>
      
    
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/categories/%E6%97%B6%E4%BA%8B/"/>
    
    
    <category term="时事" scheme="https://loveofpeach.github.io/tags/%E6%97%B6%E4%BA%8B/"/>
    
    <category term="转载" scheme="https://loveofpeach.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>影评《千年女优》</title>
    <link href="https://loveofpeach.github.io/posts/a33ec8c1.html"/>
    <id>https://loveofpeach.github.io/posts/a33ec8c1.html</id>
    <published>2022-09-12T02:00:03.000Z</published>
    <updated>2022-10-15T12:20:56.812Z</updated>
    
    <content type="html"><![CDATA[<div class="tip error"><p>本文包含少量剧透</p></div><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>2001年，蒙特利尔，加拿大。</p><p>当《千年女优》拿下电影节大奖时，动漫电影再次证明了自己毫不逊色的表现力。 </p><p>《千年女优》可以理解为“昭和女影星的传记”，女主藤原是日本银映电影公司的巨星，她演绎了日本诸多时代的故事，这些故事与千代子的真实经历交织在一起，亦真亦幻，娓娓讲述了动荡时代里一个少女的情思。</p><p><img src="https://s2.loli.net/2022/10/07/K6G1H3qSdwUFhDP.jpg" alt="4-1.jpg"></p><p>影片开头，立花源也和摄影师前去拜访隐居的千代子，为她拍摄个人纪录片。他们在千代子的回忆叙事中“扮演”了其他角色，见证了千代子的一生。</p><p>从影片的观感来说，把与千代子相遇的人——甚至包括在重要时刻改变了她人生轨迹的人（例如搭载千代子的货车司机），全部换成源也和摄影师，多少有种诙谐、揶揄人生的意味。也许在千代子看来，那些人不过是步履匆匆的过客，在特定的时间行特定之事，具体是谁都无所谓，甚至，他们只是“现象”？实在是有趣的想法。</p><p>世间为舞台，冠笄皆伶人。</p><p>千代子在学生时期，包庇了一个进步画家。她对画家未完成的作品感到好奇，画家表示，他的故乡，到了冬天就会被绵延至天边的白雪覆盖，战争结束后，他要在那里感受刺骨的寒冷，完成作品。</p><p>这时，镜头移至窗外——『拨开夜的伪装，便现出一轮明月来』。</p><p>这是十四夜的月亮。</p><p>“我更喜欢这时候的月亮，满月从下一天开始就会月缺，而十四夜的月亮却还有明天”，画家攥紧拳头，“有被称为明天的希望。”</p><p>浪漫飘渺的东西总能catch到年轻的女孩——千代子也不例外。这为她一生的追寻埋下伏笔。</p><p>千代子借拍电影之名来到满洲（日据时代的中国东北）寻找画家——画家曾表示要在这里同伙伴们一起战斗。千代子搭乘的火车因乱脱轨，打开车门时，镜头便切到千代子参演的电影中去了……</p><blockquote><p>注：影片中，火车的报纸上写着“大量日裔革命人士遭检举”；按照设定，画家是作为反战派遭到当权者的迫害；千代子曾回忆道：“我的孩童时代，整个世界都危机重重，什么东西都一个劲往右拐，不过，当时的我更看重的是少女杂志。”<br>B站的《千年女优》评论区处于关闭状态，大约又是出于一些傻逼的原因，当然这和近年舆论环境收紧密不可分。</p></blockquote><p>这类镜头切换在《千年女优》中十分常见，今敏娴熟地用这种手法将fiction和真实经历糅杂在一起，营造出真假莫辨的观感。</p><script type="math/tex; mode=display">fiction_{千年女优}=\begin{cases}reality, & \text {千代子的经历} \\fiction, &\text{千代子参演的电影}\end{cases}</script><p>虚构中的真实，虚构中的虚构。</p><p>有意思的是，千代子这个形象本身也是有现实参照的。</p><script type="math/tex; mode=display">原节子 \stackrel{f}{\longrightarrow}千代子</script><blockquote><p>注：原节子参演电影《东京物语》。<br>插一嘴无关的，《东京物语》是一部老电影了，画面黑白，剧情据说感动了许多人，其独特的镜头也被一些人狠狠吹捧了一番。但我个人对此比较无感，可能是因为家庭原因很难对这些东西共情吧，血缘是亲情的既不充分也不必要条件呢。<br>扯远了，再扯点别的。《东京物语》是一个老东西了，而老东西往往难逃一个被当作装逼资本的命运。或有另一种情况：怀念过去的时代，试图证明它比现在更好。这种做法背后的逻辑是显然的：我经历过那个年代，而你们（潜在的听众）没有，我见识的多，所以我资格老，我是前辈，而前辈就是给后辈敬重的。类似的说法有很多，例如以前的人比现在的人纯粹等等。<br>不过，单就『以前的时代比现在好』这个判断来说，在最大公约数的带领下，或真。</p></blockquote><p>电影末尾，千代子讲述完毕。仿佛完成使命一般，她体力不支，倒在病床上。</p><p>千代子活得很久了，多年的隐居生活使她对时间的感受颇为迟钝，曾经的事就如同梦一般虚幻。立花源也带来的钥匙打开了她珍贵的回忆。是时候结束了，生命的最后时刻，她想起从前，在未满的月夜下与画家拉钩的时候，在摄制组的吆喝声中从战国穿越到大正昭和的时候，飘雪的隆冬里只身一人前往北海道的时候……这多少给千代子一点安慰，抚平她的心绪，自己的一生没有那么不堪，但也到此为止了。火箭从象征着轮回的莲花状发射台上起飞，千代子踏上了新的追逐旅途。</p><p>然而萍水相逢，千代子真的会爱上那位画家吗？或许她只是将曾经的约定贯彻到底罢了：去北海道一起看雪。少时的承诺往往会成为执念一般的东西——“当作明天的作业，约好了”。这种执念是回溯过去的线索，在飞速变化的当下提供存在的连续性证明。千代子的执念贯穿了她的一生，让她放弃执念就像让她否定一生一样，所以她只能在千年的轮回里不断追逐。虽然到最后，仅是寻着死者的影子罢了，但也没必要说千代子的追逐是徒劳的，就像一场无疾而终的暗恋、抑或是无法走到终点的旅途，其意义就在于本身，个中滋味，不足为外人道。荷马曾言：“追逐影子的人，自己就是影子”，千代子在追寻的过程中，把对画家的追求具象化为爱情，其实是瞒过自己的手段。弥留之际，千代子揣着钥匙，终于承认：“我喜欢的是追寻着那个人的自己”，与自己达成了和解。</p><p>千代子的遗言完成了对自我精神的解剖。她的一生中，眼前总有一个画家，其形象却十分模糊，这种不确定性增长了千代子对画家的幻想，她仿佛已然置身于广阔而雪白的风景中去了。值得一提的是，千代子是没有家的，作为影视巨星，却经历着心灵的流浪。精神上的无所适从伴随着现实中的动荡不安，也许，千代子在追寻中渐渐明白，自己憧憬的对象，只是由温馨模糊的回忆培养起来的抽象感觉罢了，如果画家活到和平年代，与千代子成家，也未必能抹去她心中无家可归的感觉，她也势必重回追寻的旅途。人生的本质是诗意的，人是诗意地栖息在大地上的，然而在消磨自我的现实里，她只能在白雪覆盖的旷野中，体味一派苍凉而已。</p><p>等待千代子的，究竟是家还是无边的旷野呢？</p><p>作为唤起内心深处感动的作品，这部电影本身可以理解为对某种美的追求，哪怕只是一个残缺的幻影。今敏在2010年也因癌症走到人生的终点，葬礼曲正是《千年女优》的片尾曲：</p><p>……<br>平行并列的行星<br>隐喻般衬出今时今日<br>肆意烂漫的花之原野<br>仍记得你的模样<br>……</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>千代子的性格中必然有较常人缺失的部分。她息影的理由是：“不想让他看见变老的自己”。然而这种担心——画家不会喜欢变老的千代子，完全出于自己的想象。但同时，她却坚信自己对老去的画家的爱，这种矛盾折射出千代子性格中迎合他人的倾向。至少在这段臆想的感情中她没有将自己置于与画家对等的位置，自己与画家仅一面之缘，没有深厚的感情基础，也没有很多足够吸引画家的闪光点，潜意识里要用自己的青春和容貌代偿（画家岁数比千代子大一些）。妄自菲薄的人在人际关系中难以舒适自处，这也是为什么千代子在happy ending（与画家在一起）中仍可能茫然若失。这种倾向是因为过于依赖他者之肯定获取自身的价值。</p><blockquote><p>注：当然，在happy ending中千代子还是可能获得相对满意的人生的。世界上有太多不满意但能维持下去的关系了，而单方面的妄自菲薄导致的不对等真的算是微不足道的一种了。至于他们能不能一直走下去，又是另一说了。</p></blockquote><p><img src="https://s2.loli.net/2022/10/07/Da38LJIWmyXiw5P.jpg" alt="4-2.jpg"></p><p>千代子成长于单亲家庭，这对千代子的性格塑造有着怎样的影响？</p><blockquote><p>注：这里千代子的母亲用一种political correct对抗另一种political correct，很多人因此觉得其母富有智慧，在保护女儿。这当然也是一种解释，但结合后面的剧情，更有可能“女人保护家庭生儿育女也是本分”就是其母的真实想法。</p></blockquote><p>千代子的母亲是否过分控制？有没有在精神上打压千代子？一个女人失去丈夫，能依赖自身的强大，不觉得周围的世界危险失序，不因此控制子女，这样的人有多可贵？又能有多少？但可喜可贺，一个寡妇的力量并没有强大到当千代子夹在两种political correct之间时，替她做出选择。</p><blockquote><p>political correct 1 ：传统保守观点下的“女人保护家庭生儿育女也是本分”<br>political correct 2 ：帝国侵略扩张背景下的“为国捐躯”，对于千代子来说是到满洲“为国拍电影”</p></blockquote><p>千代子的追逐构成了对人生困境的隐喻，而这种困境往往是自己一手构筑的，『一个人的命运就是他的性格』。成为演员经济独立后，千代子已经摆脱控制，她完全可以放下画家，但她却将自己束缚在里面，因此她一生一世都在追逐的途中。设置一个无法实现的目标正好可以填补心灵的空虚，这和很多人的假装努力非常类似。当我们回到莫比乌斯环的起点时，往往会感到困惑——我们陷入了一个自虐的陷阱，精神上的画地为牢使我们心安，受困于此，则不必迈向前方。</p><blockquote><p>注：番剧《欢迎来到NHK》，主角也是和千代子一样囿于自己构筑的困境之中。</p></blockquote><p>人是一种会把自己困起来的生物。</p><p>当然，也有一种简单但说得通的解释：千代子因为幼时缺少关爱（父爱？），在遇见平等待己的喜欢的人时，会非常在乎，而千代子这种成长经历的人会非常注重感情的忠贞，在没有找到画家之前很难变易。这是她原生家庭影响的延续。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>果真如此吗？</p><p>千代子仅是一个原生家庭不幸、因奇怪的执念离经叛道的性格上的软弱者吗？或许在某些瞬间里她确实沉溺于自身的软弱，但人是复杂而立体的，换个角度，千代子却是“非理性”最好的代言人。</p><p>“非理性”并非无视科学规律、否定经验，也不是拿起锤子重新评估一切价值，“非理性”是一种生活的态度：在认清世界荒诞，人生不必有其意义之后，一个人愿意遵循内心的冲动，肯定激情的力量——哪怕从短期、局部的视角来看它是无益，甚至有害的。在社会中宣扬理性与克制、鼓吹小不忍则乱大谋，往往意味着个人激情的压抑，与此同时，污秽的黑泥也在妥协中滋长。非理性则要求个人尊严和价值的回归，在表现上可以是一句岂有此理，是拍案而起目眦尽裂，也可以是旁人难以理解的固执、沉默和坚守不易。</p><blockquote><p>注：上海人今年（2022）应该很有体会吧。有空写一篇关于暴力的文章，里面会详细解释（当然更可能我鸽了）。</p></blockquote><p><img src="https://s2.loli.net/2022/10/07/6HqAs9MmoNfQWcZ.jpg" alt="4-3.jpg"></p><p>千代子的时间在遇到画家之后便停滞了（这种停滞体现在千代子表现出的“少女感”上），而在这之前是潺潺流动的——依着生活的惯性和世俗社会的既定轨迹，她得以前进。如果一切正常，她大抵会和同时代的多数女人一样，找一个门当户对的男人成家，将他送上战场，然后在扩张的尘嚣中见证帝国的末路。但在这命定的相遇之后，她发现自己应当拥有的东西，决定不再延续往日的道路。于是，画家的钥匙成了一根逃离现实的危险诱人的稻草，它通向一种未知的激情，当这种激情显示力量的时候，千代子就与毫无故事性的日常分道扬镳了。</p><p><img src="https://s2.loli.net/2022/10/07/YfBLtdu7QZ1e6I9.jpg" alt="4-4.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip error&quot;&gt;&lt;p&gt;本文包含少量剧透&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;2001年，蒙特利尔，加拿大。&lt;/p&gt;
&lt;p&gt;当《千年女</summary>
      
    
    
    
    <category term="写作" scheme="https://loveofpeach.github.io/categories/%E5%86%99%E4%BD%9C/"/>
    
    
    <category term="想法" scheme="https://loveofpeach.github.io/tags/%E6%83%B3%E6%B3%95/"/>
    
    <category term="今敏" scheme="https://loveofpeach.github.io/tags/%E4%BB%8A%E6%95%8F/"/>
    
    <category term="电影" scheme="https://loveofpeach.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
    <category term="动漫" scheme="https://loveofpeach.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>蒙德之风</title>
    <link href="https://loveofpeach.github.io/posts/b15be653.html"/>
    <id>https://loveofpeach.github.io/posts/b15be653.html</id>
    <published>2022-09-09T11:07:48.000Z</published>
    <updated>2022-09-27T09:54:35.986Z</updated>
    
    <content type="html"><![CDATA[<psw>来点色图</psw><p>赶到砂糖家时已是深夜。冲完澡后，荧把揩水毛巾搭在肩上走出浴室，光脚踩在铺满房间的毛茸茸的地毯上，脚心传来摩挲的柔软触感，壁灯的罩笼里流出温婉的火光。</p><p>砂糖正在熟睡。</p><p>荧觉得自己气味很好，她闻见发间的皂香，她想起砂糖的毛巾——二人的气味混在一起，向四周的空间逸去。</p><p>“咔”，灯灭，浓郁的黑向四周涌来。</p><p>荧是见识过这种黑的。</p><p>当她终于离开尘歌壶，孑然一身面对寒冬、大海和黑夜的时候，一种强烈的孤独感便油然而生。</p><p>那是派蒙走后数天的一个晚上。之后，荧就很少往壶里钻了。</p><p>但是她笑了，手中腾起一团火焰，照亮房间。</p><p>“真是辛苦呢，今晚就放过你吧♪”</p><hr><p>“这是做蜜酱胡萝卜煎肉的好天气！旅行者，去把我们的锅端来，我们要煎三十个呢。”</p><p>荧困惑地张张眼，被窝里只有她和砂糖。</p><p>东方泼出鱼肚般的染白，酒鬼们宿醉未醒，城门的守卫刚刚轮班。一切都慵懒地像古朴的风景画，能掸出灰尘的味道，风车也只有在人们睁眼的时候，才肯吱呀呀地转一转。</p><p>羽球节就是这样的一个早晨。</p><hr><p>（过程略）</p><p>（你在期待什么？）</p><p><img src="https://pic1.zhimg.com/80/v2-ff7cd917d1d24bf8d410870aa9527afa_1440w.jpg?source=1940ef5c" alt="whatareulooking4"></p><p>（要是有人评论可能会考虑更新？）</p><hr><p>“你——为什么——这么熟练♀呃嗯♀”砂糖艰难地咽了咽口水，“平时生活里——都在，干些什么啊？”</p><p>她懊恼地发现自己弄湿了床单，耳朵也耷拉下来。</p><p>砂糖侧首望向窗外，白皙的小臂护在胸前。枕头被压出恰到好处的凹陷，些许散发落在里面，另一些则被微风带起，停在她的嘴角。她抿抿嘴，试图获取发丝的触感，尽量不去想今天发生的事。无暇的脸庞与肩下的锁骨、玲珑的双乳一起，为勃勃的春日平添几分妩媚。风车悠悠转着，她忽然想到，便要这蒙德的风吹干洗后的床单了，当清风拂起床单的白色滚边，裁剪地面上的光影时，她的心一定会回到这个躁动的早晨吧。</p><p>风带来故事的种子，时间使之发芽。</p><p>“C’est la vie.”</p><p>荧想起那些枫丹好先生们常说的话，好看地一笑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;psw&gt;来点色图&lt;/psw&gt;
&lt;p&gt;赶到砂糖家时已是深夜。冲完澡后，荧把揩水毛巾搭在肩上走出浴室，光脚踩在铺满房间的毛茸茸的地毯上，脚心传来摩挲的柔软触感，壁灯的罩笼里流出温婉的火光。&lt;/p&gt;
&lt;p&gt;砂糖正在熟睡。&lt;/p&gt;
&lt;p&gt;荧觉得自己气味很好，她闻见发间的皂香，她想起砂糖</summary>
      
    
    
    
    <category term="写作" scheme="https://loveofpeach.github.io/categories/%E5%86%99%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>思梦之榻</title>
    <link href="https://loveofpeach.github.io/posts/3e6d3ecb.html"/>
    <id>https://loveofpeach.github.io/posts/3e6d3ecb.html</id>
    <published>2022-09-08T05:18:15.000Z</published>
    <updated>2022-10-15T12:21:41.693Z</updated>
    
    <content type="html"><![CDATA[<psw>来点色图</psw><p>闷热的夏午，我憋着口气难以入眠。扰人清静的鸟雀和屋外的添水，古朴的撞击声将时间拉长，我看见时间被拉成丝的模样。</p><p>“要是绫华在就好了。”我如此想。</p><p>绫华在时，只消片刻，周围的空间便会曼出沁人的薄寒。</p><p>这样想着，绫华就倏然出现了。</p><p>她就在那里，全身赤裸，坐在桌前的垫子上，脚心好看地翻开，马尾轻微晃动，双乳在光线的明暗下看不真切。</p><p>坐忘。</p><p>神里流剑道的最高奥义，意在忘却自身达到心灵的岿然之境 。境界高者形容枯槁，似一段老木，甚至能与周遭环境融为一体，不分彼此。</p><p>但现在，老木抽出新芽。</p><p>绫华起身颔首，披上外套遮住身体，莞尔一笑。</p><p>“我在想，也许——你会想我呢。”</p><p>（后略）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;psw&gt;来点色图&lt;/psw&gt;
&lt;p&gt;闷热的夏午，我憋着口气难以入眠。扰人清静的鸟雀和屋外的添水，古朴的撞击声将时间拉长，我看见时间被拉成丝的模样。&lt;/p&gt;
&lt;p&gt;“要是绫华在就好了。”我如此想。&lt;/p&gt;
&lt;p&gt;绫华在时，只消片刻，周围的空间便会曼出沁人的薄寒。&lt;/p&gt;
&lt;p&gt;这</summary>
      
    
    
    
    <category term="写作" scheme="https://loveofpeach.github.io/categories/%E5%86%99%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://loveofpeach.github.io/posts/4a17b156.html"/>
    <id>https://loveofpeach.github.io/posts/4a17b156.html</id>
    <published>2022-09-07T10:46:51.947Z</published>
    <updated>2022-10-15T12:27:56.526Z</updated>
    
    <content type="html"><![CDATA[<p>一个hexo博客折腾了好久。目前有基本功能，但还不完善，等什么时候整完了继续写。</p><p>总的来说就是一个个人的树洞吧，目前国内环境挺糟的，这里那里都不让说话，所以gitee什么的是不会考虑的。</p><p>本博客是按照安知鱼大佬的教程一步一步搭的积木。</p><p>现在是2022年9月11日，想要的功能基本都有了，其他很多的功能并不需要<psw>（当然主要是我懒）</psw>。设计的终点果然就是简洁，而生活的终点是断舍离？</p><p>博客的图片都放在第三方图床里，如果挂了可与我联系。</p><div class="tip warning"><p>代码模块测试：</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500015</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM MAXN-1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,max0,d,tot,x,y,tempu,tempv;</span><br><span class="line"><span class="type">int</span> size[MAXN],head[MAXN],dep[MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN&lt;&lt;<span class="number">1</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,next;</span><br><span class="line">&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].u=x;</span><br><span class="line">    edge[tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);<span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">    <span class="keyword">if</span>(fa[x][i<span class="number">-1</span>]) fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=fa[x][<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">            fa[y][<span class="number">0</span>]=x;dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            size[x]+=<span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;=max0;x++)</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=fa[u][x];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="keyword">if</span>(fa[u][x]!=fa[v][x])</span><br><span class="line">    &#123;</span><br><span class="line">        u=fa[u][x];</span><br><span class="line">v=fa[v][x];</span><br><span class="line">    &#125;</span><br><span class="line">    tempu=u; tempv=v;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++) size[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">lcainit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> m; cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="type">int</span> lca=<span class="built_in">LCA</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">d=dep[x]+dep[y]-(dep[lca]&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(d&amp;<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]==dep[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ans=n-size[tempu]-size[tempv];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans); <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> delta=d&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> midson,mid;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=max0;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;(delta<span class="number">-1</span>))</span><br><span class="line">    x=fa[x][i],delta-=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    <span class="keyword">if</span>(delta==<span class="number">1</span>)</span><br><span class="line">    midson=x,mid=fa[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=size[mid]-size[midson];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>latex测试：</p></div><script type="math/tex; mode=display">E=mc^2</script><script type="math/tex; mode=display">A=\iint_{D_{yz}} \sqrt{1+(\frac{\partial x}{\partial y})^2 + (\frac{\partial x}{\partial z})^2} \, \mathrm{d}y\,\mathrm{d}z</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个hexo博客折腾了好久。目前有基本功能，但还不完善，等什么时候整完了继续写。&lt;/p&gt;
&lt;p&gt;总的来说就是一个个人的树洞吧，目前国内环境挺糟的，这里那里都不让说话，所以gitee什么的是不会考虑的。&lt;/p&gt;
&lt;p&gt;本博客是按照安知鱼大佬的教程一步一步搭的积木。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="杂" scheme="https://loveofpeach.github.io/categories/%E6%9D%82/"/>
    
    
  </entry>
  
</feed>
