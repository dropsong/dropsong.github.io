<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dropsong&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://dropsong.github.io/atom.xml" rel="self"/>
  
  <link href="https://dropsong.github.io/"/>
  <updated>2025-05-10T13:28:19.820Z</updated>
  <id>https://dropsong.github.io/</id>
  
  <author>
    <name>dropsong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win + debian 双系统</title>
    <link href="https://dropsong.github.io/posts/ffce18f.html"/>
    <id>https://dropsong.github.io/posts/ffce18f.html</id>
    <published>2025-05-10T13:16:59.000Z</published>
    <updated>2025-05-10T13:28:19.820Z</updated>
    
    <content type="html"><![CDATA[<p>使用 win11 + debian12 双系统有挺久了，稍微记一下使用经验。</p><h1 id="挂载-win-下的盘"><a href="#挂载-win-下的盘" class="headerlink" title="挂载 win 下的盘"></a>挂载 win 下的盘</h1><p>debian 可以自动识别 win 下的盘，但是是只读模式。这会造成一些麻烦，例如我们想将数据都放到 win 的 D 盘下面，这样就可以只给 debian 分配较小的空间，因此必须能对 win 下的磁盘进行读写，以支持在 debian 下的工作。</p><p>若 Windows 没有完全正常关机，而是进入了休眠或者启用了快速启动功能，会导致 Windows 的 NTFS 文件系统处于“不干净”的状态。为此，在 Windows 系统中进行操作：</p><ul><li>控制面板 -&gt; 电源选项 -&gt; 更改高级电源设置</li><li>在“电源按钮和盖子”下面，将“按下电源按钮时”设置为“关机”</li><li>取消勾选“启用快速启动(推荐)”</li><li>Apply</li></ul><p>关机，启动 debian.</p><p>查看 Windows D 盘在 debian 系统中的设备名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p>安装 NTFS-3G 驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ntfs-3g</span><br></pre></td></tr></table></figure><p>创建挂载点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /media/你的用户名/windows_d</span><br></pre></td></tr></table></figure><p>挂载 Windows D 盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t ntfs-3g 实际的设备名称 /media/你的用户名/windows_d</span><br></pre></td></tr></table></figure><p>大功告成。</p><p>如果希望每次启动 Debian 时都自动挂载 Windows D 盘，需要编辑 <code>/etc/fstab</code> 文件，在文件末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实际的设备名称 /media/你的用户名/windows_d ntfs-3g defaults,rw 0 0</span><br></pre></td></tr></table></figure><h1 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h1><p>是的，debian12 需要手动安装中文输入法（如果你的系统语言选择英文的话）。</p><p>这部分直接问 AI 就行了，大部分没什么问题。</p><h1 id="GRUB-启动"><a href="#GRUB-启动" class="headerlink" title="GRUB 启动"></a>GRUB 启动</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><blockquote><p>我现在有 debian 和 windows 双系统，如何在开机时不启动默认系统，而是让我自己选择？</p></blockquote><p>为了在启动时选择要进入的操作系统，你需要配置你的启动管理器。Debian 使用的启动管理器通常是 GRUB（GRand Unified Bootloader）。下面是详细步骤：</p><ol><li><p><strong>启动到 Debian 系统</strong>：</p><ul><li>启动计算机并选择进入 Debian 系统。</li></ul></li><li><p><strong>更新 GRUB 配置文件</strong>：</p><ul><li>打开一个终端窗口。</li><li><p>以超级用户身份编辑 GRUB 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/default/grub</span><br></pre></td></tr></table></figure></li><li><p>找到并编辑以下配置项：</p><ul><li><p><code>GRUB_TIMEOUT=10</code><br>这行表示 GRUB 菜单显示的时间（以秒为单位），你可以调整为你希望的时间，比如 10 秒。</p></li><li><p><code>GRUB_DEFAULT=0</code><br>这行表示默认启动的操作系统，设置为 <code>saved</code> 允许你在下次启动时记住上次选择的操作系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DEFAULT=saved</span><br></pre></td></tr></table></figure></li><li><p>添加以下行以启用 GRUB 的保存功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_SAVEDEFAULT=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>更新 GRUB</strong>：</p><ul><li>保存文件并退出编辑器（在 nano 中按 <code>Ctrl+X</code>，然后按 <code>Y</code>，最后按 <code>Enter</code>）。</li><li><p>运行以下命令以更新 GRUB 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>重启计算机</strong>：</p><ul><li>重启计算机，你应该会看到 GRUB 菜单，在启动时可以选择进入 Debian 或 Windows 系统。</li></ul></li></ol><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><blockquote><p>我的双系统电脑（win + debian）使用了别人制作的 Grub Themes ，现在开机引导很正常。但是由于电脑尺寸和这个第三方 theme 的背景图片不匹配，图片被拉伸了，不美观。怎么办</p></blockquote><p>为了调整 GRUB 主题的背景图片，使其在你的电脑上显示得更美观，你可以尝试以下几种方法：</p><h3 id="方法一：更换背景图片"><a href="#方法一：更换背景图片" class="headerlink" title="方法一：更换背景图片"></a>方法一：更换背景图片</h3><ol><li><p><strong>找到当前 GRUB 主题配置文件</strong>：</p><ul><li>GRUB 主题配置文件通常位于 <code>/boot/grub/themes/</code> 目录下。进入该目录并找到你的主题文件夹。</li></ul></li><li><p><strong>找到背景图片文件</strong>：</p><ul><li>进入主题文件夹，找到背景图片文件（通常是 <code>.png</code> 或 <code>.jpg</code> 格式），比如 <code>background.png</code>。</li></ul></li><li><p><strong>更换背景图片</strong>：</p><ul><li>使用合适分辨率的图片替换当前的背景图片。你可以找到与你屏幕分辨率相匹配的图片，确保不会被拉伸。</li><li>将新图片重命名为和原来图片相同的名称，然后替换原图片。</li></ul></li><li><p><strong>更新 GRUB</strong>：</p><ul><li><p>运行以下命令以确保 GRUB 配置更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="方法二：修改-GRUB-主题配置"><a href="#方法二：修改-GRUB-主题配置" class="headerlink" title="方法二：修改 GRUB 主题配置"></a>方法二：修改 GRUB 主题配置</h3><ol><li><p><strong>编辑 GRUB 主题配置文件</strong>：</p><ul><li>进入主题文件夹，找到主题的配置文件（通常是 <code>theme.txt</code> 或类似文件）。</li><li><p>使用编辑器打开该文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /boot/grub/themes/your-theme-folder/theme.txt</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>修改背景图片属性</strong>：</p><ul><li>查找与背景图片相关的配置行，可能类似于 <code>+ background_image.png</code>。</li><li>你可以调整图片的缩放属性，例如设置 <code>stretch</code>（拉伸）为 <code>false</code> 或设置 <code>fit</code>（适应）属性。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ background_image &#123;</span><br><span class="line">    image = &quot;background.png&quot;</span><br><span class="line">    stretch = false</span><br><span class="line">    fit = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>保存文件并退出</strong>：</p><ul><li>保存配置文件并退出编辑器。</li></ul></li><li><p><strong>更新 GRUB</strong>：</p><ul><li><p>运行以下命令以确保 GRUB 配置更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="方法三：手动调整背景图片"><a href="#方法三：手动调整背景图片" class="headerlink" title="方法三：手动调整背景图片"></a>方法三：手动调整背景图片</h3><ol><li><p><strong>调整背景图片分辨率</strong>：</p><ul><li>如果你有图像编辑工具（如 GIMP 或 Photoshop），你可以手动调整背景图片的分辨率，使其与你的屏幕分辨率匹配。</li><li>打开图片，调整其分辨率，并保存为新的图片。</li></ul></li><li><p><strong>替换原图片</strong>：</p><ul><li>将新调整的图片替换主题文件夹中的原背景图片。</li></ul></li><li><p><strong>更新 GRUB</strong>：</p><ul><li><p>运行以下命令以确保 GRUB 配置更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 win11 + debian12 双系统有挺久了，稍微记一下使用经验。&lt;/p&gt;
&lt;h1 id=&quot;挂载-win-下的盘&quot;&gt;&lt;a href=&quot;#挂载-win-下的盘&quot; class=&quot;headerlink&quot; title=&quot;挂载 win 下的盘&quot;&gt;&lt;/a&gt;挂载 win 下的盘</summary>
      
    
    
    
    <category term="杂项" scheme="https://dropsong.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="debian" scheme="https://dropsong.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>微积分补完计划</title>
    <link href="https://dropsong.github.io/posts/5888fb8e.html"/>
    <id>https://dropsong.github.io/posts/5888fb8e.html</id>
    <published>2025-05-01T15:17:43.000Z</published>
    <updated>2025-05-04T17:13:23.444Z</updated>
    
    <content type="html"><![CDATA[<p>献祭五一劳工节的假期，权且作为对本科时代摆烂过度的补偿。</p><h1 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h1><p><img src="https://s2.loli.net/2025/05/05/wg79sLZHGNmdV8R.jpg" alt="104-1.jpg"></p><div class="row"><iframe src="https://drive.google.com/file/d/1rROxoFfnKr0KUvRciiaYlY-97wqM20aH/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>对弧长的曲线积分  2<br>对坐标的曲线积分  7<br>格林公式及其应用  14<br>对面积的曲面积分  27<br>对坐标的曲面积分  31<br>高斯公式 通量与散度  40<br>斯托克斯公式 环流量与旋度  48</p></blockquote><h1 id="少量练习"><a href="#少量练习" class="headerlink" title="少量练习"></a>少量练习</h1><h2 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h2><p>计算 $\int_{L} x^2 \mathrm{d}s$ ，其中 L 是由 $x^2+y^2+z^2 = a^2 (a&gt;0)$ 与 $x+y+z=0$ 所表示的圆的一周。</p><p><strong>解法 1</strong></p><p>先找曲线 L 的一个参数方程。由 $x^2+y^2+z^2=a^2$ 与 $x+y+z=0$，消去 $z$，得</p><script type="math/tex; mode=display">x^2 + xy + y^2 = \frac{a^2}{2}</script><p>或</p><script type="math/tex; mode=display">\frac{3x^2}{4} + (y+ \frac{x}{2})^2 = \frac{a^2}{2}</script><p>令 $\begin{cases} x= \sqrt{\frac{2}{3}} a \mathrm{cos}t \\ y+\frac{x}{2} = \frac{1}{\sqrt{2}}a \mathrm{sin}t \end{cases}$ ，则 $\begin{cases} x= \sqrt{\frac{2}{3}} a \mathrm{cos}t \\ y = \frac{1}{\sqrt{2}}a \mathrm{sin}t - \frac{1}{\sqrt{6}}a \mathrm{cos}t \end{cases}$ ，从而</p><script type="math/tex; mode=display">x'_t = - \sqrt{\frac{2}{3}} a \mathrm{sin}t</script><script type="math/tex; mode=display">y'_t = \frac{1}{\sqrt{2}} a \mathrm{cos}t + \frac{1}{\sqrt{6}}a \mathrm{sin}t</script><script type="math/tex; mode=display">z'_t = - x'_t - y'_t</script><p>故 </p><script type="math/tex; mode=display">\mathrm{d}s = \sqrt{(x'_t)^2 + (y'_t)^2 + (z'_t)^2} \mathrm{d}t = a \mathrm{d}t</script><p>所以</p><script type="math/tex; mode=display">\begin{aligned}\int_L x^2 \mathrm{d}s & = \frac{2a^2}{3} \int_0^{2 \pi} \mathrm{cos}^2t \mathrm{d}t \\                        & = \frac{a^2}{3} \int_0^{2 \pi} (1-\mathrm{cos}2t) \mathrm{d}t \\                       & = \frac{a^2}{3} (t - \frac{1}{2} \mathrm{sin}2t)|_0^{2 \pi} = \frac{2 \pi a^3}{3} \\\end{aligned}</script><p><strong>解法 2</strong></p><p>由于变量 $x, y, z$ 的地位是一样的，所以</p><script type="math/tex; mode=display">\begin{aligned}\int_L x^2 \mathrm{d}s &= \frac{1}{3} \int_L (x^2+y^2+z^2) \mathrm{d}s \\                       &= \frac{a^2}{3} \int_L \mathrm{d}s = \frac{2 \pi a^3}{3}\end{aligned}</script><h2 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h2><p>计算曲线 $L: x = e^{-t} \mathrm{cos}t$，$y = e^{-t} \mathrm{sin}t$，$z = e^{-t}(0&lt;t&lt;+ \infty)$ 的弧长 $s$ .</p><p><strong>解</strong></p><p>由于 $x’_t = -e^{-t} \mathrm{cos}t -e^{-t} \mathrm{sin}t$，$y’_t = -e^{-t} \mathrm{sin}t + e^{-t} \mathrm{cos}t$，$z’_t = -e^{-t}$，从而</p><script type="math/tex; mode=display">\mathrm{d}s = \sqrt{(x'_t)^2 + (y'_t)^2 + (z'_t)^2} \mathrm{d}t = \sqrt{3} e^{-t} \mathrm{d}t</script><p>所以，弧长</p><script type="math/tex; mode=display">s = \int_L \mathrm{d}s = \int_0^{+ \infty} \sqrt{3} e^{-t} \mathrm{d}t = \sqrt{3}</script><h2 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h2><p>设 $P(x, y)$，$Q(x,y)$ 在曲线 $L$ 上连续，$l$ 为 $L$ 的长度，且</p><script type="math/tex; mode=display">M = \mathrm{max}_{(x,y) \in L} \sqrt{P^2(x, y) + Q^2(x,y)}</script><p>（1）证明 $|\int_L P \mathrm{d}x + Q \mathrm{d}y| \le M l$<br>（2）利用（1）估计积分</p><script type="math/tex; mode=display">I_R = \oint_{C_R} \frac{(y-1) \mathrm{d}x + (x+1) \mathrm{d}y}{(x^2 + y^2 +2x - 2y +2)^2}</script><p>其中，$C_R$ 为圆周 $(x+1)^2+(y-1)^2=R^2$ 的正向，并求 $\lim_{R \to + \infty} |I_R|$</p><p><strong>解</strong></p><p>（1）</p><p>由两类积分曲线之间的关系</p><script type="math/tex; mode=display">\int_L P \mathrm{d}x + Q \mathrm{d}y = \int_L (P \mathrm{cos} \alpha + Q \mathrm{sin} \alpha) \mathrm{d}s</script><p>其中，$\alpha (x,y)$ 为有向曲线弧 L 在 $(x,y)$ 处的切向量的方向角，由曲线积分的性质得</p><script type="math/tex; mode=display">\begin{aligned}|\int_L P \mathrm{d}x + Q \mathrm{d}y| &= |\int_L(P \mathrm{cos} \alpha + Q \mathrm{sin} \alpha) \mathrm{d}s | \\                                       & \le \int_L |P \mathrm{cos} \alpha + Q \mathrm{sin} \alpha| \mathrm{d}s \\\end{aligned}</script><p>由 Schwarz 不等式有</p><script type="math/tex; mode=display">\begin{aligned}|P \mathrm{cos} \alpha + Q \mathrm{sin} \alpha| &= |(P,Q)(\cos \alpha, \sin \alpha)| \\                                                & \le \sqrt{P^2+Q^2} \sqrt{\cos ^2 \alpha + \sin ^2 \alpha} \\                                                & \le M\end{aligned}</script><p>所以</p><script type="math/tex; mode=display">|\int_L P \mathrm{d}x + Q \mathrm{d}y| \le M \int_L \mathrm{d}s = Ml</script><p>（2）</p><p>由已知有 $P = \frac{y-1}{(x^2+y^2+2x-2y+2)^2}$，$Q = \frac{x+1}{(x^2+y^2+2x-2y+2)^2}$，所以 $P^2+Q^2=\frac{1}{R^6}$ 为常数，从而 $M = \frac{1}{R^3}$，故</p><script type="math/tex; mode=display">\begin{aligned}|I_R| &= |\oint_{C_R} \frac{(y-1)\mathrm{d}x+(x+1) \mathrm{d}y}{(x^2 + y^2 +2x-2y+2)^2}| \\      & \le \frac{1}{R^3} 2 \pi R = \frac{2 \pi}{R^2}\end{aligned}</script><p>进而</p><script type="math/tex; mode=display">\lim_{R \to + \infty} |I_R| \le \lim_{R \to + \infty} \frac{2 \pi}{R^2} = 0</script><p>所以</p><script type="math/tex; mode=display">\lim_{R \to + \infty} |I_R| = 0</script><h2 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h2><p><img src="https://s2.loli.net/2025/05/05/ZETfrxln49C2RSA.jpg" alt="104-2.jpg"></p><p><img src="https://s2.loli.net/2025/05/05/8yhFNYPMtzA9R7x.jpg" alt="104-3.jpg"></p><p><img src="https://s2.loli.net/2025/05/05/C9LmtHZ61hTlxDO.jpg" alt="104-4.jpg"></p><p><img src="https://s2.loli.net/2025/05/05/wH5Q3P76sSNujAE.jpg" alt="104-5.jpg"></p><p><img src="https://s2.loli.net/2025/05/05/WB9iHms8oCbQaYt.jpg" alt="104-6.jpg"></p><p><img src="https://s2.loli.net/2025/05/05/jzhKLnmiDOQwCkS.jpg" alt="104-7.jpg"></p><p><img src="https://s2.loli.net/2025/05/05/nKOCbI6l1uw8VXj.jpg" alt="104-8.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;献祭五一劳工节的假期，权且作为对本科时代摆烂过度的补偿。&lt;/p&gt;
&lt;h1 id=&quot;理论部分&quot;&gt;&lt;a href=&quot;#理论部分&quot; class=&quot;headerlink&quot; title=&quot;理论部分&quot;&gt;&lt;/a&gt;理论部分&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="高数" scheme="https://dropsong.github.io/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记</title>
    <link href="https://dropsong.github.io/posts/b1b54fd.html"/>
    <id>https://dropsong.github.io/posts/b1b54fd.html</id>
    <published>2025-04-01T07:38:47.000Z</published>
    <updated>2025-05-01T15:15:07.837Z</updated>
    
    <content type="html"><![CDATA[<p>一些基础内容参见 <a href="https://dropsong.github.io/posts/6f3f8819.html">人工智能导论</a> 。</p><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>一些机器学习的框架：</p><p><img src="https://s2.loli.net/2025/04/01/GnTBkKsubwrqeht.png" alt="103-1.png"></p><p>可以在 github 上搜索它们。</p><div class="table-container"><table><thead><tr><th>框架</th><th>机构</th><th>支持语言</th><th>Stars</th><th>Forks</th><th>Contributors</th></tr></thead><tbody><tr><td>TensorFlow</td><td>Google</td><td>Python/C++/Go/…</td><td>41628</td><td>19339</td><td>568</td></tr><tr><td>Caffe</td><td>BVLC</td><td>C++/Python</td><td>14956</td><td>9282</td><td>221</td></tr><tr><td>Keras</td><td>fchollet</td><td>Python</td><td>10727</td><td>3575</td><td>322</td></tr><tr><td>CNTK</td><td>Microsoft</td><td>C++</td><td>9063</td><td>2144</td><td>100</td></tr><tr><td>MXNet</td><td>DMLC</td><td>Python/C++/R/…</td><td>7393</td><td>2745</td><td>241</td></tr><tr><td>Torch7</td><td>Facebook</td><td>Lua</td><td>6111</td><td>1784</td><td>113</td></tr><tr><td>Theano</td><td>U. Montreal</td><td>Python</td><td>5352</td><td>1868</td><td>271</td></tr><tr><td>Deeplearning4J</td><td>DeepLearning4J</td><td>Java/Scala</td><td>5053</td><td>1927</td><td>101</td></tr><tr><td>Leaf</td><td>AutumnAI</td><td>Rust</td><td>4562</td><td>216</td><td>14</td></tr><tr><td>Lasagne</td><td>Lasagne</td><td>Python</td><td>2749</td><td>761</td><td>55</td></tr><tr><td>Neon</td><td>NervanaSystems</td><td>Python</td><td>2633</td><td>573</td><td>52</td></tr></tbody></table></div><p>上面表格内容可能有些过时。</p><p>常见的流程：</p><ol><li>预处理</li><li>特征工程</li><li>机器学习（选择合适的算法、调参）</li><li>评估</li><li>若评估通过，则上线</li></ol><p><strong>数据来源</strong>：</p><ul><li>企业日益积累的大量数据（互联网公司更为显著）</li><li>政府掌握的各种数据</li><li>科研机构的实验数据</li><li>…</li></ul><p>数据类型：</p><ul><li>离散型数据</li><li>连续型数据</li></ul><p><strong>可用数据集</strong>：</p><ul><li><a href="https://www.kaggle.com/datasets">https://www.kaggle.com/datasets</a></li><li><a href="https://archive.ics.uci.edu/datasets/">https://archive.ics.uci.edu/datasets/</a></li><li><a href="https://scikit-learn.org/stable/datasets">https://scikit-learn.org/stable/datasets</a></li></ul><p>预测问题分为两大类：</p><ul><li>分类：顾名思义。例如人脸识别就是分类，每个人都是其中的一类。</li><li>回归：预测结果是一个值。</li></ul><p>机器学习的算法分类：</p><ul><li>监督学习：<ul><li>分类<ul><li>k-近邻算法、贝叶斯分类、决策树与随机森林、逻辑回归、神经网络</li></ul></li><li>回归<ul><li>线性回归、岭回归</li></ul></li><li>标注<ul><li>隐马尔可夫模型</li></ul></li></ul></li><li>无监督学习：<ul><li>聚类, k-means</li></ul></li></ul><p>监督学习: 特征值 + 目标值<br>非监督学习: 特征值 1000 个样本（例子）</p><h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><p>常用数据集的数据可能有这样的结构：<strong>特征值+目标值</strong> 。</p><p>比如说要预测房价，可能 <code>(房子面积, 房子位置, 房子楼层, 房子朝向)</code> 是影响目标值的因素，那么这个“房子面积”等就是特征。</p><p>特征工程是将原始数据转换为更好地代表预测模型的潜在问题的特征的过程，从而提高了模型对未知数据预测的准确性。</p><p>一个形象的理解：</p><p><img src="https://s2.loli.net/2025/04/01/gC8waMrPGuFjn5e.png" alt="103-2.png"></p><p>在新的虚拟环境中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scikit-learn</span><br></pre></td></tr></table></figure><p>scikit-learn 官网的介绍：</p><p><img src="https://s2.loli.net/2025/04/01/jtVCAMqv1cJOZxz.png" alt="103-3.png"></p><p>下面的 ipynb 文件包含以下内容：</p><ul><li>字典特征抽取</li><li>文本特征抽取</li><li>特征处理（归一化、标准化）</li><li>缺失值处理（删除、插补）</li><li>特征选择（Filter 例如 VarianceThreshold, Embedded, Wrapper）</li><li>降维（PCA 主成分分析）</li></ul><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:600px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/1-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B.ipynb" ></iframe><p>本小节的剩余部分是 PCA 主成分分析的数学推导。</p><p>截图来自视频 BV1E5411E71z 。</p><p><img src="https://s2.loli.net/2025/04/15/APDoXquxB6ES8ga.png" alt="103-4.png"></p><p><img src="https://s2.loli.net/2025/04/15/ftMW9x5h4Loc3Rn.png" alt="103-5.png"></p><p><img src="https://s2.loli.net/2025/04/15/mFxRdQaHNPWk57M.png" alt="103-6.png"></p><p><img src="https://s2.loli.net/2025/04/15/2TiWqc8xuNGjbBK.png" alt="103-7.png"></p><p><img src="https://s2.loli.net/2025/04/15/v43NqPUGpw8BIzE.png" alt="103-8.png"></p><p><img src="https://s2.loli.net/2025/04/15/WYfLbAwU12PJspz.png" alt="103-9.png"></p><p><img src="https://s2.loli.net/2025/04/15/NjYhJ5KtxXge9bP.png" alt="103-10.png"></p><p><img src="https://s2.loli.net/2025/04/15/EvDBN492LbVq8hl.png" alt="103-11.png"></p><p><img src="https://s2.loli.net/2025/04/15/Ggjm4zOcJ1SKb2t.png" alt="103-12.png"></p><p><img src="https://s2.loli.net/2025/04/15/IiQ6LrsO8VSbYcP.png" alt="103-13.png"></p><p><img src="https://s2.loli.net/2025/04/15/uRlD36zUnyCSiZw.png" alt="103-14.png"></p><p><img src="https://s2.loli.net/2025/04/15/gAFnIkeXY74JZN9.png" alt="103-15.png"></p><p><img src="https://s2.loli.net/2025/04/15/Csq9FzBJo8dPvnj.png" alt="103-16.png"></p><p>拓展资料：</p><ul><li><a href="https://gitee.com/ni1o1/pygeo-tutorial/blob/master/12-.ipynb">https://gitee.com/ni1o1/pygeo-tutorial/blob/master/12-.ipynb</a> （github 备份）</li><li><a href="https://www.cnblogs.com/pinard/p/6239403.html（archive">https://www.cnblogs.com/pinard/p/6239403.html（archive</a> 备份）</li><li><a href="https://zhuanlan.zhihu.com/p/55297233">https://zhuanlan.zhihu.com/p/55297233</a> （github 备份）</li></ul><h1 id="数据集举例、分类估计器、knn、网格搜索、ROC-AUC、朴素贝叶斯"><a href="#数据集举例、分类估计器、knn、网格搜索、ROC-AUC、朴素贝叶斯" class="headerlink" title="数据集举例、分类估计器、knn、网格搜索、ROC AUC、朴素贝叶斯"></a>数据集举例、分类估计器、knn、网格搜索、ROC AUC、朴素贝叶斯</h1><p><code>sklearn.datasets</code> 加载获取流行数据集。</p><p><code>datasets.load_*()</code></p><ul><li>获取小规模数据集，数据包含在 datasets 里，直接加载到内存中。</li></ul><p><code>datasets.fetch_*(data_home=None)</code></p><ul><li>获取大规模数据集，需要从网络上下载，函数的第一个参数是 data_home，表示数据集下载的目录。</li></ul><p>下面的 ipynb 文件包含以下内容：</p><ul><li>鸢尾花数据集</li><li>20 类新闻数据集</li><li>boston 房价数据集</li><li>分类估计器</li><li>knn</li><li>网格搜索</li><li>分类模型的评估<ul><li>基础知识</li><li>ROC 曲线与 AUC 值概述</li><li>ROC 的动机</li><li>ROC 的定义</li><li>ROC 的图形化表示</li><li>AUC 值</li></ul></li><li>朴素贝叶斯进行文本分类</li></ul><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:600px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E9%9B%86_knn_ROC_AUC_%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/2-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB%E4%B8%8E%E5%9B%9E%E5%BD%92.ipynb" ></iframe><h1 id="决策树、随机森林"><a href="#决策树、随机森林" class="headerlink" title="决策树、随机森林"></a>决策树、随机森林</h1><p>下面的 ipynb 文件包含以下内容：</p><ul><li>原理部分</li><li>sklearn 决策树 API</li><li>决策树实例</li><li>剪枝</li><li>集成学习方法-随机森林</li></ul><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:500px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E5%86%B3%E7%AD%96%E6%A0%91-%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/Decision-tree.ipynb" ></iframe><h1 id="模型选择、线性回归、加载保存的模型、梯度下降、过拟合欠拟合、岭回归、逻辑回归"><a href="#模型选择、线性回归、加载保存的模型、梯度下降、过拟合欠拟合、岭回归、逻辑回归" class="headerlink" title="模型选择、线性回归、加载保存的模型、梯度下降、过拟合欠拟合、岭回归、逻辑回归"></a>模型选择、线性回归、加载保存的模型、梯度下降、过拟合欠拟合、岭回归、逻辑回归</h1><p>下面的 ipynb 文件包含以下内容：</p><ul><li>模型选择</li><li>线性回归</li><li>加载保存的模型</li><li>梯度下降</li><li>过拟合欠拟合</li><li>岭回归</li><li>逻辑回归</li></ul><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:500px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92_%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D_%E5%B2%AD%E5%9B%9E%E5%BD%92_%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95.ipynb" ></iframe><h1 id="kmeans、异常值"><a href="#kmeans、异常值" class="headerlink" title="kmeans、异常值"></a>kmeans、异常值</h1><p>下面的 ipynb 文件包含以下内容：</p><ul><li>k-means</li><li>找异常值的方法</li></ul><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:500px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/kmeans/kmeans_%E5%BC%82%E5%B8%B8%E5%80%BC.ipynb" ></iframe><h1 id="偏差与方差"><a href="#偏差与方差" class="headerlink" title="偏差与方差"></a>偏差与方差</h1><p>在有监督学习中，模型的泛化误差来源于两个方面，偏差和方差。</p><p><img src="https://s2.loli.net/2025/04/25/BsrMp39HJUAS7cV.png" alt="103-17.png"></p><p><strong>偏差</strong>指的是由所有采样得到的大小为 m 的训练数据集训练出的<strong>所有模型</strong>的输出的平均值和真实模型输出之间的差距。偏差通常是由于我们对学习算法<strong>做了错误的假设</strong>所导致的，比如真实模型是某个二次函数，但我们假设模型是一次函数。由偏差带来的误差<strong>通常在训练误差上就能体现出来</strong>。</p><p><strong>方差</strong>指的是由所有采样得到的大小为 m 的训练数据集训练出的<strong>所有模型</strong>的输出的方差。方差通常是由于<strong>模型的复杂度相对于训练样本数 m 过高</strong>导致的，比如一共有 100 个训练样本，而我们假设模型是阶数不大于 200 的多项式函数。由方差带来的误差<strong>通常体现在测试误差相对于训练误差的增量上</strong>。</p><h1 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h1><p>面对一个机器学习问题，通常有两种策略：</p><ul><li>尝试各种模型，选择其中表现最好的模型做重点调参优化</li><li>将多个分类器的结果统一成一个最终的决策<ul><li>使用这类策略的机器学习方法统称为<strong>集成学习</strong>，其中的每个单独的分类器称为<strong>基分类器</strong>。</li></ul></li></ul><p>集成学习不仅在学界的研究热度不减，在业界和众多机器学习竞赛中也有非常成功的应用。例如在 Kaggle 竞赛中所向披靡的 XGBoost，就是成功应用集成学习思想的一个例子。</p><p><strong>Boosting（串行）</strong>：<br>Boosting 方法训练基分类器时采用串行的方式，<strong>各个基分类器之间有依赖</strong>。它的基本思路是将基分类器层层叠加，每一层在训练的时候，对前一层基分类器分错的样本，给予更高的权重。测试时，根据各层分类器的结果的加权得到最终结果。</p><p><strong>Bagging（并行）</strong>：<br>Bagging 与 Boosting 的串行训练方式不同，Bagging 方法在训练过程中，<strong>各基分类器之间无强依赖</strong>，可以进行<strong>并行训练</strong>。其中很著名的算法之一是基于决策树基分类器的<strong>随机森林（Random Forest）</strong>。为了让基分类器之间互相独立，将训练集分为若干子集（当训练样本数量较少时，子集之间可能有交叠）。Bagging 方法更像是一个集体决策的过程，每个个体都进行单独学习，学习的内容可以相同，也可以不同，也可以部分重叠。但由于个体之间存在差异性，最终做出的判断不会完全一致。在最终做决策时，每个个体单独作出判断，再通过投票的方式做出最后的集体决策。</p><p>从消除基分类器的偏差和方差的角度来理解 Boosting 和 Bagging 方法的差异。<strong>基分类器</strong>，有时又被称为<strong>弱分类器</strong>，因为基分类器的错误率要大于集成分类器。基分类器的错误，是偏差和方差两种错误之和。偏差主要是由于分类器的表达能力有限导致的系统性错误，表现在训练误差不收敛。方差是由于分类器对于样本分布过于敏感，导致在训练样本数较少时，产生过拟合。</p><p>Boosting 方法是通过<strong>逐步聚焦于基分类器分错的样本</strong>，减小集成分类器的偏差。Bagging 方法则是采取分而治之的策略，通过对训练样本多次采样，并分别<strong>训练出多个不同模型，然后做综合</strong>，来减小集成分类器的方差。假设所有基分类器出错的概率是独立的，在某个测试样本上，用简单多数投票方法来集成结果，超过半数基分类器出错的概率会随着基分类器的数量增加而下降。</p><p><img src="https://s2.loli.net/2025/04/25/viCpcAwT1WZzrSx.png" alt="103-18.png"></p><p>集成学习一般可分为以下 3 个步骤：</p><ol><li>找到误差互相独立的基分类器</li><li>训练基分类器</li><li>合并基分类器的结果</li></ol><p>合并基分类器的方法有 <strong>voting</strong> 和 <strong>stacking</strong> 两种。前者是用<strong>投票</strong>的方式，将获得最多选票的结果作为最终的结果。后者是用串行的方式，<strong>把前一个基分类器的结果输出到下一个分类器</strong>，将所有基分类器的输出结果相加（或者用更复杂的算法融合，比如把各基分类器的输出作为特征，使用逻辑回归作为融合模型进行最后的结果预测）作为最终的输出。</p><h1 id="基分类器"><a href="#基分类器" class="headerlink" title="基分类器"></a>基分类器</h1><p><strong>常用的基分类器是决策树</strong>，主要有以下 3 个方面的原因：</p><ol><li>决策树可以较为方便地将样本的权重整合到训练过程中，而不需要使用过采样的方法来调整样本权重。</li><li>决策树的表达能力和泛化能力，可以通过调节树的层数来做折中。</li><li>数据样本的扰动对于决策树的影响较大，因此不同子样本集合生成的决策树基分类器随机性较大，这样的“不稳定学习器”更适合作为基分类器。此外，在决策树节点分裂的时候，随机地选择一个特征子集，从中找出最优分裂属性，很好地引入了随机性。</li></ol><p>除决策树外，<strong>神经网络模型</strong>也适合作为基分类器，主要由于神经网络模型<strong>也比较“不稳定”</strong>，而且还可以通过调整神经元数量、连接方式、网络层数、初始权值等方式<strong>引入随机性</strong>。</p><h1 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h1><p>简要的介绍：</p><ul><li><a href="https://www.bilibili.com/video/BV1qQkgYTEN4">https://www.bilibili.com/video/BV1qQkgYTEN4</a></li><li><a href="https://www.youtube.com/watch?v=AtYN8QP-U6w&amp;ab_channel=Serrano.Academy">https://www.youtube.com/watch?v=AtYN8QP-U6w&amp;ab_channel=Serrano.Academy</a></li></ul><p>上面的两个视频链接，有一个配套的 notebook:</p><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:500px" src="https://nbviewer.org/github/luisguiserrano/manning/blob/master/Chapter_12_Ensemble_Methods/Random_forests_and_AdaBoost.ipynb" ></iframe><p>或者也可以看李航的《统计学习方法》，不过那个写的比较学院派。</p><p>从 Adaboost 的例子中可以明显地看到 Boosting 的思想，对分类正确的样本降低了权重，对分类错误的样本升高或者保持权重不变。在最后进行模型融合的过程中，也根据错误率对基分类器进行加权融合。错误率低的分类器拥有更大的“话语权”。</p><p>预测器的准确率越高，其权重就越高。如果它只是随机猜测，则其权重接近于零。但是，如果大部分情况下它都是错的（也就是准确率比随机猜测还低），那么它的权重为负。</p><p>样本权重：</p><ul><li>Bagging 使用的是均匀取样，每个样本权重相等；</li><li>Boosting 根据错误率调整样本权重，错误率越大的样本权重越大。<strong>错误率大的样本被取样的概率越高</strong>。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些基础内容参见 &lt;a href=&quot;https://dropsong.github.io/posts/6f3f8819.html&quot;&gt;人工智能导论&lt;/a&gt; 。&lt;/p&gt;
&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论</summary>
      
    
    
    
    <category term="算法" scheme="https://dropsong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="机器学习" scheme="https://dropsong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="决策树" scheme="https://dropsong.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
    <category term="knn" scheme="https://dropsong.github.io/tags/knn/"/>
    
    <category term="特征工程" scheme="https://dropsong.github.io/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="网格搜索" scheme="https://dropsong.github.io/tags/%E7%BD%91%E6%A0%BC%E6%90%9C%E7%B4%A2/"/>
    
    <category term="朴素贝叶斯" scheme="https://dropsong.github.io/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
    <category term="随机森林" scheme="https://dropsong.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    
    <category term="线性回归" scheme="https://dropsong.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
    <category term="岭回归" scheme="https://dropsong.github.io/tags/%E5%B2%AD%E5%9B%9E%E5%BD%92/"/>
    
    <category term="逻辑回归" scheme="https://dropsong.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
    <category term="kmeans" scheme="https://dropsong.github.io/tags/kmeans/"/>
    
    <category term="集成学习" scheme="https://dropsong.github.io/tags/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AdaBoost" scheme="https://dropsong.github.io/tags/AdaBoost/"/>
    
  </entry>
  
  <entry>
    <title>拉格朗日插值算法实现</title>
    <link href="https://dropsong.github.io/posts/60ce6585.html"/>
    <id>https://dropsong.github.io/posts/60ce6585.html</id>
    <published>2025-03-23T15:47:53.000Z</published>
    <updated>2025-03-23T16:17:13.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="历史资料"><a href="#历史资料" class="headerlink" title="历史资料"></a>历史资料</h2><p>一些以前的资料，扫描备份（然后本体就可以扔了，芜湖～）。</p><div class="row"><iframe src="https://drive.google.com/file/d/1Xk60B1AJk_0tsq48Raiyj7LCwk8wW-DQ/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>整除  1<br>最大公约数和最小公倍数  5<br>素数及唯一分解定理  11<br>同余  15<br>母函数  19<br>递推数列  22</p></blockquote><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><p>若 $ax \equiv 1 \pmod{b}$ ，则 $x$ 为 $a$ $\mathrm{mod}$ $b$ 的逆元，记为 $a^{-1}$ .</p><p>逆元概念的理解：</p><ul><li>逆元约等于模 b 意义下的倒数，这个概念和离散数学中的差不多。</li><li>在一些算法竞赛中，由于各种缘故，并不是很想处理浮点数，而是用整数替代。遇到两数相除的情况，就不会算出小数，而是通过“逆元”的概念，得到一个整数。</li></ul><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>这个算法用来求两个数的最大公约数，它基于以下定理：</p><script type="math/tex; mode=display">\mathrm{gcd}(a,b) = \mathrm{gcd}(b, a \ \mathrm{mod} \ b)</script><p>这个定理可以通过几何直观理解。</p><p>由此写出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者使用函数 __gcd();</span></span><br></pre></td></tr></table></figure><h2 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h2><p>形如 $ax \equiv b \pmod{n}$ 的方程称为<strong>线性同余方程（Linear Congruence Equation）</strong>，其中 a, b, n 为给定整数，$x$ 为未知数，需要从 $[0, n-1]$ 中求解 $x$，当解不唯一时需要求出全体解。</p><h3 id="用逆元求解"><a href="#用逆元求解" class="headerlink" title="用逆元求解"></a>用逆元求解</h3><blockquote><p>ref: <a href="https://oi-wiki.org/math/number-theory/linear-equation/">https://oi-wiki.org/math/number-theory/linear-equation/</a></p></blockquote><p>首先考虑简单的情况，当 $a$ 和 $n$ 互素（coprime 或 relatively prime）时，即 $\gcd(a, n) = 1$。</p><p>此时可以计算 $a$ 的逆元，并将方程的两边乘以 $a$ 的逆元，可以得到唯一解。</p><script type="math/tex; mode=display">x\equiv ba ^ {- 1} \pmod n</script><p>接下来考虑 $a$ 和 $n$ 不互素（not coprime），即 $\gcd(a, n) \ne 1$ 的情况。此时不一定有解。例如，$2x\equiv 1\pmod 4$ 没有解。</p><p>设 $g = \gcd(a, n)$，即 $a$ 和 $n$ 的最大公约数，其中 $a$ 和 $n$ 在本例中大于 1。</p><p>当 $b$ 不能被 $g$ 整除时无解。此时，对于任意的 $x$，方程 $ax\equiv b\pmod n$ 的左侧始终可被 $g$ 整除，而右侧不可被 $g$ 整除，因此无解。</p><p>如果 $g$ 整除 $b$，则通过将方程两边 $a$、$b$ 和 $n$ 除以 $g$，得到一个新的方程：</p><script type="math/tex; mode=display">a^{'}x\equiv b^{'} \pmod{n^{'}}</script><p>其中 $a^{‘}$ 和 $n^{‘}$ 已经互素，这种情形已经解决，于是得到 $x^{‘}$ 作为 $x$ 的解。</p><p>很明显，$x^{‘}$ 也将是原始方程的解。这不是唯一的解。可以看出，原始方程有如下 $g$ 个解：</p><script type="math/tex; mode=display">x_i\equiv (x^{'} + i\cdot n^{'}) \pmod n \quad \text{for } i = 0 \ldots g-1</script><p>总之，线性同余方程的 <strong>解的数量</strong> 等于 $g = \gcd(a, n)$ 或等于 $0$。</p><p style="color: red;">一点补充说明：</p><p>同余式可以三个数同时除掉 gcd. 即若 $d \ | \ a,b,m$ , 且 $a \equiv b \pmod{m}$，则：</p><script type="math/tex; mode=display">\frac{a}{d} \equiv \frac{b}{d} \pmod{\frac{m}{d}}</script><p>证明比较简单，略。</p><h3 id="扩展欧几里得（exgcd）"><a href="#扩展欧几里得（exgcd）" class="headerlink" title="扩展欧几里得（exgcd）"></a>扩展欧几里得（exgcd）</h3><blockquote><p>ref: <a href="https://blog.csdn.net/weixin_43872728/article/details/107289833">https://blog.csdn.net/weixin_43872728/article/details/107289833</a></p></blockquote><p>一、线性同余方程 $ax\equiv b \pmod n$ 可以改写为如下线性不定方程：</p><script type="math/tex; mode=display">ax + nk = b</script><p>其中 $x$ 和 $k$ 是未知数。这两个方程是等价的，有整数解的充要条件为 $\gcd(a,n) \mid b$。</p><p>二、由裴属定理，对于整数 a、b，存在 a、b 的线性组合等于 $\mathrm{gcd} (a,b)$ .</p><p>换句话说，如果 ax+by=m 有解，那么 m 一定是 gcd(a,b) 的若干倍（可以来判断一个这样的式子有没有解）。</p><p>进一步提出疑问：在有解的情况下，这个解是多少，也就是 x 和 y 的值是多少？</p><p>扩展欧几里得模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求x, y，使得ax + by = gcd(a, b)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;   <span class="comment">//到达递归边界开始向上一层返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, x, y);</span><br><span class="line">    <span class="type">int</span> temp = y;    <span class="comment">//推出这一层的x，y</span></span><br><span class="line">    y = x - (a/b)*y;</span><br><span class="line">    x = temp;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来解释一下上面代码。</p><p><strong>编写递归代码的核心是将还没有发生的事当作已经发生，然后严格从定义出发描述行为，规定边界情形。</strong></p><p>我们考虑相邻两层之间的状态关系，由回溯过来的 x,y 得到新的 x,y .</p><p>假设栈中当前层得到的解是 x1，y1；如何求下一层的状态？代入方程得：</p><script type="math/tex; mode=display">b x_1 + (a \ \mathrm{mod} \ b)y_1 = \mathrm{gcd}(a,b)</script><script type="math/tex; mode=display">bx_1 + (a-(a/b)b)y_1 = \mathrm{gcd}(a,b)</script><script type="math/tex; mode=display">ay_1 + b(x_1-(a/b)y_1) = \mathrm{gcd}(a,b)</script><p>于是，由上一层的解 x1,y1，可以推出下一层 x,y 的状态：</p><script type="math/tex; mode=display">x = y_1 \qquad y=x_1-(a/b)y_1</script><p>接下来考虑边界条件。</p><p>当递归到达边界时，余数 <code>b==0</code> ，除数 a 就是最大公约数，此时可得出方程的一组解：</p><script type="math/tex; mode=display">x = 1, \ y = 0</script><script type="math/tex; mode=display">a \cdot 1 + b \cdot 0 = \mathrm{gcd}(a,b)</script><p>由上述模板可以求出方程 $ax+by=\mathrm{gcd}(a,b)$ 的任意一组解 $x_0$，$y_0$ ，那么方程 $ax+by=k$ 的通解的形式是什么样的呢？注意， $ax+by=k$ 中的 k 一定是 gcd(a,b) 的倍数，方程才会有解。</p><p>因为由 ax+by=gcd(a,b) 变成 ax+by=k 方程扩大了 k/gcd(a,b)倍，所以通过 exgcd 求出来的 x0，y0 也扩大了相同的倍数。</p><script type="math/tex; mode=display">x_0 = x_0 \cdot \frac{k}{\mathrm{gcd}(a,b)} \qquad y_0 = y_0 \cdot \frac{k}{\mathrm{gcd}(a,b)}</script><p><strong>通解形式</strong>为：</p><script type="math/tex; mode=display">x = x_0 + \frac{b}{\mathrm{gcd}(a,b)} \cdot n</script><script type="math/tex; mode=display">y = y_0 + \frac{a}{\mathrm{gcd}(a,b)} \cdot n</script><p>相当于 x 每次可以增减 b/gcd 的整数倍，y 每次可以增减 a/gcd 的整数倍。注意：x 求出来后，y 通常由 x 代入方程求得。</p><p><strong>最小正整数解</strong>：</p><script type="math/tex; mode=display">x = (x + \frac{b}{\mathrm{gcd}(a,b)} \cdot n) \ \mathrm{mod} \ \frac{b}{\mathrm{gcd}(a,b)} = x \ \mathrm{mod} \ \frac{b}{\mathrm{gcd}(a,b)}</script><p>其中 b/gcd(a,b) 应取正。若 x&lt;=0，则 x += b/gcd .</p><p>我们发现，exgcd 虽然是用来求线性同余方程的，但只需稍作改动，将其中一个数改为 1，就满足逆元的定义。因此 exgcd 也可以用来求逆元。</p><h2 id="快速幂法求逆元"><a href="#快速幂法求逆元" class="headerlink" title="快速幂法求逆元"></a>快速幂法求逆元</h2><p>刚才介绍了扩展欧几里得法求逆元，其实也可以快速幂法求逆元。</p><p>逆元定义式（这里设 b 为素数）：</p><script type="math/tex; mode=display">ax \equiv 1 \pmod{b}</script><p>这里显然 a,b 是互素的。</p><p>由 <a href="https://www.bilibili.com/video/BV1u2421c7v3">费马小定理</a> 得：</p><script type="math/tex; mode=display">a^b \equiv a \pmod{b}</script><script type="math/tex; mode=display">a^{b-1} \equiv 1 \pmod{b}</script><p>所以有：</p><script type="math/tex; mode=display">a^bx \equiv ax \equiv 1 \equiv a^{b-1} \pmod{b}</script><p>即：</p><script type="math/tex; mode=display">ax \equiv a^{b-1} \pmod{b}</script><p>所以：</p><script type="math/tex; mode=display">x \equiv a^{b-2} \pmod{b}</script><p>然后我们就可以用快速幂来求了。</p><h1 id="拉格朗日插值法"><a href="#拉格朗日插值法" class="headerlink" title="拉格朗日插值法"></a>拉格朗日插值法</h1><p>算法的原理部分，参考 <a href="https://dropsong.github.io/posts/70707e46.html#%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90">工程数学</a> 相关部分。</p><p>本文只探讨对于任意点直接求解的最简单情形。</p><p>题目链接： <a href="https://www.luogu.com.cn/problem/P4781">https://www.luogu.com.cn/problem/P4781</a></p><p>ac 代码（下标从 1 开始计数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参考：https://www.cnblogs.com/purinliang/p/13670493.html</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LagrangeInterpolation &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span> <span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * x % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % MOD;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span> <span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpow</span> (x, MOD - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 n 个点 (x[1], y[1]), (x[2], y[2]), ..., (x[n], y[n])</span></span><br><span class="line"><span class="comment"> * 插值得到 n - 1 次多项式 L，直接求解 L(x0) 的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 时间复杂度: O(n^2)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">ll <span class="title">lagrange_interpolation</span> <span class="params">(ll x0, ll *x, ll *y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x0 == x[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> y[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll Lx0 = <span class="number">0</span>;</span><br><span class="line">    ll P = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        P = P * (x0 - x[i] + MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ll q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == i) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q = q * (x[i] - x[j] + MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        ll p = P * <span class="built_in">inv</span> (x0 - x[i] + MOD) % MOD;</span><br><span class="line">        ll lix0 = p * <span class="built_in">inv</span> (q) % MOD;</span><br><span class="line">        Lx0 = (Lx0 + lix0 * y[i] % MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Lx0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll MAXN = <span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line">ll xx[MAXN], yy[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        ll x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        xx[i] = x;</span><br><span class="line">        yy[i] = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, LagrangeInterpolation::<span class="built_in">lagrange_interpolation</span>(k, xx, yy, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 $O(n^2)$，空间复杂度 $O(1)$ .</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h1&gt;&lt;h2 id=&quot;历史资料&quot;&gt;&lt;a href=&quot;#历史资料&quot; class=&quot;headerlink&quot; title=&quot;历史资料&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="算法" scheme="https://dropsong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数论" scheme="https://dropsong.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="逆元" scheme="https://dropsong.github.io/tags/%E9%80%86%E5%85%83/"/>
    
    <category term="费马小定理" scheme="https://dropsong.github.io/tags/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
    
    <category term="exgcd" scheme="https://dropsong.github.io/tags/exgcd/"/>
    
    <category term="拉格朗日插值" scheme="https://dropsong.github.io/tags/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/"/>
    
    <category term="同余" scheme="https://dropsong.github.io/tags/%E5%90%8C%E4%BD%99/"/>
    
    <category term="母函数" scheme="https://dropsong.github.io/tags/%E6%AF%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>商城项目后端</title>
    <link href="https://dropsong.github.io/posts/db829e9d.html"/>
    <id>https://dropsong.github.io/posts/db829e9d.html</id>
    <published>2025-03-19T11:58:56.000Z</published>
    <updated>2025-03-23T16:14:44.194Z</updated>
    
    <content type="html"><![CDATA[<p>一篇随手记，记录开发过程中遇到的问题。</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>项目地址：<a href="https://github.com/dropsong/tiny-shop">https://github.com/dropsong/tiny-shop</a><br>对应的前端代码：<a href="https://github.com/dropsong/tiny-shop-front">https://github.com/dropsong/tiny-shop-front</a></p><p>通过 Vue + Django REST framework 实现一个电商平台。</p><p>此教学项目的完成方式：前端、资源图片等已经准备好了，我负责后端的开发。</p><p>权限和认证采用 Authentication 用户认证设置，动态设置 Permission、Authentication，Validators 实现字段验证。</p><p>序列化和表单验证使用 Serializer、ModelSerializer，动态设置 Serializer.</p><p>实现了支付、登录、注册功能。</p><ul><li>Json Web Token 方式登录，单点登录</li><li>手机注册 / 支付宝支付</li><li>第三方账户微博登录</li></ul><p>View 实现 REST API</p><ul><li>ApiView / GenericView 方式实现 API 接口</li><li>ViewSet 和 Router 方式实现 API 接口和 URL 配置</li><li><a href="https://django-filter.readthedocs.io/en/stable/">Django_filter</a>、SearchFilter、OrderFilter 分页</li></ul><p>商品分类、商品详情、导航栏、热销列表、收藏功能、用户个人中心、个人资料修改、用户留言功能、收获地址功能、购物车、订单管理、首页轮播图。</p><p>Django REST framework 部分源码阅读。<br>后台开发文档自动化生成及管理 / 通过 redis 实现缓存。<br>为实现数据分析的需要，统计了商品点击数、收藏数、库存与销量等。<br>Throttling 对用户和 IP 进行限速，实现反爬虫。<br>Sentry 完成线上系统的错误日志的监控和告警。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>为什么前端可以独立开发？</p><ul><li>前端会自己启动一个简单的 web 服务器，监听端口例如 8080，来渲染前端代码。</li><li>若前端需要数据，可以通过 axios 发送异步请求给后端。</li><li>Mockjs 可以根据 json 格式生成一些随机数据。</li></ul><p>单页面和多页面对比（前端相关）：<br><a href="https://juejin.cn/post/6844903512107663368">https://juejin.cn/post/6844903512107663368</a></p><p>前后端分离的开发方式可以大致分为两种：</p><ol><li>前端没开发好。这时后端开发就会省事一点，可以在 drf 提供的测试页面测试。</li><li>前端开发好了。这时候后端就要配合前端，将前端跑起来，每开发一个接口，就简单测试一个接口。</li></ol><p><strong>如何运行一个 vue 项目？</strong></p><p>在 vscode 中安装推荐插件，安装 node 和 npm.</p><p>安装 nvm 以管理版本，注意在命令行安装 nvm 时梯子换成虚拟网卡模式，或者<a href="https://blog.csdn.net/hzjanger/article/details/102876969">在 hosts 文件中追加内容</a>。</p><p>注意要使用匹配的 node 版本。</p><p>问题： <code>node-sass</code> 可能无法找到适合当前环境（Linux 64-bit with Node.js 12.x）的绑定文件。<br>解决方法： <code>npm rebuild node-sass</code></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>系统：debian12<br>数据库：mysql  Ver 8.4.4 for Linux on x86_64 (MySQL Community Server - GPL)</p><p>注意，在 debian 上需要先卸载 MariaDB，否则会产生冲突。</p><p>使用的第三方： </p><ul><li><a href="https://github.com/zhangfisher/DjangoUeditor">DjangoUeditor</a><br>这个 DjangoUeditor 版本众多，多数已经过时了，与 Django 4.2 不兼容。我改动了一点代码，使这个项目可以运行，但也许还有其他潜在的错误。</li><li><a href="https://github.com/python-social-auth/social-core">social-core</a></li><li><a href="https://github.com/jazzband/djangorestframework-simplejwt">djangorestframework-simplejwt</a><br>rest_framework_jwt 已经不再维护，故迁移到此。</li></ul><h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><p>迁移之后根据模型类生成数据库的表。</p><p>在 <code>./db_tools/data</code> 下有一些数据，我们用 <code>./db_tools</code> 下的 <code>import_category_data.py</code> 和 <code>import_goods_data.py</code> 两个脚本导入。</p><p>若导入数据出错，需要清空一些含有外键或者自关联的表，可以执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> foreign_key_checks <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;   <span class="operator">/</span><span class="operator">/</span> 如果表中没有数据</span><br><span class="line"><span class="keyword">set</span> foreign_key_checks <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="CORS-跨源资源共享"><a href="#CORS-跨源资源共享" class="headerlink" title="CORS 跨源资源共享"></a>CORS 跨源资源共享</h1><p>一个清晰的介绍视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1T5411v7to&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>在项目中安装也很方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure><p>此外，在后端代码中还需要一些额外的配置，具体参阅 <code>settings.py</code> 中相关注释。</p><p><strong>如何在 debian 的 chrome 上禁用安全模式，允许跨域，方便开发？</strong></p><p>首先，找到 chrome:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which google-chrome</span><br></pre></td></tr></table></figure><p>在对应目录下，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --disable-web-security --user-data-dir=&quot;/tmp/chrome_dev_profile&quot;</span><br></pre></td></tr></table></figure><h1 id="用户登录和手机注册"><a href="#用户登录和手机注册" class="headerlink" title="用户登录和手机注册"></a>用户登录和手机注册</h1><h2 id="Token-认证登录"><a href="#Token-认证登录" class="headerlink" title="Token 认证登录"></a>Token 认证登录</h2><p>本小节对 token 的使用作简单演示。</p><p>在 <code>settings.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;rest_framework.authtoken&#x27;</span>,  <span class="comment"># token 登录需要使用这个</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在 <code>./urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken <span class="keyword">import</span> views <span class="comment"># 用于理解 token</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^api-token-auth/&#x27;</span>, views.obtain_auth_token), <span class="comment"># 用于理解 token</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 postman 中：</p><p><img src="https://s2.loli.net/2025/03/01/A7GpOVNdFleTP41.jpg" alt="101-1.jpg"></p><p>得到结果：</p><p><img src="https://s2.loli.net/2025/03/01/BdxphQJZD4uXVrP.png" alt="101-2.png"></p><p>这个 token 也可以在后端的数据库中找到。</p><p>也可以使用如下命令生成 token :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py drf_create_token -r admin</span><br></pre></td></tr></table></figure><p>注意这样会覆盖原先的 token 值。</p><p>现在做实验进一步理解 token. 启用 vscode 的调试，将断点打在下图位置（即 <code>class GoodsListViewSet(viewsets.ReadOnlyModelViewSet)</code> 点进去）。注意要在配置文件中设置 <code>&quot;justMyCode&quot;: false</code> .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Python Debugger: Django&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;debugpy&quot;,</span><br><span class="line">    &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">    &quot;args&quot;: [</span><br><span class="line">        &quot;runserver&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;django&quot;: true,</span><br><span class="line">    &quot;autoStartBrowser&quot;: false,</span><br><span class="line">    &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/manage.py&quot;,</span><br><span class="line">    &quot;justMyCode&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/03/01/QjDa5U8ysR9nmce.png" alt="101-3.png" title="已登录 admin 用户"></p><p><img src="https://s2.loli.net/2025/03/01/ha8WfbYwKNZvrpL.png" alt="101-4.png" title="无登录用户"></p><p>此时用 postman 发送如下请求也会卡住：</p><p><img src="https://s2.loli.net/2025/03/01/zJHaPduYwLqp2Vm.png" alt="101-5.png"></p><p>在 postman 中的 Headers 中加上 token 就可以看到：</p><p><img src="https://s2.loli.net/2025/03/01/GAFxObvfsCMz9Do.png" alt="101-6.png"></p><p><img src="https://s2.loli.net/2025/03/01/G6tDjdgnR3u9B8w.png" alt="101-7.png"></p><p>说明此时根据 token 辨认出了用户。</p><h2 id="JWT-Token"><a href="#JWT-Token" class="headerlink" title="JWT Token"></a>JWT Token</h2><p>注意，<strong>在和前端联调时，不能登录 django 自带的管理后台。</strong></p><h3 id="基础知识和配置"><a href="#基础知识和配置" class="headerlink" title="基础知识和配置"></a>基础知识和配置</h3><p>简要介绍：</p><ul><li>所有的服务器都有一把解密的钥匙，用户登录时，将用户的信息通过加密算法加密得到密文，这个密文就是 JWT Token.</li><li><a href="https://www.cnblogs.com/wenqiangit/p/9592132.html">https://www.cnblogs.com/wenqiangit/p/9592132.html</a> （已在 <a href="https://archive.org/">https://archive.org/</a> 备份）</li><li><a href="https://www.bilibili.com/video/BV1ob4y1Y7Ep">（推荐）Cookie、Session、Token究竟区别在哪？如何进行身份认证，保持用户登录状态？</a></li></ul><p>在 <code>./urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> TokenObtainPairView, TokenRefreshView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    path(<span class="string">&#x27;jwt-auth/&#x27;</span>, TokenObtainPairView.as_view()), <span class="comment"># 理解 jwt</span></span><br><span class="line">    path(<span class="string">&#x27;jwt-refresh/&#x27;</span>, TokenRefreshView.as_view()),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在 settings 中配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK =&#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.BasicAuthentication&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;rest_framework.authentication.SessionAuthentication&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 postman 发送请求：</p><p><img src="https://s2.loli.net/2025/03/01/QnjO9HSTrwgqX5e.png" alt="101-8.png"></p><p>实际上，将图片中的响应全丢给 AI 分析完全没问题（这个项目本就是我写着练习的，token 放出来无所谓）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;refresh&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc0MDkxNTMwOCwiaWF0IjoxNzQwODI4OTA4LCJqdGkiOiI5MTkzZjRhMzhlMzA0NDMwYjA1NWE3ZDVmNzNmYzIzNyIsInVzZXJfaWQiOjF9.ltBS3iEvabqZ_Y1cyZMANjqgekQUXmZ19_9-_imWPOU&quot;,</span><br><span class="line">    &quot;access&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQwODI5MjA4LCJpYXQiOjE3NDA4Mjg5MDgsImp0aSI6IjBmZDE0ZjA1NDBkYTQzYmZiNzhjYzY1OGRlOWRlNDJiIiwidXNlcl9pZCI6MX0.8K3nTODh1NEAwi_gvXj4HoTc6aPshyyTZi1tP-PG2YQ&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>refresh Token:</p><ul><li>类型：刷新 token</li><li>用途：用于刷新访问 token。</li></ul><p>access Token:</p><ul><li>类型：访问 token</li><li>用途：用于访问受保护的 API 或资源。</li></ul><p>这两个 token 通常一起使用：access token 用于短期认证，过期后可以用 refresh token 获取新的 access token。</p><p>签名的目的：</p><blockquote><p>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p></blockquote><p>信息暴露：</p><blockquote><p>在这里大家一定会问一个问题：Base64 是一种编码，是可逆的，那么我的信息不就被暴露了吗？<br>是的。所以，在 JWT 中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的 User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在 JWT 中了。如果将用户的密码放在了 JWT 中，那么怀有恶意的第三方通过 Base64 解码就能很快地知道你的密码了。<br>因此 JWT 适合用于向Web应用传递一些非敏感信息。 JWT 还经常用于设计用户认证和授权系统，甚至实现 Web 应用的单点登录。</p></blockquote><h3 id="实验-access-和-refresh"><a href="#实验-access-和-refresh" class="headerlink" title="实验 - access 和 refresh"></a>实验 - access 和 refresh</h3><p>如果 access token 过期，可以用 refresh token 刷新（若 refresh token 未过期）。</p><p><img src="https://s2.loli.net/2025/03/01/tCwPmKqS4MvhW75.png" alt="101-9.png"></p><p>如果 refresh token 也过期或无效，会返回错误（这个时候就需要用户重新登录了？）。</p><p>将返回的新的 access token 复制下来，用于后续请求。</p><p>接下来使用 access token 访问受保护资源。</p><p><img src="https://s2.loli.net/2025/03/01/q1DrTyUe9JIGYLA.png" alt="101-10.png"></p><p>在打断点的调试实验中，我们看到服务器识别出了用户。点击继续，postman 得到了正确的响应数据。</p><h3 id="实验-Sliding-Token"><a href="#实验-Sliding-Token" class="headerlink" title="实验 - Sliding Token"></a>实验 - Sliding Token</h3><p>然而使用 access 和 refresh 对这个项目还是麻烦了点，我们使用滑动令牌（Sliding Token）。</p><p><a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/token_types.html">官方文档</a>：</p><blockquote><p>Sliding tokens offer a more convenient experience to users of tokens with the trade-offs of being less secure and, in the case that the blacklist app is being used, less performant. A sliding token is one which contains both an expiration claim and a refresh expiration claim. As long as the timestamp in a sliding token’s expiration claim has not passed, it can be used to prove authentication. Additionally, as long as the timestamp in its refresh expiration claim has not passed, it may also be submitted to a refresh view to get another copy of itself with a renewed expiration claim.</p></blockquote><p>在 <code>./urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.views <span class="keyword">import</span> TokenObtainSlidingView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, TokenObtainSlidingView.as_view()),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 postman 中测试：</p><p><img src="https://s2.loli.net/2025/03/02/n6bVxhN5wZpLmlH.png" alt="101-11.png"></p><p>在前端测试效果，发现登录之后，可以识别登录用户的身份：</p><p><img src="https://s2.loli.net/2025/03/02/TL6heKva8W9xglS.png" alt="101-12.png"></p><p>注意，这个令牌是会刷新的。具体机制上网搜。</p><h2 id="手机号登录"><a href="#手机号登录" class="headerlink" title="手机号登录"></a>手机号登录</h2><p>现在想要实现这样的功能：用户不仅可以以用户名登录，也可以以手机号登录。</p><p>向数据库中的 admin 用户赋一个电话号码。</p><p>在 settings 中增加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">&#x27;users.views.CustomBackend&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后在 <code>./apps/users/views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line">User = get_user_model()   <span class="comment"># 获取用户模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomBackend</span>(<span class="title class_ inherited__">ModelBackend</span>):  <span class="comment"># 继承 ModelBackend 类</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义用户验证</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 重写 authenticate 方法，仿照原来的函数写就行，注意返回类型</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request,username=<span class="literal">None</span>, password=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.get(Q(username=username)|Q(mobile=username))</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>即可实现手机号登录。</p><h2 id="手机号注册"><a href="#手机号注册" class="headerlink" title="手机号注册"></a>手机号注册</h2><p>首先我们需要一个帮助发验证码的网站，让短信提供商发验证码。</p><p>一个例子是<a href="https://www.yunpian.com/">云片网</a>，这类网站审核比较严格，需要实名认证，发送的短信也必须是审核后的模板（里面留一个验证码的位置）。发送短信的样例代码在 <code>./apps/utils/yunpian.py</code> .</p><p>相关逻辑在 <code>./apps/users/serializers.py</code>, <code>./apps/users/views.py</code>, <code>./ShopProj/urls.py</code> 中。</p><p>登录后端 <code>http://127.0.0.1:8000/users/</code>，提示 GET 方法不允许。我们在下面 post 一个错误的数据，会提示验证码错误。</p><p>在 users_verifycode 表中手工填入用户和验证码数据（也就是这里直接在数据库里填了个假的），再次 post，成功。且在后端数据库 users_userprofile 中，看到刚刚新增的用户。</p><p>在开发过程中，遇到一个实际的问题：注册之后，浏览器 F12 看不到 token 和 name. 实际上注册之后并没有登录，若想要登录，需要仿照登录的返回数据格式。为此我作了一些修改，见 <code>./apps/users/views.py</code> 中 <code>class UserViewset</code> 的注释。</p><p>刚才的实验是在数据库中填了一个测试用的假验证码，接下来完成一个实际的验证码发送。相关代码在 <code>./apps/users/serializers.py</code> 中的类 <code>SmsSerializer</code>、<code>./apps/users/views.py</code> 中的类 <code>SmsCodeViewset</code>.</p><p>测试成功：</p><p><img src="https://s2.loli.net/2025/03/04/3aZqA7ItTergxQE.png" alt="101-13.png"></p><h1 id="问题排查-文档生成"><a href="#问题排查-文档生成" class="headerlink" title="问题排查-文档生成"></a>问题排查-文档生成</h1><p>记录一次问题排查过程。</p><p>本想使用 drf 的 api 文档自动生成，但是遇到了一些问题。推测是版本不兼容的问题，将报错丢给 AI：</p><p><img src="https://s2.loli.net/2025/03/05/ZcFR862etVbpSiu.png" alt="101-14.png"></p><p><img src="https://s2.loli.net/2025/03/05/5tRKmi2YuQjI8ck.png" alt="101-15.png"></p><p>按照 AI 给的建议：</p><p><img src="https://s2.loli.net/2025/03/05/qNonJPShDCWvTAZ.jpg" alt="101-16.jpg"></p><p>操作，得到效果如下：</p><p><img src="https://s2.loli.net/2025/03/05/sxDWO9iyfYU7IRF.png" alt="101-17.png"></p><p><img src="https://s2.loli.net/2025/03/05/RhlGBkzsfivqXux.png" alt="101-18.png"></p><p>虽然实际上没觉得这东西很好用就是了，之前实习的时候都是用的 ApiFox.</p><h1 id="问题排查-认证"><a href="#问题排查-认证" class="headerlink" title="问题排查-认证"></a>问题排查-认证</h1><p>遇到一个经典问题，相关的讨论还挺多的：</p><ul><li><a href="https://stackoverflow.com/questions/59771853/anonymoususer-when-logged-with-simplejwt">https://stackoverflow.com/questions/59771853/anonymoususer-when-logged-with-simplejwt</a></li><li><a href="https://github.com/jazzband/djangorestframework-simplejwt/issues/562">https://github.com/jazzband/djangorestframework-simplejwt/issues/562</a></li><li><a href="https://groups.google.com/g/django-rest-framework/c/YvWiNNCmk8o">https://groups.google.com/g/django-rest-framework/c/YvWiNNCmk8o</a></li></ul><p>一个可能比较靠谱的描述（上面第二个链接，我并不能验证其真实性）：</p><blockquote><p>…but JWTauthentication does not populate the request.user object attribute hence I get AnonymousUser, but when i access the django admin it works because request.user is populated by the ‘django.contrib.auth.middleware.AuthenticationMiddleware’</p></blockquote><p>这个问题还是挺棘手的，可能是 djangorestframework_simplejwt 本身的问题。我的解决方案比较原始，仅举一例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 只能查看自己的收藏</span></span><br><span class="line">    cookie_header = self.request.headers.get(<span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&#x27;name=([^;]+)&#x27;</span>, cookie_header)</span><br><span class="line">    uname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        uname = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    uuser = UserProfile.objects.get(username=uname)</span><br><span class="line">    <span class="keyword">return</span> UserFav.objects.<span class="built_in">filter</span>(user=uuser)</span><br></pre></td></tr></table></figure><p>相关的代码在 <code>./apps/utils/diyfunc.py</code> 中。</p><h1 id="Azure-云服务器"><a href="#Azure-云服务器" class="headerlink" title="Azure 云服务器"></a>Azure 云服务器</h1><h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><p>为使用支付宝支付（沙箱模拟），需要公网 IP.</p><p>在阿里云购买一台 ECS 云服务器，选择合适的操作系统（这里我选了 debian），配置安全组、密钥对，使用 vscode SSH 连接时，注意 <code>.pem</code> 文件的权限要求严格，不能随便给很多权限。</p><p>在云服务器上安装好 Python 的虚拟环境。</p><p>反转了，因为阿里云的学生认证方案太弱鸡，一 runserver 就炸了，改用 Azure 的学生认证，Standard D2s v3 (2 vcpu，8 GiB 内存)，这个够用了。os 是 Linux (ubuntu 22.04)，ubuntu 确实方便，就不要在云服务器上搞什么 debian 了。git clone 也不会出现阿里云那样莫须有的 timeout.</p><p>注意要在网络设置中放行需要的端口。</p><p>注意访问 <code>公网IP:8000</code> 时关掉梯子，或者配置以下规则（仅示例，并非一定是这个格式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rule Type：IP-CIDR</span><br><span class="line">Rule Content：公网IP/32</span><br><span class="line">Proxy Policy：DIRECT</span><br><span class="line">Action：PREPEND RULE</span><br></pre></td></tr></table></figure><p>和前端联调时需要在代码中将 IP 地址改为这个云服务器的 IP.</p><p><img src="https://s2.loli.net/2025/03/11/hXaWJxHjVFzC3eT.png" alt="101-19.png"></p><p>可以看到，请求的地址变成了服务器的 IP.</p><h2 id="使用-docker"><a href="#使用-docker" class="headerlink" title="使用 docker"></a>使用 docker</h2><blockquote><p>这是一次失败的尝试，但暂且记录。</p></blockquote><p>docker 安装相关文档：<br><a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/</a></p><p>docker 相关资料见 <a href="https://dropsong.github.io/posts/b9315374.html">实习笔记一</a> 。</p><p>在编写完 Dockerfile 后，构建 Docker 镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-drf-app .</span><br></pre></td></tr></table></figure><p>使用 docker save 将镜像保存到文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o my-drf-app.tar my-drf-app</span><br></pre></td></tr></table></figure><p>把这个 <code>.tar</code> 文件上传到云服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /path/filename username@serverIp:/path</span><br></pre></td></tr></table></figure><p>然后在云服务器上加载这个镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i my-drf-app.tar</span><br></pre></td></tr></table></figure><p>最后也尝试了 Docker Compose，但没有成功。</p><h1 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h1><p>进入支付宝开放平台，控制台，沙箱。</p><p><img src="https://s2.loli.net/2025/03/11/TbNrBKIhvMs673e.jpg" alt="101-20.jpg"></p><p>生成密钥：<br><a href="https://opendocs.alipay.com/common/02kipl">https://opendocs.alipay.com/common/02kipl</a></p><p>更多细节参考 <code>./apps/trade/keys/readme.md</code> .</p><p>支付宝 API 文档：<br><a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay/">https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay/</a></p><p>电脑网站支付的支付接口 <a href="https://opendocs.alipay.com/open/028r8t?scene=22">alipay.trade.page.pay</a>（统一收单下单并支付页面接口）调用时序图如下：</p><p><img src="https://s2.loli.net/2025/03/12/hVSL843ilAx2HJK.png" alt="101-21.png"></p><p>调用流程如下：</p><ol><li>商家系统调用 alipay.trade.page.pay（统一收单下单并支付页面接口）向支付宝发起支付请求，支付宝对商家请求参数进行校验，而后重新定向至用户登录页面。</li><li>用户确认支付后，支付宝通过 get 请求 returnUrl（商户入参传入），返回同步返回参数。</li><li>交易成功后，支付宝通过 post 请求 notifyUrl（商户入参传入），返回异步通知参数。</li><li>若由于网络等原因，导致商家系统没有收到异步通知，商家可自行调用 alipay.trade.query（统一收单交易查询接口）查询交易以及支付信息（商家也可以直接调用该查询接口，不需要依赖异步通知）。</li></ol><p>注意： </p><ul><li>由于同步返回的不可靠性，支付结果必须以异步通知或查询接口返回为准，不能依赖同步跳转。</li><li>商家系统接收到异步通知以后，<strong>必须通过验签（验证通知中的 sign 参数）来确保支付通知是由支付宝发送的</strong>。详细验签规则可查看 <a href="https://opendocs.alipay.com/open/270/105902#s7">异步通知验签</a>。</li><li>接收到异步通知并验签通过后，请务必核对通知中的 app_id、out_trade_no、total_amount 等参数值是否与请求中的一致，并根据 trade_status 进行后续业务处理。</li><li>在支付宝端，partnerId 与 out_trade_no 唯一对应一笔单据，商家端保证不同次支付 out_trade_no 不可重复；若重复，支付宝会关联到原单据，基本信息一致的情况下会以原单据为准进行支付。</li></ul><p><del>复用了别人的代码，看起来还挺复杂的，在 <code>./apps/utils/</code> 下可以看到。</del></p><p>下面这段代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return_url = <span class="string">&#x27;http://&#x27;</span>+IP+<span class="string">&#x27;/alipay/return/?charset=utf-8&amp;out_trade_n=20241115999&amp;method=alipay.trade.page.pay.return&amp;total_amount=100.00&amp;sign=K1QkuZEX5nQDHzL%2BuCh3chDLesPXWyqmA2Trc5IYbH06jqUfAUle8mezNAFcGld6Lcv4KKXlwAs7a84y3yoYdjl7nxWaxk4sif%2F1DsWT6FvLJQsCjc8hsiE%2BDHLoeaiiHtJ9LsmYDtKyT4vUcg3yA3b3Q%2B4ybejLBQRjlu9r4WtlxO3oaloE880Ujwq4TthnVWzzeWMdIKdacCnnYVI9Fc2H1RdxfTQtRHXEWWW2dCBe5e4BzYOD7i4DQBYPtA4lFM%2FcTY700t0%2B7etjSzC5fS8l%2B6IO3Ea393UWVAvmJkzfYj9wRapai4qMh9KdR%2BEiGsBkXnl7lfXz9o767QQPOA%3D%3D&amp;trade_no=20250515163741149&amp;auth_app_id=2016101400687743&amp;version=1.0&amp;app_id=2016101400687743&amp;sign_type=RSA2&amp;seller_id=2088102179599265&amp;timestamp=2019-11-15+17%3A08%3A40&#x27;</span></span><br><span class="line"></span><br><span class="line">o:ParseResult = urlparse(return_url)</span><br><span class="line">query = parse_qs(o.query)</span><br><span class="line">processed_query = &#123;&#125;</span><br><span class="line">ali_sign = query.pop(<span class="string">&quot;sign&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><code>urlparse</code> 函数用于解析 URL，并将其分解为各个组成部分。它的返回值是一个 <code>ParseResult</code> 对象，该对象包含以下属性：</p><ul><li><code>scheme</code>: URL 的协议部分（例如 http 或 https）</li><li><code>netloc</code>: 网络位置部分（例如 www.example.com）</li><li><code>path</code>: URL 的路径部分（例如 /path/to/resource）</li><li><code>params</code>: URL 的参数部分（通常很少使用）</li><li><code>query</code>: URL 的查询字符串部分（例如 key1=value1&amp;key2=value2）</li><li><code>fragment</code>: URL 的片段标识符部分（例如 #section1）</li></ul><p><code>parse_qs</code> 函数用于解析查询字符串，并将其转换为一个字典。字典的键是查询参数的名称，值是一个包含参数值的列表。</p><p><del>一种可能更方便的做法：</del><br><a href="https://pypi.org/project/alipay-sdk-python/">https://pypi.org/project/alipay-sdk-python/</a></p><p>上面链接中的代码有 <a href="https://stackoverflow.com/questions/2941995/python-ignore-incorrect-padding-error-when-base64-decoding">bug</a>, 我已经修了，但是包括之前别人的代码生成的链接，都会遇到 <strong>502 Bad Gateway</strong> 问题，相关讨论见：</p><ul><li><a href="https://open.alipay.com/portal/forum/post/181001027">https://open.alipay.com/portal/forum/post/181001027</a></li><li><a href="https://open.alipay.com/portal/forum/post/160801014">https://open.alipay.com/portal/forum/post/160801014</a></li><li><a href="https://opendocs.alipay.com/support/01razf">https://opendocs.alipay.com/support/01razf</a></li></ul><p>在本文的撰写阶段，支付宝的沙箱可能有点问题，在这个功能上浪费太多时间了，我决定跳过它。</p><h1 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h1><p>在前端项目中，删除 dist 文件夹下的内容。</p><p><code>npm run build</code> 遇到了一些问题，下面是解决方案：</p><p>The error is due to the <code>--colors</code> option being removed in newer versions of webpack-cli. You need to remove <code>--colors</code> from your build script. To fix this, update your <code>package.json</code> file and remove the <code>--colors</code> option from the build script. Your updated build script should look like this: <code>webpack --progress --profile --config webpack.prod.js</code>.</p><p>此时，仍有新的问题。方案如下：</p><p>The error you’re encountering is likely due to an incompatibility between the version of webpack and the configuration or dependencies you’re using. Since you’re using an older version of webpack (^2.5.1), it might be beneficial to update webpack and related dependencies to a more recent version.</p><p>Update webpack and webpack-cli to the latest version:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure><p>Ensure all other webpack-related dependencies are compatible with the new version of webpack. You might need to update them as well:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server webpack-dev-middleware webpack-hot-middleware</span><br></pre></td></tr></table></figure><p>After making these changes, try running the build script again:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>在后端 settings 中设置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&quot;templates&quot;</span>],  <span class="comment"># add</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对生成的 <code>index.html</code> 做一些修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/index.entry.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在全局 urls 中配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^index/&#x27;</span>, TemplateView.as_view(template_name=<span class="string">&quot;index.html&quot;</span>), name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意前端 build 的时候，填写正确的 IP 地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// let local_host = &#x27;http://127.0.0.1:8000&#x27;;</span><br><span class="line">let local_host = &#x27;http://云服务器IP:8000&#x27;;</span><br></pre></td></tr></table></figure><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>相关资料：</p><ul><li><a href="https://github.com/chibisov/drf-extensions">https://github.com/chibisov/drf-extensions</a></li><li><a href="https://chibisov.github.io/drf-extensions/docs/">https://chibisov.github.io/drf-extensions/docs/</a></li><li><a href="https://web.archive.org/web/20230327155332/https://www.zmrenwu.com/courses/django-rest-framework-tutorial/materials/102/">https://web.archive.org/web/20230327155332/https://www.zmrenwu.com/courses/django-rest-framework-tutorial/materials/102/</a></li></ul><p>使用 redis.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install drf-extensions</span><br><span class="line">pip install django-redis</span><br></pre></td></tr></table></figure><p>修改部分代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_extensions.cache.mixins <span class="keyword">import</span> CacheResponseMixin</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsListViewSet</span>(CacheResponseMixin, viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>安装 redis-server：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install redis-server</span><br></pre></td></tr></table></figure><p>在 settings 中配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK_EXTENSIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_CACHE_RESPONSE_TIMEOUT&#x27;</span>: <span class="number">60</span> * <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地 runserver, 访问两个链接：</p><ul><li><a href="http://127.0.0.1:8000/goods/">http://127.0.0.1:8000/goods/</a></li><li><a href="http://127.0.0.1:8000/goods/?min_price=&amp;max_price=&amp;name=&amp;is_hot=true&amp;is_new=">http://127.0.0.1:8000/goods/?min_price=&amp;max_price=&amp;name=&amp;is_hot=true&amp;is_new=</a></li></ul><p>可以在 redis-cli 里看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;:1:1e10e0a6cf89037108644311f918bb66&quot;</span><br><span class="line">2) &quot;:1:dad87b4a4e03232d700b5c34e010ebc2&quot;</span><br></pre></td></tr></table></figure><h1 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h1><p>大致原理：</p><p><img src="https://s2.loli.net/2025/03/17/olRjcVfxMZgP69O.png" alt="101-22.png"></p><p>微博开放平台的相关文档：<br><a href="https://open.weibo.com/wiki/%E7%BD%91%E7%AB%99%E6%8E%A5%E5%85%A5%E4%BB%8B%E7%BB%8D">https://open.weibo.com/wiki/%E7%BD%91%E7%AB%99%E6%8E%A5%E5%85%A5%E4%BB%8B%E7%BB%8D</a></p><p>开放平台的审核大约两天左右。</p><p>填写授权回调页：</p><p><img src="https://s2.loli.net/2025/03/20/bqCYNpaQgnoz1HE.png" alt="101-23.png"></p><p>应用还未通过审核时，不能大范围推广。可以设置测试帐号来测试尚在开发中的应用。添加自己的微博账号即可。</p><p>Oauth2.0 相关文档：<br><a href="https://open.weibo.com/wiki/Oauth2/authorize">https://open.weibo.com/wiki/Oauth2/authorize</a></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>在 <code>./apps/utils/weibo_login.py</code> 中，我写了一些代码以实验微博登录的流程。</p><p>调用 <code>get_auth_url()</code> 函数以获取链接。可能会遇到 21322 重定向地址不匹配问题，原因是授权回调页面的 url 最后少了一个 <code>/</code>，加上即可。</p><p>点击这个链接，注意需要事先退出所有微博帐号（其实开个隐私标签页就行了），会进入微博的登录界面。</p><p>登录（扫码）后，我们可以得到一个链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://云服务器IP:8000/complete/weibo/?code=c和谐b</span><br></pre></td></tr></table></figure><p>将这个 code 的值填入 <code>./apps/utils/weibo_login.py</code> 的 <code>get_access_token()</code> 函数的形参中。</p><p>运行 <code>get_access_token()</code> 函数，得到 access_token, 即可通过 access_token 去使用微博的 API 接口：</p><ul><li><a href="https://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI">https://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI</a></li></ul><p>实际上我们只关心这个部分：</p><p><img src="https://s2.loli.net/2025/03/20/9MCJo5jusrfbyzA.png" alt="101-24.png"></p><p>将 access_token 和 uid 的值填入 <code>./apps/utils/weibo_login.py</code> 的 <code>get_user_info()</code> 函数的形参中。运行得到一个链接，浏览器打开可以看到类似下面的输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> 一个整型<span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;idstr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screen_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;profile_image_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;light_ring&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cover_image_phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;profile_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;weihao&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;followers_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;followers_count_str&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;friends_count&quot;</span><span class="punctuation">:</span> 一个整型<span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pagefriends_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;statuses_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;video_status_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;video_play_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;super_topic_not_syn_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;favourites_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;following&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allow_all_act_msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;geo_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified_type&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insecurity&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sexual_content&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ptype&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;allow_all_comment&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar_large&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar_hd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified_reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified_trade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified_reason_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified_source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verified_source_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;follow_me&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;like_me&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;online_status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bi_followers_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;star&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mbtype&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mbrank&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;svip&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vvip&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mb_expire_time&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;block_word&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;block_app&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;chaohua_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;brand_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nft_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vplus_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;wenda_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;live_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gongyi_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;paycolumn_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newbrand_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ecommerce_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hardfan_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;wbcolumn_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;interaction_user&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;audio_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;place_ability&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;credit_score&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_ability&quot;</span><span class="punctuation">:</span> 一个整型<span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;urank&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;story_read_state&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vclub_member&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_teenager&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_guardian&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_teenager_list&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pc_new&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;special_follow&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;planet_video&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;video_mark&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;live_status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_ability_extend&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status_total_counter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total_cnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repost_cnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comment_cnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;like_cnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comment_like_cnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;video_total_counter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;play_cnt&quot;</span><span class="punctuation">:</span> <span class="number">-1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;brand_account&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hongbaofei&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;green_mode&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;urisk&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;unfollowing_recom_switch&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;block_me&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_big&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_realname&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_career&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_career_name&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;show_auth&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_auth&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;is_punish&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avatar_hd_pid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;和谐&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;like_display&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comment_display&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后要做的就是给用户在我们的应用中注册一个 id，然后和用户的微博 id 绑定。至此实验结束。</p><h2 id="开源第三方登录解决方案"><a href="#开源第三方登录解决方案" class="headerlink" title="开源第三方登录解决方案"></a>开源第三方登录解决方案</h2><p>就是文章开头提到的 <a href="https://github.com/python-social-auth/social-core">social-core</a> .</p><p>注意需要：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install social-auth-app-django</span><br></pre></td></tr></table></figure><p>然后在 settings 中 INSTALLED_APPS 增加对应内容。</p><p>在 settings 中增加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (  <span class="comment"># 只要满足一个即可</span></span><br><span class="line">    <span class="string">&#x27;users.views.CustomBackend&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;social_core.backends.weibo.WeiboOAuth2&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在全局 urls 中增加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    re_path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;social_django.urls&#x27;</span>, namespace=<span class="string">&#x27;social&#x27;</span>)), <span class="comment"># 第三方登录</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在全局 settings 中增加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&quot;templates&quot;</span>],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;social_django.context_processors.backends&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">                <span class="string">&#x27;social_django.context_processors.login_redirect&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SOCIAL_AUTH_WEIBO_KEY = <span class="string">&#x27;和谐&#x27;</span></span><br><span class="line">SOCIAL_AUTH_WEIBO_SECRET = <span class="string">&#x27;和谐&#x27;</span></span><br><span class="line">SOCIAL_AUTH_LOGIN_REDIRECT_URL = <span class="string">&#x27;/index/&#x27;</span></span><br></pre></td></tr></table></figure><p>注意跳转到微博那边登录的时候，如果出现错误，可以尝试清空（临时的非安全的）浏览器缓存。</p><p>扫码跳转后遇到报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;/home/azureuser/shopvenv/lib/python3.11/site-packages/social_core/utils.py&quot;, line 235, in wrapper</span><br><span class="line">    raise AuthCanceled(args[0], response=err.response)</span><br><span class="line">social_core.exceptions.AuthCanceled: Authentication process canceled</span><br><span class="line">[时间和谐] &quot;GET /complete/weibo/?state=和谐&amp;code=和谐 HTTP/1.1&quot; 500 123165</span><br></pre></td></tr></table></figure><p>这（可能？）是由于 social_core 使用 session 认证，和我们的 JWT 不一致，我们复制一份 social_core 到 extra_apps, 然后修改 <code>./extra_apps/social_core/actions.py</code> 源码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无法确定这段代码是否发挥了我期望它发挥的功能</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_simplejwt.tokens <span class="keyword">import</span> AccessToken</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_complete</span>(<span class="params">backend, login, user=<span class="literal">None</span>, redirect_name=<span class="string">&quot;next&quot;</span>, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> backend.setting(<span class="string">&quot;SANITIZE_REDIRECTS&quot;</span>, <span class="literal">True</span>):</span><br><span class="line">        allowed_hosts = [</span><br><span class="line">            *backend.setting(<span class="string">&quot;ALLOWED_REDIRECT_HOSTS&quot;</span>, []),</span><br><span class="line">            backend.strategy.request_host(),</span><br><span class="line">        ]</span><br><span class="line">        url = sanitize_redirect(allowed_hosts, url) <span class="keyword">or</span> backend.setting(</span><br><span class="line">            <span class="string">&quot;LOGIN_REDIRECT_URL&quot;</span></span><br><span class="line">        )</span><br><span class="line">    response = backend.strategy.redirect(url)</span><br><span class="line">    token = AccessToken.for_user(user)  <span class="comment"># 生成 JWT 访问令牌</span></span><br><span class="line">    response.set_cookie(<span class="string">&quot;name&quot;</span>,user.name <span class="keyword">if</span> user.name <span class="keyword">else</span> user.username,max_age=<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">    response.set_cookie(<span class="string">&quot;token&quot;</span>, <span class="built_in">str</span>(token), max_age=<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>修改 <code>./extra_apps/social_core/backends/oauth.py</code> 中的 <code>validate_state</code> 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无法确定这个改动是否真的有效。改动的第一天不行，第二天什么都没做就可以正常运行了</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_state</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Validate state value. Raises exception on error, returns state</span></span><br><span class="line"><span class="string">    value if valid.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.STATE_PARAMETER <span class="keyword">and</span> <span class="keyword">not</span> self.REDIRECT_STATE:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># state = self.get_session_state()</span></span><br><span class="line">    state = self.strategy.request_data().get(<span class="string">&quot;state&quot;</span>)  <span class="comment"># 改为从请求参数获取</span></span><br><span class="line">    request_state = self.get_request_state()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request_state:</span><br><span class="line">        <span class="keyword">raise</span> AuthMissingParameter(self, <span class="string">&quot;state&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> state:</span><br><span class="line">        <span class="keyword">raise</span> AuthStateMissing(self, <span class="string">&quot;state&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> constant_time_compare(request_state, state):</span><br><span class="line">        <span class="keyword">raise</span> AuthStateForbidden(self)</span><br><span class="line">    <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure><h1 id="日志框架-sentry"><a href="#日志框架-sentry" class="headerlink" title="日志框架 sentry"></a>日志框架 sentry</h1><p>注册 sentry 账户: <a href="https://sentry.io/signup/">https://sentry.io/signup/</a></p><p>Install sentry-sdk from PyPI with the django extra:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade &#x27;sentry-sdk[django]&#x27;</span><br></pre></td></tr></table></figure><p>Initialize the Sentry SDK in your Django settings.py file:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sentry_sdk</span><br><span class="line"></span><br><span class="line">sentry_sdk.init(</span><br><span class="line">    dsn=<span class="string">&quot;https://和谐&quot;</span>,</span><br><span class="line">    <span class="comment"># Add data like request headers and IP for users,</span></span><br><span class="line">    <span class="comment"># see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info</span></span><br><span class="line">    send_default_pii=<span class="literal">True</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>You can easily verify your Sentry installation by creating a route that triggers an error:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trigger_error</span>(<span class="params">request</span>):</span><br><span class="line">    division_by_zero = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;sentry-debug/&#x27;</span>, trigger_error),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一些相关的文档：<br><a href="https://docs.sentry.io/platforms/python/integrations/django/">https://docs.sentry.io/platforms/python/integrations/django/</a></p><p>引发错误后，可以看到管理界面：</p><p><img src="https://s2.loli.net/2025/03/21/g7aCZlhYbPwfytk.png" alt="101-25.png"></p><p>在后端使用 localhost 8000 端口测试时，可以正常收到邮件提醒。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署部分的代码和资料，在 github 仓库的分支 deploy_version 上。</p><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><p>查看 nginx 是否已经安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">azureuser@2v8g-ubuntu2204:~$ ps -elf|grep nginx</span><br><span class="line">0 S azureus+  129167  129078  0  80   0 -  1752 pipe_r 09:14 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>安装过程中可能需要重启一些服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1. packagekit.service  2. ssh.service  3. none of the above</span><br><span class="line"></span><br><span class="line">(Enter the items or ranges you want to select, separated by spaces.)</span><br><span class="line"></span><br><span class="line">Which services should be restarted?</span><br></pre></td></tr></table></figure><p>在提示符下输入 1，然后回车，让 <code>debconf</code> 只重启 <code>packagekit.service</code>，然后手动重启 <code>ssh.service</code>，确保不会影响 SSH 连接。</p><h2 id="安装-uwsgi"><a href="#安装-uwsgi" class="headerlink" title="安装 uwsgi"></a>安装 uwsgi</h2><p>在 Auzre 服务器中安装，注意<strong>要</strong>安装到虚拟环境中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>注意 settings 文件中的改动。</p><p>将 debug 设为 False.</p><p>增加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static/&quot;</span>)</span><br></pre></td></tr></table></figure><p>将 settings 中的跨域去除。</p><p>将前端代码中的端口号去除。</p><p>前端代码重新 build, 相关静态资源放入对应的后端文件夹。</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SystemCheckError: System check identified some issues:</span><br><span class="line"></span><br><span class="line">ERRORS:</span><br><span class="line">?: (staticfiles.E002) The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting.</span><br></pre></td></tr></table></figure><p>相关讨论：<br><a href="https://www.reddit.com/r/django/comments/1529l15/learning_django/">https://www.reddit.com/r/django/comments/1529l15/learning_django/</a></p><blockquote><p>You should think of the <code>STATICFILES_DIRS</code> setting as a list of <strong>sources</strong> that <code>collectstatic</code> will scan, and from which it will copy your static files.</p><p>You can think of STATIC_ROOT as the <strong>destination</strong> where <code>collectstatic</code> will copy your static files to for serving.</p><p>If you list the destination as one of the sources, it would either overwrite your files, or generally make a massive mess, so Django raises an error.</p><p>Typically, you would want to set <code>STATIC_ROOT</code> to a directory that a web browser would serve (<code>/srv/http/static/</code> or <code>/var/www/static/</code>) and use Nginx, Apache, etc. to serve them.</p><p>Edit: original phrasing sounded too condescending to me, and that was not my intention. Hard to not sound too dry over text sometimes.</p></blockquote><p>解决方案：</p><blockquote><p>Just change STATIC_ROOT = BASE_DIR / ‘staticfiles’</p></blockquote><p>在 settings 中作相关改动即可。</p><p>然后把原有的 static 文件夹删除，将 staticfiles 改名为 static.</p><p>找到 nginx:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which nginx</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -c /home/azureuser/tiny-shop/mynginx.conf</span><br></pre></td></tr></table></figure><p>上面的指令，如果缺少相关文件，创建之；如果有报错，可以丢给 AI.</p><p>在虚拟环境中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br></pre></td></tr></table></figure><p>查看是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">azureuser@2v8g-ubuntu2204:~$ ps -elf|grep uwsgi</span><br><span class="line">0 S azureus+  161998  159318  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162000  161998  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162001  161998  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162002  161998  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162003  161998  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162004  161998  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162005  161998  0  80   0 - 19034 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">1 S azureus+  162006  161998  0  80   0 - 62629 ep_pol 07:46 pts/1    00:00:00 uwsgi --ini /home/azureuser/tiny-shop/uwsgi.ini</span><br><span class="line">0 S azureus+  162227  158881  0  80   0 -  1752 pipe_r 07:56 pts/0    00:00:00 grep --color=auto uwsgi</span><br></pre></td></tr></table></figure><p>或者在日志中查看亦可。</p><p>若发现代码有些错误，需要更改，那么更改之后，就要重新启动 uwsgi.</p><p>在云端部署成功：</p><p><img src="https://s2.loli.net/2025/03/23/oZyvDBaxCQ9Xiqr.png" alt="101-26.png"></p><p>遗留了一个 bug, 本地运行前后端分离的项目时正常，但是部署到云端缺少 cookie. 尝试了一些方法，没什么思路。这个 bug 会导致在访问网页时的鉴权问题。</p><h1 id="杂项及后记"><a href="#杂项及后记" class="headerlink" title="杂项及后记"></a>杂项及后记</h1><p>关于 <code>lookup_field</code>：<br><a href="https://www.django-rest-framework.org/api-guide/generic-views/#api-reference">https://www.django-rest-framework.org/api-guide/generic-views/#api-reference</a></p><p>个人感觉和 fastapi 相比，drf 完全是不同的思路，fastapi 更加直观。drf 除了思路不同，还有很多混乱的地方。</p><p>一些 pip install 的东西有点随便，导致开发的时候踩坑。点名 <a href="https://github.com/jazzband/djangorestframework-simplejwt">djangorestframework-simplejwt</a>，其 github issues 可以看到一些未解决的 bug. 鉴权是个相当麻烦的事情，至少我为了用 JWT 强行上 simplejwt, 同时保留了部分其他认证方式导致了这个局面。</p><p>一些让 AI 干活的证据：</p><p><img src="https://s2.loli.net/2025/03/23/VenLC3st1428drJ.png" alt="101-27.png"></p><p>16G 内存真的不够用啦：</p><p><img src="https://s2.loli.net/2025/03/23/E7mz1T9ICbaJXVN.png" alt="101-28.png"></p><p>这还是 debian 勉强能够用，要是 win11 早就炸了。</p><p>相比之前实习的项目来说，这种简单的前后端项目，models 和主要的代码逻辑反而是最好写的。但是其他各种各样的细节会淹没人的精力，浪费大量时间，提升却有限，以后还是少接触。</p><p>不过也并不是一无所获。在公司实习好像一个流水线上的工人，我只对我负责的那一部分有所了解，其他环节则十分茫然。这种项目反而在一定程度上建立了全局观。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一篇随手记，记录开发过程中遇到的问题。&lt;/p&gt;
&lt;h1 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h1&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/dr</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="前端" scheme="https://dropsong.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="docker" scheme="https://dropsong.github.io/tags/docker/"/>
    
    <category term="后端" scheme="https://dropsong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="DRF" scheme="https://dropsong.github.io/tags/DRF/"/>
    
    <category term="JWT" scheme="https://dropsong.github.io/tags/JWT/"/>
    
    <category term="CORS" scheme="https://dropsong.github.io/tags/CORS/"/>
    
    <category term="云服务器" scheme="https://dropsong.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="API" scheme="https://dropsong.github.io/tags/API/"/>
    
    <category term="vue" scheme="https://dropsong.github.io/tags/vue/"/>
    
    <category term="nginx" scheme="https://dropsong.github.io/tags/nginx/"/>
    
    <category term="uwsgi" scheme="https://dropsong.github.io/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>京都、东京游</title>
    <link href="https://dropsong.github.io/posts/821dd720.html"/>
    <id>https://dropsong.github.io/posts/821dd720.html</id>
    <published>2025-02-17T02:32:26.000Z</published>
    <updated>2025-02-21T14:27:20.788Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>const qz<br>const_list = {F, M, B, Z, zd, zr, wc, qz}</p></div><p>去年底，一直在和 qz 谋划去日本的事。但临近出发，因为某明星在东瀛死掉的缘故，国内掀起了一波日本流感的舆论，登时人心惶惶，qz 的家人马上反对，于是只有我一人成行。M 虽然也表示了反对但是反对无效。</p><h1 id="旅行计划和事后总结"><a href="#旅行计划和事后总结" class="headerlink" title="旅行计划和事后总结"></a>旅行计划和事后总结</h1><blockquote><p>注意文章时效，最新情况可能已经变更。<br>本来我是不会记这些东西的，因为之前和 qz 做计划的时候需要一个共享文档，现在我直接拿过来，做点修改。</p></blockquote><h2 id="护照、签证"><a href="#护照、签证" class="headerlink" title="护照、签证"></a>护照、签证</h2><p><a href="https://www.bilibili.com/video/BV1rg1xYwEdv">https://www.bilibili.com/video/BV1rg1xYwEdv</a></p><p>第一次办护照，根据地区的不同，可能需要咨询学校方面，取得相关材料，然后才能到出入境管理处办理。</p><p>办好护照，找淘宝弄签证。签证找淘宝是因为，日本使馆要求办签要找代理旅行社，所以直接在淘宝上找好了。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>网络、手机卡：推荐买流量卡。淘宝买，落地插卡。当然也可以开通国际漫游，但是我查看的时候有点贵。</p><p>支付方式：</p><ul><li>景点附近的门店大多支持微信支付宝，银座等商圈也支持。一些小店仅收现金。如果不购买交通卡的话，JR 线、新干线、公交地铁也仅现金。</li><li>711 可以在 ATM 上一千一千地外币兑换，LAWSON 的 ATM 只能一万一万地换。</li></ul><p>新干线、JR 线注意：如果使用纸质车票，入站将车票放入指定口，<strong>然后过卡在另一端，打孔的车票会弹出来，这个打孔后的车票一定要带上。</strong></p><p>住宿：国内软件如美团可以定，国外直接 google map 上找大致位置搜 hotel，会有不同价位的显示，非常方便，然后点链接到第三方预定，一般会支持银联卡。</p><p>退税：以银座举例，需要在同一商场消费满 5000 日元，持护照到指定地点才可以退税。</p><p>无须额外下载 APP，个人感觉 google map 已经非常强大。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>计划游玩路线：<br><del>1.大阪</del><br>2.京都<br>3.东京</p><p>总览（仅参考，这样不会绕路）：</p><ul><li><del>大阪：通天阁→难波八坂神社→(步行十几分钟)→黑门市场→天守阁</del><ul><li><del>大阪晚上到达，可以在酒店附近溜达溜达</del></li></ul></li><li>京都：清水寺、三年坂、二年坂、八坂神社、银阁寺（大文字山）、京都大学、鸭川三角洲、下鸭神社、相国寺、京都御苑、金阁寺</li><li>东京：秋叶原、银座、増上寺、东京铁塔、東京都現代美術館、东京天空树、成田机场</li></ul><h1 id="day0"><a href="#day0" class="headerlink" title="day0"></a>day0</h1><p>傍晚飞关西机场的飞机，染了金边的云层非常漂亮。</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2c56e262.jpg" alt="100-1.jpg"></p><p>日本城市高空夜景，大概是濑户内海附近？</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f284331f2.jpg" alt="100-2.jpg"></p><p>落地后，由于没有提前在要求网站上填写相关信息，在机场耽误了一会。来到室外，第一次实际使用 google map，对它的引导逻辑有些茫然。后来跑来跑去，请机场里一个工作人员带我到了上车位置，又不知道是哪一辆巴士，在哪里买票，问了车站前帮忙整理行李箱的大爷，一顿叽里咕噜听不懂的日语之后，指了一个地方。</p><p>这个免费的机场巴士语音播报有四种语言，日、英、中、韩，不过因为地名都是汉字，反而不怎么需要。路上的道路标识牌也都是汉字，但背景色是绿的。这种和国内标识牌的相似之中的一丝区别，给人一种异质感。</p><p>巴士送我到大阪站，在那里直接买票去京都。</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2c52f2a9.jpg" alt="100-3.jpg"></p><p>不太清楚这是 JR 线还是别的什么，总之是类似火车 / 电车之类的？</p><p>车上的途径站点很令人迷惑，它不会显示全部站点，只显示目前站点和后面几个站点，以致于我以为自己坐错了车。问了两个坐在一块的日本人，他们在一个 APP 上一顿猛戳，告诉我 this is the right line, you can go to Kyoto.</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2c34cd19.jpg" alt="100-4.jpg"></p><p>刚下车没几分钟，站里就播报今天的所有列车都结束运营了。</p><p>打开 google map, 找到预定的酒店位置，京都不太，走过去就行。</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2bc96f28.jpg" alt="100-5.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2d76da77.jpg" alt="100-6.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2c41b12e.jpg" alt="100-7.jpg"></p><p>这是鸭川上的一座桥。</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2a984a7e.jpg" alt="100-8.jpg"></p><p>夜晚的鸭川。</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2adf1c64.jpg" alt="100-9.jpg"></p><p>看起来很像柯南里的一个取景地？</p><p><img src="https://bu.dusays.com/2025/02/18/67b3f2c23f46c.jpg" alt="100-10.jpg"></p><p>到达酒店办理入住，顺利。前台小姐姐在我上电梯的门要关的时候，面向我鞠了个蛮深的躬，小小的东瀛震撼.jpg</p><p>房间很干净整洁，马桶的坐垫是自动加热的，洗浴的设施有点复杂，一开始还真不知道怎么放出热水来。</p><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><p>在京都正式开始的第一天，景点离酒店很近，走路去清水寺。</p><p>道路观感比较有序，但由于阴天，天空低俯在大地上，显得比较清冷。路边某户人家的围栏上张着自由民主党广报板，两个参议院议员的大头照，一个吉井章，黑色头发，另一个白发老者叫西田昌司，中间的汉字是经世济民、政治使命云云，其余假名一并不懂。</p><p>路边略显精致的小玩意，一个游客拿着相机怼着拍，我也随手拍一下。</p><p><img src="https://bu.dusays.com/2025/02/18/67b41b8d6887d.jpg" alt="100-11.jpg"></p><p>上过街天桥，两边都有铁网拦着，不知是为了降低自杀率还是为了省下看桥员的工钱。</p><p>很快到景点附近，过了名叫“若宫八幡宫”的鸟居。</p><p>路过一个民居，这种一户建真的很好，中国并非新加坡之类，本不必住地如此拥挤。</p><p><img src="https://bu.dusays.com/2025/02/18/67b41b90d37f3.jpg" alt="100-12.jpg"></p><p>路过一个小吃铺子，在这里买了早餐。</p><p><img src="https://bu.dusays.com/2025/02/18/67b41b7ebed4c.jpg" alt="100-13.jpg"></p><p>行进的路线有些许起伏，让人想起济南、承德那种路面。</p><p>一个很漂亮的染坊。</p><p><img src="https://bu.dusays.com/2025/02/18/67b41b99805fd.jpg" alt="100-14.jpg"></p><p>终于快到景点入口。</p><p><img src="https://bu.dusays.com/2025/02/18/67b41b9a51731.jpg" alt="100-15.jpg"></p><p><img src="https://s2.loli.net/2025/02/18/dqTgevB2NfAOaWo.jpg" alt="100-16.jpg"></p><p>周围有一个书着“马驻”的牌子，我猜是马厩的意思？</p><p>建筑想要保持这种红漆大约每年都要新刷？</p><p><img src="https://s2.loli.net/2025/02/18/3qKaTBrEwzLXAZj.jpg" alt="100-17.jpg"></p><p>麻生太郎和温家宝，熟悉的两个名字。</p><p><img src="https://bu.dusays.com/2025/02/18/67b41c283af13.jpg" alt="100-18.jpg"></p><p>目前还是清水寺外围的一些建筑，到这里都不需要门票。</p><p><img src="https://s2.loli.net/2025/02/18/BdrA3DpZNlQ4Vzh.jpg" alt="100-19.jpg"></p><p><img src="https://s2.loli.net/2025/02/18/dKhfQayGFu4cZj8.jpg" alt="100-20.jpg"></p><p>路过随求堂，一边是绘马架子。随着人流前进，清水寺的远景也引入眼帘，冬天的树枝都光秃秃的，白色的屋瓦和灰明的天空看起来好像在下雪一样。</p><p>继续往前。</p><p><img src="https://s2.loli.net/2025/02/18/nVdhTeKNwEX6zoD.jpg" alt="100-21.jpg"></p><p>终于到门票售卖处了。</p><p><img src="https://s2.loli.net/2025/02/18/IHX9nVO4NebKJdu.jpg" alt="100-22.jpg"></p><p>前往清水舞台的廊道。</p><p><img src="https://bu.dusays.com/2025/02/18/67b44a227d650.jpg" alt="100-23.jpg"></p><p>清水寺本堂的介绍木牌。</p><p><img src="https://s2.loli.net/2025/02/18/estgUOAL9cxw3p5.jpg" alt="100-24.jpg"></p><p>堂内景观。</p><p><img src="https://s2.loli.net/2025/02/18/eNmI3OEVUP2bYkd.jpg" alt="100-25.jpg"></p><p>又一处绘马架。</p><p><img src="https://bu.dusays.com/2025/02/18/67b44a2b3bdbc.jpg" alt="100-26.jpg"></p><p>继续向前，可以看到之前介绍木牌提到的『慈眼视众生，福聚海无量』。</p><p>地主神社并未开放，可能是被斗倒了。</p><p><img src="https://bu.dusays.com/2025/02/18/67b44a2d94af1.jpg" alt="100-27.jpg"></p><p>在四周转转，可以看到地藏尊的神龛。关于地藏，本博客之前有所提及，可以查阅。</p><p>我的下一个目的地是三年坂，和清水寺靠在一块，在这条路线上继续。路上的一些赛钱箱上书着『净财』二字，左读右读差别还是蛮大的。</p><p>周围有全部由汉字书成的小看处，阅读无困难。</p><p>清水舞台冬日远景。</p><p><img src="https://s2.loli.net/2025/02/18/StOfZK32psaCWRX.jpg" alt="100-28.jpg"></p><p>沿途有一些小石像、小鸟居。</p><p><img src="https://bu.dusays.com/2025/02/18/67b44a8c88124.jpg" alt="100-29.jpg"></p><p>来到一处手洗处，扬州大明寺亦有类似物件，但规模较小。</p><p><img src="https://bu.dusays.com/2025/02/18/67b44a88859c9.jpg" alt="100-30.jpg"></p><p>清水寺的木制结构。</p><p><img src="https://s2.loli.net/2025/02/18/ZUp1v8CsuKkhiD7.jpg" alt="100-31.jpg"></p><p>一串看着很像臭豆腐的东西，虽然我并没有吃过臭豆腐。</p><p><img src="https://bu.dusays.com/2025/02/18/67b454459e4b0.jpg" alt="100-32.jpg"></p><p>还算不错的景致。</p><p><img src="https://bu.dusays.com/2025/02/18/67b454547aba5.jpg" alt="100-33.jpg"></p><p>大约在三年坂的一个小商店，一位略显滑稽的人物吆喝着日本茶，尝了一口，在店里转转，买了一袋茶叶。又在另一家买了一个招财猫图案的收纳袋。</p><p>走过三年坂，接着就是二年坂。</p><p><img src="https://s2.loli.net/2025/02/18/awjKFqsu4Ufcnvz.jpg" alt="100-34.jpg"></p><p>一处店内的开门转角处。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4544d8a37f.jpg" alt="100-35.jpg"></p><p>其时已经饿了，在一处店家点了 1300 日元的拉面。还算好吃，但是面汤太咸了，差评。</p><p><img src="https://s2.loli.net/2025/02/18/kFNt7mvnP5lea8i.jpg" alt="100-36.jpg"></p><p>用完午餐，准备去八坂神社，路上看到两个着和服的樱花妹。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4543b7bc61.jpg" alt="100-37.jpg"></p><p>路边出租和服的店铺，『京都·璃光』，价位有 4000、7000、8000 日元的。</p><p>八坂神社的鸟居有点像是水泥制成的。门外的建筑风格和清水寺差不多，就不贴上来了。</p><p><img src="https://s2.loli.net/2025/02/18/2BC4bPr3iQg5yhO.jpg" alt="100-38.jpg"></p><p><img src="https://s2.loli.net/2025/02/18/EcnPTjyvLAMrpHZ.jpg" alt="100-39.jpg"></p><p>寺内设有投钱拉绳拍手的经典设施。</p><p>有一石碑，『咏建速须佐之男命』，书法很好。</p><p>八坂神社附近设有公园，冬景无味。</p><p><img src="https://bu.dusays.com/2025/02/18/67b454562fb0b.jpg" alt="100-40.jpg"></p><p>不远处即是所谓『佛教大学建学之地』知恩院。</p><p><img src="https://bu.dusays.com/2025/02/18/67b45d8ce5013.jpg" alt="100-41.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b45df318cd1.jpg" alt="100-42.jpg"></p><p>在这个坡道上有个白人背包客请我帮他拍照，最后用英语道谢之后又用日语道谢了一遍。</p><p><img src="https://bu.dusays.com/2025/02/18/67b45db548d3d.jpg" alt="100-43.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b45db622c06.jpg" alt="100-44.jpg"></p><p>知恩院的建筑风格，其实我这种非专业人士大致看过去会觉得只是清水寺风格换个颜色而已。</p><p><img src="https://s2.loli.net/2025/02/18/1vkbylj4Ui2NtG7.jpg" alt="100-45.jpg"></p><p><img src="https://s2.loli.net/2025/02/18/f62mSkyDEgQvhiV.jpg" alt="100-46.jpg"></p><p>回到神宫道之前，会路过集会堂，里面似乎别有洞天，但是立入禁止。穿过北门，一只浑身漆黑的乌鸦站在瓦上，发出凄厉的鸣叫。</p><p>接下来就是今天的重头戏，去银阁寺。</p><p>一路西行到公交站。若不购买交通卡，京都的公交需要现金 230 日元一次，不论站数。先上车，到站交钱，将一千日元塞进机器口，会吐出一堆碎钱。日本的公交到站时会倾斜车身，向地面靠齐。这或许是为了方便日本国内较多的老年人，但我忽然想到，若解读为“日本公交车都很有礼貌”，则相当滑稽。</p><p>在银阁寺最近的站点下车，出门一个『佐藤耳鼻咽喉科医院』的深橙色建筑十分惹眼，干净利落的一竖排宋体汉字，若不是“佐藤”二字，我还以为自己在国内。</p><p>步行不远即到景区附近。</p><p><img src="https://s2.loli.net/2025/02/18/kOGmtTLQlNiob3V.jpg" alt="100-47.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b45da576b0b.jpg" alt="100-48.jpg"></p><p>客流量不算多，排队很快便可买到票。</p><p><img src="https://s2.loli.net/2025/02/18/eVjlqnfKmGd7sCB.jpg" alt="100-49.jpg"></p><p>从这扇门进去，便可看到银沙滩，右望即是银阁。</p><p><img src="https://bu.dusays.com/2025/02/18/67b45de0198f8.jpg" alt="100-50.jpg"></p><p>关于银阁寺，本博客之前亦有所提及，可查阅。</p><p><img src="https://bu.dusays.com/2025/02/18/67b49655e209c.jpg" alt="100-51"></p><p><img src="https://bu.dusays.com/2025/02/18/67b495bb98adc.jpg" alt="100-52"></p><p><img src="https://bu.dusays.com/2025/02/18/67b495b60e83a.jpg" alt="100-53"></p><p>在银阁的池塘里，可见北斗石。</p><p>最近正在读三岛由纪夫的《金阁寺》，银阁的顶上也有一只凤凰，不知是否是和金阁呼应。</p><p>银阁的建筑本体已经相当老旧，顶层不少油漆脱落，裸露出的木头颜色连成一片，形状酷似冬天的冰锥。</p><p>绕着银沙滩走，分别是方丈、东求堂、锦镜池。</p><p><img src="https://bu.dusays.com/2025/02/18/67b495b8109cd.jpg" alt="100-54"></p><p><img src="https://s2.loli.net/2025/02/18/7FuNrtKn1qxVUg3.jpg" alt="100-55.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b495818f5bd.jpg" alt="100-56"></p><p>在山坡上绕一圈重回银阁。</p><p><img src="https://bu.dusays.com/2025/02/18/67b49651de658.jpg" alt="100-57"></p><p><img src="https://bu.dusays.com/2025/02/18/67b4987b5ff22.jpg" alt="100-58.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b495ad81f0e.jpg" alt="100-59"></p><p><img src="https://bu.dusays.com/2025/02/18/67b4a2a375f95.jpg" alt="100-60.jpg"></p><p><img src="https://s2.loli.net/2025/02/18/ICd2QZP5kViWga8.jpg" alt="100-61.jpg"></p><p><img src="https://bu.dusays.com/2025/02/18/67b4a37f0b9f4.jpg" alt="100-62"></p><p>离开银阁，动身前往大文字山。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4a37a7879b.jpg" alt="100-63"></p><p>相当荒凉，几乎见不到人。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4a347665c1.jpg" alt="100-64"></p><p>步行稍前，即可看到『银阁寺山国有林』的介绍木牌。</p><p>从银阁上去的山路相当难走。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4a379492c0.jpg" alt="100-65"></p><p><img src="https://bu.dusays.com/2025/02/18/67b4a38243285.jpg" alt="100-66"></p><p><img src="https://bu.dusays.com/2025/02/18/67b4a3730ef1f.jpg" alt="100-67"></p><p>千人冢，据 google maps 某网友留言：</p><blockquote><p>京都市五山送り火の大文字焼きに行く途中にその塚はあります。その塚を左に行くと火床にいけます。</p><p>千人塚は、終戦直前に本土決戦にそなえ、軍隊が山腹近くで穴を掘っていて人骨の入った多くの壺を見つけました。地元の人が、改めて埋葬しその上に碑をたてました。天文十九年（1550年）足利義輝が山頂に城を築き（中尾城）、三好、松永の軍と戦って敗れた記録があり、当時の戦士らの遺骨とみられています。</p><p>具体的には、中尾城は「江口の戦い」1549年で細川晴元が家臣の三好長慶に敗れたために足利義晴は京を追われました。三好長慶は、将軍を失った幕府に代わり京都の行政を取り仕切るようになり、危機感を募らせた義晴は京都復帰を計画し京への復帰を目論んで慈照寺（銀閣寺）の裏山に築いた城です。<br>築城翌年の1550年（天文19年）に義晴が病死すると、子の足利義輝が細川晴元とともに入城しますが、三好長慶に攻められ（「中尾城の戦い」）、義輝は自ら城に火をかけ坂本、堅田へ逃れました。その後、三好軍によって破却されています。</p><p>アクセスは、京都駅から市バス5番に乗り銀閣寺口下車徒歩40分です。</p></blockquote><p><img src="https://bu.dusays.com/2025/02/18/67b4a382b036d.jpg" alt="100-68.jpg"></p><p>陡峭的阶梯。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4a8dbe2b23.jpg" alt="100-69.jpg"></p><p>在接近大文字的时候，我见到这张立入禁止的牌子。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4a8dcc8f9e.jpg" alt="100-70.jpg"></p><p>我特想无视这个牌子进去，但综合考虑后，也还是选择遵守规定，回去了。</p><p>下山的途中，遇到一个捡拾垃圾的员工，和一个徒步上山的游客，叽里咕噜一句日语向我打了招呼。</p><p>这次大文字山之行是非常草率的，并且留下了有点严重的后果，是否有长期影响还有待考察。因为我是背包行，虽然这个包我已经简化地很轻，但无可辩驳地是一个负担，并非可以无视的那种负担，加上从银阁上山山路陡峭，天阴路滑，在日本的后两天，尤其是最后一天，感到背部的酸痛，这是从来没有过的经验。在这之前的一阵子我一直以为，虽然我看起来并不强壮，但是身体还是很好的，持久力和对精神痛苦的耐受力过关，就算遇到什么疾病和身体上的不适，睡一觉两觉就会完全消失。而这次酸痛的持续时间超出预期，给我敲响了警钟，回国后，我立马下单了一个带轮子拉杆的背包，打算从散步开始慢慢加码，恢复由于冬季寒冷而暂停的运动。</p><p>回酒店的路上，遇到了进进堂。对比 <a href="https://dropsong.github.io/posts/d1e8cada.html">信与回信</a> 里面的图片，似乎就是同一家！真是无巧不成书。</p><p><img src="https://bu.dusays.com/2025/02/18/67b4a8c77eb3e.jpg" alt="100-71.jpg"></p><p>在罗森便利店买了个便当带回去吃，要素体验拉满了。</p><p><img src="https://s2.loli.net/2025/02/18/VYxSfmZs5rDcthP.jpg" alt="100-72.jpg"></p><p>吃完休息了一会，我还是闲不住，前去观瞻京都大学。所幸京大似乎是开放的，进去沾沾学霸们的灵气。</p><p><img src="https://s2.loli.net/2025/02/18/IzsNuAbpSVd4WQk.jpg" alt="100-73.jpg"></p><p><img src="https://s2.loli.net/2025/02/18/WEO84yoiJR1sv7e.jpg" alt="100-74.jpg"></p><p>某车站很二次元的广告。</p><p><img src="https://s2.loli.net/2025/02/18/Wk6yfzQUhmEZ4q8.jpg" alt="100-75.jpg"></p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><p>第二天早起，步行至鸭川三角洲。河合桥上一群带着小红帽的小学生吵吵闹闹地路过，我惊讶于他们冬天穿的这么少，男孩短裤短袖，女孩着裙，我却还裹着羽绒服。</p><p>沿着河岸向前，斜坡上有很多鸽子，很快就到著名景点。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72a95e0674.jpg" alt="100-76.jpg"></p><p>之前的小学生们已经在西侧河岸上活动了，看着很有兴致。也许是过了热季的缘故，今天几乎没有什么游客，只有一对情侣和一对闺蜜，晴朗多云天空下的鸭川，微风中藏着轻松的惬意。一位写生的白发老者，让我莫名想起宫崎骏。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72ab75369a.jpg" alt="100-77.jpg"></p><p><img src="https://bu.dusays.com/2025/02/20/67b72ad0a1ca0.jpg" alt="100-78.jpg"></p><p>在河中石头上蹲下来细瞧，青苔爬上石头，在水流的相接处青葱嫩绿，向上一小段就枯黄消失。鸭川在石间略显湍急，让人想起《林中小溪》里，那种刚刚萌发的力量。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72aa6a121b.jpg" alt="100-79.jpg"></p><p><img src="https://bu.dusays.com/2025/02/20/67b72aae73e8c.jpg" alt="100-80.jpg"></p><p>稍远准备离开时，又看到三四个画师在鸭川边写生。</p><p>向北，向下鸭神社进发。</p><p>路过贺茂御祖神社，穿过鸟居，经过天神宫社，过桥。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72b7532fc5.jpg" alt="100-81.jpg"></p><p>在表参道上继续，西侧的河合神社等地。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72b510dfc6.jpg" alt="100-82.jpg"></p><p><img src="https://bu.dusays.com/2025/02/20/67b72b7622515.jpg" alt="100-83.jpg"></p><p>远处的鸟居即是所谓『二の鳥居』，从这里进去，便是下鸭神社。下鸭神社给人一种八坂神社和清水寺混合在一起的感觉，中间的舞殿围着一圈鸽子，在石子里找食吃。可以购买一种签，放入神社的浅河里，上面会显出字迹，大抵和抽签相当，只是包装了一个精致的形式。在这里买了一个『学业成就』的御守。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72b7640908.jpg" alt="100-84.jpg"></p><p>离开下鸭神社，前往相国寺，中途仍然需要跨过鸭川。</p><p><img src="https://s2.loli.net/2025/02/20/OeDpC7Fu43IzwNm.jpg" alt="100-85.jpg"></p><p><img src="https://bu.dusays.com/2025/02/20/67b72e268a571.jpg" alt="100-86.jpg"></p><p>京都的一户建很多，穿街过巷，道路极窄。</p><p>不知为何，相国寺里似乎没什么人。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72e0f55825.jpg" alt="100-87.jpg"></p><p><img src="https://bu.dusays.com/2025/02/20/67b72e22c93a3.jpg" alt="100-88.jpg"></p><p>这里人少到让人生疑。考虑到这里是皇室的传统活动范围，我不禁怀疑这里其实是禁止入内的，只不过没有『立入禁止』的牌子。我绕到稍远处，问了一个保安，其中一个院子是否可以入内，虽然我怀疑他是否知道游客可不可以进入，他还是非常热情地说，『大丈夫大丈夫』。然后我进去拍了一张绝美的照片。</p><p><img src="https://bu.dusays.com/2025/02/20/67b72e21d3eea.jpg" alt="100-89.jpg"></p><p>离开相国寺，前往京都御苑。</p><p>绕着一个周围铺满碎石子的围墙转了一圈，里面的建筑看上去相当古老，但是不能进去。正当我感到无聊要离开的时候，一个游客聚集的地方吸引了我，登记了护照信息之后即可参观，不需要门票。集散游客的屋子里，有免费的讲解机可以领取。</p><p>京都仙洞御所。</p><p><img src="https://s2.loli.net/2025/02/20/vl4O8geRcVwbTQy.jpg" alt="100-90.jpg"></p><p>这里是 17 世纪的宫廷花园，小而优美。</p><p><img src="https://bu.dusays.com/2025/02/21/67b7565c55ccb.jpg" alt="100-91.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b7564e2306e.jpg" alt="100-92.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b75664d2b65.jpg" alt="100-93.jpg"></p><p>天空开始飘雪，算是冬天的特殊补偿。这个小屋里题着李白的两句诗。</p><p><img src="https://s2.loli.net/2025/02/20/f5NakBFWbZvdSOM.jpg" alt="100-94.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b7591c70cb0.jpg" alt="100-95.jpg"></p><p>搭乘公交前往金阁。</p><p><img src="https://bu.dusays.com/2025/02/21/67b7592437171.jpg" alt="100-96.jpg"></p><p>门票处的小屋子。</p><p><img src="https://s2.loli.net/2025/02/21/sieft2O5Q7GC4SZ.jpg" alt="100-97.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/jHE9DCIRmK7F8fY.jpg" alt="100-98.jpg"></p><p>三岛由纪夫在《金阁寺》中写道：</p><blockquote><p>随着尚未谋面的金阁越来越近，我却心生踌躇。无论如何，金阁都必须是美的。于是，比起金阁本身的美，我将一切都赌在了想象金阁之美的我内心的能力上。</p></blockquote><p><img src="https://bu.dusays.com/2025/02/21/67b759891c43e.jpg" alt="100-99.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/WXQmcC5igBkNx2U.jpg" alt="100-100.jpg"></p><p>这次京都的遗憾之二在于，没有请别人帮我在这拍一张手持《金阁寺》的与金阁寺的合影（我还以为金阁寺周围一定会有这本书卖的！）。</p><p><img src="https://bu.dusays.com/2025/02/21/67b7598058a8a.jpg" alt="100-101.jpg"></p><p>《金阁寺》中提到的陆舟松。</p><p><img src="https://bu.dusays.com/2025/02/21/67b7598ef0e88.jpg" alt="100-102.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/sARW4ce6BtxDkH1.jpg" alt="100-103.jpg"></p><p>由于之后还要赶往东京，这天就歇下了。</p><p>神奇的胶囊旅馆，但是卫生还是很过关的。空间肯定是逼仄的，但比国内高校宿舍要宽广一些。</p><h1 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h1><p>早上出发去京都站，站前可以看到京都塔。</p><p><img src="https://s2.loli.net/2025/02/21/cEb3kB72pmWHnQ4.jpg" alt="100-104.jpg"></p><p>早上起的比较晚，又没有到午饭时间，故京都站里的餐馆还没开张，我只好买了一个便当，加热后放在书包里。</p><p>京都站里有 mister donut，我还以为这是个虚构的店名。</p><p><img src="https://s2.loli.net/2025/02/21/gGnbmI5LapOkXKM.jpg" alt="100-105.jpg"></p><p>买票的时候出了点小岔子，竟买了一张由东京某地开往东京某地的车票，我不能理解为什么在京都可以买到这样的票，还以为在京都就只能买到由京都出发的车票，所以没细看。于是只能排个老长的队去人工服务。</p><p><img src="https://s2.loli.net/2025/02/21/QyztiBnVTf2gjqX.jpg" alt="100-106.jpg"></p><p>折腾半天终于上了新干线，选了一个三连座的最外面空位（靠窗座位全被占了<code>:(</code>，我又不想和别人挤着坐），后来上来一对中国母女，想找两个连着的座位，我就给她们让了座，跑去和一个看上去像是印度人的人坐二连座了。看到车厢里不少人在吃东西，我就把车站便当掏出来享用了。</p><p>吃完，列车正好经过一个山，山顶很像火山口，又有积雪覆盖，以为就是富士山了。老印正闭眼休息，我把手机伸到窗户口咔咔拍了点照。后来查地图发现似乎并不是富士山。然后就在车上睡着了，错过了富士山。</p><p>Tokyo 到着！</p><p>然而东京的到达并非一帆风顺。我在京都站进站的时候，没把打孔车票带着（其时我还不知道这玩意是这么用的），在出站口卡机处狐疑了一会，反正门也开着，我决定直接过去。卡机刷地一下把我拦下，召来了一个工作人员。说明情况后，她告诉我这种情况一般要重新买票（一万多日元！），我用蹩脚的英语和手语比划了一番，她掏出谷歌翻译：『中国語？』，我把手机里的车票照片给她看了，她在翻译器里捣鼓了一会：『今天就算了，之后要注意』。</p><p>终于出站。</p><p><img src="https://bu.dusays.com/2025/02/21/67b8084a6d15a.jpg" alt="100-107.jpg"></p><p>直奔秋叶原。</p><p><img src="https://s2.loli.net/2025/02/21/YExZy8XlNQjcFM6.jpg" alt="100-108.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/YjqReoxHwBnZMGJ.jpg" alt="100-109.jpg"></p><p>原神，启动！</p><p><img src="https://s2.loli.net/2025/02/21/atsSJzBcF46d9rY.jpg" alt="100-110.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b808dd0db50.jpg" alt="100-111.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/FT7QCfr2vn1kUSW.jpg" alt="100-112.jpg"></p><p>轻音少女。</p><p><img src="https://s2.loli.net/2025/02/21/RoSmxnLactFi8B7.jpg" alt="100-113.jpg"></p><p>这个不知道谁。</p><p><img src="https://s2.loli.net/2025/02/21/TtCa91zQNOfIgVw.jpg" alt="100-114.jpg"></p><p>琳琅满目的手办。</p><p><img src="https://bu.dusays.com/2025/02/21/67b83e2adee15.jpg" alt="100-115.jpg"></p><p>唯。</p><p><img src="https://s2.loli.net/2025/02/21/R3lIkuitGovcbEW.jpg" alt="100-116.jpg"></p><p>物语系列。</p><p><img src="https://s2.loli.net/2025/02/21/rksI96YeMvxS2ti.jpg" alt="100-117.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/UXrYb9A4cdWvIeJ.jpg" alt="100-118.jpg"></p><p>秋叶原除了这些二刺螈的店铺之外，还有一些卖电气设备的，绕到它们的背面就能找到一些餐馆。</p><p><img src="https://s2.loli.net/2025/02/21/mNUyOtk9irIo25D.jpg" alt="100-119.jpg"></p><p>忍。</p><p><img src="https://s2.loli.net/2025/02/21/1wNOHb8Iq43FQEU.jpg" alt="100-120.jpg"></p><p>鸟。</p><p><img src="https://s2.loli.net/2025/02/21/KkgzJY29a37VHxN.jpg" alt="100-121.jpg"></p><p>里面就是卖耳机的。我个人不太关注这些，一般就一根 3.5mm 的耳机线用来插电脑和平板，一个 redmi buds 4 pro 用来运动和通勤的时候听听音乐或播客，都用了蛮久。</p><p><img src="https://s2.loli.net/2025/02/21/9jRh5prGx4ZAKYC.jpg" alt="100-122.jpg"></p><p>采耳店广告牌。<del>卷卷采耳，不盈顷筐。</del></p><p><img src="https://bu.dusays.com/2025/02/21/67b841b5460f4.jpg" alt="100-123.jpg"></p><p>在秋叶原逛的店太多了，已经不记得下面一些店是在哪里的了。</p><p><img src="https://bu.dusays.com/2025/02/21/67b849e5ab419.gif" alt="100-123dot5.gif"></p><p><img src="https://bu.dusays.com/2025/02/21/67b841a7f27fc.jpg" alt="100-124.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b841b6415a6.jpg" alt="100-125.jpg"></p><p>逛完秋叶原，已经傍晚了。</p><p><img src="https://s2.loli.net/2025/02/21/WRwMOhXQzIgeVtf.jpg" alt="100-126.jpg"></p><p>吃了一顿烤肉。</p><p>对秋叶原的最后印象，一群 gai 溜子在拉练卡丁车。</p><p><img src="https://s2.loli.net/2025/02/21/Z9dTla83Opbicoq.jpg" alt="100-127.jpg"></p><p>出发去银座。</p><p>不知道东京有没有公交车，不过 google map 推荐的路线都是地铁。地铁的设施看得出来已经很旧了，买票可以参考 google map 标注的地铁编号和车站编号，还是蛮容易的。比较难绷的一点是，我把一堆碎钱喂给机器，它算的还蛮准的。</p><p>出站竟然直接在一个商场内部，里面还是很豪华的。在这买了一个化妆品，约 200 人民币，包装的还可以。</p><p>出了商场，今天晚上唯一的项目就是压马路。</p><p><img src="https://s2.loli.net/2025/02/21/oVOT7QELAey2GCS.jpg" alt="100-128.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b866de7811b.jpg" alt="100-129.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/AsfJzMu1mdO387w.jpg" alt="100-130.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/7FYCUHESBXlMIe2.jpg" alt="100-131.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/aBgdEIvimURboWX.jpg" alt="100-132.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/gTUNInVfvaoD4HO.jpg" alt="100-133.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/mF5M8pAz9JUg3K6.jpg" alt="100-134.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/zhTQrOqwZJmG5AE.jpg" alt="100-135.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/NAIuqZ3ypFR4lEd.jpg" alt="100-136.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/8rDCIqFoR5yvLi4.jpg" alt="100-137.jpg"></p><h1 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h1><p>早上参观了增上寺和东京铁塔，这两个靠在一块。</p><p><img src="https://s2.loli.net/2025/02/21/1PdzIOUS6HCeXiE.jpg" alt="100-138.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b8734c858d8.jpg" alt="100-139"></p><p><img src="https://bu.dusays.com/2025/02/21/67b8745a08573.jpg" alt="100-140.jpg"></p><p>寺内不允许拍照，这点很烦。石家庄的隆兴寺也是这样，难到是怕把佛祖的魂摄走了？</p><p>里面正在举行一个教学性质的活动，几个和尚带着幼儿园小朋友一起唱歌，然后介绍释迦牟尼的故事。下图的第二段文字阅读无障碍，我也学习了。</p><p><img src="https://s2.loli.net/2025/02/21/E93mczLk5ZlOGNF.jpg" alt="100-140dot5.jpg"></p><p>可能是那个幼儿园。</p><p><img src="https://bu.dusays.com/2025/02/21/67b8735d68f7d.jpg" alt="100-141"></p><p>东京铁塔。</p><p><img src="https://bu.dusays.com/2025/02/21/67b87339838ca.jpg" alt="100-142"></p><p>又见卡丁车。</p><p><img src="https://bu.dusays.com/2025/02/21/67b87370e47f8.jpg" alt="100-143.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b87300a24c9.jpg" alt="100-144.jpg"></p><p>接下来去东京都现代美术馆。从车站下车，还需要走一段路，路上全是一户建。</p><p><img src="https://bu.dusays.com/2025/02/21/67b8735a435d7.jpg" alt="100-145" title="居民区小公园"></p><p>吹奏部。</p><p><img src="https://bu.dusays.com/2025/02/21/67b87ed66e858.jpg" alt="100-146.jpg"></p><p>东京都现代美术馆，这个名字挺迷惑的，让人以为是京都的东部的某个美术馆。</p><p><img src="https://bu.dusays.com/2025/02/21/67b87ed9af940.jpg" alt="100-147.jpg"></p><p>左侧的广场。</p><p><img src="https://s2.loli.net/2025/02/21/WvwkDaTeQHf6nKg.jpg" alt="100-148.jpg"></p><p>由广场向前，下方是一个免费的娱乐设施，或者说一种装置艺术？不懂。</p><p><img src="https://s2.loli.net/2025/02/21/kLvnXT4dqYKeNrs.jpg" alt="100-149.jpg"></p><p>入馆。当天正在办坂本龙一的展子，人很多。</p><p><img src="https://bu.dusays.com/2025/02/21/67b8808431a64.jpg" alt="100-150.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b8808849123.jpg" alt="100-151.jpg"></p><p>买票，大约是 20 多人民币，可以逛一个三层楼的美术展。</p><p><img src="https://s2.loli.net/2025/02/21/8uWt9zJcIvsUV27.jpg" alt="100-152.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/SaH81mOgiyNGbds.jpg" alt="100-153.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/N9tESrIHJYna5Vl.jpg" alt="100-154.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/r9V6AtRI4qxTwOc.jpg" alt="100-155.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/91wHZUDVju3MlCv.jpg" alt="100-156.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/MXDQ8mxsuoVbFgI.jpg" alt="100-157.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/34JidqFQNXgnKyS.jpg" alt="100-158.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/OPhRZUyvuATpEd1.jpg" alt="100-159.jpg"></p><p>在这个牛的前面看了挺久，实际上拍出来颜色有点变化，和本来的不一样。</p><p><img src="https://s2.loli.net/2025/02/21/srMq9IXRn5QDkaz.jpg" alt="100-160.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/qVl5IeF8wN4sDPG.jpg" alt="100-161.jpg"></p><p>某种生殖崇拜？</p><p><img src="https://s2.loli.net/2025/02/21/L14xCZnil3ozKXj.jpg" alt="100-162.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b88322bc768.jpg" alt="100-163.jpg"></p><p>这两个挺好看的，虽然不知道为什么。</p><p><img src="https://s2.loli.net/2025/02/21/35xczKyO7ACNoat.jpg" alt="100-164.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/thpksAoa2Vw9CBx.jpg" alt="100-165.jpg"></p><p>接下来去天空树。路上买了一个特浓果汁，还挺好喝的。</p><p><img src="https://s2.loli.net/2025/02/21/YpgkLCEdq1Ax6WO.jpg" alt="100-166.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b88352674c6.jpg" alt="100-167.jpg"></p><p><img src="https://bu.dusays.com/2025/02/21/67b8839866523.jpg" alt="100-168.jpg"></p><p>成田机场，走了。</p><p><img src="https://bu.dusays.com/2025/02/21/67b88398533ba.jpg" alt="100-169.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/Rq5eVkpzvAYMcws.jpg" alt="100-170.jpg"></p><h1 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h1><p>招财猫收纳袋、一个吧唧、一个下鸭神社的『学业成就』御守给了领妹，京都买的茶叶给了 F，化妆品给了 M，宇治茶给了 M 的男人，一个小御守给了 B. 给我自己留了金阁的绘马，另外还有一个芙莉莲的漫画书，不知道送谁。</p><p>show 一下收集的海报：</p><p><img src="https://s2.loli.net/2025/02/21/ZD6BYRQlNtKGj78.jpg" alt="100-171.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/BU5FWPnEkYhswRz.jpg" alt="100-172.jpg"></p><p><img src="https://s2.loli.net/2025/02/21/nyvAFcqDRlI2sTz.jpg" alt="100-173.jpg"></p><p>回国后，有强烈的戒断反应，如梦方醒。</p><p>搭上上海的高铁，我坐在靠窗的位置，贪婪地看着每一寸风光，这里喧嚣、吵闹、和我的生活深度绑定，我在里面工作、学习、休息，糟糕的日子比高兴的日子更多，但更多是平淡，日复一日，这里成为我不时想要逃离的日常。这高铁好像一根从东京插过来的透明管子，将我和日常分隔开来，当我走下车门，我看到这根管子从末端闭合、萎缩、远去，我就知道，我回来了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;const qz&lt;br&gt;const_list = {F, M, B, Z, zd, zr, wc, qz}&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;去年底，一直在和 qz 谋划去日本的事。但临近出发，因为某明星在东瀛死掉的缘故</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="京都" scheme="https://dropsong.github.io/tags/%E4%BA%AC%E9%83%BD/"/>
    
    <category term="东京" scheme="https://dropsong.github.io/tags/%E4%B8%9C%E4%BA%AC/"/>
    
  </entry>
  
  <entry>
    <title>数据分析</title>
    <link href="https://dropsong.github.io/posts/d1c27656.html"/>
    <id>https://dropsong.github.io/posts/d1c27656.html</id>
    <published>2025-02-08T14:13:40.000Z</published>
    <updated>2025-04-09T11:18:19.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><p>数组中的轴：</p><p><img src="https://s2.loli.net/2025/02/03/24Evl6jX5MtLDaV.jpg" alt="99-1.jpg"></p><p>其实很好理解，越外面循环的 axis 值越小。</p><p>一些值得注意的特性：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">24</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">t[<span class="number">2</span>, <span class="number">4</span>] = np.nan</span><br><span class="line">t[<span class="number">3</span>, <span class="number">4</span>] = np.nan</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(np.count_nonzero(t))</span><br><span class="line"><span class="built_in">print</span>(np.nan == np.nan)</span><br><span class="line"><span class="built_in">print</span>(t!=t)</span><br><span class="line"><span class="built_in">print</span>(np.count_nonzero(t != t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 nan 换成 0</span></span><br><span class="line"><span class="comment"># t[np.isnan(t)] = 0</span></span><br><span class="line">t[t!=t] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 0.  1.  2.  3.  4.  5.]</span></span><br><span class="line"><span class="string"> [ 6.  7.  8.  9. 10. 11.]</span></span><br><span class="line"><span class="string"> [12. 13. 14. 15. nan 17.]</span></span><br><span class="line"><span class="string"> [18. 19. 20. 21. nan 23.]]</span></span><br><span class="line"><span class="string">23</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">[[False False False False False False]</span></span><br><span class="line"><span class="string"> [False False False False False False]</span></span><br><span class="line"><span class="string"> [False False False False  True False]</span></span><br><span class="line"><span class="string"> [False False False False  True False]]</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">[[ 0.  1.  2.  3.  4.  5.]</span></span><br><span class="line"><span class="string"> [ 6.  7.  8.  9. 10. 11.]</span></span><br><span class="line"><span class="string"> [12. 13. 14. 15.  0. 17.]</span></span><br><span class="line"><span class="string"> [18. 19. 20. 21.  0. 23.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>改变多维数组的形状（具体细节谷歌搜索）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.swapaxes()  <span class="comment"># 可用作二维矩阵的转置</span></span><br><span class="line">np.rollaxis()</span><br></pre></td></tr></table></figure><p>一个常用的数据集网站： <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><p>一个英国和美国 youtube 一千多个视频的点击、喜欢、不喜欢、评论数量的 csv ：<br><a href="https://www.kaggle.com/datasets/datasnaek/youtube/data">https://www.kaggle.com/datasets/datasnaek/youtube/data</a></p><p>numpy 读取数据 <code>np.loadtxt()</code>，需要关注的参数：</p><ul><li>dtype</li><li>delimiter, 分隔符</li><li>skiprows, 跳过行</li><li>usecols, 读取指定的列、索引、元组类型</li><li>unpack</li></ul><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>numpy 能够处理数值型数据，但是很多时候，除了数值之外，还有字符串、时间序列等。</p><p>Pandas 可以处理 CSV 和文本文件、Microsoft Excel、SQL 数据库和快速 HDF 5 等格式。</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>Pandas 两个主要的数据结构： Series 和 DataFrame .</p><p>Series 是一种类似于一维数组的<strong>对象</strong>，由一组数据（各种 NumPy 数据类型）及一组与之对应的索引（数据标签）组成。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser_obj = pd.Series(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(ser_obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="built_in">print</span>(ser_obj.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line"><span class="built_in">print</span>(ser_obj.index)</span><br><span class="line"><span class="built_in">print</span>(ser_obj.dtype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些简单的计算，和 numpy 类似</span></span><br><span class="line"><span class="built_in">print</span>(ser_obj * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ser_obj &gt; <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    10</span></span><br><span class="line"><span class="string">1    11</span></span><br><span class="line"><span class="string">2    12</span></span><br><span class="line"><span class="string">3    13</span></span><br><span class="line"><span class="string">4    14</span></span><br><span class="line"><span class="string">5    15</span></span><br><span class="line"><span class="string">6    16</span></span><br><span class="line"><span class="string">7    17</span></span><br><span class="line"><span class="string">8    18</span></span><br><span class="line"><span class="string">9    19</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">[10 11 12 13 14 15 16 17 18 19]</span></span><br><span class="line"><span class="string">RangeIndex(start=0, stop=10, step=1)</span></span><br><span class="line"><span class="string">int64</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">0    20</span></span><br><span class="line"><span class="string">1    22</span></span><br><span class="line"><span class="string">2    24</span></span><br><span class="line"><span class="string">3    26</span></span><br><span class="line"><span class="string">4    28</span></span><br><span class="line"><span class="string">5    30</span></span><br><span class="line"><span class="string">6    32</span></span><br><span class="line"><span class="string">7    34</span></span><br><span class="line"><span class="string">8    36</span></span><br><span class="line"><span class="string">9    38</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">0    False</span></span><br><span class="line"><span class="string">1    False</span></span><br><span class="line"><span class="string">2    False</span></span><br><span class="line"><span class="string">3    False</span></span><br><span class="line"><span class="string">4    False</span></span><br><span class="line"><span class="string">5    False</span></span><br><span class="line"><span class="string">6     True</span></span><br><span class="line"><span class="string">7     True</span></span><br><span class="line"><span class="string">8     True</span></span><br><span class="line"><span class="string">9     True</span></span><br><span class="line"><span class="string">dtype: bool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>字典也可以转换为 series, 且 key 和 value 分别对应。</p><p>索引建议用 loc, 效率更高。</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>类似于 excel.</p><p>较为灵活的日期功能：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                   A         B         C         D</span></span><br><span class="line"><span class="string">2013-01-01  0.056948  0.748347  0.158512  1.969863</span></span><br><span class="line"><span class="string">2013-01-02  0.546564  0.625012 -0.331042 -0.343768</span></span><br><span class="line"><span class="string">2013-01-03  1.013044  1.915540  0.895085  0.195473</span></span><br><span class="line"><span class="string">2013-01-04 -0.848951 -0.155895 -2.426352  0.557494</span></span><br><span class="line"><span class="string">2013-01-05  0.196745 -1.037885 -0.191365  1.632707</span></span><br><span class="line"><span class="string">2013-01-06 -0.700018 -1.033878 -0.535214  1.476812</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>pandas 中使用索引名取某一列：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df_obj[<span class="string">&#x27;A&#x27;</span>]) <span class="comment"># 取出来是 series</span></span><br></pre></td></tr></table></figure><p>DataFrame 也可以方便地增加、删除列：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># just an example</span></span><br><span class="line">df_obj[<span class="string">&#x27;G&#x27;</span>] = df_obj[<span class="string">&#x27;D&#x27;</span>] + <span class="number">4</span></span><br><span class="line"><span class="keyword">del</span>(df_obj[<span class="string">&#x27;G&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>常见的 Index 种类：</strong></p><ul><li><code>Index</code>, 普通索引，例如 a, b, c, d, e </li><li><code>Int64Index</code>, 整数索引</li><li><code>MultiIndex</code>, 层级索引</li><li><code>DatetimeIndex</code>, 时间戳类型</li></ul><p>DataFrame 也可以用 loc 来拿：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># just an example</span></span><br><span class="line"><span class="built_in">print</span>(df_obj.loc[<span class="string">&#x27;a&#x27;</span>]) <span class="comment"># 拿的是 行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个参数索引行，第二个参数索引列</span></span><br><span class="line"><span class="built_in">print</span>(df_obj.loc[<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;b&#x27;</span>])</span><br></pre></td></tr></table></figure><p>iloc 位置索引：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame, iloc 是左闭右开</span></span><br><span class="line">df_obj.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="对齐运算"><a href="#对齐运算" class="headerlink" title="对齐运算"></a>对齐运算</h2><p>对齐是数据清洗的重要过程，可以按索引对齐进行运算，如果没对齐的位置则补 NaN，最后也可以填充 NaN.</p><p>Series 的对齐运算：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s1 = pd.Series(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>), index = <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">s2 = pd.Series(<span class="built_in">range</span>(<span class="number">20</span>, <span class="number">25</span>), index = <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1+s2: &#x27;</span> )</span><br><span class="line">s3 = s1 + s2</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"><span class="built_in">print</span>(s3[<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.add(s2, fill_value=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s1+s2: </span></span><br><span class="line"><span class="string">0    30.0</span></span><br><span class="line"><span class="string">1    32.0</span></span><br><span class="line"><span class="string">2    34.0</span></span><br><span class="line"><span class="string">3    36.0</span></span><br><span class="line"><span class="string">4    38.0</span></span><br><span class="line"><span class="string">5     NaN</span></span><br><span class="line"><span class="string">6     NaN</span></span><br><span class="line"><span class="string">7     NaN</span></span><br><span class="line"><span class="string">8     NaN</span></span><br><span class="line"><span class="string">9     NaN</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">nan</span></span><br><span class="line"><span class="string">--------------------</span></span><br><span class="line"><span class="string">0    30.0</span></span><br><span class="line"><span class="string">1    32.0</span></span><br><span class="line"><span class="string">2    34.0</span></span><br><span class="line"><span class="string">3    36.0</span></span><br><span class="line"><span class="string">4    38.0</span></span><br><span class="line"><span class="string">5    15.0</span></span><br><span class="line"><span class="string">6    16.0</span></span><br><span class="line"><span class="string">7    17.0</span></span><br><span class="line"><span class="string">8    18.0</span></span><br><span class="line"><span class="string">9    19.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>DataFrame 的对齐运算：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>)), columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">3</span>)), columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1 - df2)</span><br><span class="line"><span class="built_in">print</span>(df1.sub(df2, fill_value=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     A    B   C</span></span><br><span class="line"><span class="string">0  0.0  0.0 NaN</span></span><br><span class="line"><span class="string">1  0.0  0.0 NaN</span></span><br><span class="line"><span class="string">2  NaN  NaN NaN</span></span><br><span class="line"><span class="string">     A    B    C</span></span><br><span class="line"><span class="string">0  0.0  0.0  1.0</span></span><br><span class="line"><span class="string">1  0.0  0.0  1.0</span></span><br><span class="line"><span class="string">2  1.0  1.0  1.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h2><p>关注 <code>apply</code> 和 <code>applymap</code> 相关资料。</p><p>通过 apply 将函数（例如 lambda 函数）应用到列或行上。</p><p>通过 applymap 将函数应用到每个数据上。</p><h2 id="索引排序"><a href="#索引排序" class="headerlink" title="索引排序"></a>索引排序</h2><p>排序默认使用升序排序，<code>ascending=False</code> 为降序排序。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s4 = pd.Series(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">15</span>), index = np.random.randint(<span class="number">5</span>, size=<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(s4)</span><br><span class="line"><span class="comment"># 索引排序</span></span><br><span class="line"><span class="built_in">print</span>(s4.sort_index())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3    10</span></span><br><span class="line"><span class="string">4    11</span></span><br><span class="line"><span class="string">2    12</span></span><br><span class="line"><span class="string">3    13</span></span><br><span class="line"><span class="string">4    14</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">2    12</span></span><br><span class="line"><span class="string">3    10</span></span><br><span class="line"><span class="string">3    13</span></span><br><span class="line"><span class="string">4    11</span></span><br><span class="line"><span class="string">4    14</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码可以简单地拓展到二维的情形。</p><h2 id="按值排序"><a href="#按值排序" class="headerlink" title="按值排序"></a>按值排序</h2><p><code>sort_values()</code> .</p><h2 id="处理缺失数据"><a href="#处理缺失数据" class="headerlink" title="处理缺失数据"></a>处理缺失数据</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df_data = pd.DataFrame([np.random.randn(<span class="number">3</span>), [<span class="number">1.</span>, <span class="number">2.</span>, np.nan],</span><br><span class="line">                       [np.nan, <span class="number">4.</span>, np.nan], [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]])</span><br><span class="line"><span class="built_in">print</span>(df_data.head())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_data.isnull())</span><br><span class="line"><span class="built_in">print</span>(df_data.dropna())</span><br><span class="line"><span class="built_in">print</span>(df_data.dropna(axis=<span class="number">1</span>))  <span class="comment"># 不常用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给零列的空值填为 -100</span></span><br><span class="line"><span class="built_in">print</span>(df_data.iloc[:,<span class="number">0</span>].fillna(-<span class="number">100.</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">         0         1         2</span></span><br><span class="line"><span class="string">0  0.43007  0.800597 -0.128422</span></span><br><span class="line"><span class="string">1  1.00000  2.000000       NaN</span></span><br><span class="line"><span class="string">2      NaN  4.000000       NaN</span></span><br><span class="line"><span class="string">3  1.00000  2.000000  3.000000</span></span><br><span class="line"><span class="string">       0      1      2</span></span><br><span class="line"><span class="string">0  False  False  False</span></span><br><span class="line"><span class="string">1  False  False   True</span></span><br><span class="line"><span class="string">2   True  False   True</span></span><br><span class="line"><span class="string">3  False  False  False</span></span><br><span class="line"><span class="string">         0         1         2</span></span><br><span class="line"><span class="string">0  0.43007  0.800597 -0.128422</span></span><br><span class="line"><span class="string">3  1.00000  2.000000  3.000000</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">0  0.800597</span></span><br><span class="line"><span class="string">1  2.000000</span></span><br><span class="line"><span class="string">2  4.000000</span></span><br><span class="line"><span class="string">3  2.000000</span></span><br><span class="line"><span class="string">0      0.43007</span></span><br><span class="line"><span class="string">1      1.00000</span></span><br><span class="line"><span class="string">2   -100.00000</span></span><br><span class="line"><span class="string">3      1.00000</span></span><br><span class="line"><span class="string">Name: 0, dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="层级索引（hierarchical-indexing）"><a href="#层级索引（hierarchical-indexing）" class="headerlink" title="层级索引（hierarchical indexing）"></a>层级索引（hierarchical indexing）</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">index1 = pd.MultiIndex.from_arrays([[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">                                    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]], names=[<span class="string">&#x27;cloth&#x27;</span>, <span class="string">&#x27;size&#x27;</span>])</span><br><span class="line"></span><br><span class="line">ser_obj = pd.Series(np.random.randn(<span class="number">12</span>), index=index1)</span><br><span class="line"><span class="built_in">print</span>(ser_obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ser_obj))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ser_obj.index))</span><br><span class="line"><span class="built_in">print</span>(ser_obj.index)</span><br><span class="line"><span class="built_in">print</span>(ser_obj.index.levels)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cloth  size</span></span><br><span class="line"><span class="string">a      0      -0.641816</span></span><br><span class="line"><span class="string">       1       1.454813</span></span><br><span class="line"><span class="string">       2      -0.348024</span></span><br><span class="line"><span class="string">b      0       1.984779</span></span><br><span class="line"><span class="string">       1      -1.063528</span></span><br><span class="line"><span class="string">       2       0.136670</span></span><br><span class="line"><span class="string">c      0       0.707680</span></span><br><span class="line"><span class="string">       1       1.110020</span></span><br><span class="line"><span class="string">       2      -0.358702</span></span><br><span class="line"><span class="string">d      0       1.234463</span></span><br><span class="line"><span class="string">       1       0.369818</span></span><br><span class="line"><span class="string">       2      -0.294201</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;pandas.core.indexes.multi.MultiIndex&#x27;&gt;</span></span><br><span class="line"><span class="string">MultiIndex([(&#x27;a&#x27;, 0),</span></span><br><span class="line"><span class="string">            (&#x27;a&#x27;, 1),</span></span><br><span class="line"><span class="string">            (&#x27;a&#x27;, 2),</span></span><br><span class="line"><span class="string">            (&#x27;b&#x27;, 0),</span></span><br><span class="line"><span class="string">            (&#x27;b&#x27;, 1),</span></span><br><span class="line"><span class="string">            (&#x27;b&#x27;, 2),</span></span><br><span class="line"><span class="string">            (&#x27;c&#x27;, 0),</span></span><br><span class="line"><span class="string">            (&#x27;c&#x27;, 1),</span></span><br><span class="line"><span class="string">            (&#x27;c&#x27;, 2),</span></span><br><span class="line"><span class="string">            (&#x27;d&#x27;, 0),</span></span><br><span class="line"><span class="string">            (&#x27;d&#x27;, 1),</span></span><br><span class="line"><span class="string">            (&#x27;d&#x27;, 2)],</span></span><br><span class="line"><span class="string">           names=[&#x27;cloth&#x27;, &#x27;size&#x27;])</span></span><br><span class="line"><span class="string">[[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], [0, 1, 2]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>层级索引可以交换层级。</p><p><code>unstack</code> 操作：</p><p><img src="https://s2.loli.net/2025/03/25/wFq5LrBn8Qf6C43.png" alt="99-2.png"></p><h2 id="统计计算和描述"><a href="#统计计算和描述" class="headerlink" title="统计计算和描述"></a>统计计算和描述</h2><p>sum, mean, max, min, describe:</p><p><img src="https://s2.loli.net/2025/03/26/zpavwlind4YVuTX.png" alt="99-3.png"></p><p>describe 可以用于观察数据分布，是否有异常值等。</p><h2 id="其他-pandas-的操作"><a href="#其他-pandas-的操作" class="headerlink" title="其他 pandas 的操作"></a>其他 pandas 的操作</h2><p><strong>下面将使用 Jupyter Notebook</strong> .</p><p>在 Debian 12 上安装 ipykernel :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-ipykernel</span><br></pre></td></tr></table></figure><p>建议使用虚拟环境管理所有数据分析需要的包。</p><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:600px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/pandas_basic/pandas_basic.ipynb" ></iframe><h1 id="电商数据分析"><a href="#电商数据分析" class="headerlink" title="电商数据分析"></a>电商数据分析</h1><p>一般的数据分析流程：</p><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:600px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B.ipynb" ></iframe><p>电商平台数据分析：</p><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:600px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.ipynb" ></iframe><h1 id="淘宝用户行为模式分析"><a href="#淘宝用户行为模式分析" class="headerlink" title="淘宝用户行为模式分析"></a>淘宝用户行为模式分析</h1><iframe frameBorder="0" width="100%" height="100%" style="min-width: 300px; min-height:600px" src="https://nbviewer.org/github/dropsong/ipynb-examples/blob/master/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/%E6%B7%98%E5%AE%9D%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90.ipynb" ></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;numpy&quot;&gt;&lt;a href=&quot;#numpy&quot; class=&quot;headerlink&quot; title=&quot;numpy&quot;&gt;&lt;/a&gt;numpy&lt;/h1&gt;&lt;p&gt;数组中的轴：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2025/02/03/24E</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="数据分析" scheme="https://dropsong.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析业务</title>
    <link href="https://dropsong.github.io/posts/9d28aa01.html"/>
    <id>https://dropsong.github.io/posts/9d28aa01.html</id>
    <published>2025-01-18T16:03:44.000Z</published>
    <updated>2025-02-08T14:16:38.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分析概述"><a href="#数据分析概述" class="headerlink" title="数据分析概述"></a>数据分析概述</h1><p>文章分享：<a href="http://mp.weixin.qq.com/s?__biz=MzAwNjM1ODkxNQ==&amp;mid=2650893225&amp;idx=1&amp;sn=3b192e4702af06038da886302363557a&amp;chksm=80fb5945b78cd05318c0bc35e4c382904a0120d8c0140251774b703259f722ed445d4d575dc9&amp;mpshare=1&amp;scene=23&amp;srcid=08286ptjP2MEHifQbXAhyaBc&amp;sharer_sharetime=1598618305575&amp;sharer_shareid=5d3ffbb35ebafe08f3d5081eefd49acf#rd">一份来自贾扬清的AI青年修炼指南：不存在算法工程师、调参侠没有市场</a></p><p>大致流程：</p><ol><li>原始数据收集<ul><li>数据埋点。收集用户在网页端，APP，小程序等终端的各种数据。</li><li>业务数据</li><li>外部数据</li></ul></li><li>数据加工处理<ul><li>将收集的数据转换成可理解、可量化、可观察的业务指标</li></ul></li><li>数据可视化</li><li>数据决策和执行</li><li>数据产品<ul><li>将策略制作成数据应用和产品，开始自动化和系统化运营。</li></ul></li><li>数据战略<ul><li>积累了大量数据，大量模型，大量数据应用</li><li>不只是数据分析，可以将数据变现</li></ul></li></ol><p>三类岗位:</p><ul><li>业务线 数据分析</li><li>研发线 数据仓库<ul><li>数据仓库也是普通的数据库（例如 mysql），里面存的数据是为数据分析人员服务的，不对接用户。举例来说，里面可以存储用户行为路径、每日新增用户数等指标。</li></ul></li><li>算法线 数据挖掘<ul><li>相对于数据分析，需要建模，模型的目的是做预测。</li></ul></li></ul><p>行业黑话：</p><ul><li><a href="https://zh.wikipedia.org/zh-cn/ETL">ETL</a>：提取转换加载（英语：Extract, transform, load，简称ETL），用来描述将资料从来源端经过抽取、转置、加载至目的端的过程。ETL一词较常用在数据仓库，但其对象并不限于数据仓库。</li><li>DW 数据仓库（data warehouse）</li><li>CRM 客户关系管理 销售</li><li>CMS（Content Management System）”内容管理系统”</li></ul><p>理解业务从理解商业模式开始：</p><p><img src="https://s2.loli.net/2025/01/18/xoXQV9TO2MLuqFm.png" alt="98-1.png"></p><h1 id="指标体系"><a href="#指标体系" class="headerlink" title="指标体系"></a>指标体系</h1><h2 id="数据指标概念"><a href="#数据指标概念" class="headerlink" title="数据指标概念"></a>数据指标概念</h2><p>场景 1，描述刚上线社区产品最近表现</p><ol><li>日活每天都在涨，新增用户也很多。</li><li>日活按 IMEI 是在涨，但是注册用户没有很多 》新增注册转化只有 20%，说明没有促使用户注册的动机。</li></ol><p>场景 2，产品上线一段时间，领导想知道是否要推广产品</p><ol><li>最近日活平稳，新增用户最初没那么多了。</li><li>虽然日活平稳，但是用户活跃程度很高（人均发帖，好友关系）比上个月增长了 30%，新用户次日留存提升。（可以推广）</li></ol><h2 id="定义及常用数据指标"><a href="#定义及常用数据指标" class="headerlink" title="定义及常用数据指标"></a>定义及常用数据指标</h2><p>数据指标是<strong>对当前业务有参考价值</strong>的<strong>统计</strong>数据。</p><p>常用的数据指标：</p><ul><li>用户数据：谁</li><li>行为数据：干了什么</li><li>业务数据：产生了什么结果</li></ul><p><strong>用户数据：</strong></p><ul><li>存量: DAU（日活）、MAU（月活）</li><li>增量: 新增用户</li><li>健康程度: 留存率</li><li>从哪儿来: 渠道来源<ul><li>搜索引擎推广 SEO</li><li>Rom 推广</li><li>app 商店</li><li>手机厂商预装</li><li>其它产品挂下载链接</li></ul></li></ul><p><strong>行为数据：</strong></p><ul><li>次数、频率，PV, UV, 访问深度</li><li>关键路径走了多远, 转化率</li><li>行为做了多久, 时长</li><li>质量, 弹出率(跳出率，进去后立即出来)</li></ul><p><img src="https://s2.loli.net/2025/01/18/gJnIrVshEYWAR4o.png" alt="98-2.png" title="关键路径"></p><p><strong>业务数据：</strong></p><ul><li>总量 GMV 访问时长</li><li>ARPU(Average Revenue Per User)</li><li>ARPPU(Average Revenue Per Paying User)</li><li>人数 付费人数 播放人数</li><li>健康程度 付费率 付费频次 观看率</li><li>被消费对象 SKU 被消费内容</li></ul><h2 id="数据指标详解"><a href="#数据指标详解" class="headerlink" title="数据指标详解"></a>数据指标详解</h2><p><strong>DAU、MAU</strong></p><ul><li>Daily<ul><li>如何理解 Daily</li><li>出海产品跨时区</li></ul></li><li>Monthly<ul><li>怎样才算一个有效的月活呢？视情况而定。某用户一个月只活跃了一次，我们可能认为将其纳入月活会降低数据的可参考性，可以规定一个用户月活跃 7 次以上，才纳入统计。</li></ul></li><li>活跃（怎么才算一次有效的活跃？）<ol><li>数据统计系统的定义<ul><li>基于事件上报：有事件上报 》该用户活跃</li><li>预制报表的统计系统（ e.g. 友盟…）都是基于事件上报进行统计<ul><li>web 端页面加载成功</li><li>app 端按钮点击</li></ul></li></ul></li><li>业务定义，用户执行了关键事件<ul><li>日活事件列表（访问首页/访问商品详情页/访问抽奖页）</li></ul></li></ol></li><li>用户<ul><li>用户通过多台设备访问产品</li><li>认人<ul><li>给每位注册用户一个 UID</li><li>只适合强登录/注册产品，未登录用户会被漏掉</li></ul></li><li>认设备<ul><li>IMEI Cookie 中随机字符串</li><li>无法对应设备背后的用户</li></ul></li><li>产品是否强制登录<ul><li>人+单独指标记录设备</li></ul></li><li>不登录用户是否有价值<ul><li>没价值（人+单独指标记录设备）</li><li>有价值（设备）</li></ul></li></ul></li></ul><p>如何理解“新增用户”：</p><ul><li>渠道商 点了下载就算</li><li>运营 下载成功才算，一个用户一天最多算一次</li><li>产品 按启动量算，没打开不算</li><li>研发 注册了才叫新增用户，表里得能查到</li></ul><p>用户留存：7 日留存算法、…，具体细节会根据情况变动。</p><p><strong>为什么要看留存？</strong> 了解某个渠道的质量。</p><h2 id="如何选择指标"><a href="#如何选择指标" class="headerlink" title="如何选择指标"></a>如何选择指标</h2><p>从最终目的出发：</p><ol><li>梳理业务模块</li><li>判断业务模块类型</li><li>根据业务模块类型选择数据指标</li></ol><p>如何梳理业务模块？</p><ul><li><strong>目的</strong>，比如我要卖货</li><li><strong>实现目的的方法</strong>，通过文章来卖货（如何搞大/搞频繁(手段)）</li><li><strong>方法需要的工具</strong>，通过社区创作文章来卖货，我提供一个制作精美图文的工具</li><li><strong>实现方法的途径</strong></li></ul><p>例子：</p><ul><li>头条：自媒体高效创作<strong>资讯</strong>换取<strong>广告收入</strong></li><li>社区带货：社区创作<strong>软文卖货</strong></li><li>教育：为学员提供便捷的学习系统高效<strong>学习课程</strong>和分为<strong>良好的社群服务</strong>换取学费</li></ul><p><strong>业务模块：</strong></p><p><img src="https://s2.loli.net/2025/01/20/GehRrFlqYZ9uC5D.png" alt="98-3.png"></p><p>通过四象限去分析上面 3 个场景，我们可以根据业务模块选择数据指标：</p><ul><li>工具模块：效率</li><li>内容浏览模块：质和量</li><li>交易模块：转化率</li><li>社区模块：活跃</li></ul><h3 id="工具类模块关心的指标"><a href="#工具类模块关心的指标" class="headerlink" title="工具类模块关心的指标"></a>工具类模块关心的指标</h3><div class="table-container"><table><thead><tr><th></th><th>反映维度</th><th>场景</th><th>结果</th></tr></thead><tbody><tr><td>使用量</td><td>累积量，用户投入程度</td><td>拍照，笔记</td><td>用户粘性强</td></tr><tr><td>目标达成率</td><td>是否正常运转</td><td>支付，搜索</td><td>满意度高</td></tr><tr><td>频次</td><td>用户是否养成习惯</td><td>闹钟</td><td>养成固定习惯</td></tr></tbody></table></div><p><strong>案例</strong>：QQ 音乐的歌词海报功能，让其分享朋友圈</p><ul><li>使用量：进入歌词创建环节的数量</li><li>目标达成率：海报生成数量</li><li>频次：功能使用频次</li></ul><h3 id="交易类模块关心的指标"><a href="#交易类模块关心的指标" class="headerlink" title="交易类模块关心的指标"></a>交易类模块关心的指标</h3><div class="table-container"><table><thead><tr><th></th><th>指标反映维度</th><th>场景</th><th>结果</th></tr></thead><tbody><tr><td>详情页转化率</td><td>核心场景转化效率</td><td>电商</td><td>更容易卖</td></tr><tr><td>金额</td><td>总交易规模</td><td>电商，知识付费</td><td>卖更多</td></tr><tr><td>客单价</td><td>单个用户价值</td><td>奢侈品海淘</td><td>卖更高价</td></tr><tr><td>复购率</td><td>收入的持久程度</td><td>订阅式购物</td><td>卖更多次</td></tr></tbody></table></div><h3 id="内容浏览类模块关心的指标"><a href="#内容浏览类模块关心的指标" class="headerlink" title="内容浏览类模块关心的指标"></a>内容浏览类模块关心的指标</h3><div class="table-container"><table><thead><tr><th></th><th>指标反映维度</th><th>场景</th><th>结果</th></tr></thead><tbody><tr><td>浏览数</td><td>累积量</td><td>头条类</td><td>有多少人阅读</td></tr><tr><td>浏览广度</td><td>覆盖内容库存情况</td><td>视频网站多个频道</td><td>库存利用率高</td></tr><tr><td>浏览时长</td><td>占据用户多少时间</td><td>快手，抖音</td><td>减少竞品使用时间</td></tr><tr><td>内容互动</td><td>用户对内容反映（弹幕）</td><td>B 站</td><td>提高用户粘性</td></tr></tbody></table></div><p><strong>案例</strong>，微信看一看模块：</p><ul><li>浏览数</li><li>浏览广度 覆盖的媒体数量</li><li>浏览时长</li><li>内容互动 点赞/评论/转发数量</li></ul><h3 id="社区社交类模块关心的指标"><a href="#社区社交类模块关心的指标" class="headerlink" title="社区社交类模块关心的指标"></a>社区社交类模块关心的指标</h3><div class="table-container"><table><thead><tr><th></th><th>指标反映维度</th><th>场景</th><th>结果</th></tr></thead><tbody><tr><td>发布量</td><td>用户创作内容的数量</td><td>贴吧</td><td>更多的话题源头</td></tr><tr><td>互动量</td><td>用户与用户之间互动的次数</td><td>微博</td><td>社区更有活力</td></tr><tr><td>关系密度</td><td>用户与用户之间的关系</td><td>微信</td><td>更可能长期留存</td></tr></tbody></table></div><p><strong>案例</strong>，脉脉 职言板块：</p><ul><li>发布量 发布的职言数量</li><li>互动量 点赞评论转发数量</li><li>关系密度 发布的职言涉及到的公司数量（因为是匿名发言）</li></ul><h1 id="如何选择数据工具"><a href="#如何选择数据工具" class="headerlink" title="如何选择数据工具"></a>如何选择数据工具</h1><p>举个例子：</p><ul><li>懂球帝: 足球迷必备神器 》用户导向</li><li>百度贴吧: 全球最大中文兴趣社区 贴吧最初来贡献内容 》内容导向</li><li>规模化电商流量快速变现 》流量导向</li><li>寺库奢侈品: 给你全世界的美好 》用户导向</li></ul><p>对比：</p><ul><li>爱奇艺延禧攻略独播，把具体内容放在截图 》内容/流量导向</li><li>哔哩哔哩，弹幕番剧直播高清视频 》用户导向</li></ul><p>根据公司阶段划分：</p><p><img src="https://s2.loli.net/2025/01/21/kB7Gopjz8v2ubEw.jpg" alt="98-4.jpg"></p><center><p style="color:#FF0000";>---- 例子：共享充电宝 start ----</p></center><p>老板关注的问题：</p><ul><li>大家会不会为这个事情买单?</li><li>如何核验</li></ul><p>每天有多少人经过这个充电宝放置点：</p><ul><li>多少人扫码了</li><li>多少人借用了充电宝</li></ul><p><strong>解决方案：计数</strong></p><p>扫码了，但是没有借用充电宝的人，询问其动机。</p><p>单个充电宝放置点的运转效率有没有可能提升？</p><ul><li>换一个地方会不会更好？</li></ul><p>面临竞争,用户忠诚度很重要。</p><ul><li><strong>随机</strong>地发一些优惠。<ul><li>如果是超市的话，可以每天都有部分商品优惠。这样可以期望顾客在冲着优惠商品的同时，顺手买一些没有优惠的商品。</li></ul></li></ul><p>周转效率？</p><ul><li>一个放置点没有充电宝了，可以为将充电宝放在该点位的用户提供优惠。</li></ul><center><p style="color:#FF0000";>---- 例子：共享充电宝 end ----</p></center><p>计数阶段：</p><ul><li>通过脚本与代码统计日志</li><li>通过 BI 工具进行基本的分析</li><li>通过 awk 工具去搞，外加 uniq 去重，wc 去统计</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $1&#125;&#x27; access.log|sort|uniq|wc -l</span><br><span class="line"></span><br><span class="line"># 每一行数据以空格隔开，第一个就是 $1 ,第二个就是 $2，...</span><br></pre></td></tr></table></figure><p>linux 查看一个文件有多少行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l 文件名</span><br></pre></td></tr></table></figure><p>想要选取其中一部分，放到一个新的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -想要的行数 文件名 &gt;新文件名</span><br></pre></td></tr></table></figure><p>可以使用 goaccess 这款工具简单的来统计（若链接无法访问可去 archive.org ）：<br><a href="https://blog.csdn.net/weixin_43599336/article/details/86533550">https://blog.csdn.net/weixin_43599336/article/details/86533550</a></p><p>一个百度统计的 demo :<br><a href="https://tongji.baidu.com/web/demo/overview/index?siteId=5503017">https://tongji.baidu.com/web/demo/overview/index?siteId=5503017</a></p><p><strong>用户导向的工具</strong>要关注的问题：</p><ul><li>用户来了干什么?</li><li>用户还会不会再来?</li><li>用户在哪流失了?</li><li>用户都是啥样的?</li></ul><p>Mixpanel 工具：埋点代码，生成图形。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/107060418">https://zhuanlan.zhihu.com/p/107060418</a></li></ul><p>Inspectlet 工具：通过录制屏幕的行为，还原用户的行为轨迹。</p><p><strong>业务导向的工具：</strong></p><p><img src="https://s2.loli.net/2025/01/22/1lGvHjB8cKCdfhJ.png" alt="98-5.png"></p><p>神策数据：<br><a href="https://www.sensorsdata.cn/demo/demo.html">https://www.sensorsdata.cn/demo/demo.html</a></p><h1 id="数据分析方法"><a href="#数据分析方法" class="headerlink" title="数据分析方法"></a>数据分析方法</h1><p>数据分析的价值</p><ul><li>新购的这一批视频到底有没有价值</li><li>浏览到消费的转化率一直不超过 1%，产品到底该优化哪儿</li><li>上个预装渠道进来的量，表现如何？</li><li>按销售额来看这个月绩效该怎么分配？</li><li>精准广告投放该怎么选择对象人群？</li><li>该引入哪些新的商品品种？</li></ul><p>数据分析方法：</p><ul><li>对比分析 多维拆解 漏斗 分布情况<br><a href="https://cloud.tencent.com/developer/news/604330">https://cloud.tencent.com/developer/news/604330</a></li><li>用户留存 用户画像<br><a href="https://www.zhihu.com/question/19853605">https://www.zhihu.com/question/19853605</a></li><li>归因查找 路径挖掘 行为序列</li></ul><h2 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h2><p>对比分析比什么：</p><ol><li>绝对值<ul><li>本身具备价值的数字</li><li>销售金额</li><li>阅读数 微信公众号的 10 万+</li></ul></li><li>比例值<ul><li>在具体环境中看比例，才具备对比价值</li><li>活跃占比</li><li>注册转化率</li></ul></li></ol><p><strong>问题：绝对值，不易得知内在问题；比例值，易收到极端值影响 2%~4%</strong></p><p>怎么比？</p><ul><li>环比<ul><li>例子：7 号, 6 号, 5 号</li><li>例子：7 月, 6 月, 5 月</li><li>总结：对短期内具备连续性的数据进行分析</li></ul></li><li>同比<ul><li>例子：今年国庆销售额, 去年国庆销售额</li><li>观察更为长期的数据集</li><li>观察的时间周期里有较多干扰，希望某种程度上消除这些干扰</li></ul></li></ul><p>和谁比？</p><ul><li>和自己比<ul><li>从时间维度 环比|同比</li><li>从不同业务线</li><li>从过往经验估计</li></ul></li><li>和同行业比<ul><li>是自身因素还是行业趋势</li></ul></li></ul><h2 id="多维拆解"><a href="#多维拆解" class="headerlink" title="多维拆解"></a>多维拆解</h2><p>公司做了微博大 V 推广，想看情况，数据怎么样？</p><p>APP 启动：</p><ul><li>按设备<ul><li>iPhone, 美图手机比较多，符合产品定位</li></ul></li><li>按来源<ul><li>用户因 PUSH 下发进入 APP 比较多</li></ul></li><li>按城市等级查看<ul><li>发现一线城市用户比较多<ul><li>原因：运营能力有限只有北上广深有推送，因此打开几率大</li></ul></li></ul></li><li>按新老用户查看<ul><li>日活量整体变化不大，老用户占比下降，新用户占比上升，留不住用户</li></ul></li></ul><p>结论：目前推广群体没问题，因为用户打开 APP 的来自推送，而运营力量不足，只在北上广深有运营，进行推送，其它城市没有，但微博大 V 推广是全国覆盖，其它城市流量被浪费了。</p><p><strong>数据分析本质，用不同的视角去拆分、观察同样一个数据指标。</strong></p><p>支付流程拆解：</p><p><img src="https://s2.loli.net/2025/01/22/TVD7bl8PrnahqFY.png" alt="98-6.png" title="注册 下单 支付"></p><p>从上图可以看出，B 渠道比较优质，应该投更多的钱。</p><p>一些其他的漏斗：</p><p><img src="https://s2.loli.net/2025/01/22/GRXYKCutLl1gzJr.jpg" alt="98-7.jpg"></p><center><p style="color:#FF0000";>---- 案例：流量异常变动 start ----</p></center><p>动机：</p><ul><li>跌：采取动作，减缓趋势。</li><li>涨：弄清原因，并放大。</li></ul><p>最近销量突然跌了 10%，是友商搞了个活动吗？是促销活动结束了么？是新上的商品搜索结果页的变动导致的？</p><p>问题严重么？</p><ol><li><strong>假设</strong>：如果是个例，往期应该没这么大跌幅</li><li><strong>证明</strong>：周同比、月同比，确实都没有如此跌幅</li><li><strong>结论</strong>：确实是个问题</li></ol><p>是不是服务挂了？</p><ol><li><strong>假设</strong>：如果是技术问题，应该存在“断崖式下跌”，且修复后会回归正常</li><li><strong>证明</strong>：按小时查看，符合平时流量规律</li></ol><p>是不是渠道问题？</p><ol><li><strong>假设</strong>：如果是渠道问题，应该存在某个渠道远低于平时的流量</li><li><strong>证明</strong>：按渠道维度拆解，百度渠道明显下降将近 20%</li><li><strong>结论</strong>：有问题，需进一步查询</li></ol><p>是不是哪里缺货？</p><ol><li><strong>假设</strong>：如果是发货问题，应该存在某个地区远低于平时的销量</li><li><strong>证明</strong>：按地域维度拆解流量， 陕西、浙江低了不少</li></ol><p>跟市场沟通：<br>陕西和浙江的关键词投放计划在 28 号那天被消耗完了，29 号上班后才重新充值投放新的计划。</p><center><p style="color:#FF0000";>---- 案例：流量异常变动 end ----</p></center><p>活动影响</p><ul><li>查对应活动页面及对应动作的数据波动，关注活动是否有地域属性</li></ul><p>版本发布</p><ul><li>将版本号作为维度，区分查看</li></ul><p>渠道投放</p><ul><li>查看渠道来源变化</li></ul><p>服务故障</p><ul><li>明确故障时间，按时间为维度进行小时或者分钟级别的拆分</li></ul><h2 id="漏斗分析"><a href="#漏斗分析" class="headerlink" title="漏斗分析"></a>漏斗分析</h2><p>漏斗观察:</p><p><img src="https://s2.loli.net/2025/01/22/ZLSGRfzXNds1eiF.png" alt="98-8.png"></p><p>适用场景</p><ul><li>适用：有明确的业务流程和业务目标</li><li>不太适用：没有明确的流程，跳转关系复杂</li></ul><p>漏斗是有时间窗口的</p><ul><li><strong>按周：</strong> 业务本身复杂，决策成本高，多日完成<ul><li>理财，往往是一周或者半个月</li></ul></li><li><strong>按月：</strong> 决策周期更长<ul><li>装修、买房</li></ul></li><li>周期太长：包含了太多无关信息</li><li>周期太短：扔掉了很多有用的信息</li></ul><p><strong>漏斗有严格顺序</strong></p><ul><li>首页 -&gt; 搜索 -&gt; 商品详情 -&gt; 支付 -&gt; 支付成功</li><li>不能跳</li><li>同时我们从分类、搜索、推荐位都可以进入商品详情，这也是要考虑的</li></ul><p>漏斗的计数单位可以是<strong>用户</strong>，也可以是事件。</p><ul><li>课程的负责人，关心每天有多少人会选择我们，并最终付费。关心的是用户。</li><li>设计 PM 关心为什么有人第一次访问页面没有做出选择，也关心选择课程后为何有人没有支付。关心事件。</li></ul><p>常见渠道划分方式：</p><ul><li>具体的流量实体： 百度、头条、线下</li><li>媒介： SEO、自然搜索</li><li>其他参数：营销活动名称、广告关键词</li></ul><p>作为渠道，什么样的排序规则才是合理的？<br>要不停变化，确保使用者不知道自己的规则。否则会被恶意刷排名。</p><h2 id="留存分析"><a href="#留存分析" class="headerlink" title="留存分析"></a>留存分析</h2><p>验证产品长期价值可以看月留存。</p><p>将某一时间段的用户 ID 与另一时间段的用户 ID 做交叉去重：</p><p><img src="https://s2.loli.net/2025/01/22/Q4UntchkEV59fA3.png" alt="98-9.png"></p><p>上图可以看出随着产品版本不断的优化，月留存是不断增长的。</p><p>一般的计算方式，<strong>看大盘可能不准</strong> ：</p><ul><li>产品、运营、技术、市场每个环节可能都会对留存造成影响</li><li>比如搞活动，引入了一个低质量的渠道，造成留存大跌，因为低质量渠道进来的都是垃圾用户，因此需要看精准留存</li></ul><p><strong>精准留存：</strong></p><ul><li>过滤进行过指定行为的用户 ID，再计算</li><li>将用户分为不同的群体后，观察之前留存的区别<ul><li>比如一个游戏产品，服务器会分区，不同区的留存不同。是不是因为有的区运营得不错？可以把运营得不错的区的运营手法，推广到其他区。</li></ul></li></ul><p>留存分析适用场景：</p><ul><li>评估产品功能粘性</li><li>验证产品长期价值</li></ul><h2 id="案例-1（付费漫画）"><a href="#案例-1（付费漫画）" class="headerlink" title="案例 1（付费漫画）"></a>案例 1（付费漫画）</h2><p>某漫画产品，有一 VIP 会员功能，可看付费漫画。不是 VIP 不能看最新的连载，要等一周才能解锁观看。最近，该产品上线了一批新的会员漫画。公司想要验证这批会员漫画对会员付费功能的价值。</p><p><strong>难点:</strong> 单纯的数字相关并不说明问题，不能说最近付费涨了就是这批漫画的功劳，要将具体的数字带入业务流程中检验。</p><p>漏斗分析：</p><p><img src="https://s2.loli.net/2025/01/22/3ueX9twTyFsb5Mx.png" alt="98-10.png"></p><p>把用户分为两类，有哪些是付费时看过 VIP 漫画的，有哪些是付费时没看过 VIP 漫画的。进行对比，可以发现看过这批付费漫画后，然后进行会员付费的比例更高。</p><p>注意：借助漏斗分析对比（转化关系明确时），时间太久不合适。</p><h2 id="案例-2（主播）"><a href="#案例-2（主播）" class="headerlink" title="案例 2（主播）"></a>案例 2（主播）</h2><p>以用户留存衡量某一主播对产品价值的影响（分群体）。</p><p><strong>难点:</strong><br>某些功能不能带来直接的商业价值，但希望它能长期留住用户。<br>留存是一个特别复杂的问题，谁都可能影响它。</p><p>因此需要看精准留存。</p><p><img src="https://s2.loli.net/2025/01/22/lHsGutV5DOYUv7W.png" alt="98-11.png"></p><h1 id="用户画像"><a href="#用户画像" class="headerlink" title="用户画像"></a>用户画像</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="https://s2.loli.net/2025/01/23/JhZpPUH3oONiMqD.png" alt="98-12.png" title="合法 非法"></p><p>用户画像：<br>对用户<strong>各类特征</strong>进行标识，给用户贴上<strong>各类标签</strong>，通过这些标签将用户分为<strong>不同的群体</strong>，以便对不同的群体分别进行<strong>产品 / 运营动作</strong>。</p><p>标签都有啥？</p><ul><li>基础属性：年龄、性别、生日、星座、教育、身高、收入、职业</li><li>社会关系：婚姻、有无小孩、有无女孩、家有老人、性取向</li><li>行为特征<ul><li>基本行为：注册时间、来源渠道</li><li>业务行为：买过特惠商品、曾获优秀学员</li></ul></li></ul><p><strong>标签怎么来？</strong></p><ol><li>用户直接填写</li><li>推测</li></ol><p>何时需要用户画像？</p><ul><li>做活动（防止流量浪费）</li><li>简单的个性化运营，就算不是千人千面，也需要 3 人 3 面</li><li>业务分析（借助用户画像的精准分析）</li><li>用户研究</li></ul><p><strong>如何推测：</strong></p><p><img src="https://s2.loli.net/2025/01/23/8MDigayzqNHkVpJ.png" alt="98-13.png"></p><p>还可以<strong>通过用户身边的人推断</strong> ：</p><ul><li>距离相近<ul><li>某些属性，周围的人都具备，用户大概率也具备，例如大学区域</li></ul></li><li>行为相似<ul><li>通过协同过滤，找到行为相似的目标用户，对用户进行分群</li></ul></li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>很多产品经理觉的我公司很小啊，不需要做数据分析、用户画像吧？其实不是的。一个小公司其实几十万的 DAU 就非常不错，但是市场上能够提供的流量是非常大的。</p><p><img src="https://s2.loli.net/2025/01/23/37glSmQE5ChFPw1.png" alt="98-14.png"></p><p><strong>真正的用户</strong> ：</p><ul><li>高留存</li><li>核心行为频次、完成率高</li></ul><p>现在比较好的广告平台，比如谷歌、腾讯的广点通都是可以精准的选择用户属性的，如下图所示：</p><p><img src="https://s2.loli.net/2025/01/23/k8dLxbZjXlJU7cn.png" alt="98-15.png"></p><h2 id="运营资源盘活"><a href="#运营资源盘活" class="headerlink" title="运营资源盘活"></a>运营资源盘活</h2><p><strong>【问题】整个公司的内部营销资源存在上限</strong></p><p>运营资源盘活：常规做法是出台一套运营资源的使用规则。<br>比如一天最多只能推 3 条、同一个类型的营销在一周(一月)内不得重复推送等。</p><p><strong>精细化的用户分群运营</strong>，既能提升整个公司的可用资源，也能提升被推送用户的体验（没人希望自己手机的推送消息划不完吧）。</p><p>有的公司会搞一个排期表：</p><p><img src="https://s2.loli.net/2025/01/23/Ez83VrAqXxH26Ul.png" alt="98-16.png"></p><p><strong>【另一个问题】：需要在「千人一面」和「千人千面」之间找到 ROI 的平衡。</strong></p><p>理想情况：每个标签都去做不同的推送内容。<br>实际：运营力量有限。哪怕将用户精确地分成一千个群体，运营团队也很难每天都去编一千条不同的推送文案和页面。</p><p>「千人一面」整个公司的内部营销资源存在上限<br>「千人十面」往往就能解决 80% 的问题，对应 7～8 个标签足矣<br>「千人千面」人力运营往往难以企及，自动化后或许可以</p><p><img src="https://s2.loli.net/2025/01/23/C4ArzDSI1oHUGl5.png" alt="98-17.png"></p><h1 id="归因查找"><a href="#归因查找" class="headerlink" title="归因查找"></a>归因查找</h1><p>很多时候，用户的操作行为不会像漏斗分析那样，经过层层过滤，最后到达某一行为。这个时候用漏斗分析不适合。</p><p>归因查找：找出事件发生的「主要原因」。</p><p>可以使用神策数据之类的产品。</p><p><img src="https://s2.loli.net/2025/01/23/Dk9UQ7YVIshpNM2.png" alt="98-18.png"></p><p>对业务中明确的业务目标(购买、留资料、充值等)归因即可：</p><ol><li>将目标的达成拆分到各个模块，方便统计各模块的贡献（这其实也是在给各团队分 KPI）</li><li>获悉当前指标达成的主要因素，获得如何提升业务指标的洞见</li></ol><p><strong>末次归因</strong>：转化路径短，且事件间关联性强的场景（添加好友是因为什么）</p><ul><li>比如交友软件，通过漂流瓶，附件的人，摇一摇，或者随机推荐好友</li></ul><p><strong>递减归因</strong>：转化路径长，非目标事件差异不大，没有完全主导的</p><ul><li>假如有一个时间管理工具，某用户买了 VIP 后没有广告了，不能简单看这一刻和刚刚用的功能有什么关系，我们可以归为 6，3，1 比例(示例)。</li></ul><p><strong>首次归因</strong>：强流量依赖的业务场景，拉人比后续所有事都重要。</p><p><img src="https://s2.loli.net/2025/01/23/IHwlgDR7tpuC16v.png" alt="98-19.png"></p><h1 id="路径挖掘"><a href="#路径挖掘" class="headerlink" title="路径挖掘"></a>路径挖掘</h1><p>场景一，有明确的起始场景：</p><p><img src="https://s2.loli.net/2025/01/23/qWSLwhxZsNORoHQ.png" alt="98-20.png"></p><p>场景二，有明确的结果目标：</p><p><img src="https://s2.loli.net/2025/01/23/egAKLJ2mrGyFnqd.png" alt="98-21.png"></p><p>场景二的例子：<br>某在线职业培训平台，结束事件是：注册完成。我们想知道用户都经历了什么，这时我们需要把路径倒过来看，可以看出大部分的流量从【开始注册】来的，然后再往前看一步，发现【开始注册】的流量来自【登录】页面（登录页面有注册功能）和一些公开课。我们可以发现很多用户是从免费的公开课注册成功的。由此可以看出，大部分的用户都是被免费的公开课吸引，毕竟公开课不需要支付成本。</p><h1 id="行为序列"><a href="#行为序列" class="headerlink" title="行为序列"></a>行为序列</h1><p>运作原理：将单个用户的所有行为以时间线的形式进行排列。</p><p>适用场景：观察掩盖在统计信息下的更细致信息，还原用户具体的使用场景，同时还能通过观察具体的行为特征，找到提升产品价值的机会点。</p><p>举个例子：<br>运用用户行为序列分析法查看某共享单车 APP 的单个用户行为，通过查看我们发现，这个用户不断的在解锁我们的活动单车和锁定活动单车，并且解锁和锁定的间隔时间非常短，只有几十秒。每天有四五次这种行为，这种行为肯定是不正常的，我们再筛选一部分行为序列查看详情，我们可以发现，两次解锁的时间间隔只有 11 分钟，但是这两个铁地站的距离为 7.2KM，这是正常操作下无法实现的，这里只是简单的一个例子，单个用户的行为序列能让我们发现很多细致的信息，在这就不一一列举了。</p><p>辅助决策：</p><ul><li>通过用户画像、用户行为序列分析<strong>辅助我们在产品设计时做决策</strong>。</li><li><strong>观察已有的</strong>用户的行为序列，将<strong>新设计的流程或者策略</strong>套进去看是否成立。</li></ul><p>行为序列还可以用来防止一些恶意行为：</p><ul><li>刷量</li><li>薅羊毛</li><li>spam</li></ul><p><img src="https://s2.loli.net/2025/01/23/1YaL9ifKAJOntHl.png" alt="98-22.png"></p><p>机刷机器是位置不动的，坐标固定的；人肉刷可以用身份证，固定的行为操作路径；薅羊毛的，限制羊毛用途，比如发的红包，只能打赏主播，不能干别的。</p><p><img src="https://s2.loli.net/2025/01/23/o3BTSEJ7NcrCklM.png" alt="98-23.png"></p><h1 id="案例-专题活动效果分析"><a href="#案例-专题活动效果分析" class="headerlink" title="案例-专题活动效果分析"></a>案例-专题活动效果分析</h1><p>一个拉新活动，希望看到活动的效果数据。</p><p>目前活动对日活的帮助？活动带来的用户粘性是否高？哪些活动做得好？哪些活动做得不好？如何优化？</p><p>要建立分析逻辑框架。</p><p>活动前：</p><ul><li>流量：活动前每天流量效果，流量波动原因拆解</li><li>收入</li></ul><p>活动中：</p><ul><li>流量、DAU、MAU<ul><li>新用户进入</li><li>不活跃老用户唤醒</li><li>活动期间连续访问情况、用户粘性</li><li>各类活动效果对比</li></ul></li><li>收入</li></ul><p>活动后：</p><ul><li>流量<ul><li>新用户的沉淀</li><li>唤醒老用户后续活跃量</li></ul></li><li>客服数据，活动复盘</li><li>收入</li></ul><p>撰写报告：</p><ul><li>图文并茂：大部分是图（90%），少部分是文</li><li>先给结论，标题比较重要</li><li>阐述的逻辑性要强</li></ul><h1 id="不同类型产品举例"><a href="#不同类型产品举例" class="headerlink" title="不同类型产品举例"></a>不同类型产品举例</h1><h2 id="电商类-APP"><a href="#电商类-APP" class="headerlink" title="电商类 APP"></a>电商类 APP</h2><p>首页模块，用户视角：</p><ul><li>搜索: 流量的最大入口</li><li>广告: banner, 各种活动宣传</li><li>导航: 十宫格</li><li>淘宝主要坑位</li><li>Feed 流, 电商+内容</li><li>个性化推荐</li><li>底部 button</li></ul><p>三个问题：</p><ul><li>引流：首页作为最大的带量位，分发效率怎么评估（整体）</li><li>漏斗：交易额是核心指标，如何理解数字转化的过程（路径）</li><li>用户：拉新（痛点）</li></ul><p>整体、分发效率评估：</p><ul><li>日活、留存、渗透率</li><li>找到反映产品问题的指标，比如 CTR、人均访问页面数等</li></ul><p>新用户与老用户相比，由于对 APP 不熟悉，在漏斗环节可能有几个特征：</p><ul><li>用户行为比较离散化</li><li>在某个环节转化率会比老用户低很多</li><li>新用户当天逛，过一段时间可能再下单</li></ul><p>对于一款电商 APP，分发效率是非常重要的一个产品指标，相关文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/50108813">https://zhuanlan.zhihu.com/p/50108813</a></li></ul><h2 id="互联网金融-toC-授信"><a href="#互联网金融-toC-授信" class="headerlink" title="互联网金融 toC 授信"></a>互联网金融 toC 授信</h2><p>互联网金融的本质是<strong>风控</strong>，数据分析师角色</p><ul><li>风控分析，一定的模型理解能力，大量的行业和法律法规经验</li><li>数据建模，算法要求高，行业经验要求一般</li></ul><p>产品对象 toB 和 toC</p><ul><li>toB 定量打分卡、定性行业经验</li><li>toC 个人信用分</li><li>央行征信报告</li></ul><p>信用分构成：</p><ol><li>身份特质、稳定性<ul><li>所在公司，职业类型，消费稳定度，近一年内使用手机号码数，手机号码稳定天数，地址稳定天数</li></ul></li><li>履约能力<ul><li>是否有车，是否有房，近一个月流动资产日均值，近三个月流动资产日均值，近六个月流动资产日均值，近一年流动资产日均值，近一个月理财产品总收益，近三个月理财产品总收益，近六个月理财产品总收益，近一年理财产品总收益，历史理财产品总收益，近一个月支付总金额，近三个月支付总金额，近六个月支付总金额，近一个月消费总金额，近三个月消费总金额，近六个月消费总金额</li></ul></li><li>信用历史<ul><li>近一个月主动查询金融机构次数，近三个月主动查询金融机构数，近六个月主动查询金融机构数，近一个月信贷类还款总金额，近三个月信贷类还款总金额，近六个月信贷类还款总金额，近一年信贷类还款总金额，近一年信贷类还款月份数，近一年M1 状态，近一年 M3 状态，近一年 M6 状态，近两年 M1 状态，近两年 M3 状态，近两年 M6 状态，近五年 M1 状态，近五年 M3 状态，近五年 M6 状态</li></ul></li><li>人脉关系<ul><li>近 1 年人脉圈稳定度，社交影响力指数，信用环境指数</li></ul></li><li>行为偏好<ul><li>消费区域个数，近一年支付活跃场景数，近一年母婴消费总金额，近一年母婴消费总笔数，近一年游戏消费总金额，近一年游戏消费总笔数，近三个月家居建材消费总金额，进三个月家具建材消费总笔数，近一年汽车消费总金额，近一年汽车消费总笔数，近一年航旅度假消费总金额，近一年航旅度假消费总笔数</li></ul></li></ol><h1 id="数据处理工具"><a href="#数据处理工具" class="headerlink" title="数据处理工具"></a>数据处理工具</h1><p>本小节主要是 excel, tableau 等数据处理工具的教程。</p><p>这里顺便贴上用 Python 裁剪视频的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.video.io.ffmpeg_tools <span class="keyword">import</span> ffmpeg_extract_subclip</span><br><span class="line"></span><br><span class="line">start_time = <span class="number">2691</span></span><br><span class="line">end_time = <span class="number">4075</span></span><br><span class="line"></span><br><span class="line">ffmpeg_extract_subclip(<span class="string">&quot;D:\学习资料\pylearn\day50\\1.mp4&quot;</span>,start_time,end_time,targetname=<span class="string">&quot;aout.mp4&quot;</span>)</span><br></pre></td></tr></table></figure><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/SDIo5GaBzOI?si=HHi7ppFSOyHk4PKE" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><blockquote><p>excel 的基本使用</p></blockquote><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/vVteexFYj60?si=wATtJiwMH0z08vNO" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><blockquote><p>0:00-27:43  excel<br>27:44-end  tableau</p></blockquote><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/JPr5H_KKR-Q?si=Jj54yOcmWtU8zM2V" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/vsM8J7x9xEI?si=H_gfnIzxQS0y0-fu" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/L-dCCXFDb24?si=CggJDXyT1bAheVml" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/-X34cFmB80w?si=EG7SFswHvtZBay9a" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/OZp5RRXBFME?si=osr4MwLOfWnprUsx" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据分析概述&quot;&gt;&lt;a href=&quot;#数据分析概述&quot; class=&quot;headerlink&quot; title=&quot;数据分析概述&quot;&gt;&lt;/a&gt;数据分析概述&lt;/h1&gt;&lt;p&gt;文章分享：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNjM1</summary>
      
    
    
    
    <category term="杂项" scheme="https://dropsong.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="数据分析" scheme="https://dropsong.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="excel" scheme="https://dropsong.github.io/tags/excel/"/>
    
    <category term="tableau" scheme="https://dropsong.github.io/tags/tableau/"/>
    
    <category term="PowerPivot" scheme="https://dropsong.github.io/tags/PowerPivot/"/>
    
    <category term="PowerBI" scheme="https://dropsong.github.io/tags/PowerBI/"/>
    
    <category term="PowerQuery" scheme="https://dropsong.github.io/tags/PowerQuery/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 24</title>
    <link href="https://dropsong.github.io/posts/e3607000.html"/>
    <id>https://dropsong.github.io/posts/e3607000.html</id>
    <published>2025-01-11T09:39:49.000Z</published>
    <updated>2025-01-11T15:05:18.985Z</updated>
    
    <content type="html"><![CDATA[<p>2024 看过的书：《西域绘画9》《美国的智慧》《夜晚的潜水艇》。</p><p>今年最大的改变是更加青睐 epub 形式，Google 商城里的 eBoox 软件非常好用，支持书签、划线笔记之类的（这样导出的时候只需复制即可），对眼睛也十分友好。</p><h1 id="西域绘画9"><a href="#西域绘画9" class="headerlink" title="西域绘画9"></a>西域绘画9</h1><p>内容还挺有意思的，可以了解中国传统风俗的一些由来。</p><p><img src="https://bu.dusays.com/2025/01/11/67827b5c41edb.png" alt="97-1.png"></p><p><img src="https://bu.dusays.com/2025/01/11/67827b68e4c21.png" alt="97-2.png"></p><p><img src="https://bu.dusays.com/2025/01/11/67827b66c5e82.png" alt="97-3.png"></p><h1 id="美国的智慧"><a href="#美国的智慧" class="headerlink" title="美国的智慧"></a>美国的智慧</h1><p>蹩脚的书，林语堂大段大段地复制别人的文章，查重率过高。</p><p>即便如此，我还是放一些段落在这里，这些段落有的是作者的（很少），有的是作者抄的别人的。</p><blockquote><p>一个人借助智者的智慧，彻底消除自己某些粗俗的自满情绪，只有如此，他才能开始思考。</p><p>社会情感十分脆弱；爱国主义的情感也很脆弱；尊敬的美德越来越少；本能的感情显得比以前更加柔弱。人们对乡土、父母与亲戚变得冷静起来。</p><p>这个年代倾向于孤独。时间上的联系是偶然、短暂和伪善的，分离是本质的、渐进的。</p><p>作为一个中国人，发现东西方之间精神上的雷同现象和相互影响，我无法掩饰自己的欣喜之情。</p><p>自由本身并不是目标，而是作为更高境界的幸福的实现条件。也许会有人认为，这种观念可能很危险；认为，假如自由本身不是目标，假如作为更高境界的幸福可以通过其他途径，而无须自由的保证来实现，那么，有朝一日人们就可以抛弃自由。对此的回答当然再明确不过了：不可能那样做。</p><p>一方面，苏联共产主义者，不同于墨索里尼的法西斯主义者，他们认识到民主是一个褒义词；另一方面，在民主问题上混淆视听是列宁政治策略的一部分。斯大林的极权政治鼓吹民主，披着民主的外衣，发表民主的言论，所以更加危险。如果我们稍不留神，某一天早上，我们从报纸上就会得知，首先倡导民主的是叶卡捷琳娜女皇，而不是托马斯·杰弗逊。</p><p>夏日的一个上午，从日出到中午，他会一直坐在洒满阳光的家门口，全神贯注地思考问题，周围树影婆娑，有松树、山核桃树和漆树。直到太阳照射在他的草屋西面的窗户上，或是远处的公路上响起一辆游客的四轮马车的嗒嗒声，他这才意识到已是午后时分。他的目标是成为一根雪松木桩，浑身潮湿、阴冷，青苔渐渐爬满全身，他愉快地享受着苔藓轻柔的撩拨。此时，他俨然一名印度瑜伽修行者，或是庄子一样的圣贤，头顶筑有鸟巢，腋下生长着垂柳。</p><p>我把背包和铁锹扛在肩膀上，朝要挖的沟渠走去（穿着橡胶靴子）……于是，我开始挖掘。在艰辛的体力劳动中，我自然而然地产生一种轻松的感觉：无须思考问题，只是体力消耗。我站在齐踝深的冷水里，每挖一铁锹都不容易。当我把挖出的湿泥培在沟渠边缘的时候，小股的水流又踅了回来。我什么也不想，一直挖呀挖呀。在用力挖掘的过程中，我感到一种奇特的快乐。我用一只脚使劲踩下铁锹，然后，我弯腰、直腰、转身，浑身上下有一种难以名状的满足感。一开始，我还感觉到清晨的凉爽，可是，到了七点钟，天气已经相当炎热！我解开衬衣的扣子，把袖子又往上挽了挽，继续挖下去，又干了半小时才休息，这时我已是大汗淋漓。</p><p>在市区有一座小型工厂，生产木桶铁环和狭板。工厂里总是传出我生活中很少听到的阵阵悦耳的口哨声。它准时在12点响起：多么神圣的声音！</p><p>与欧洲人相比，美国民族具有情绪激烈的特征。一些商业主管认为，当他们办公桌上的三部电话同时响起来的时候，他们是最幸福的人，这表明他们属于“成功人士”。其实，他们是在自欺欺人。如果一个人把握住生活方向和自我定位，他首先表现为内心沉着冷静；而具有上述经历的人，无论是谁，都丧失了这种平和的心境。不停地忙碌绝对不是成功的标志。</p><p>有些时候，我们走过如此漫长的一段路途，才认识到我们最亲爱朋友的个性特征。因为我们是如此的珍爱他们，所以我们试图把他们改造为我们自己所认为的某种古怪的完美形象——直到有一天，我们突然大声嘲笑我们自己的荒谬行为（意识到他们很可能在努力地改造我们，正如我们在努力地改造他们一样）；从此以后，我们再也不想改变他们，我们只是喜欢他们，欣赏他们！</p><p>通过铭记一代人的爱好，通过研究一代人轻视的对象，一个人就会足以了解这代人的主要性格。</p><p>而在目前最高级的社会交往中，正派被认为是下流的，害羞被认为是可耻的，谦逊被认为是无礼的，朴实被认为是有疑心的。我们中间有许多另类的聪明人，他们宁愿残害儿童，也不愿意善待父母。他们宁愿因为粗鲁而受到责骂，也不愿意因为谦逊的态度而得到人们的赞许。他们甚至在许多方面怀疑自己：他们也许会偶尔产生某种不再流行的高尚情感；他们也许会偶尔实施某种善行；他们也许会放纵于某种自发的感情冲动……</p><p>在我们的时代，很难同时拥有“坚定的意志”和温和的心，造成这种状况的因素并非害怕其他人会作何评价，而是害怕自己会对自己发表什么看法。</p><p>不断地美化生活，不断地讽刺生活，这两种做法都不是成熟的表现。但丁能够想到的最严重的罪孽之一就是在阳光下闷闷不乐。</p><p>工作并不能使一个人变得麻木不仁，乔叟（Chaucer）正是这样一位诗人。他曾写道：“工作过程中会休息的人是智者。”</p><p>他的一席话语将会永远铭刻在我的记忆中。他说：“你们美国人的面部表情太过于丰富了。你们的生活方式仿佛一支作战的部队，它所有的后备兵力也在行动。而英国民众相对呆滞的面部表情预示了更加令人满意的生活方式。”</p><p>当你非常喜爱一个人的时候，和他交谈是相当困难的。以一种温馨、奇妙的口吻在想象中与他交流，那就容易得多了。</p><p>下面就是我要宣布的一天的抽烟计划：<br>早餐后：两斗<br>午餐时：两斗<br>晚餐前：两斗<br>晚餐与上床睡觉之间：十到十二斗<br>（雪茄和纸烟偶尔也抽。）<br>难怪斯蒂文森劝告未婚女子不要嫁给不抽烟的男子为妻。<br><strong>我评：真不要脸。</strong></p><p>在步行中，无疑总会体验到从未被践踏过的小径的绮丽，灌木篱墙的新鲜气息，远处山峦的迷人景致，或者，偶尔也会见到一条蜿蜒流过的小河，一片平静的森林。</p><p>千真万确，不一会儿，我就听见了他们的狗的吠声，很快，我们就来到了他们的营地。我还记得，在那里，他们正忙着将鹿肉放在篝火上方搭建的杨木杆架子上烘干。他告诉我，印第安人的烟味、鞣制的鹿皮味、干透的野稻子味以及诸如此类的气味，可以传到很远的地方，并且很容易辨别出来……我认为，我从父亲身上继承了一些感觉方面的鉴赏能力，尽管我从不奢望能成为他那样完美的嗅觉高手。</p><p>你可以驯服山，但海却是野性的。在山旁，你可以拥有一个小屋，或认识小屋的主人；晚上，你看到半山腰上亮起的灯光，你知道，那里有一户人家，你可以去分享那温馨的灯光。也许，你还留意到一些树木；你知道在10月份某个特定的区域，铁杉显然黑油油的，而此时槭树和山毛榉的颜色却正在褪去。所有的这些浮雕与凹雕都被铸进了大奖牌，挂满了你记忆寝室的墙头。——大海却什么记忆都没有留下。它是猫科动物。它舔你的双脚——它凭借巨大的胁腹为你发出欢快的呼噜声；然而，同时它也会击碎你的骨骼，把你吞食掉，然后，擦掉嘴上血淋淋的沫子，好像什么事情都没有发生过。山给它们迷路的孩子提供浆果和水，海却嘲笑着他们的饥渴让他们死去。山有着壮丽的、憨憨的、可爱的宁静，海具有魔力般的、变化莫测的智慧。山像巨大的反刍动物躺在那里，它们宽阔的背部看起来很丑陋，但却可以安全地驮载重物。海将它的层层鳞片抚平，直到你看不见连接它们的关节——可它们的光泽却如同蛇腹一般闪亮。——通过更深层次的揭示，我发现了一个巨大的区别。山使人类显得很渺小，缩短了人类代代相传的队列。海淹没了人类与时间；对二者，它没有任何同情心；因为它属于永恒，永远唱着单调的永恒之歌。</p><p>于是我站起身来，草的高度只到达我的膝盖。草原啊，今天的你不再高大，像我们一样；并且，我们将不再给你提供生长的空间，除了在我们的思想里。</p><p>一天，亚历山大·威尔逊正站在一个拓荒者的门前，天空中传来巨大的鸣叫声；太阳立即变得暗淡下来，他以为是龙卷风来了，就等着看树如何被拔起。“那只是鸽子而已。”拓荒者说。奥杜邦看到一只鹰猛扑向一群飞翔的鸽子；这些受袭击的小鸟像龙卷风的漏斗一样向下坠去，几乎要坠到了地面，后面跟上的鸽子也都表演着同样的动作，猛地撞进旋涡，然后又被一股无形的力量射出来。所有的人都在谈论它们翅膀的巨大声响，它们将森林的树枝变成了涌动的波浪。它们的粪便从树叶间急速落下，盖满了地面。森林里到处是它们互相召唤的叫声。想象一下，鸽子那温柔、幸福、嘶哑的叫音，经一百万个声音放大，变成了令人吃惊的滚滚雷声，以极快的速度扩散开来。想象一下，你所在的整个县城都被森林覆盖，所有这些森林都成了鸽子栖息的地方；以如此巨大的数量，它们筑巢、栖息。</p><p>树林的香气不如在温暖的雨季那么显著，那时太多含香脂的花苞和树叶像泡茶一样被雨水泡着。但是，满含树脂的树枝之间以及无数针叶之间的不断摩擦，给大风加入了味道很浓的香料。</p><p>爱默生，根据自己对自然的探究，狂热地说：“在树林里，上帝是显灵的，而他在布道时并非如此——在大教堂似的落叶松林里，石松匍匐在他的脚下，歌鸫为他歌唱，旅鸫向他诉苦，猫鸟为他喵喵地叫，银莲花为他颤动。”</p><p>这就是美国的社会难题，每个人都有以自己的方式信仰上帝的权力，却又有不将其告知他人的社会责任。正确的做法是，在公共场合可以谈论上帝，但如果你有什么自己的想法，最好别说出来。</p><p>的确，大部分人，以及大部分宗教派别，都认为他们拥有全部的真理，无论别人持有什么观点，只要与他们不一致，肯定就是错的。</p><p>于是，信仰自由成了一件滑稽的事情。它几乎变成了一个定式：我相信我所想的，你也有自由相信你所想的，但是，你不曾让我知道你所想的，或者我会视你为信仰与共和国的敌人。因此，现代教会的两难处境必将继续下去，并将永远存在。难道还没有人发现，上帝被过度保护了？</p><p>只要稍微想一下，康拉德，你就一定会同意我的观点。如果他们如此经常聚集起来学习好东西，他们当然在这次之前就已经学了一些。可他们还是这么愚昧无知。你知道我们的做法。如果一个白人从我们乡下经过，来到我们的屋里，我们都像我对待你一样对待他；如果他身上湿了，我们会给他弄干，如果他觉得冷，我们会给他温暖，我们给他肉吃给他水喝，这样可以缓解他的饥渴；然后，我们会铺上柔软的皮毛让他休息、睡觉；我们不要求任何回报。但是，如果我在奥尔巴尼进入一个白人的家，向他们要吃的喝的，他们会说：‘钱呢？’如果我没有钱，他们就说：‘滚出去，你这条印第安狗。’你瞧，他们连一点好东西都没有学到，我们不需要聚会让别人讲课，因为我们的母亲在我们还是小孩子的时候就教育我们；所以，他们的聚会不可能像他们所宣扬的那样，是为了那个目的，也不会有那样的效果；他们只是在琢磨着怎样在河狸皮毛的价格上欺骗印第安人。</p><p>我们可以经历的最美丽的事情就是神秘。它是所有真正艺术与科学的源泉。对这种情感很陌生的人，不再能停下来并怀着敬畏的心情对一切事物感到好奇和痴迷的人，实际上等同于死人：他的眼睛是闭上的。这种对生命奥秘的深刻见解，尽管带有一种令人毛骨悚然的感觉，却导致了宗教的兴起。了解到对我们来说深奥难懂的事物确实存在，并表现出最高的智慧和最光辉灿烂的美丽，而我们愚钝的天赋只能理解它们最简单的形式——这种了解，这种感觉，是真正虔敬的典型标志。在此意义上，只是在此意义上，我属于虔诚的宗教信仰人士之列。</p><p>原始主义的复苏对现代文化的严厉批判，是对现代知识文明深刻的情感质疑。文学上抑或艺术上的原始主义就是文化对本身的怀疑。因此，它向我们表现出来的简单不是在文明的黎明时分人类甜美而单纯的快乐，既健康又强烈，像雄鸡的歌，而是昏醉的神经与困惑的大脑处于阴郁的绝望之中的象征。</p><p>雅典人要审判她，而她的唯一要求是，她要在海边接受审判，市民们要坐在海滩上，而她则站在海水里。她赤裸着身体站在海里，海水淹到了她的脖子，她平静地听着雅典的妻子们对她的所有指控，她们要求处死她。然后她慢慢地、镇定地从海水中向岸上走来，她尊贵与优雅的圣体一点一点地显露出来。整个海滩鸦雀无声。“喂，你们想让我去死吗？”她简洁地问道。一声断然的“不”炸雷般地从雅典的人群中发出，于是那个高级妓女被宣告无罪。</p><p>威尔逊总统特地从华盛顿赶来观看。一位美国总统来到巴尔的摩只为了看一场喜剧，这在戏剧历史上还是头一次。</p><p>一方面为了消磨时间，同时也为了消除内心的紧张，直到化妆的时间到了才会回去。我从没有给一位总统讲过笑话，更不用说讲关于总统的笑话，尤其是当面讲。</p><p>当无神论者攻击宗教的时候，他感到极其厌恶，他觉得他们太粗俗。但是，他也反对宗教对他提出要求——当宗教试图煽动人的情感时，他觉得宗教也是粗俗的。宗教拥有自己适当的行动范围，在其范围之内宗教传播当然会一帆风顺；但是有一个地方是宗教不应该去管的，那就是人的灵魂。他特别讨厌与他的拯救者手拉手一起前进之类的说法。如果他发觉圣灵试图安抚他的心灵，他会将其行为视为绝对没有必要的；甚至是没有绅士风度的。<br>在宗教领袖或先知中，我能够想到的适合我父亲的恐怕只有孔子了——尽管连孔子也会给他留下糊涂的印象……但是，有一句孔子的语录他会同意：“敬鬼神而远之。”我的父亲认为这条原则是完全正确的。</p><p>让我来制造国家的迷信吧，谁制定法律或国歌我才不关心呢！</p><p>每天，我都会多次意识到，我自己的外在与内心生活在很大程度上建立在我的同胞们的辛勤劳动之上，包括活着的和死去的；我一定要奋发图强，以回报我所获得的如此多的恩惠。我过多地使用了他人的劳动成果，这种感觉让我十分沮丧，内心常常因此而苦恼，不得安宁。</p><p>叔本华的名言——“一个人当然能够做他愿意做的事情，可他无法判定什么是他愿意做的事情”——在我年轻的时候就给我留下了深刻印象；当我见证并饱尝了生活的艰辛，这句话一如既往地给我以安慰。这种信念是宽容心态永久的催化剂，因为它使我们对自己或他人不再过分认真；它甚至蕴涵了一种幽默感。</p><p>我从来不能全身心地属于国家，属于我的朋友圈子，或者甚至属于我自己的家庭。这些关系总是伴随着模糊的冷漠。随着岁月的推移，我退回到自己内心世界的愿望与日增长。</p><p>我确信，腐化堕落追随着每一种暴力的独裁体制，因为暴力不可避免地吸引道德低劣的人。时间已经证明，有名的暴君都是由无赖继承其权位。</p><p>这个问题使我不得不想到普通人思想的最可耻的后裔——可憎的民团。那些喜欢列着纵队、伴着音乐行进的人为我所不齿；他错误地认为他的思想是合理的、正确的——他的大脑本来应该足够聪明。这种奉命的英雄主义，这种愚蠢的暴力，这种可恨浮夸的爱国精神——我多么强烈地鄙视它们呀！</p></blockquote><p>在这本书中，林还把《论不写回信》《致爱尔维修斯夫人》的整篇文章引用了下来。这两个小短文非常有趣，感兴趣可以看看，这里就不放了。</p><h1 id="夜晚的潜水艇"><a href="#夜晚的潜水艇" class="headerlink" title="夜晚的潜水艇"></a>夜晚的潜水艇</h1><p>这是一个短篇小说集，个人主观排序：《夜晚的潜水艇》、《尺波》、《竹峰寺》，其余平庸。</p><p>同样，放一些片段在这里。</p><blockquote><p>老房间的旧床实在是太好睡了。随便一个睡姿里，都重叠着以往时光里无数个我的同一姿态。从小到大，一层套一层，像俄罗斯套娃一样。</p><p>我看到美术课本上印着的《秋山晚翠图》，一下就着了迷。我从画底的云烟里攀上山脚的怪树，一直沿着山涧，爬到画上方的小木桥上，在画中花了三天，在现实中则用了两节课。我在草稿纸上画出《溪山行旅图》里山峰的背面，设计出一条攀登路线，登顶后我躲在草木后边，窥探着山下经过的客商。我在一本图册上的《茂林远岫图》里游荡了一礼拜，想象自己如何从溪流边走到崖底，如何躲避山中猛兽，最后到达安全的山洞。</p><p>多少年没睡过那样的好觉了。像往一个深潭里悠悠下沉，有时开眼看看水面动荡的光影，又闭上。</p><p>有时从书页中滑落下一片干枯的芍药花瓣 也不知是谁夹在那里的 也不知来自哪个春天 已经干得几乎透明 却还葆有一种绰约的风姿 而且不止一片 这些姿态极美的花瓣 就这样时不时地 从那本娓娓述说着世间一切美尽是虚妄的书卷里 翩然落下</p><p>他说这是山峰生长的声音。山峰不是一点点匀速长高的，而是像雨后的竹笋，一下一下地拔高。也许几个月拔一次，也许几年。我问他哪里听来的，他说百度。</p><p>法堂和藏经楼之间，又是一片荒庭，石砖缝里，野草像水一样溅出来，四下流淌。庭中松、柏、菩提树，均极高大，浓荫压地，绿到近于黑。</p><p>这天暮春午后，花气熏人，陈元常又在寺中闲逛。照例看过了偏殿的壁画，听了会儿枝头的莺啭，摸了摸打呵欠的小和尚的头，他到一处石阶边坐下。对着庭院中融融春光，他看了很久，想了很久。直到一只翅上有碧蓝斑点的蝴蝶飞过他眼前。那个午后他想了什么呢？几百年前的少年心绪，没人知道。我猜想，他是在找一个平衡点，在庄严和美丽之间找到最恰当的位置，然后等圣境降临笔端。</p><p>见彩蝶落于佛头，乃大悟，急索笔砚，闭门书经，三日而成。成，乃大病。诸僧视其所书，笔墨神妙，空灵蕴藉，似与佛理相合。尤以《药草喻》一品，神光涌动，超迈出尘</p><p>诵偈三千首 观花一并休 春风无戒律 蝶绕古佛头</p><p>黄昏时我总爱在寺门外的石阶上坐着，看天一点一点黑下来。想到“苍然暮色，自远而至，至无所见而犹不欲归。心凝形释，与万化冥合”，这些字句像多年前埋下的伏笔，从初中课本上，或唐代的永州，一直等到此时此地，突然涌现。山下的村庄，在天黑前后，异常安静。直到天黑透，路灯亮了，才又听见小孩的嘶喊声。本培说，这村里有个说法，说是人不能在外面看着天慢慢变黑，否则小孩不会念书，大人没心思干活。我记起小时候似乎也听奶奶说过类似的话。山区里，古时山路阻隔，往往两村之间，口音风俗都有所差异，但毕竟同在一县，相似处还是较多。为什么会有这种说法呢？天黑透了却不忌讳，小孩一样玩耍，大人出来乘凉。忌讳的是由黄昏转入黑夜的那一小会。也许那时辰阴阳未定，野外有什么鬼魅出没？我想象在黄昏和黑夜的边界，有一条极窄的缝隙，另一个世界的阴风从那里刮过来。坐了几个黄昏，我似乎有点明白了。有一种消沉的力量，一种广大的消沉，在黄昏时来。在那个时刻，事物的意义在飘散。在一点一点黑下来的天空中，什么都显得无关紧要。你先是有点慌，然后释然，然后你就不存在了。那种感受，没有亲身体验，实在难于形容。如果你在山野中，在暮色四合时凝望过一棵树，足够长久地凝望一棵树，直到你和它一并消融在黑暗中，成为夜的一部分——这种体验，经过多次，你就会无可挽回地成为一个古怪的人。对什么都心不在焉，游离于现实之外。本地有个说法，叫心野掉了。心野掉了就念不进书，就没心思干活，就只适合日复一日地坐在野地里发呆，在黄昏和夜晚的缝隙中一次又一次地消融。你就很难再回到真实的人世间，捡起上进心，努力去做一个世俗的成功者了。因为你已经知道了，在山野中，在天一点一点黑下来的时刻，一切都无关紧要。知道了就没法再不知道。</p><p>这时，我却像从一家重金属摇滚乐肆虐的酒吧里逃出来，在后巷里呕吐之后，听到了天边清远的笛声。</p><p>我的梦从山脚开始 我看见小径边的茶花 几团暗红 湿漉漉的 我先是看见花 随后想到花是香的 香气这才翩然而至</p><p>兴到闲拈笔，诗成懒示人</p><p>美景当前，人所能做的只有平静地收下这份美，连同那种无力感，试图付诸笔墨，多半是徒劳。</p><p>她爸爸当时还没开始做生意，没什么钱，穿着花花的衬衫，滔滔不绝地说着什么，总是对什么事都很有把握的样子。她妈妈带着崇拜的或宽容的微笑听着，一边往锅里放着佐料。夕阳在湖面上闪烁不定。但也可能没有夕阳。吃完饭，她爸爸用摩托车载着她，开过那座小拱桥，不知道为什么，她当时觉得那样一起一伏非常好玩，又笑又叫，快活极了，停不下来。爸爸就开着摩托，带她一遍又一遍地过拱桥。玩够了，她趴在桥栏杆边，吹了好久的肥皂泡，把一整瓶都吹光了，看着那些泡沫飘飘转转跌向远处的波光。爸妈就站在她身后轻声聊天，摸弄着她的头发。</p><p>不谈其中的意象 单是他的技法就过于精致深微 很容易被扣上形式主义的帽子 上头热爱的是简单 昂扬的旋律 是工人们头天夜里听过 第二天上工时就能哼唱出来的曲调 那才是对群众有益的音乐</p><p>他打量四周 见到几株冷杉 叶丛的上层蒙着糖霜似的白雪 下边露出暗绿的边缘 被雪映得近似于黑 几支木棍搭起的篱笆 一个胖乎乎的雪人 远处是一座小木屋 屋顶覆着厚雪 显得圆润可爱 窗口透出黄光</p><p>他猛地明白了，这不是真的雪地，他们正置身于一只雪花玻璃球里。那是七岁时父亲从基辅给古廖夫带回的礼物，是他童年最钟爱的玩具（后来不知怎么的遗失了，他大哭了一场）。每晚睡前，他都要看上一会，摇晃一下，总也不腻。摇晃时扬起的雪粒飘进他的梦中。他记不清自己曾往那木屋的窗户和烟囱上涂抹了多少幻想，他多渴望有这么一座小木屋，放在森林边缘，放在静悄悄的雪地上，他和小动物们一起堆着雪人，雪下起来了，他听到屋中的父母唤他回去。那是他所有梦境中最安详、最甜美的一个。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024 看过的书：《西域绘画9》《美国的智慧》《夜晚的潜水艇》。&lt;/p&gt;
&lt;p&gt;今年最大的改变是更加青睐 epub 形式，Google 商城里的 eBoox 软件非常好用，支持书签、划线笔记之类的（这样导出的时候只需复制即可），对眼睛也十分友好。&lt;/p&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    <category term="闲文" scheme="https://dropsong.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="书评" scheme="https://dropsong.github.io/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>2024 总结</title>
    <link href="https://dropsong.github.io/posts/c49dbf78.html"/>
    <id>https://dropsong.github.io/posts/c49dbf78.html</id>
    <published>2025-01-05T13:36:08.000Z</published>
    <updated>2025-02-17T02:40:52.051Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>const zr, wc<br>const_list = {F, M, B, Z, zd, zr, wc}</p></div><center><i>光怪陆离的世界，</i></center><center><i>还是有一些约束比较好。</i></center><center><i>妹子，</i></center><center><i>有力的总结：</i></center><center><i>老师死去，</i></center><center><i>绳子握住。</i></center><h1 id="一月"><a href="#一月" class="headerlink" title="一月"></a>一月</h1><p>某本虚构的书中说，“性交和镜子是可憎的，它们使人的数量倍增。”</p><p>深以为然，夜深人静的时刻尤其如此。没有面部的黑色人影杵在镜子里，只有少许光线勾勒出的轮廓。独居的时间久了，人会难以遏制在镜子面前挥舞手臂的冲动。</p><p>考研初试结束有一阵子，我的生活内容并没有显著的变化，但是方式却极大地改变了。</p><p>学习的时间变得特别少了。我承认这是因为懈怠了，一方面，我想玩一阵子，另一方面，因为初试考的稀烂，大抵准备复试也只是心理上的安慰。</p><p>此消彼长，玩的时间极大增加。我重新开始游戏，主要是崩铁和王者，崩铁带着推进一点任务，王者每天打上四五把。游戏尚且是娱乐的小头，更多的时间用在影视上。看《伪恋》的时候，发现自己大致都能猜出剧情走向，很多东西已觉不新鲜。</p><p>生物周期与 24h 有点出入，虽然睡眠时间是充足的，但我越睡越晚，直到窗外重新亮起。我只能安慰自己，这样下去，迟早有一天会和大家的作息吻合一次的。</p><p>我常常凌晨五六点睡，十三点醒。话虽如此，初试之前基本上也是凌晨两点睡觉，早上能九点起就不错了——倒不是学到两点，而是晚上十一点躺床上，玩到一点半。再往前数，其实我大学的时候作息也很不规律，晚上很晚睡，早八七点四十起。</p><p>反思了自己为什么不肯早睡。其实答案意外地很简单：<i>I’m not happy.</i> 熬夜大抵是对刚度过的一天不满，没什么开心事，才会希冀在熬夜中找补一些快乐。</p><p>病症找到了，却没有一个很好的方子。</p><p>不快乐的根源是孤独，从自身原因讲，性格导致的生活方式是罪魁祸首。举例来说，这个博客没有告诉任何人（包括网友），其实是很奇怪的。现实中，无话不说的人，似乎以前也有，但是后来却很少联系，心理动机竟然是怕打扰到人家。</p><p>如此看来，朋友的最高境界是“来时莫徘徊”。</p><p>随着现实生活的日益无聊，梦之世界反而愈发精彩了。大概从准备初试的中期开始，常常能梦到过分详实的世界，真实感很强，可惜这种印象在梦醒之后就很快消弭，醒来后会很久对现实世界没什么实感。</p><p>在其中的这么一个梦之世界，我们（『我们』是谁？）行走在一片翠绿的竹林中，地里的笋刚刚破土。出了竹林，豁然开朗——我们在一颗通天的巨树中，竹林不过是长在树枝上的灰土里，抬头是繁密茂盛的树叶，遮蔽了大半个天空，我伸出手，尽管距离很远，我却能看清每片树叶，它们的边缘在阳光下闪闪发光，摇曳出明亮的金绿色。</p><h1 id="年前年后"><a href="#年前年后" class="headerlink" title="年前年后"></a>年前年后</h1><p>和 B 回了一趟镇上，和 F 度过了一段时间。</p><p>许久未见的 cg 的儿子，才得知竟与我同一年考研，我已经是二战了，而他比我大两岁。</p><p>即便如此，cg 自信满满地和 F 讲，只要考上我肯定无条件支持儿子的生活，重视小孩读书是我们中国人应该的，要是以后读博士我也供着！</p><p>听到这 F 立刻警觉了起来，委婉地和 cg 说，还是找个工作好。</p><p>这种长板凳大矮桌上的酱骨头乱炖，这么难吃的东西究竟是谁发明的？</p><p>初二去了外婆家，大姨家和舅舅家都来了，请河边的钓鱼佬帮忙拍了一张合照。姨表弟（此复杂称谓由亲戚称呼计算器得出）长大很多，上次见还是很小一只。</p><p>外公领着我们小辈去买烟花，烟花很漂亮，老舅走前特地又去那家店买了带走。</p><p>年前重新回坑了原神，枫丹的主线很棒。因为退坑期间攒了很多剧情，所以体验枫丹主线是一气呵成的，代入感良好，剧情连贯紧凑，演出效果极佳。</p><p>退坑了崩铁，肝不过来。浅回了王者。</p><h1 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h1><p>二月底出初试成绩，除了数学，意外的还可以，数学比意料中还要差得多。总之这个分数应该还可以，之前的巨大落差感是因为我为了一定的容错，定的目标比上岸分数高了三四十分，还没有从失败中缓过来。法乎其上，取之其中，虽然这不太好，但我也只能如此。</p><p>月初蹭了 Z 一顿饭，说给我改善改善伙食。Z 家里给他提了一辆大众。</p><p>三月其实没什么好说的，基本是在准备复试，当然娱乐项目也没有落下。</p><p>换了一个自习室，比原来的更近。在窗边看着楼下走来走去的人群，果然在自习室里才能找到内心的宁静。</p><p>三月底去学校复试。北上的途中，突然一个电话打来，是社区的“网格员”，问我去北京干什么。</p><p>去住一个民宿，在美团要到微信号，绕过美团直接微信转钱要便宜一点。</p><p>民宿房间的上个主人看来是个长住的妹子，留下了一面扇形的粉色镜子，还有一把塑料梳子。洗澡很不方便，地漏排水很慢，漫的房间到处都是，水留在地上几天才蒸发掉。不过终于又点上了和合谷的外卖，那个红茶真的很好喝。</p><p>复试前去交材料，和一位竞争对手聊了一会，无非是对就业感到寒气之类，他是辞职备考的，已是三战。这位小哥最终没出现在录取名单里。</p><p>为了求点吉利话，去给一个偷偷关注的博主发了邮件（博主在博客里说非常欢迎大家来信），很快收到回复：</p><blockquote><p>…<br>看到你的消息，趁机把最近的经历都回想了一遍，着实找出了不少幸运的事，还没来得及记录下来呢。不知道它们既然还未化作有形之物的话，是不是可以一直在空中飘荡，飘到你那儿～（不过糟糕的运气也有一点……比如早上莫名醒来之后睡不着，结果蔫了一整天（人真是离不开睡觉 T T）。这部分还是不要复制啦。）</p><p>总之接下来几天我大概不会特别需要运气，所以要是多余的部分能帮到你的话可太好啦！生活就是无数运气与缘分缠绕在一起，祝你能快快理清这次它们绕出的图案～</p><p>春天愉快哦！</p></blockquote><p>这确是胜利的先声。</p><p>面试开始。自我介绍的时候很紧张，结结巴巴的。独居大半年，我对这种一群人围着审判的氛围非常不适，结果连本该是加分项的四六级成绩都忘了说。好在后面几个问题虽然回答的不好，勉勉强强都糊弄出来了。</p><p>考研终于结束。</p><p>复试结束后去找 zd 和 wc，zd 和对象在外面玩，很远赶不过来，wc 倒是在学校里，天天忙组里的事情，中午抽空和我吃了一顿。</p><p>这一顿饭是灵异事件，它和我后来的所见矛盾。</p><p>我们就在校门口吃的。校门口正对着一篇荒芜的工地，两边是一片板房，里面有许多土木人吃午饭。但是半年之后我再来这里的时候，都是正规的建筑，工地也不见了，看上去是建成很久的一栋大楼。但是我的记忆又十分确凿，我感到困惑。</p><p>主要聊了聊 wc 的研究生生活，学硕还是很忙的。</p><p>离开这座无聊的城市前，在车站和 zd 视频了一会，对方似乎感慨颇深。</p><p>下午立即赶去本科学校找 zr，拿上了我的备份成绩单。</p><p>zr 到车站接我，换了一副大而厚重的黑框眼镜，第一眼竟没能认出来。</p><p>晚饭之前还有一些时间，溜进学校找了个空教室打王者，胜比输稍多一点。</p><p>晚饭去以前常去的餐馆，才发现已经搬走了，换了一家鸡公煲，就上楼吃了。味道自然是比不上搬走的那家家常菜的。</p><p>晚饭后又溜进学校打了一会王者，然后我就去赶飞机了。</p><p>仰天大笑出门去，我辈岂是（校名）人！</p><h1 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h1><p>四月已经正式确认考取了，过的比较悠闲。</p><p>承蒙多次投喂之恩，月初回请了 Z 一顿，他带着同事过来。Z 的同事席间不堪剁椒鱼头的辣味，请了大伙三杯奶茶。聊了很多高中同学，出于好奇，席间我提起 ll，Z 高中时追求过的对象，Z 现在对她的评价是学术妲己。</p><p>M 和她的男人也请了一顿，仍旧是烤鱼。</p><p>F 办了一桌闹腾的晚饭，一轮轮地，拉着我站起来一个人接一个人地敬酒，很厌烦。</p><p>去了扬州，具体可见 <a href="https://dropsong.github.io/posts/19141e40.html">烟花三月下扬州</a> 。</p><p>回外婆家小住了一阵子，住着确实有遗世独立的感觉，不适合年轻人。</p><p><img src="https://bu.dusays.com/2025/01/09/677fc9e878709.jpg" alt="96-1.jpg"></p><p>一开始，我的作息规律确实调整了一点，但是后来，还是经常在午饭时才睡醒。</p><p><img src="https://bu.dusays.com/2025/01/09/677fc9fef3de9.jpg" alt="96-2.jpg"></p><p><img src="https://bu.dusays.com/2025/01/09/677fca02ac3fb.jpg" alt="96-3.jpg"></p><p>在 M 家蹭饭了一阵子，是 M 邀请的，可能是外公说了什么。</p><p>M 正准备搬新家，房子还未装修好，因此暂住在一个狭小的两室出租屋，没有多余的房间，于是我住领妹的房间，周末回来，领妹就和 M 住。</p><p>领妹的房间进门左手边是一个木制小架子，最上面一层是空的，中间杂乱地堆着一些书，最下层是画画的家伙事。正中一张床，床头上面的墙上贴着一些励志贴纸，一个中学生的背影，旁边写着“未来的你，会感谢现在努力的自己”。床的两边一边是衣柜，一边是一张学习用的小桌子，桌子不大，上面摆了一个插着迎春花的花瓶，正值花期；一个小相册，里面是书法：“学习很苦，坚持很酷”。桌下堆了一些书，没有凳子，大约是坐在床沿上当凳子。床尾下面的地上是正对着门口的狭窄通道，靠墙的一面同样堆了几摞书，墙上同样也贴了贴纸：“进门笑一笑，烦恼全抛掉”，“一”字是一个卡通字，两边画了眼睛，“一”是嘴，呈现出一个笑脸的形状。</p><p>床单和被子看起来很干净，应该都换了另一套。</p><p>领妹是住宿生，高中放假也很少，因此也较少照面。</p><p>住进来几天后，去领妹的学校。出发之前，M 在她的男人去开车出来的时候，告诉我领妹的成绩不太好，有意让我来辅导。兜兜转转去了一个离市区蛮远的地方。</p><p>校名书法是一个学校的门面，但这个高中没有那么讲究，简繁混用。</p><p>这是一所重点高中，只是一本率太低了。</p><p>领妹很惊讶我会坐在车里面，看来 M 并未告知她我会暂住。之前备考的时候 M 曾提出让我一起住，一个人吃外卖很不好。当时已经知道没有客房，我问难道不需要问问领妹的意见吗？M 说当然要啦。过去这么久，原来也只是随便应付了。</p><p>这次仍旧是请假出来的，她爸要求她把期中试卷带出来让我看看，然而领妹因为听不清老师的方言要求，把作业带了出来。</p><p>领妹披着紫荆红和白色相间的校服外套，里面隐约是更深的红色。头发似乎留长了点。</p><p>我们去一家小餐馆用餐。</p><p>但是，为什么我们要出来吃这顿饭呢？一开始我还以为有些重要的事，不过到头来真的只是吃一顿饭而已。吃了大半年外卖，我在蹭饭这件事上的态度是，能蹭就蹭，不要多问。</p><p>饭前 M 和她的男人去厨房点菜的时候，领妹问我怎么来了，我说考完试过来住住。显然她并没有关注到“住住”这一点：</p><p>“怎么样？”</p><p>“考上了。”</p><p>“恭喜恭喜。”她立刻小声地鼓掌。</p><p>这次的话题，包括在车上、吃饭和购物的时候，主要是领妹主导的。</p><p>领妹是个分享欲和好奇心很强的人，似乎有说不完的话题。去年（这部分忘写在 2023 的总结里了），拉着我做 MBTI 16 Personalities，她好像蛮信这个东西。尽管这次我的结果和之前应某垃圾公司的招聘要求做的结果不一样，领妹还是宣布我是个好人。</p><p>她滔滔不绝地讲自己的事，宿舍的事，年级第一谈恋爱的事，非理化班抽烟打架的事。我能看出 M 的男人还是认真在听的，然而 M 兴致缺缺，把她的不耐烦藏的很好。</p><p>姑且还是看到了领妹的成绩，英语和物理都很差。因此预约了这两门的辅导。</p><p>饭后溜达溜达去超市，和领妹并排走在后面，之前还没什么实感，她真的比我矮一头。</p><p>同住的还有一只蓝猫，睡觉活动占据了它的大部分生命。</p><p><img src="https://bu.dusays.com/2025/01/09/677fcdfc00d6f.jpg" alt="96-4.jpg"></p><p>四月的末尾，我回到镇上小住两天。这主要是为了在一定程度上避免 F 主动来市里找我，而我却不在的情况。当然，要是 F 能细心一点，可以从我据点的水电费中察觉端倪，但那也是之后的事了，万一问起来，我就是在外婆家。</p><p>F 提议五一去爬山，被我以“五一有同学找我”为由推脱开，和 F 独处是难以忍受的事情，空气中会立刻弥漫出逼仄之感。</p><p>在 QQ 上加了几个初中同学，包括 sy. 之前已经提过，因为 M 的原因，我没有初中及以前同学的联系方式。</p><p>sy 初中的时候大约喜欢过我，我还蛮希望这只是我的错觉。</p><p>这次主要是为了和她说清一些以前的事，在一些事情上我心怀愧疚。</p><blockquote><p>【sy】“怎么突然加我嘞？”<br>【sy】“生活怎么样嘞？”</p></blockquote><p>实在是久疏问候。</p><p>然而心理上也值得玩味，如果我没有考上研我真的会联系她吗？</p><p>交换了一些生活的近况。</p><blockquote><p>【sy】“你一直都很厉害！”</p></blockquote><p>早已泯然众人。</p><p>她问起是否 B 和我一个学校，由此谈到我和 B 高中就已分开。</p><blockquote><p>【sy】“啊呀呀，感觉很多很多年没见了。”<br>【我】“我之前还见过（一个共同的老师）呢。”<br>【我】“他好像还没退休。”<br>【sy】“我刚考上大学的时候见过他。”<br>【sy】“那还蛮辛苦的。”<br>【sy】“我知道他家在哪。”</p></blockquote><p>我也知道，就在我家对面。但是我并没有这么说。</p><blockquote><p>【sy】“他人蛮好的。”<br>【我】“是。”<br>【我】“比□□□好多了。”<br>【sy】“<code>笑哭</code> □老师人也蛮好的啊。”<br>【sy】“现在是副校长了。”<br>【sy】“好像。”<br>【我】“啊？”<br>【我】“真做到副校长啦”<br>【sy】“我弟初中的时候就升副校长了”<br>【sy】“我弟现在高三了”<br>【sy】“指不定哪天就正的了”<br>【sy】“□□□也退了好像”<br>【sy】“不做了”<br>【我】（对…人也蛮好…的回复）“你人太好了，看不太清”<br>【我】“哎”<br>【sy】“他有哪里不好的莫？”<br>【我】“就是我一面之辞”<br>【sy】“没听说过他的黑料啊”<br>【我】“没啥黑料”<br>【sy】“你讲讲，我不跟别人讲，主要我也没人讲”<br>【sy】“ <code>笑哭</code>  <code>笑哭</code>  <code>笑哭</code> ”<br>【我】“但我给你讲一件事吧”<br>【sy】“嗯呐”</p></blockquote><p>接下来的对话牵扯到过多细节，由我概括。</p><p>我们这中考之后五五分流，但即便是考上重点高中的人，一般情况下也是没有择校权的，只能去当地的重点高中（一般全县只有一所）。不过对于中考分数在前列的人，如果自主申请的话，可以去市里最好的学校。这个申请主要是表明意向，并不需要多余的钱财。</p><p>这位□老师在班级的动员活动上，要求大家写下自己的意向学校。sy 写下了那所市高中，按照她当时在年级的排名，属于用力跳一跳摘桃子的目标，正合适。</p><p>但是，我们学校和当地的那所重点高中是一个教育集团的，学校当然不会希望像 sy 那样的学生流去市里，而□某人有一股偏执而蠢的集体主义情绪，也不希望 sy 去。</p><p>在最后挂在班级外墙上的意向学校展示榜上，sy 的意向学校被修改为当地高中。她的家长来到学校，带着 sy 问□某人怎么报考市里的高中，□某人斩钉截铁地说没有办法。其实每年都有去市里的学生，□某人作为老师，肯定是知道的。这件事发生在晚自习课间，我恰巧听到了他们的谈话。</p><p>当时我已经知道了如何申请市高中，那天晚自习结束后我很想叫住她，但是退却了。</p><p>虽然她说本来自己的分数也考不上，没什么好在意的，但我不时会想，她没考上也许是因为报不了市里的高中，没有必要最后努力了，反正按照她的分数进当地的强化班没有任何问题；要是我那天告诉了她具体的申请方法，或许就会不一样。</p><p>我正打算告诉她，当时我没能叫住她这件事时，聊天的方向被她引导，似乎也变得积极一点，最后我还是隐瞒了这一部分。</p><blockquote><p>【sy】“至少现在都好好的生活”<br>【sy】“嘿嘿”<br>【sy】<code>表情包</code><br>【我】“没事，往好了想，至少学医比我这两个专业都好”<br>【sy】“秃头专业”<br>【sy】“口腔”<br>【我】“哈哈这我知道，我看学医的都是一排书”<br>【sy】“对的，卷死”<br>【sy 发送了一张照片】<br>【sy】“前两天做的保持器”<br>【sy】“治疗小朋友反颌的”<br>【我】“不懂”<br>【sy】“大五在医院实习”<br>【sy】“就是地包天的小朋友可以带了矫正”<br>【我】“噢噢”<br>【sy】“以后生小孩口腔有问题记得找我哈”<br>【sy】<code>笑哭</code><br>【我】“好好好，不找 s 大夫以外的”<br>【sy】<code>表情包（小狗，哈哈哈哈）</code><br>【sy】“发展客源”<br>【sy】“休息吧，明天早起赶高铁！回去过节（主要是我哥结婚）<code>笑哭</code> <code>笑哭</code> <code>笑哭</code>”</p></blockquote><p>初三的一次课间，她试图抱一下我，我想用手臂挡一挡，不过她还是在形式上用手臂把我围了起来。</p><p>还有一次班级投票上，我很光荣的得了一票，之后她告诉我：“大姐——！你那一票是我投的，嘿嘿。”</p><h1 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h1><p>五一当天在据点度过，平平无奇的一天。</p><p>五月初到 M 家去，晚上和领妹去看了电影。宫崎骏的重映电影没票了，和领妹一起看的间谍过家家。</p><p>买了绝味鸭脖和果粒橙，给领妹买了奶茶，领妹虽然之前说不吃鸭脖，在我的强烈推荐下发现还挺好吃的。</p><p>电影进行到大约四分之三的时候，领妹忽然起身，挨个把我们这排的座位试了一遍。</p><p>之后的五一剩余假期，基本比较摆烂，领妹虽然起的很早，照例是要回笼觉的。</p><p>领妹给我看了她画的画，包括接的稿，平时画的稿，还有放在门口鞋架上的画。</p><p>给我看画的同时，她乱七八糟地讲了很多自己的事。其中一幅，她说和她妈有关，从画的时间推测，那大概不是 M，我并不知道她那边到底发生了什么，但大概不会是愉快的事，我只能嗯一声回应。</p><p>领妹的补习实际上在五一之后，教学中她承认自己上课几乎完全没听，实际上也确实如此，结果是，我的课程事无巨细地涵盖了中档题及以下的所有知识点。领妹还是比较聪明的，发现了一个我一直没能发现的东西，给出了一个公式的几何上的直观。准确的说，就是 <a href="https://dropsong.github.io/posts/85db1ce6.html">高中物理讲义</a> 里“拓展（小车实验的基础）”那个公式。</p><p>可惜的是，领妹的学校实在心疼假期，后来又不放假了，于是五月我只上了两次课。</p><p>领妹给我画了一张橙色的猫。</p><p>平时出租屋里没人的时候，我要么在学习，要么关在房间里百无聊赖。</p><p>未果的远征：出去看了一下附近的图书馆，但是显然是不能带着我的机械键盘去咔哒咔哒地敲代码的，于是作罢。</p><h1 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h1><p>六月，我开始着手搜索引擎（玩具）的开发，因此回到了据点。</p><p>游戏方面，原神每天都投入时间做世界任务。王者荣耀猛玩一顿之后注销了账号，后来也过了冷静期。有些事就是需要冲动去做的，一个破账号，沉没成本罢了，一个无法真正从中得到休息和娱乐的游戏，并没有什么可惜的。</p><p>端午节前两天，我莫名想起本科时默默喜欢的同学。发现自己似乎对她仍有一丝喜欢，这让我感到不快。一方面这个喜欢没什么缘由，另一方面，以我自身的价值准则，喜欢上一个人就没办法喜欢上另一个人，而她可能甚至不太认识我，她只是我在昏暗的本科阶段给自己幻想出的一个影子，但这样她就事实上处于一种给我“上锁”（计算机术语）的状态。</p><p>于是我抱着被拒绝的心态，通宵写了一封情书。</p><p>古老又精致的做法，以前没写过，不知道以后还会不会写。</p><p>端午的前一天，补完觉后就一直在纠结，期间又打着游戏转移注意力。</p><p>怎么办呢？要发出去吗？我拿不准。</p><p>于是坐在床上再看一遍自己写的东西，我居然觉得这写的真好，不发出去算是辱没了。</p><p>至少当时我是这么觉得的：这是从出生到现在最有文化的一集。</p><p>于是便打定主意，要在端午节那天把这封情书发出去——虽然这个时间节点很怪，但我应当尽快，虽然那位姑娘大学里似乎是单着的（但其实不一定），可不代表之后也一直这样。</p><p>端午当天，应 M 之邀坐车去看龙舟。兴致寥寥，但我还是去了。</p><p>下午，我递交了它。</p><p>晚饭时候，我收到回复：</p><blockquote><p>你的文笔好好，有种看散文的感觉，哈哈，还有我也喜欢托萝莎的信里面的这句话！不过我现在对于感情方面还不够成熟，我不知道怎么样才叫喜欢一个人，我大学的时候自己去反馈别人的感情的时候，我感觉总会伤害或者辜负别人，可能我得再沉淀沉淀吧。所以你说的为什么喜欢上没有交集的人，其实我也不太懂，真的会情不知所起吗，不过我觉得你思考的多，肯定比我先懂。</p><p>那什么，其实我对你没什么印象，因为我们接触的也不多，对彼此的了解也不多，而且我有点脸盲，除非接触很长一段时间我才能记住长相，不过我记得你的名字，毕业实习摸鱼的时候你室友也跟我提过你，给我留下的印象就是很有个性（不过今天又多了一个印象就是很有文采）哈哈</p><p>谢谢你这么好的文字，我写不出来什么大道理，就也祝你人生有很多挚友，也有值得寄托自己感情的人。还有，什么没办法喜欢上别人这种话，你以后肯定会遇到跟你一样有个性的人的! </p></blockquote><p>看起来她似乎误解了一些细节，不过也无关紧要。如果留着对她的喜欢，再去喜欢另一个人的话，于我不太接受，我并非认为自己不会再倾心于其他人，只是以后再表白的时候，恐怕要写一封更好的。</p><p>遵守信中所言，我将情书从设备中删除。</p><p>虽然得到了她端午安康的祝愿，我还是感冒了两三天。感冒稍歇，我便立刻启程，<a href="https://dropsong.github.io/posts/167f15dc.html">去了苏州</a>。</p><p>回来把搜索引擎做出来了。</p><h1 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h1><p>月初，定了导师。</p><p>下午的邮件都以失败告终。有两位口碑俱佳实力也在线的导师，都发邮件礼貌的拒绝了我，其中一位还加上了微信，表示他的组活很多，对于跨考生可能压力很大，让我慎重。其他联系的导师俱无回复。</p><p>晚上，班群有人表示自己的导师还剩一个名额，大家可以发邮件联系，于是我便发了邮件，谁知一分钟后导师就打来电话，稍微确认了一下我的学习意志，就定了下来。</p><p>定下来之后，加导师微信暂时还没通过，就先和同门聊上。</p><p>同门表示，导师让她先好好休息两个礼拜，之后再制定学习计划。这实在是非常有道理，我当即决定开摆。</p><p>之后便去了烟台，说实话一般般，没有满意的照片。我因为没搽防晒霜，前肢和脖颈被晒伤了，脸倒是因为戴了帽子躲过一劫。</p><p><img src="https://bu.dusays.com/2025/01/09/677fe4b30f656.jpg" alt="96-5.jpg"></p><p>回到据点。领妹忽然在 QQ 上发了一张画给我，让我评价一下。之前住在一起的时候，她都是用我的手写笔画画的，我离开之后把这个用来记笔记的笔带走了。我便问她这是用手画的还是笔画的。那当然是手画的，大致想象了一下用手指头戳平板画画的场景。于是领妹转给我一笔钱（尽管我提出可以送，因为平替笔不贵），让我给她买个触控笔，等她从河南回来（推测可能是生母家），再交给她。</p><p>这期间 xk 因为要考研二战的缘故，暂住据点。B 也由于专升本上岸、暑假无事的缘故住了进来。然而我无法忍受这两位的生活习惯，素质上也和我的学校室友相去甚远，决定离开。联系了 M ，被拒绝。于是联系导师先到学校的临时宿舍住下来。</p><p>临时宿舍在顶层，同宿舍的有两个，一个身形略胖，一个瘦高个。身形略胖的，数竞出身，有读博意向。瘦高个和我虽然不是同门，两家导师却是联合培养的，因此等同师兄，一篇较好的文章在投。</p><p>据学长们所说，我的导师是一个 push 且 PUA 的人，正处于事业上升期。push 倒无所谓，PUA 恐怕也很难真的 PUA 到我，但是这是一个危险的信号，与她相处或许麻烦。</p><p>已经离开 C 市，亲手交给领妹已无可能，我将触控笔带到学校，从学校把东西寄到了河南。如果她的 QQ 生日信息不是瞎填的，那正好是领妹生日送到。</p><p>下旬，和 zr、zd 小聚了一下，zr 是特地坐火车过来的，我们吃了烤肉，随后找了个地方射箭，最后吃完晚饭散伙。</p><p>月底和这个导师面聊了一次。我找的话头是学校八月中旬要清空临时宿舍，她表示不会阻拦我回家，但是如果想留着也可以在开学前住她家。如此好意，我还是拒绝吧。</p><h1 id="八、九月"><a href="#八、九月" class="headerlink" title="八、九月"></a>八、九月</h1><p>由于临时宿舍将要清空，我在十号之前离开了。</p><p>八月，被导师的任务搞得 burn out 了，一本砖头书，量子信息的，实在是看不下去，还有阅读论文的要求，每周都有汇报的组会要求，真的燃尽了，心情非常糟糕。到最后，每周都是四天玩、三天学、天天熬夜的循环，早上的线上组会完全处于睡眠之中，不知道别人讲了啥，怎么讲的。</p><p>开车找 bxy 小聚，一个人开车挺不错，心旷神怡。</p><p>和 Z 约饭，泰国菜。期间我们聊到监控的事情，在我的“授权”下，他向我展示了 big brother 的神力，只要不在室内，我的一举一动都被监控拍下，包括前几天找 bxy 的行踪。</p><p>八月底联系换导师的事宜。</p><p>九月初出发去学校，在高铁上终于得到两方导师的同意，可以换导师了。我站在宿舍楼前，心里有说不出的畅快。</p><p>中旬，去了圆明园，体验了某位教授所说的——历史的“现场感”。</p><p><img src="https://bu.dusays.com/2025/01/10/677ff5824a096.jpg" alt="96-6.jpg"></p><p>民族的黑暗时刻，催人警醒。</p><p>月底，新导师开始了无休的组会，虽然是线上的，还是很累人。</p><h1 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h1><p>月初，和 zd <a href="https://dropsong.github.io/posts/a854c4ab.html">出游了承德</a>。</p><p>承德之行结束没多久，和 zd、wc, 还有之前的几个本科经常来串门的同学，一起吃了晚饭。总的来说，ghy 过的还可以，hzh 似乎辛苦点，但是发展应该也不错。这顿晚饭也就还行，流行的火锅形式，外加自助的小蛋糕之类的，还有大得非常夸张的海带。火锅这种东西真是有辱斯文，堂堂美食大国…</p><p><img src="https://as2.bitinn.net/uploads/legacy/wp/cj92egees01atxz5n0sdc0fwp.1200.jpg" alt="96-7"></p><p>黄金周大加班，过劫。还好同组的家人们非常给力，拆解任务都仰仗着了，我只负责执行一些相对简单的任务。</p><p>月底，心理健康课结束了，收到祝福：</p><p><img src="https://bu.dusays.com/2025/01/11/678146468fe57.jpg" alt="96-8.jpg"></p><h1 id="十一、十二月"><a href="#十一、十二月" class="headerlink" title="十一、十二月"></a>十一、十二月</h1><p>十一月找了一个后端实习。面试比想象中的要容易一点，主要是我把自己的博客 show 了出来，导致有话可说。</p><p>通勤地狱，每天通勤将近三个小时。路上我主要看小说、听播客。下班回家从地铁到公交的徒步，听一些音乐回复心情值。</p><p>认识俩北邮的，一个本科，一个研究生，都是后端。后来那个北邮的研究生好像因为被对象绿了，有一阵子没来。</p><p>十二月主要转向工程数学，停止了课外的学习。但是学到考试前也 burn out 了，干不了事情，考前也没写几个练习题。</p><p>和 zd 去了香山。我们先去吃了特色猪脚汤，虽然没有 M 做的好吃，但总归还不错。冬天的香山没什么可看的。</p><p>实习那边，邻座来了个科软的研究生，算法岗，交流了一些互联网公司的信息和大致的薪资水平、工作强度等。上班时间摸鱼去附近吃了晚饭、小逛一圈。</p><p>平安夜，公司找了两个员工 cos 圣诞老人，每人发了一个苹果。</p><p>十二月，开始办理护照，我的个人信息遇到了点麻烦，因此办理过程有点长。</p><h1 id="书、影视"><a href="#书、影视" class="headerlink" title="书、影视"></a>书、影视</h1><p>今年把看过的书和动漫电影之类的都放在 to-do 里面了，因此下面是按完成时间的顺序排序的。</p><table>  <tbody>    <tr>      <td><strong>名</strong></td>      <td><strong>简要备注/评价</strong></td>    </tr>    <tr>      <td>后窗</td>      <td>有趣</td>    </tr>    <tr>      <td>大王饶命</td>      <td>不太行，如果不是小鱼的话我是不会看的</td>    </tr>    <tr>      <td>伪恋</td>      <td>很早就可以猜到剧情发展</td>    </tr>    <tr>      <td>伪恋OAD</td>      <td>这种带着OAD后缀的一般是打擦边球的</td>    </tr>    <tr>      <td>rewrite</td>      <td>二刷</td>    </tr>    <tr>      <td>rewrite2</td>      <td>二刷</td>    </tr>    <tr>      <td>是，首相</td>      <td>好看</td>    </tr>    <tr>      <td>西北偏北</td>      <td>放现在看比较老套</td>    </tr>    <tr>      <td>爱丽丝和特蕾丝的幻影工厂</td>      <td>难以令人满意</td>    </tr>    <tr>      <td>漂流少年</td>      <td>非常好看，以后还要二刷</td>    </tr>    <tr>      <td>柯赛特的肖像</td>      <td>还行</td>    </tr>    <tr>      <td>《西域绘画9》</td>      <td>蛮有意思的其实，里面有地藏、十王、转轮王之类的东西，原来一些乡下的东西有这么多的宗教和历史。</td>    </tr>    <tr>      <td>大王饶命二</td>      <td>还是为了看小鱼</td>    </tr>    <tr>      <td>Netflix金融纪录片</td>      <td>勉勉强强，主要讲的美国人的生活，和中国人关系不大</td>    </tr>    <tr>      <td>魔法少女小圆</td>      <td>并没有某些人吹的那样黑深残，不过依然好看，圆神可爱</td>    </tr>    <tr>      <td>叛逆的物语</td>      <td>好看，晓美焰是神</td>    </tr>    <tr>      <td>魔法记录 魔法少女小圆外传</td>      <td>还行</td>    </tr>    <tr>      <td>原神错过剧情</td>      <td>补完了错过的限时活动剧情，还蛮长的</td>    </tr>    <tr>      <td>魔法纪录 魔法少女小圆外传 第二季</td>      <td>还行</td>    </tr>    <tr>      <td>海瑟</td>      <td>烂，充满了自以为是的混乱的情绪宣泄。人物动机不充分，除非将海瑟解释为未来的男主，这样全片的人物动机都顺了。但我看导演和影评人似乎也没有这么认为。</td>    </tr>    <tr>      <td>葬送的芙莉莲</td>      <td>非常好看，期待续作</td>    </tr>    <tr>      <td>你好世界</td>      <td>平庸</td>    </tr>    <tr>      <td>颠倒的帕特玛</td>      <td>一般</td>    </tr>    <tr>      <td>知晓天空之蓝的人啊</td>      <td>不太行</td>    </tr>    <tr>      <td>功夫熊猫4</td>      <td>这是圈钱来了。某些灰河居民行为动机不充分，强行正能量。为了不搞肤色歧视，出现了很多黑皮小动物（之前是没有的），例如黑皮猪，不过考虑到中国以前的猪种就是黑的，在某种意义上倒是更加中国了。</td>    </tr>    <tr>      <td>狼的孩子雨和雪</td>      <td>不喜欢。试图用温情掩盖主观导致的错误。</td>    </tr>    <tr>      <td>夏日幽灵</td>      <td>画面好看，但是剧情很单薄。</td>    </tr>    <tr>      <td>间谍过家家代号：白</td>      <td>不算好看，说实话间谍过家家有点像国内的熊出没</td>    </tr>    <tr>      <td>埃罗芒阿老师</td>      <td>好看</td>    </tr>    <tr>      <td>埃罗芒阿老师OVA</td>      <td>还行？</td>    </tr>    <tr>      <td>周处除三害</td>      <td>整个片子还是蛮迷惑的，不过那句“时间不多咯”挺有成梗气质的。</td>    </tr>    <tr>      <td>红高粱</td>      <td>好看</td>    </tr>    <tr>      <td>楚门的世界</td>      <td>好看</td>    </tr>    <tr>      <td>放牛班的春天</td>      <td>还行，莫名想起来 n 年前看的新加坡电影《孩子不坏》。</td>    </tr>    <tr>      <td>魁拔妖侠传</td>      <td>二刷</td>    </tr>    <tr>      <td>魁拔之十万火急</td>      <td>二刷，多少年前看的了这是。</td>    </tr>    <tr>      <td>魁拔之大战元泱界</td>      <td>二刷</td>    </tr>    <tr>      <td>魁拔Ⅲ战神崛起</td>      <td>二刷</td>    </tr>    <tr>      <td>是，首相二</td>      <td>好看</td>    </tr>    <tr>      <td>魁拔之殊途</td>      <td>好看</td>    </tr>    <tr>      <td>BEASTARS</td>      <td>挺好。可能做成动物拟人帮这部动画回避了一些争议。</td>    </tr>    <tr>      <td>BEASTARS第二季</td>      <td>烂。其实第一季末尾 hara 走马灯的时候我就隐约觉得不对劲，后来第二季一看：果然是个烂片。Netflix 你什么时候能整一个好看点的动画啊。</td>    </tr>    <tr>      <td>红楼（看了3集）</td>      <td>是的，只看了3集，作为一个原著党实在看不下去了。宝玉怎么长这样？黛玉怎么才这样？脸盲实在认不全人物，剧里面的妹子个个都长得差不多。而且书里是从宝黛小时候写的，这一开始直接上个大龄演员，实在难得原著的感觉。</td>    </tr>    <tr>      <td>这个杀手不太冷</td>      <td>不太行，不知为何这个电影被吹捧的这么高</td>    </tr>    <tr>      <td>海蒂和爷爷</td>      <td>什么也比不上咱瑞士的土地，瑞士的山脉和瑞士的河流！瑞士的土地就是有妙手回春的魔力！咱们瑞士真是太 bravo 啦！（以上吐槽）...也就还行，整个剧情一眼看到头。</td>    </tr>    <tr>      <td>魁拔妖侠传 中秋特别版</td>      <td>算是补全了一些设定？</td>    </tr>    <tr>      <td>讲故事的艺术（尼尔·盖曼）</td>      <td>有意思的是，看着这个课程的时候，盖曼先生正陷入丑闻中。</td>    </tr>    <tr>      <td>通往夏天的隧道，离别的出口</td>      <td>平庸。</td>    </tr>    <tr>      <td>Mom Dead and Dearest</td>      <td>相当骇人听闻。</td>    </tr>    <tr>      <td>教父</td>      <td>我说不好。</td>    </tr>    <tr>      <td>枪炮病菌与钢铁</td>      <td>可能沾点决定论了？</td>    </tr>    <tr>      <td>命运石之门</td>      <td>好看</td>    </tr>    <tr>      <td>命运石之门剧场版：负荷领域的既视感</td>      <td>好看</td>    </tr>    <tr>      <td>败犬女主太多了</td>      <td>还行，挺欢乐的</td>    </tr>    <tr>      <td>命运石之门：聪明睿智的认知计算</td>      <td>这是 IBM 的广告</td>    </tr>    <tr>      <td>聪明理财经济学</td>      <td>好像是 Netflix 出品的垃圾</td>    </tr>    <tr>      <td>《美国的智慧》</td>      <td>林语堂的书，总的来说比较蹩脚。里面大段大段地引用别人的作品，查重率太高。</td>    </tr>    <tr>      <td>股市 The Stock Market</td>      <td>忘了是谁家的纪录片了，总之讲的比较浅</td>    </tr>    <tr>      <td>命运石之门23β：境界面上的缺失之环</td>      <td>还行</td>    </tr>    <tr>      <td>命运石之门0</td>      <td>挺好</td>    </tr>    <tr>      <td>大红灯笼高高挂</td>      <td>一般，故事挺单薄的，可能是小说就写的不好。</td>    </tr>    <tr>      <td>物语系列 外传季怪物季</td>      <td>这玩意居然还有续作。</td>    </tr>    <tr>      <td>美国工厂</td>      <td>蠢蛋真多。</td>    </tr>    <tr>      <td>《夜晚的潜水艇》</td>      <td>个人主观排序：夜晚的潜水艇、尺波、竹峰寺，其余平庸。</td>    </tr>    <tr>      <td>胆大党</td>      <td>一般</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>2024 真的好忙。</p><p>这种事无巨细的总结，实在是太长太累人了，也许以后要换一种形式。</p><p>未觉池塘春草梦，阶前梧叶已秋声。</p><p>Well, Let’s call it a year.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;const zr, wc&lt;br&gt;const_list = {F, M, B, Z, zd, zr, wc}&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;&lt;i&gt;光怪陆离的世界，&lt;/i&gt;&lt;/center&gt;
&lt;center&gt;&lt;</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 零碎笔记</title>
    <link href="https://dropsong.github.io/posts/a5f2d934.html"/>
    <id>https://dropsong.github.io/posts/a5f2d934.html</id>
    <published>2024-12-15T14:21:51.000Z</published>
    <updated>2024-12-15T15:12:35.651Z</updated>
    
    <content type="html"><![CDATA[<p>接手了一个前后端不分离的学校项目，似乎历史悠久。</p><p>以后一些关于 Java 的零碎笔记可能也会放在这里。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>在 linux 上配置 Java 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure><p>在 vscode 上配置 java 开发环境，安装推荐插件即可。然后在 <code>settings.json</code> 中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;java.configuration.runtimes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaSE-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/lib/jvm/java-17-openjdk-amd64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>一个 java 的 <code>HelloWorld.java</code> 程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 terminal 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p>输出 <code>Hello, World!</code> 。</p><p>在官网安装 tomcat（例如：apache-tomcat-9.0.96.tar.gz）。</p><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvzf apache-tomcat-9.0.96.tar.gz -C /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">sudo <span class="built_in">mv</span> apache-tomcat-9.0.96 tomcat9</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">su root</span><br><span class="line"><span class="built_in">cd</span> /opt/tomcat9/bin</span><br><span class="line">sudo ./startup.sh</span><br></pre></td></tr></table></figure><p>如果一切正常，会得到类似如下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Using CATALINA_BASE:   /opt/tomcat9</span><br><span class="line">Using CATALINA_HOME:   /opt/tomcat9</span><br><span class="line">Using CATALINA_TMPDIR: /opt/tomcat9/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /opt/tomcat9/bin/bootstrap.jar:/opt/tomcat9/bin/tomcat-juli.jar</span><br><span class="line">Using CATALINA_OPTS:   </span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>打开浏览器，访问 <code>http://localhost:8080</code>，可以看到 Tomcat 的欢迎页面。</p><p>安装 Maven :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install maven</span><br></pre></td></tr></table></figure><p><code>mvn clean package</code> 是 Maven 的一个常用命令，用于清理项目并打包构建应用。它包含以下两部分操作：</p><ol><li><strong>clean</strong>：Maven 会删除之前的构建文件，清理 <code>target</code> 目录（这是 Maven 默认的输出目录）。清理操作确保新的构建不会受到上一次构建遗留文件的影响。</li><li><strong>package</strong>：这个阶段会根据项目的 <code>pom.xml</code> 文件中定义的构建配置，编译源代码、运行测试（如果有的话），然后将项目打包成一个可执行的格式，比如 JAR（Java Archive）或 WAR（Web Archive）文件。这个打包的文件会存放在 <code>target</code> 目录下。</li></ol><p>这个命令常用于 Java 项目的标准构建流程。如果项目配置了 Maven，执行该命令后生成的 JAR 或 WAR 文件就是最终要运行或部署的可执行文件。</p><p>但是这个命令非常慢！试情况我们可以跳过一些不必要的过程（参考<a href="https://stackoverflow.com/questions/21090915/the-maven-build-takes-too-long">The maven build takes too long</a>），在项目文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests -T 1C -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将编译好的 WAR 文件部署到 Tomcat。通常，使用 Maven 构建后，WAR 文件会生成在 <code>target/</code> 目录下。将该文件复制到 Tomcat 的 <code>webapps/</code> 目录中。Tomcat 会自动解压和部署这个 WAR 文件。</p><p>部署成功后，打开浏览器，访问： <code>http://localhost:8080/your-project-name</code> .</p><h1 id="零碎操作"><a href="#零碎操作" class="headerlink" title="零碎操作"></a>零碎操作</h1><p>进入 mysql 命令行，建立 database ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 表名;</span><br></pre></td></tr></table></figure><p>导入数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p 表名 &lt; .sql文件路径</span><br></pre></td></tr></table></figure><p>按项目要求，修改密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;你知道的太多了&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接手了一个前后端不分离的学校项目，似乎历史悠久。&lt;/p&gt;
&lt;p&gt;以后一些关于 Java 的零碎笔记可能也会放在这里。&lt;/p&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://dropsong.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>工程数学</title>
    <link href="https://dropsong.github.io/posts/70707e46.html"/>
    <id>https://dropsong.github.io/posts/70707e46.html</id>
    <published>2024-11-24T14:15:15.000Z</published>
    <updated>2025-01-11T05:30:10.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="矩阵论"><a href="#矩阵论" class="headerlink" title="矩阵论"></a>矩阵论</h1><p>一些内容补充可以参考之前的线性代数笔记。</p><p>矩阵论（上）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1_hr3beNETh4BuP_dC56z-CanZj7VSAom/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>矩阵及其基本运算  4<br>矩阵的特征值与特征向量  5<br>特征值估计（圆盘定理）  7<br>LU 分解（Doolittle 分解，Crout 分解…）  12<br>QR 分解  26<br>满秩分解  27<br>奇异值分解  31<br>线性空间的基、维数与坐标  35<br>过渡矩阵  40<br>子空间交与和（和空间、直和、补空间）  47<br>广义逆  58<br>赋范线性空间  77<br>柯西不等式  83<br>方阵空间上的范数  85<br>向量范数的诱导范数  91<br>赋范线性空间中的距离  97<br>对角占优  100<br>内积空间  102<br>内积空间的度量矩阵  109<br>正交多项式  117</p></blockquote><p>矩阵论（下）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1oIzE19iDoQkOFjlJ6an3y-p6T1ESo2VF/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>线性变换及其运算  1<br>不变子空间  13<br>表示矩阵  14<br>λ 矩阵  28<br>Smith 标准型、不变因子  31<br>初等因子  33<br>k 阶行列式因子  35<br>Jordan 块  46<br>Jordan 标准形  47<br>凯莱-哈密顿定理  59<br>零化多项式、最小多项式  61<br>常系数线性微分方程组  73<br>矩阵的高次幂（Jordan标准型法） 76<br>矩阵函数的幂级数定义  77<br>利用若尔当标准型求矩阵函数  83<br>矩阵函数的一般定义与计算  85<br>一阶常系数微分方程组的初值问题  91<br>n 阶常系数线性微分方程  97</p></blockquote><h1 id="数值分析"><a href="#数值分析" class="headerlink" title="数值分析"></a>数值分析</h1><p>数值分析（上）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1QWepbP1XJfODGaW721caKKg-BWE7-0XV/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>数值分析的研究对象和特点  1<br>误差的来源与分类（模型误差、观测误差、截断误差、舍入误差、有效数字） 5<br>减少误差的原则  17<br>数学问题的稳定性、病态良态  23<br>数值稳定性  29<br>迭代法的构造  36<br>迭代法的收敛性与收敛速度  42<br>事后估计、事前估计  48<br>平均收敛速度  51<br>渐近收敛速度  52<br>雅可比迭代公式  54<br>高斯-赛德尔公式  55<br>SOR 迭代法  60<br>迭代法的矩阵表示  62<br>非线性方程的数值解法  75<br>二分法  79<br>试位法  83<br>不动点迭代  88<br>迭代法的收敛性（利普希茨常数、…） 91<br>p 阶收敛  99<br>艾特金加速法  104<br>斯蒂芬森迭代法  106<br>牛顿（Newton）迭代法  114<br>牛顿迭代法的收敛性  119<br>牛顿迭代法的重根处理（…、弦截法）  123<br>解非线性方程组的迭代法  131<br>不动点迭代法  134<br>牛顿迭代法  138</p></blockquote><p>数值分析（下）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1Z3MUTnMLpDMnZzWD0ws4wCCLyrDrFgSI/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br><strong>第五章 数值逼近方法和数值微积分</strong><br>插值问题与插值多项式  4<br>插值余项与误差估计  11<br>线性插值与二次插值  17<br>拉格朗日插值  20<br>均差与牛顿插值公式  31<br>Runge 现象  50<br>埃尔米特插值  52<br>埃尔米特插值的拉格朗日型插值基函数法  54<br>牛顿型 Hermite 插值  60<br>连续函数的最佳平方逼近  66<br>===&gt; 问题的提法与求解  70<br>===&gt; 基于幂函数的最佳平方逼近  84<br>===&gt; 基于正交多项式的逼近函数类  88<br>===&gt; 五种重要的正交多项式  91<br>数值求积公式及代数精度  107<br>插值型求积公式  113<br>Newton-Cotes公式  116<br>复化求积公式  124<br>龙贝格求积法  134<br>高斯型求积公式（高斯-勒让德公式、高斯-切比雪夫求积公式 …） 148<br>数值微分  160<br>泰勒展开法求数值微分  162<br>用插值多项式函数求数值微分  167<br>将数值微分转化为求数值积分  175<br><strong>第六章  常微分方程的数值解法</strong><br>欧拉法  186<br>梯形法  193<br>预估校正法（改进欧拉法） 197<br>单步法的误差分析和稳定性<br>===&gt; 整体截断误差和局部截断误差  198<br>===&gt; 收敛性和整体截断误差  204<br>===&gt; 稳定性  207<br>龙格库塔方法  214<br>标准四阶 R-K 方法的绝对稳定区域  229<br>变步长的龙格—库塔方法  231<br>线性多步法  233<br>预估-校正算法  243<br>多环节的 Adams 预估－校正公式  246</p></blockquote><h1 id="运筹学"><a href="#运筹学" class="headerlink" title="运筹学"></a>运筹学</h1><div class="row"><iframe src="https://drive.google.com/file/d/1r_B4ce51ffYDzGTw7U0rSRbDE85G2XmS/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>线性规划问题及其数学模型  1<br>单纯形法原理  5<br>单纯形法计算步骤  12<br>单纯形法的进一步讨论（人工变量、两阶段） 16<br>线性规划的对偶问题  21<br>对偶问题的基本性质  26<br>===&gt; 单纯形法计算的矩阵描述  27<br>===&gt; 对偶问题的基本性质  29<br>影子价格  31<br>对偶单纯形法  33<br>灵敏度分析  36<br>非线性规划的基本概念  44<br>无约束极值问题  50<br>约束极值问题  56<br>===&gt; 最优性条件  56<br>===&gt; 制约函数法  73</p></blockquote><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>题目：</p><p><img src="https://bu.dusays.com/2025/01/11/67820095d07fb.png" alt="94-1-1.png"></p><p><img src="https://bu.dusays.com/2025/01/11/6782009575d13.png" alt="94-1-2.png"></p><p>答案：</p><p><img src="https://bu.dusays.com/2025/01/11/678200d2341d5.jpg" alt="94-2-1.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d277c90.jpg" alt="94-2-2.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d587c6a.jpg" alt="94-2-3.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d56461c.jpg" alt="94-2-4.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d45327f.jpg" alt="94-2-5.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d361533.jpg" alt="94-2-6.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d7ed0d3.jpg" alt="94-2-7.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d6c4317.jpg" alt="94-2-8.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d5d8a20.jpg" alt="94-2-9.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/678200d8f39d0.png" alt="94-2-10.png"></p><p><img src="https://bu.dusays.com/2025/01/11/678201405e6be.jpg" alt="94-2-11.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/67820142617d6.jpg" alt="94-2-12.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/6782014051796.jpg" alt="94-2-13.jpg"></p><p><img src="https://bu.dusays.com/2025/01/11/6782014436fd6.png" alt="94-2-14.png"></p><p><img src="https://bu.dusays.com/2025/01/11/67820141ca677.png" alt="94-2-15.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;矩阵论&quot;&gt;&lt;a href=&quot;#矩阵论&quot; class=&quot;headerlink&quot; title=&quot;矩阵论&quot;&gt;&lt;/a&gt;矩阵论&lt;/h1&gt;&lt;p&gt;一些内容补充可以参考之前的线性代数笔记。&lt;/p&gt;
&lt;p&gt;矩阵论（上）：&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
		&lt;if</summary>
      
    
    
    
    <category term="数学" scheme="https://dropsong.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://dropsong.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="矩阵论" scheme="https://dropsong.github.io/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    <category term="数值分析" scheme="https://dropsong.github.io/tags/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/"/>
    
    <category term="运筹学" scheme="https://dropsong.github.io/tags/%E8%BF%90%E7%AD%B9%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>实习笔记一</title>
    <link href="https://dropsong.github.io/posts/b9315374.html"/>
    <id>https://dropsong.github.io/posts/b9315374.html</id>
    <published>2024-11-10T14:22:04.000Z</published>
    <updated>2025-03-23T15:48:18.859Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些实习期间学到的知识，本文有不少 AI 生成的内容，只经过有限的人工检查。</p><p>一些外部链接如果不能访问，可以尝试去 archive.org 查看。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>参考： <a href="https://www.bilibili.com/video/BV14s4y1i7Vf">https://www.bilibili.com/video/BV14s4y1i7Vf</a></p><h2 id="简介、安装"><a href="#简介、安装" class="headerlink" title="简介、安装"></a>简介、安装</h2><p>问题：在实际生产中，应用程序的部署、环境配置过程往往非常复杂。</p><p>Docker 是一个用于 build, run, share 应用程序的平台。</p><p>Docker 和 虚拟机的区别：</p><p><img src="https://s2.loli.net/2024/11/10/8oENtB3Lbfj7g6d.png" alt="93-1.png"></p><p>基本原理和概念：</p><p><img src="https://s2.loli.net/2024/11/10/YVSoThfkgOptKDL.png" alt="93-2.png"></p><p>镜像就是一个模板，容器就是这个模板的一个实例（可以有一个，也可以有多个）。</p><p>镜像如何分享给别人呢？<strong>Docker 仓库</strong>是用来存储 docker 镜像的地方。最流行的仓库就是 <strong>Dockerhub</strong>，我们可以在这个平台下载各种镜像，也可以将自己的镜像上传，这样就可以实现镜像的共享和复用。</p><p>下载安装不提。</p><p>启动 docker, 在命令行中键入 <code>docker version</code>，可以看到输出了 Client 和 Server 下面的一堆信息。</p><p><strong>docker client 和 docker daemon 之间通过 Socket 或者 RESTful API 进行通信。</strong></p><p>Docker Daemon 是服务端的守护进程，负责管理 Docker 的各种资源。</p><h2 id="容器化、Dockerfile"><a href="#容器化、Dockerfile" class="headerlink" title="容器化、Dockerfile"></a>容器化、Dockerfile</h2><p>容器化（containerization），就是将应用程序打包成容器，然后在容器中运行应用程序的过程。</p><ul><li>创建一个 Dockerfile</li><li>使用 Dockerfile 构建镜像</li><li>使用镜像创建和运行容器</li></ul><p>Dockerfile 是一个文本文件，用来告诉 Docker 如何构建镜像。一个简单的示例：</p><p><img src="https://s2.loli.net/2024/11/10/6WNCzeTdjLmn4QZ.png" alt="93-3.png"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>mkdir HelloDocker, touch file <code>index.js</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello Docker&quot;</span>)</span><br></pre></td></tr></table></figure><p>we can run this code with nodejs.</p><p>如果我们想要在另一个环境中运行这个应用程序，需要：</p><ol><li>安装操作系统</li><li>安装 JavaScript 运行环境（NodeJS）</li><li>复制应用程序、依赖包、配置文件</li><li>执行启动命令运行程序</li></ol><p><strong>有了 Docker 之后，就可以把这些步骤写到 Dockerfile 中。</strong> 剩下的工作交给 Docker 自动完成。</p><p>我们需要先指定一个基础镜像，镜像是按层次结构来构建的，每一层都是基于上一层。</p><p>touch file <code>HelloDocker/Dockerfile</code> :</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br></pre></td></tr></table></figure><p>14 表示 nodejs 的版本，<code>alpine</code> 表示这个镜像是基于 alpine 这个 Linux 发行版（一个非常轻量级的发行版）来构建的。</p><p>源路径：相对于 Dockerfile 文件的路径。<br>目标路径：相对于镜像的路径。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.js /index.js</span></span><br></pre></td></tr></table></figure><p>然后我们需要在镜像中运行应用程序：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;node&quot;</span>, <span class="string">&quot;/index.js&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>完成。完整的 Dockerfile 如下：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> index.js /index.js</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;node&quot;</span>, <span class="string">&quot;/index.js&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>在 terminal 中键入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hello-docker .</span><br></pre></td></tr></table></figure><p>如果一切顺利，镜像就构建完成了。</p><p>可以使用 <code>docker image ls</code> 查看所有的镜像。</p><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-docker</span><br></pre></td></tr></table></figure><p>一些 docker 命令：</p><p><img src="https://s2.loli.net/2024/11/10/YIQk5exACP3cbU1.png" alt="93-4.png"></p><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>os : windows11</p><p>前提：需要 Java 环境。</p><p>下载：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>解压，配置环境变量。</p><p>启动：在 bin 目录下 <code>.\elasticsearch.bat</code> ，若配置了环境变量，也可以直接 <code>elasticsearch</code> 。</p><p>访问 <a href="https://localhost:9200/">https://localhost:9200/</a> 。</p><p>若忘记密码，则需要重新配置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS D:\elasticsearch\elasticsearch-8.15.3\bin&gt; elasticsearch-reset-password -u elastic</span><br><span class="line">warning: ignoring JAVA_HOME=C:\Program Files\Microsoft\jdk-17.0.9.8-hotspot\; using bundled JDK</span><br><span class="line">This tool will reset the password of the [elastic] user to an autogenerated value.</span><br><span class="line">The password will be printed in the console.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password for the [elastic] user successfully reset.</span><br><span class="line">New value: (here will be your new password)</span><br></pre></td></tr></table></figure><p>注意，修改密码时，ElasticSearch 需要处于启动状态。</p><p>拓展资料：</p><ul><li><a href="https://www.bilibili.com/video/BV1yb421J7oX">Elastic Search是什么？Lucene是什么？架构是怎么样的？</a></li><li><a href="https://elastic.ac.cn/guide/en/elasticsearch/reference/current/starting-elasticsearch.html#_run_elasticsearch_from_the_command_line">启动 Elasticsearch</a></li></ul><div class="row"><iframe src="https://drive.google.com/file/d/1ZhyDc1snNy-ii3YAhTUTdaueMITLAMt1/preview" style="width:100%; height:550px"></iframe></div><h1 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h1><p>MinIO 是根据 GNU Affero 通用公共许可证 v3.0 发布的对象存储系统。它与 Amazon S3 云存储服务 API 兼容。它能够处理非结构化数据，例如照片、视频、日志文件、备份和容器映像，支持的最大对象大小为 50TB。</p><p>下载：<a href="https://min.io/download?license=agpl&amp;platform=windows#/windows">https://min.io/download?license=agpl&amp;platform=windows#/windows</a></p><p>注意不要下载到企业版本。</p><p>拓展资料：</p><ul><li><a href="https://cloud.google.com/learn/what-is-object-storage?hl=zh-CN">什么是对象存储？</a></li><li><a href="https://tonybai.com/2020/03/16/build-high-performance-object-storage-with-minio-part1-prototype/">使用minio搭建高性能对象存储-第一部分：原型</a></li><li><a href="https://blog.csdn.net/The_girl_wait_me/article/details/124605007">文件服务器MinIO的下载与安装</a></li></ul><h2 id="什么是对象存储"><a href="#什么是对象存储" class="headerlink" title="什么是对象存储"></a>什么是对象存储</h2><p>对象存储也称为基于对象的存储，是一种计算机数据存储架构，旨在处理大量非结构化数据。与其他架构不同，它将数据指定为不同的单元，并捆绑元数据和唯一标识符，用于查找和访问每个数据单元。</p><p>这些单元（或对象）可以存储在本地，但通常存储在云端，以便于从任何地方轻松访问数据。由于对象存储具有横向扩容能力，它的可伸缩性几乎没有限制，并且存储大量数据的成本也低于块存储等其他存储方法。</p><p>如今的许多数据都是非结构化的，无法很好地存储在传统数据库中，包括电子邮件、媒体和音频文件、网页、传感器数据和其他类型的数字内容。因此，寻找高效且经济实惠的方法来存储和管理这类数据成为了一个难点。越来越多的企业将对象存储作为存储静态内容、数据架构和备份的首选方法。</p><p><strong>对象存储的定义</strong> :</p><blockquote><p>对象存储是用于存储非结构化数据的数据存储架构，它将数据划分为单元（对象），并存储在结构扁平的数据环境中。每个对象都包含数据以及应用可用于轻松访问和检索对象的元数据和唯一标识符。</p></blockquote><h2 id="对象存储的工作原理"><a href="#对象存储的工作原理" class="headerlink" title="对象存储的工作原理"></a>对象存储的工作原理</h2><p>在对象存储中，一个文件的数据块被共同保存为一个对象，并连同其相关的元数据和自定义标识符放入被称为存储池的扁平数据环境中。</p><p>当您需要访问数据时，对象存储系统将使用唯一标识符和元数据来查找所需的对象，例如图片或音频文件。您还可以自定义元数据，从而添加可用于其他用途（例如用于数据分析的检索）的上下文。  </p><p>您可以使用 RESTful API、HTTP 和 HTTPS 查询对象元数据，以查找和访问对象。由于对象存储在全局存储池中，因此您可以快速轻松地找到所需的确切数据。此外，扁平环境使您能够快速扩容，即便是 PB 或 EB 级负载也毫不费力。存储池可以分布在多个对象存储设备和地理位置中，因此规模不受限制。随着数据量的增长，您只需向池中添加更多存储设备即可。</p><p>对象存储的优势（例如弹性和可伸缩性）使其成为管理云基础设施中非结构化数据的理想选择。那么，什么是云对象存储呢？顾名思义，也就是作为按需云服务提供的基于对象的存储。事实上，对于大多数大型云服务提供商而言，云对象存储是主要的存储格式。</p><h2 id="对象存储、文件存储、块存储"><a href="#对象存储、文件存储、块存储" class="headerlink" title="对象存储、文件存储、块存储"></a>对象存储、文件存储、块存储</h2><p>多年来，随着互联网的发展以及数据源和数据类型的不断丰富，全世界的数据存储需求也在不断演变。传统的文件存储和块存储并不能很好地处理产生的海量数据，尤其是天生不适合结构化数据存储方法的非结构化数据。 </p><p>那么，对象存储与文件存储和块存储有什么区别呢？</p><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>文件存储将数据存储和整理到文件夹中，类似于您保存在办公室的纸质文件系统中的物理文件。如果您需要某个文件中的信息，则需要知道哪个房间、文件柜、抽屉和文件夹包含该特定文件。文件存储使用相同的分层存储结构，文件被命名，以元数据标记，然后放入文件夹中。</p><p>要找到某个数据，您需要知道查找该数据的正确路径。随着时间的推移，文件变得越来越多，搜索和检索数据文件可能会变得非常耗时。虽然可伸缩性较为有限，但通过这种方法可以很容易地存储几乎任何类型的少量数据，并且可供多个用户同时访问。</p><h3 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h3><p>块存储在文件存储的基础上提升了性能，它将文件拆分为多个单独的块并单独存储。块存储系统会为每个原始数据块分配一个唯一标识符，当您需要访问完整的文件时，系统将使用唯一标识符将数据块重组为完整的文件。块存储不需要单一的数据路径，因此您可以将其存储在最方便的位置，并且在需要时仍然能够快速检索。</p><p>块存储非常适合需要处理大量事务型数据或使用任务关键型应用的组织，可提供低延迟和一致的性能。但是，块存储费用高昂，不提供元数据功能，并且需要操作系统才能访问块。</p><h3 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h3><p>如前所述，对象存储将文件存储为扁平数据环境（即存储池）中的独立对象，对象包含全部数据、唯一标识符和详细元数据（元数据包含关于数据、权限、政策和其他应急情况的信息）。对象存储最适合非结构化数据的静态存储，您只写入一次数据，但可能需要多次读取。</p><p>虽然对象存储不需要目录、文件夹和其他复杂的分层结构，但却不适合用来存储不断变化的动态数据，因为修改对象需要重写整个对象。根据您的速度和性能要求，在某些情况下文件存储和块存储可能仍然适合您的需求。  </p><p>对象存储有哪些优势？</p><ul><li>高可伸缩性<ul><li>您可以轻松横向扩容对象存储的扁平架构，而不会受到文件存储或块存储那样的限制。对象存储基本没有大小限制，因此只需添加新设备，即可将数据扩大到 EB 级。</li></ul></li><li>降低复杂性<ul><li>对象存储没有文件夹或目录，也就不具有层次结构系统的大多数复杂性。由于没有复杂的树或分区，检索文件变得十分轻松，因为您不需要知道确切位置。</li></ul></li><li>易于搜索<ul><li>元数据是对象的一部分，使您无需借助单独的应用即可轻松搜索和导航。它也更加灵活，并且可以深度自定义。您可以使用各种属性和信息来为对象添加标记，例如用量、费用以及自动删除、保留和分层的政策。</li></ul></li><li>弹性<ul><li>对象存储可以自动复制数据并存储在多个设备和多个地理位置。这有助于防范服务中断和数据丢失，并可为灾难恢复策略提供支持。</li></ul></li><li>成本效益<ul><li>对象存储在设计时考虑了成本因素，与基于文件和块的系统相比，能够以更低的价格存储大量数据。使用对象存储时，您只为需要的容量付费，即使存储大量数据，也能很好地控制费用。</li></ul></li></ul><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>os: win11</p><p><a href="https://developer.aliyun.com/article/1134566">https://developer.aliyun.com/article/1134566</a></p><p>启用管理插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>访问管理界面： <code>http://localhost:15672</code> .</p><p>默认的用户名和密码是：</p><ul><li>用户名: guest</li><li>密码: guest</li></ul><p>默认的 RabbitMQ 服务端口通常是 5672（用于 AMQP 协议），而 15672 是管理界面的端口。</p><p>拓展资料：</p><ul><li><a href="https://kucw.io/blog/2020/11/rabbitmq/">RabbitMQ 介紹（二）- RabbitMQ 用法介紹</a></li><li><a href="https://developer.aliyun.com/article/1148418">Linux安装RabbitMq（图文解说详细版）</a></li><li><a href="https://developer.aliyun.com/article/1134566">RabbitMQ Windows 安装、配置、使用 - 小白教程</a></li></ul><h1 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h1><p>一些平时自娱自乐时不会遇到的 git 操作，直接将情况描述清楚给 AI，AI 的回复一般没什么问题。VSCode 的 git 插件很好，一定要装。</p><h2 id="同步远程分支到本地分支"><a href="#同步远程分支到本地分支" class="headerlink" title="同步远程分支到本地分支"></a>同步远程分支到本地分支</h2><p>你当前在本地分支 <code>dev-test</code> 上，而你想同步远程分支 <code>dev-annotation-data</code> 的更新到本地。有以下步骤可以完成这个需求：</p><p><strong>步骤 1：拉取远程分支到本地</strong></p><p>首先，你需要确保远程分支 <code>dev-annotation-data</code> 是最新的。使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin dev-annotation-data</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><ul><li><code>git fetch</code> 会从远程仓库获取 <code>dev-annotation-data</code> 的最新代码，但不会影响你的工作目录。</li><li>现在，远程分支 <code>origin/dev-annotation-data</code> 的最新代码已在本地缓存。</li></ul><p><strong>步骤 2：合并远程分支的内容到当前分支</strong></p><p>如果你想直接将 <code>dev-annotation-data</code> 的更新合并到当前分支 <code>dev-test</code>，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/dev-annotation-data</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><ul><li><code>dev-annotation-data</code> 的更新会合并到当前分支 <code>dev-test</code>。</li><li>如果有冲突，Git 会提示你解决冲突，解决后需要 <code>git add</code> 和 <code>git commit</code>。</li></ul><p><strong>步骤 3：检查结果</strong></p><p>查看合并后的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>确认是否还有未解决的冲突或未提交的文件。</p><p><strong>其他场景：如果你需要单独创建本地分支来跟踪远程分支</strong></p><p>如果你想在本地独立处理 <code>dev-annotation-data</code> 的更新，可以新建一个分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev-annotation-data origin/dev-annotation-data</span><br></pre></td></tr></table></figure><p>这会创建一个新的本地分支 <code>dev-annotation-data</code>，并与远程分支保持同步。随后你可以选择是否将它的更改合并到 <code>dev-test</code>。</p><p><strong>其他场景：如果你的工作有未提交的改动</strong></p><p>你当前有修改的文件（<code>cache.py</code>）和未跟踪的文件（<code>requirements_copy.txt</code>）。在执行合并前，建议保存这些改动：</p><ol><li><p><strong>提交改动</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Save local changes&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>或者临时保存改动（Stash）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>合并完成后再恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure></li></ol><p>按照这些步骤操作后，应该可以成功同步 <code>dev-annotation-data</code> 的更新到你的本地环境。</p><blockquote><p>git merge origin/dev-annotation-data<br>error: Your local changes to the following files would be overwritten by merge:<br>        该路径已和谐/cache.py<br>Please commit your changes or stash them before you merge.<br>Aborting</p></blockquote><p>出现这个错误是因为你本地对 <code>cache.py</code> 的修改未提交，而远程分支 <code>origin/dev-annotation-data</code> 对这个文件也有改动。Git 不允许直接合并，以免丢失本地未提交的更改。</p><p>以下是解决方案：</p><p><strong>选项 1：提交本地更改然后合并</strong></p><ol><li><p><strong>查看本地更改</strong>：<br>确保你的本地更改是你想要保留的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 该路径已和谐/cache.py</span><br></pre></td></tr></table></figure></li><li><p><strong>提交本地更改</strong>：<br>如果更改是需要的，可以先提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add 该路径已和谐/cache.py</span><br><span class="line">git commit -m <span class="string">&quot;Save local changes to cache.py&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>执行合并</strong>：<br>现在可以合并远程分支了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/dev-annotation-data</span><br></pre></td></tr></table></figure><p>如果有冲突，Git 会提示你解决冲突。解决冲突后，需要重新提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;冲突文件&gt;</span><br><span class="line">git commit -m <span class="string">&quot;Resolve merge conflict&quot;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>选项 2：暂存本地更改（Stash）然后合并</strong></p><p>如果你不想立即提交本地更改，可以使用 <code>git stash</code> 临时保存更改：</p><ol><li><p><strong>保存更改到 Stash</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>这样本地的未提交更改会被暂时存储。</p></li><li><p><strong>合并远程分支</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/dev-annotation-data</span><br></pre></td></tr></table></figure></li><li><p><strong>恢复 Stash</strong>：<br>合并完成后，可以恢复之前保存的更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>如果有冲突，Git 会提示你解决冲突。</p></li></ol><p><strong>选项 3：放弃本地更改</strong></p><p>如果你不需要保留本地更改，可以直接丢弃：</p><ol><li><p><strong>放弃更改</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore 该路径已和谐/cache.py</span><br></pre></td></tr></table></figure></li><li><p><strong>执行合并</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/dev-annotation-data</span><br></pre></td></tr></table></figure></li></ol><p><strong>推荐</strong><br>根据你的具体需求选择：</p><ul><li><strong>需要保留更改</strong>：选项 1 或选项 2。</li><li><strong>不需要保留更改</strong>：选项 3。</li></ul><p>如果不确定，可以先使用选项 2，将更改暂存后再决定如何处理。</p><h1 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h1><blockquote><p>“模块与模块之间通过 grpc 调用”，这句话通常是什么意思</p></blockquote><p>“模块与模块之间通过 gRPC 调用” 通常是指在一个系统中，不同的模块（或服务、组件）通过 gRPC（Google Remote Procedure Call） 协议进行通信。</p><p>gRPC 是 Google 开发的一个开源、高性能的 RPC 框架，全称是 <strong>gRPC Remote Procedure Call</strong>。它基于 <strong>HTTP/2</strong> 协议，使用 <strong>Protocol Buffers（简称 Protobuf）</strong> 作为数据序列化格式。简单来说，gRPC 让你可以像调用本地函数一样调用远程服务，但背后是通过网络传输完成的。</p><p>和传统的 REST API（基于 HTTP/1.1 和 JSON）相比，gRPC 有<strong>更高的性能</strong>、<strong>更小的消息体积</strong>和<strong>更强的类型安全性</strong>，非常适合微服务架构或需要高效通信的场景。</p><p><strong>Protocol Buffers（Protobuf）</strong>，这是一个二进制序列化工具，比 JSON 或 XML 更紧凑、更快。</p><p>先定义一个 <code>.proto</code> 文件，里面描述服务和数据结构（类似接口定义）。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">service UserService &#123;</span><br><span class="line">  rpc GetUser (UserRequest) returns (UserResponse);</span><br><span class="line">&#125;</span><br><span class="line">message UserRequest &#123;</span><br><span class="line">  int32 id = 1;</span><br><span class="line">&#125;</span><br><span class="line">message UserResponse &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  int32 age = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用 Protobuf 编译器生成代码（支持多种语言，比如 Java、Go、Python），这些代码会帮你处理序列化和反序列化。</p><p><strong>HTTP/2</strong>  </p><ul><li>gRPC 用 HTTP/2 代替了 HTTP/1.1，支持多路复用（多个请求复用一个连接）、头部压缩和双向流（客户端和服务器可以同时发消息）。</li><li>这比 REST 的每次请求都开新连接效率高很多。</li></ul><p><strong>服务端和客户端</strong>  </p><ul><li>服务端实现 <code>.proto</code> 文件定义的服务逻辑。</li><li>客户端通过生成的代码直接调用服务端的方法，就像调用本地函数一样。</li></ul><p><strong>四种通信模式</strong>  </p><ul><li><strong>一元 RPC</strong>：类似 REST 的请求-响应模型（客户端发请求，服务端返回结果）。</li><li><strong>服务端流式 RPC</strong>：客户端发一次请求，服务端返回一个数据流（比如实时日志）。</li><li><strong>客户端流式 RPC</strong>：客户端持续发送数据流，服务端处理后返回结果（比如上传大数据）。</li><li><strong>双向流式 RPC</strong>：客户端和服务端都可以随时发送和接收数据（比如聊天应用）。</li></ul><div class="table-container"><table><thead><tr><th>特性</th><th>gRPC</th><th>REST</th></tr></thead><tbody><tr><td>协议</td><td>HTTP/2</td><td>HTTP/1.1</td></tr><tr><td>数据格式</td><td>Protobuf（二进制）</td><td>JSON/XML（文本）</td></tr><tr><td>性能</td><td>高（体积小、速度快）</td><td>相对低</td></tr><tr><td>类型安全</td><td>强（有严格定义）</td><td>弱（依赖文档）</td></tr><tr><td>双向通信</td><td>支持</td><td>不支持</td></tr><tr><td>学习曲线</td><td>稍陡（需要学 Protobuf）</td><td>简单（JSON 直观）</td></tr></tbody></table></div><h1 id="fastapi"><a href="#fastapi" class="headerlink" title="fastapi"></a>fastapi</h1><h2 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h2><p>普通函数（同步）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>read_root</code> 和 <code>read_item</code> 是普通的同步函数。它们会被 FastAPI 按同步方式运行，直到函数执行完毕后返回响应。</p><p>异步函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>read_root</code> 和 <code>read_item</code> 是异步函数（<code>async def</code>），它们允许在函数内部使用 <code>await</code> 调用其他异步操作，例如异步数据库查询或 HTTP 请求。</p><p>对于简单的逻辑（如返回静态数据），同步和异步函数性能没有明显差别。IO 密集型任务（如数据库操作或 HTTP 请求），异步函数通常表现更优。</p><p>FastAPI 内部使用了 <a href="https://www.starlette.io/">Starlette</a> 框架，而 Starlette 支持异步和同步函数。</p><ul><li><strong>同步函数</strong>：会在后台被包装为异步协程来执行。</li><li><strong>异步函数</strong>：原样执行，完全异步处理。</li></ul><h2 id="parse-obj、from-orm"><a href="#parse-obj、from-orm" class="headerlink" title="parse_obj、from_orm"></a>parse_obj、from_orm</h2><p>注意使用 Pydantic 的 parse_obj 和 from_orm 方法简化代码。</p><p>下面这段代码是否可以使用 orm 技术简化代码？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和 AI 的聊天记录中，原字段已经替换为 aaa</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_non_empty_fields</span>(<span class="params">self, db: Session</span>) -&gt; CompletenessOut:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        统计 CompletenessOut 对应字段非空值的个数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用 SQLAlchemy 的 func 来统计每个字段的非空值</span></span><br><span class="line">        result = db.query(</span><br><span class="line">            func.count(self.model.id_photo).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.cn_name).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.en_name).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.birthdate).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.email).label(<span class="string">&quot;email&quot;</span>),</span><br><span class="line">            func.count(self.model.tel).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.id_type).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.id_number).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.gender).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.nationality).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.political_status).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.technical_title).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.personal_profile).label(<span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">            func.count(self.model.subject).label(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">        ).<span class="built_in">filter</span>(</span><br><span class="line">            <span class="comment"># 排除删除标志的条件（如果有逻辑删除字段）</span></span><br><span class="line">            <span class="comment"># self.model.is_deleted == False</span></span><br><span class="line">        ).first()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将结果转换为 CompletenessOut 格式</span></span><br><span class="line">        <span class="keyword">return</span> CompletenessOut(</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            email=result.email,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">            aaa=result.aaa,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>改进版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_non_empty_fields</span>(<span class="params">self, db: Session</span>) -&gt; CompletenessOut:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    统计 CompletenessOut 对应字段非空值的个数，排除已软删除的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取所有需要统计的字段名（排除特殊字段）</span></span><br><span class="line">    fields = [</span><br><span class="line">        field <span class="keyword">for</span> field <span class="keyword">in</span> self.model.__table__.columns.keys()</span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">in</span> CompletenessOut.__fields__</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动态构建统计表达式</span></span><br><span class="line">    count_expressions = [</span><br><span class="line">        func.count(<span class="built_in">getattr</span>(self.model, field)).label(field) <span class="keyword">for</span> field <span class="keyword">in</span> fields</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行查询，过滤掉已软删除的记录</span></span><br><span class="line">    result = (</span><br><span class="line">        db.query(*count_expressions)</span><br><span class="line">        .<span class="built_in">filter</span>(self.model.deleted_at.is_(<span class="literal">None</span>))  <span class="comment"># 过滤掉 deleted_at 非空的数据</span></span><br><span class="line">        .first()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用字典解构和 **kwargs 动态生成 CompletenessOut 实例</span></span><br><span class="line">    <span class="keyword">return</span> CompletenessOut(**&#123;field: <span class="built_in">getattr</span>(result, field) <span class="keyword">for</span> field <span class="keyword">in</span> fields&#125;)</span><br></pre></td></tr></table></figure><p>优势：</p><ol><li>可维护性高：如果 <code>CompletenessOut</code> 的字段发生变化，只需更新 Pydantic 模型，无需修改查询逻辑。</li><li>代码简洁：减少显式列出字段的重复代码，逻辑更易读。</li><li>通用性强：如果需要统计其他模型的字段，几乎可以直接复用这段代码。</li></ol><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><p>虽然面试的时候问了一大堆，实际工作的时候并不会用到很复杂的知识。</p><p>才来的几天，暴露出的问题是沟通成本高：</p><ul><li>睡眠不足，导致神志不清。这个主要是由于熬夜的习惯，不过后来改正了一些，就还好。</li><li>思维方式偏向文字而不是说话。<ul><li>具体例子：我在飞书上打了一段不算长的文字，向产品经理详细描述了我的疑问，但是产品经理更倾向于直接跑到我工位上口头沟通。</li></ul></li></ul><p>环境问题：</p><ul><li>小众的 linux 发行版可能会遇到大问题，例如 debian 稳定版的依赖比较过时，很多东西装起来很麻烦。如果要用 linux ，或许 Ubuntu 这种流行的东西要好一点。</li><li>即便是 Windows，也有一些装不上的包。但是我负责编写的代码并不会用到这个包，因此暂时就没管。</li><li>得出结论：也许应该转向 Ubuntu 或者依赖比较新的 linux 发行版。</li><li>安装不同的 Python 版本，Windows 比较方便，debian 则比较麻烦（我还自己编译过，但是出了一堆问题），Ubuntu 则非常方便。</li><li>安装 requirements 遇到冲突会很麻烦，有时需要到官网上查看，实在不行就换个相近的版本吧。</li><li>写 Python 代码，PyCharm 比 VSCode 更方便，具体体现在代码规范，和一些辅助功能上。但是实际上我还是用了 VSCode，换过来有点适应成本。</li></ul><p>Apifox 非常方便，和 postman 相比集成了更全面一体的功能，而且易于管理。右上角可以选择环境。</p><p>用飞书沟通远比国内流行的微信强，会议还有 AI 摘要功能，可用性挺高的。</p><p><strong>AI 辅助编程：</strong></p><ul><li>关于 AI 使用，带教老师的原话是，这个项目，除了那些带着 token, password 之类的你不能丢上去，其他无所谓。</li><li>现在免费 AI 中也许 deepseek 更好， 当时我使用的是 chatgpt 对话，同时在 VSCode 中有补全代码的 AI 插件（真的非常方便）。</li></ul><p>一段我在实习中写的提示词：</p><center><p style="color: red;">- - - - -  prompt start - - - - -</p></center><p>现在有一个新的需求，统计 <code>??</code> 的人数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&#x27;/你猜/是什么/链接&#x27;</span>, response_model=一个<span class="keyword">class</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> ???<span class="number">1</span>(</span><br><span class="line">        *,</span><br><span class="line">        request: Request,</span><br><span class="line">        db: Session = Depends(deps.get_db),</span><br><span class="line">) -&gt; ???1Out:</span><br><span class="line">    auth_action.auth_path(request)</span><br><span class="line">    <span class="keyword">return</span> ???_action.get_???<span class="number">1</span>(db)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_</span>???<span class="number">1</span>(db: Session) -&gt; ???1Out:</span><br><span class="line">    <span class="keyword">return</span> ???_crud.get_???<span class="number">1</span>(db)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRUD</span>???Static(CRUDBase[???, BaseModel, BaseModel]):</span><br><span class="line">    <span class="comment"># ... 省略</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_</span>???<span class="number">1</span>(self, db: Session) -&gt; ???1Out: </span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>相关结构：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和谐</span></span><br></pre></td></tr></table></figure><p>通过表 ?? 统计双一流的时候，对于每一个 ??(即表中数据的主键)，通过 ?? 的外键统计 ?? 中，是否含有 ?? ，若有则计数加一。</p><p>?? 表的结构：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 河蟹</span></span><br></pre></td></tr></table></figure><p>?? 表的结构，?? 是你需要关注的字段：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和谐</span></span><br></pre></td></tr></table></figure><p>?? 的信息在列表 ???1_?? 中，你可以直接使用，格式为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">???1_?? = [</span><br><span class="line">    <span class="string">&quot;你知道&quot;</span>,</span><br><span class="line">    <span class="string">&quot;的&quot;</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&quot;太多了&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>根据这段提示词，AI 一次就给出了可以正确运行的代码。</strong></p><center><p style="color: red;">- - - - -  prompt end - - - - -</p></center><p>基本上，只要描述地足够清晰，对于简单任务，AI 的可用性还是不错的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一些实习期间学到的知识，本文有不少 AI 生成的内容，只经过有限的人工检查。&lt;/p&gt;
&lt;p&gt;一些外部链接如果不能访问，可以尝试去 archive.org 查看。&lt;/p&gt;
&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="计算机" scheme="https://dropsong.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="搜索引擎" scheme="https://dropsong.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    <category term="docker" scheme="https://dropsong.github.io/tags/docker/"/>
    
    <category term="ElasticSearch" scheme="https://dropsong.github.io/tags/ElasticSearch/"/>
    
    <category term="MinIO" scheme="https://dropsong.github.io/tags/MinIO/"/>
    
    <category term="RabbitMQ" scheme="https://dropsong.github.io/tags/RabbitMQ/"/>
    
    <category term="中间件" scheme="https://dropsong.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="对象存储" scheme="https://dropsong.github.io/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
    <category term="git" scheme="https://dropsong.github.io/tags/git/"/>
    
    <category term="gRPC" scheme="https://dropsong.github.io/tags/gRPC/"/>
    
    <category term="fastapi" scheme="https://dropsong.github.io/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>电网的分形层析成像</title>
    <link href="https://dropsong.github.io/posts/f33a0f8e.html"/>
    <id>https://dropsong.github.io/posts/f33a0f8e.html</id>
    <published>2024-11-04T04:29:37.000Z</published>
    <updated>2024-11-29T14:07:29.481Z</updated>
    
    <content type="html"><![CDATA[<p>Fractal Tomography for Power Grids 《电网的分形层析成像》</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>这本书引入了一种新的 <strong>分形断层扫描（Fractal Tomograph，FT）</strong> 概念来研究电网中的大、小扰动。书中发现了一种称为<strong>活动网络孪生（Active Network Twins，ANT）的数学表达式，其与人类DNA有着惊人的相似性</strong>。ANT构成了分析的主干。<strong>线路潮流和负荷电压是由ANT组成的，被称为构成断层扫描的分形</strong>。前三章讨论了这些新概念。一个显著的特点是，对断层扫描进行细微观察就足以检测到电网在过去、现在或未来的问题。<strong>基因编辑类似的方法</strong>在第四章中被解释用来控制潮流和电压。<strong>书中用假设的网络图示说明了美加地区令人费解的环流、印度的一次城市停电以及尼泊尔的断电情况，并且在第五章和第六章中简洁地确定了原因</strong>。频率交汇点及区块链方法应用于电力成本（第七章、第八章）是全新的视角。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这部分介绍了分形理论的历史背景及其在电网中的应用。</p><p>豪斯多夫维数（Hausdorff Numbers）用于数学描述形状。尽管分形的数学形式已经非常丰富，但其与自然现象的物理依赖性仍然难以解释。引文中提到了“Get the physics right, rest is mathematics”（“抓住物理规律，其余只是数学”）的指导思想，作者<strong>以此为基础将分形应用于电网分析。</strong></p><p><strong>电网中的分形</strong>：</p><ul><li>传统的曼德布罗分形方法不考虑物理拓扑，而电网的MW（兆瓦）和电压模式与物理拓扑有直接关系。<strong>通过对电网中功率平衡和基尔霍夫定律的分析，可以得出电力和电压的分形表达式</strong>，这些分形<strong>可用于断层扫描分析（tomographic analysis）</strong>，帮助预测故障、控制异常和管理流量逆转等问题。</li><li>电网中的<strong>分形表达式始终保留了与生成它们的“种子”（即电力或电压）的联系</strong>，这与数值方法的区别在于后者会与原始数据脱节。</li></ul><h2 id="Active-Network-Twins"><a href="#Active-Network-Twins" class="headerlink" title="Active Network Twins"></a>Active Network Twins</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>提出创新概念 <strong>主动网络双胞胎（ANT）</strong> ，用于电网中<strong>计算线流和电压</strong>。这一概念<strong>与人类DNA的作用相似</strong>，它决定了电网的性能和行为。该章的重点是介绍ANT的背景、定义、公式推导，以及其在电网中的实际应用。</p><p>作者指出，电力系统像人类身体一样，依赖于能量的流动和系统的稳定性。ANT像DNA一样，包含了电网的重要参数和拓扑结构信息，它可以用于描述电力系统中各种物理量（如电压、功率）的关系和演化。</p><p>电网的拓扑结构和参数通过<strong>Z矩阵</strong>（阻抗矩阵）来描述，负载被表示为阻抗。ANT则是这一结构中的一个核心元素，可以在不依赖复杂迭代方法的情况下，快速计算电网中的线流和电压。ANT的定义和作用类比于人类DNA中的基因，它记录了电网元件与发电机之间的关系。</p><h3 id="ANT与DNA的类比"><a href="#ANT与DNA的类比" class="headerlink" title="ANT与DNA的类比"></a>ANT与DNA的类比</h3><p>ANT与DNA的结构类似，具体表现为：</p><ul><li><strong>I²</strong>（电流平方）被视为电网的“基因”，而电网参数则相当于“核苷酸”。</li><li>ANT方程中的网络参数和电流平方一起定义了电网元件的电气特性。</li></ul><p><img src="https://bu.dusays.com/2024/11/04/67284f473fa54.png" alt="fig2_1.png"></p><p>图2.1展示了DNA与ANT的类比，DNA中的双螺旋结构对应于ANT中电流平方与网络参数的相互作用。</p><h3 id="相关公式"><a href="#相关公式" class="headerlink" title="相关公式"></a>相关公式</h3><p>ANT的推导基于电力系统的基本电路定律。以下是一些重要的公式：</p><ul><li><p>设Z-net是电网的阻抗矩阵，其中包含负载阻抗。对于一个元件 $ e $ ，其连接的节点为 $ m $ 和 $ n $，则该元件的电压可以表示为：</p><script type="math/tex; mode=display">v_{ei} = \xi_{ei} I_{ii}</script><p>其中，$ \xi_{ei} $ 是电网阻抗矩阵的相关元素，$ I_{ii} $ 是发电机的电流平方。</p></li><li><p>功率计算可以通过以下公式进行：</p><script type="math/tex; mode=display">p_{ei} + jq_{ei} = \left( \xi_{ei} \xi_{ei}^* y_e^* \right) I_{ii}^2</script><p>这里，ANT项为 $ \xi_{ei} \xi_{ei}^{*} y_{e}^{*} $ ，类似于DNA的双链。</p></li><li><p>进一步推导中，发电机的功率可以表示为：</p><script type="math/tex; mode=display">P_i + j Q_i = I_{ii}^2 (R_{ii} + jX_{ii})</script><p>其中，$ R_{ii} $ 和 $ X_{ii} $ 分别为阻抗矩阵的实部和虚部（即阻抗的实部和虚部）。由此，可以通过发电机功率计算出网络中各元件的电流平方和功率。</p></li></ul><p>为了简化计算，ANT引入了<strong>平方域</strong>的概念。传统电力系统分析使用的是基尔霍夫电流定律（KCL）下的线性域，而在ANT方法中，使用电流平方（I²）来表示电力系统中的功率流动。</p><ul><li><strong>I²域的好处</strong>：电流平方始终为正数，避免了交流电波形中电流的正负交替。在平方域内，非线性的电力系统变量转化为线性的SD变量（平方域电压和电流），简化了系统分析。</li></ul><p>在这一框架下，ANT可以像CT扫描一样，通过计算网络中的元件功率，分析系统中潜在的异常和问题。ANT在网络分析中的好处是，它可以预先计算，并且不需要复杂的迭代求解。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p><img src="https://bu.dusays.com/2024/11/04/67284f4711b4c.png" alt="fig2_4.png"></p><p>图2.4展示了一个简化的电网系统，该系统由两个发电机组成，分别向两个不同的负载提供功率。通过ANT和平方域，可以轻松地计算出每个负载消耗的功率。</p><p>公式计算如下：</p><ul><li>$ Z = Z_{net} = \left[ \frac{40}{3} || 40 \right] = [10] $</li><li>电流平方 $ I_{11}^2 = \frac{100 \times 10^6}{10} = 10 \times 10^6 $</li><li><p>功率分布：</p><script type="math/tex; mode=display">\text{Power in } \frac{40}{3} \Omega = (ANT)_{40/3,1} \times I_{11}^2 + (ANT)_{40/3,2} \times I_{22}^2 = 225 \, \text{MW}</script><script type="math/tex; mode=display">\text{Power in } 40 \Omega = (ANT)_{40,1} \times I_{11}^2 + (ANT)_{40,2} \times I_{22}^2 = 75 \, \text{MW}</script></li></ul><h3 id="ANT的优势"><a href="#ANT的优势" class="headerlink" title="ANT的优势"></a>ANT的优势</h3><ul><li>ANT方法不依赖于传统的基尔霍夫电流定律（KCL），而是通过直接的功率计算来分析电网。</li><li><strong>无需迭代求解</strong>，可以快速响应电网的操作需求。</li><li>ANT能帮助电网操作员分析系统的运行状态，并提供线流、负载电压的诊断信息。</li></ul><h2 id="Fractals-and-Tomographs"><a href="#Fractals-and-Tomographs" class="headerlink" title="Fractals and Tomographs"></a>Fractals and Tomographs</h2><h3 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h3><p>介绍了分形在电力系统中的应用，尤其是<strong>如何通过分形断层图分析电网中的功率和电压模式</strong>。作者强调，通过将电力系统中的物理现象（如线流和电压）与分形图案相结合，可以深入理解电网的运行状况。</p><p>电网中的功率流动和电压变化是一种可测量的物理现象。通过将这些现象与分形数学结合，作者提出了<strong>分形断层图（fractal tomographs）</strong> 的概念。它<strong>类似于CT扫描图</strong>，可以帮助电网操作员诊断和监测电网中的异常行为。</p><h3 id="线流分形（Lineflow-Fractals）"><a href="#线流分形（Lineflow-Fractals）" class="headerlink" title="线流分形（Lineflow Fractals）"></a>线流分形（Lineflow Fractals）</h3><p>电网的拓扑结构可通过<strong>节点-元件矩阵（Node-Element Matrix）</strong> 来表示。该矩阵描述了网络中各个节点（如发电机和负载）之间的连接关系。对于一个简单的4节点、5元件系统，节点-元件矩阵可以通过以下方式定义：</p><ul><li>假设传输线元件连接节点1-3、2-3、1-4、2-4和3-4，且各节点带有负载阻抗，则可以构建一个节点-元件矩阵A，列表示元件，行表示节点。</li></ul><p>电压和功率的分形可以从该节点-元件矩阵推导出来。具体来说，通过计算分形系数，可以得到每个元件的线流和电压模式。</p><h3 id="电压分形（Voltage-Fractals）"><a href="#电压分形（Voltage-Fractals）" class="headerlink" title="电压分形（Voltage Fractals）"></a>电压分形（Voltage Fractals）</h3><p><strong>电压分形描述了电力系统中电压的分布模式，尤其是负载节点的电压分布。</strong> 通过计算电压分形，可以预测电网中的低电压区域，帮助操作员采取适当的措施避免过载或电压崩溃。</p><p>电压分形是线流分形的延伸。通过将各节点的电压模式与网络的拓扑结构结合，生成断层图，展示电网中电压的分布情况。</p><h3 id="负载分形（Load-Fractals）"><a href="#负载分形（Load-Fractals）" class="headerlink" title="负载分形（Load Fractals）"></a>负载分形（Load Fractals）</h3><p>负载分形描述了负载节点的功率消耗模式。电网中的负载往往分布不均匀，不同节点的功率消耗受到网络中其他节点的影响。通过负载分形，可以分析各负载节点的功率需求，预测潜在的负荷问题。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f471589c.png" alt="fig3_2.png"></p><p>例如，图3.2展示了一个三节点系统，其中每个节点连接到负载和发电机。通过计算负载分形，可以得出各节点消耗的功率，并评估网络中的功率平衡情况。</p><h3 id="相关公式-1"><a href="#相关公式-1" class="headerlink" title="相关公式"></a>相关公式</h3><p>在电网分析中，分形通过数学公式推导出来。以下是一些重要的公式：</p><ul><li><p><strong>线流分形公式</strong>：电网中任意元件的线流可以表示为：</p><script type="math/tex; mode=display">p_{ei} + jq_{ei} = \left( \xi_{ei} \xi_{ei}^* y_e^* \right) I_{ii}^2</script><p>其中，$ \xi_{ei} $ 是电网的阻抗矩阵元素，$ I_{ii}^2 $ 是发电机的电流平方，$ p_{ei} $ 和 $ q_{ei} $ 分别为元件的有功功率和无功功率。</p></li><li><p><strong>电压分形公式</strong>：电压分形表示电网中节点电压的分布模式。对于某个元件，其电压可以表示为：</p><script type="math/tex; mode=display">v_{ei} = \xi_{ei} I_{ii}</script><p>其中，$ v_{ei} $ 是元件的电压，$ \xi_{ei} $ 是网络中的分形系数，$ I_{ii} $ 是发电机的电流。</p></li><li><p><strong>负载分形公式</strong>：负载分形描述了负载节点的功率消耗模式。总的负载功率可以通过以下公式计算：</p><script type="math/tex; mode=display">P_{\text{load}} = \sum_{i=1}^{n} \text{fractal power of load}_i</script><p>该公式说明，负载节点的功率是所有发电机分形功率的总和。</p></li></ul><h3 id="分形断层图（Fractal-Tomographs）作用"><a href="#分形断层图（Fractal-Tomographs）作用" class="headerlink" title="分形断层图（Fractal Tomographs）作用"></a>分形断层图（Fractal Tomographs）作用</h3><p>分形断层图的关键在于它可以像医学中的CT扫描一样，<strong>识别电网中的异常情况</strong>。通过分形断层图，操作员可以识别电网中的高线流区域、低电压区、功率流反转等问题，并采取适当的修正措施。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f474d44a.png" alt="fig3_5.png"></p><p>图3.5展示了一个元件的分形断层图，外圈代表发电机的功率，内圈代表元件的阻抗和负载。通过分形断层图，可以将电网中的每个发电机与负载之间的关系具体化，便于操作员识别问题。</p><p>分形断层图的优点：</p><ul><li><strong>非迭代计算</strong>：分形断层图不需要迭代计算，可以快速得出电网的状态。</li><li><strong>前向和后向计算</strong>：操作员可以通过分形断层图进行前向计算（预测未来的电网状态）或后向计算（分析过去的黑启动或故障）。</li><li><strong>简化复杂系统</strong>：分形断层图将复杂的电网分析问题简化为多个分形计算，使得系统的可操作性大大提高。</li></ul><h2 id="Editing"><a href="#Editing" class="headerlink" title="Editing"></a>Editing</h2><h3 id="概要-2"><a href="#概要-2" class="headerlink" title="概要"></a>概要</h3><p>第4章 <strong>Editing（编辑）</strong> 介绍了如何通过分形断层图（Fractal Tomographs）<strong>对电网进行修正</strong>，以提高其运行效率，预防故障或解决问题。作者提出了一种<strong>编辑分形的概念，类似于基因编辑</strong>，目的是通过对分形的修改来影响电网的整体行为，进而优化其性能。</p><h3 id="39节点新英格兰系统的实例"><a href="#39节点新英格兰系统的实例" class="headerlink" title="39节点新英格兰系统的实例"></a>39节点新英格兰系统的实例</h3><p>为了展示分形编辑的应用，作者以<strong>39节点的新英格兰电网系统</strong>为例。该系统包含39个节点和多个发电机，电网操作员可以通过分形断层图分析系统中的各个线流和电压。以下是该系统的关键要素：</p><ul><li><strong>网络结构</strong>：包含发电机、传输线和负载节点，系统拓扑结构通过节点-元件矩阵表示。</li><li><strong>功率流动</strong>：各个发电机的功率通过传输线输送到负载，各条传输线上的线流由发电机的分形贡献决定。</li></ul><h3 id="分形编辑的关键步骤"><a href="#分形编辑的关键步骤" class="headerlink" title="分形编辑的关键步骤"></a>分形编辑的关键步骤</h3><p>分形编辑的过程包括以下几个步骤：</p><ol><li><p><strong>构建分形断层图</strong>：<br>使用网络的拓扑结构和发电机的功率，计算出各个元件的分形断层图。这些断层图包含了电网中的线流分形和电压分形。</p></li><li><p><strong>分析异常情况</strong>：<br>通过分形断层图，识别电网中的异常情况，比如某条传输线的线流过大、某个节点的电压过高或功率反向流动等。这些问题会导致系统不稳定。</p></li><li><p><strong>编辑分形</strong>：<br>根据异常情况，调整相关元件的分形。类似于基因编辑，通过修改分形，可以影响电网的功率流动和电压分布。例如，减少某个发电机的分形贡献，或者重新分配功率负荷，都是常见的编辑操作。</p></li><li><p><strong>重新计算线流和电压</strong>：<br>编辑完成后，重新计算整个系统的线流和电压，确保系统回到正常运行状态。此过程不需要迭代，可以通过一次性计算完成。</p></li></ol><h2 id="Power-Reversals-and-Loop-Flows"><a href="#Power-Reversals-and-Loop-Flows" class="headerlink" title="Power Reversals and Loop Flows"></a>Power Reversals and Loop Flows</h2><h3 id="概要-3"><a href="#概要-3" class="headerlink" title="概要"></a>概要</h3><p>第5章 Power Reversals and Loop Flows（功率反转与环流）探讨了<strong>电网中功率反转与环流的问题</strong>，分析了这些现象如何影响电网的稳定性与安全性，并<strong>通过分形断层图提供解决方案</strong>。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><strong>功率反转（Power Reversals）</strong> 是指电力在传输线上反向流动的现象，即电力从负载端回流到发电端。功率反转会导致传输线的实际功率流与预期方向相反，这可能导致线路过载、设备损坏，甚至引发更大范围的系统故障。</li><li><strong>环流（Loop Flows）</strong> 是指电力在电网中的环路中循环流动，而不是按照预定路径输送到负载。这些环流可能是由电网中某些区域的电力过剩或不足引起的，常见于电力市场环境下的不同电力供应商之间的互联。</li></ul><p>这些现象不仅对电网的运行效率产生负面影响，还可能造成<strong>传输线的拥塞，导致局部地区电力不足或过载</strong>。作者通过数学建模和分形断层图分析，提出了检测和解决这些问题的方法。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f48f2934.png" alt="fig5_1.png"></p><p>图5.1展示了<strong>美国和加拿大的地理电网布局</strong>，其中五大湖区的湖边环流问题尤为严重。功率流在不同的区域间来回流动，甚至可能导致不稳定的电压和频率波动。</p><h3 id="线流断层图的公式"><a href="#线流断层图的公式" class="headerlink" title="线流断层图的公式"></a>线流断层图的公式</h3><p><strong>线流计算公式</strong>：在线流断层图中，每条传输线的功率可以表示为多个发电机的分形贡献之和：</p><script type="math/tex; mode=display">p_e = \sum_{i=1}^{n} \text{Fractal Power of Generator } i \text{ on line } e</script><p>如果某条线出现功率反转，则可以通过减小相关发电机的分形贡献来解决问题。</p><p><strong>反向功率的公式推导</strong>：功率反转发生时，可以表示为：</p><script type="math/tex; mode=display">P_{\text{reversal}} = -P_{\text{expected}}</script><p>当线路功率反转时，传输方向与预期相反，因此需要调整发电机的输出或修改网络拓扑结构，以防止系统过载。</p><h3 id="环流与相角调节器（Phase-Angle-Regulator-PAR）的解决方案"><a href="#环流与相角调节器（Phase-Angle-Regulator-PAR）的解决方案" class="headerlink" title="环流与相角调节器（Phase-Angle Regulator, PAR）的解决方案"></a>环流与相角调节器（Phase-Angle Regulator, PAR）的解决方案</h3><p>环流问题通常发生在电力市场的自由交易过程中，由于不同区域的发电量和负荷分布不均，导致电力无法按预期路径传输。为了解决这一问题，作者提出了使用 <strong>相角调节器（PAR）</strong> 来控制环流。相角调节器通过调整传输线路的相位角，改变功率流动的方向，从而防止电力在环路中循环。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f4b7fa14.png" alt="fig5_7.png"></p><p>图5.7展示了环流、功率反转与拥塞的关系，通过合理使用相角调节器，可以有效减少传输线的拥塞，平衡系统中的功率流动。</p><h3 id="环流的检测与控制"><a href="#环流的检测与控制" class="headerlink" title="环流的检测与控制"></a>环流的检测与控制</h3><p><strong>环流的检测可以通过分形断层图进行。</strong> 分形断层图为电网操作员提供了电力在不同路径上的流动信息，并帮助他们快速识别功率反转或环流问题。通过分形分析，操作员可以提前发现问题并采取相应措施。</p><p><strong>分形断层图的构建过程</strong>：</p><ol><li><strong>构建电网拓扑结构</strong>：使用节点-元件矩阵表示电网的连接情况。</li><li><strong>计算分形贡献</strong>：通过发电机的功率贡献计算各个传输线的分形功率。</li><li><strong>分析功率流动</strong>：通过分形断层图识别功率反转和环流区域，并计算各个元件的功率流动。</li></ol><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>作者通过一个实际案例分析了美国-加拿大电网中的一次环流现象。在2003年发生的北美大停电事件中，功率反转和环流是导致大规模停电的主要原因之一。通过分形断层图的分析，作者指出了电网操作员在检测和处理环流时存在的挑战，并展示了如何通过分形编辑来解决这些问题。</p><p>环流与功率反转的影响：</p><ul><li><strong>系统稳定性</strong>：环流和功率反转会导致传输线过载，甚至引发整个系统的不稳定性。</li><li><strong>资源分配效率低下</strong>：由于电力在不必要的环路中循环，导致资源的浪费，电网的运行效率大大降低。</li><li><strong>市场运作的复杂性</strong>：在电力市场中，环流和功率反转会使得电价波动更加剧烈，并可能导致区域之间的电力交易冲突。</li></ul><h2 id="Blackouts"><a href="#Blackouts" class="headerlink" title="Blackouts"></a>Blackouts</h2><h3 id="概要-4"><a href="#概要-4" class="headerlink" title="概要"></a>概要</h3><p>第6章 Blackouts（停电）主要讨论了电网中的<strong>大规模停电事件，分析了其原因、影响及预防措施</strong>。通过分形断层图的应用，作者提出了一种<strong>创新的停电分析方法</strong>，能够帮助操作员更好地理解停电的演变过程，并在停电发生前及时采取措施。该章包括若干重要停电事件的案例分析，如印度孟买网络和2003年美国-加拿大大停电。</p><h3 id="孟买网络的案例分析"><a href="#孟买网络的案例分析" class="headerlink" title="孟买网络的案例分析"></a>孟买网络的案例分析</h3><p>作者首先分析了<strong>孟买网络</strong>中的一次停电事件。孟买的电力网络复杂，负载密集，因此对传输线的要求非常高。通过分形断层图，作者识别出该网络中多个节点的电压过低和线流过载，这些异常现象会导致停电的发生。</p><ul><li><strong>电压断层图</strong>：分形断层图可以实时监控电压的变化，低电压区域表示负载压力较大，操作员可以通过编辑分形来增加该区域的电压供应。</li><li><strong>线流断层图</strong>：线流过载是导致停电的直接原因。通过断层图，可以识别出哪些传输线已经接近其容量极限，并通过功率重新分配来减少负载。</li></ul><h3 id="2003年美国-加拿大大停电的案例分析"><a href="#2003年美国-加拿大大停电的案例分析" class="headerlink" title="2003年美国-加拿大大停电的案例分析"></a>2003年美国-加拿大大停电的案例分析</h3><p>通过分形断层图，作者分析了这次停电的演变过程。停电的主要原因是俄亥俄州的一条传输线失效，随后连锁反应导致多个发电机失效，功率分配失衡，最终导致整个系统崩溃。</p><p>作者通过构建电压和线流断层图，<strong>展示了功率流动是如何从一个区域扩展到其他区域的</strong>，最终导致整个系统的频率失控和黑启动。</p><h2 id="Frequency-Rendezvous"><a href="#Frequency-Rendezvous" class="headerlink" title="Frequency Rendezvous"></a>Frequency Rendezvous</h2><h3 id="概要-5"><a href="#概要-5" class="headerlink" title="概要"></a>概要</h3><p>第7章 Frequency Rendezvous（频率会合）介绍了<strong>电力系统中频率协调和同步的问题</strong>，并提出了一种<strong>基于分形分析的频率会合动态模型</strong>。频率会合是指在电力系统发生扰动时，多个发电机的频率通过动态调整，最终达到一致。该章讨论了频率会合的基本概念、数学模型以及通过分形断层图分析频率会合的应用。</p><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>在电力系统中，<strong>发电机的频率稳定性是系统可靠运行的关键。</strong> 当系统受到扰动时，发电机之间的频率会发生变化。如果频率不能尽快恢复一致，系统可能会出现频率失稳，甚至导致大范围的电力崩溃。因此，理解和控制频率会合过程对于电网的稳定性至关重要。</p><p><strong>当发电机频率不一致时，系统内部会产生频率振荡，导致功率波动</strong>。通过分形断层图，作者能够分析和预测这些频率波动，并提出调整策略，使各个发电机的频率趋向一致。</p><h3 id="频率会合的动态模型"><a href="#频率会合的动态模型" class="headerlink" title="频率会合的动态模型"></a>频率会合的动态模型</h3><p>频率会合的过程可以通过动态模型来描述。作者提出了一个新的频率会合公式，用于计算发电机频率的变化过程。该公式考虑了发电机的特征频率、负载和系统阻抗之间的关系。</p><ul><li><strong>频率会合公式</strong>：<script type="math/tex; mode=display">\omega_s = \sum_{i=1}^{n} k_i \omega_i</script></li></ul><p>其中，$ \omega_s $ 是系统的会合频率，$ \omega_i $ 是第 $i$ 台发电机的频率，$ k_i $ 是频率分形系数，用于表示各个发电机对系统会合频率的贡献。</p><p>会合频率是多个发电机频率的加权平均值，权重由发电机的分形系数决定。通过调整各个发电机的输出功率，系统可以逐渐达到频率同步。</p><h3 id="频率会合的物理含义"><a href="#频率会合的物理含义" class="headerlink" title="频率会合的物理含义"></a>频率会合的物理含义</h3><ul><li><p><strong>频率动态</strong>：当电网受到扰动时，发电机的频率会发生变化。为了保持系统稳定，发电机需要通过频率调整实现同步。频率会合是系统趋向稳定的过程，类似于多个发电机寻找共同的频率“目标”。</p></li><li><p><strong>系统阻抗的影响</strong>：频率不仅受到发电机特征的影响，还与系统的阻抗有关。随着频率的变化，系统的阻抗也会发生动态调整。这种动态阻抗会对频率会合产生反馈作用，影响会合速度和效果。</p></li></ul><h3 id="分形断层图在频率会合中的应用"><a href="#分形断层图在频率会合中的应用" class="headerlink" title="分形断层图在频率会合中的应用"></a>分形断层图在频率会合中的应用</h3><p>通过分形断层图，操作员可以实时监测各个发电机的频率变化，并预测系统的会合频率。分形断层图提供了发电机频率变化的可视化信息，帮助操作员更好地理解频率动态。</p><p><strong>分形断层图的构建步骤</strong>：</p><ol><li><strong>构建系统拓扑结构</strong>：通过节点-元件矩阵描述系统的电气连接。</li><li><strong>计算分形系数</strong>：根据各个发电机的特征频率和系统阻抗，计算频率会合的分形系数。</li><li><strong>分析频率会合</strong>：使用分形断层图监控系统的频率会合动态，预测系统达到稳定频率的时间和过程。</li></ol><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>作者通过实例展示了频率会合的过程及其对系统稳定性的影响。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f496dcad.png" alt="fig7_2.png"></p><p>图7.2展示了一个简单的电力系统模型，其中多个发电机在发生扰动后逐渐达到频率会合。通过频率会合公式和分形断层图，作者展示了如何计算各个发电机的频率变化，并分析会合过程中的功率流动。</p><h3 id="频率会合对电网的影响"><a href="#频率会合对电网的影响" class="headerlink" title="频率会合对电网的影响"></a>频率会合对电网的影响</h3><ul><li><strong>系统稳定性</strong>：频率会合是电网稳定性的关键因素之一。通过协调发电机的频率，系统可以避免因频率失调而导致的功率波动和设备损坏。</li><li><strong>频率振荡</strong>：如果频率会合过程较慢或不顺利，系统可能会产生频率振荡，导致功率流动不稳定。通过分形断层图，操作员可以提前预测频率振荡，并采取措施减轻其影响。</li><li><strong>预防黑启动</strong>：频率会合对于黑启动后的系统恢复非常重要。通过频率会合，系统可以逐渐恢复正常运行，避免在恢复过程中出现频率失控的问题。</li></ul><h2 id="MW-Blockchain"><a href="#MW-Blockchain" class="headerlink" title="MW-Blockchain"></a>MW-Blockchain</h2><h3 id="概要-6"><a href="#概要-6" class="headerlink" title="概要"></a>概要</h3><p>第8章 MW-Blockchain（MW区块链）介绍了一个全新的概念，<strong>将区块链技术应用于电网中的兆瓦（MW）交易管理</strong>。作者提出通过区块链技术跟踪电网中各个发电机和负载之间的功率交易，以实现<strong>更透明、公正的电力市场结算系统</strong>。这一章深入探讨了如何在电力系统中应用区块链来管理功率流动和电力成本。</p><p>传统电力市场中，电价的确定和功率流动的跟踪通常依赖于中央调度系统，可能导致信息不对称、透明度不足的问题。通过区块链，电力系统中的所有交易都可以公开记录，确保每个发电机和负载都能公平参与市场，减少电价争议。</p><h3 id="区块链在电力系统中的应用"><a href="#区块链在电力系统中的应用" class="headerlink" title="区块链在电力系统中的应用"></a>区块链在电力系统中的应用</h3><p>作者提出了<strong>MW区块链</strong>的概念，旨在通过区块链技术跟踪电网中的每一兆瓦电力流动。具体应用场景包括：</p><ul><li><strong>电力交易记录</strong>：通过区块链记录每一笔功率流动（发电机向负载的电力传输），确保每次交易的准确性和可追溯性。</li><li><strong>电力定价透明</strong>：区块链提供了一个透明的市场平台，所有参与者都能看到每个发电机的输出功率和每个负载的需求情况，从而确保电价的公正性。</li><li><strong>收入分配</strong>：根据区块链上记录的功率流动数据，系统可以准确计算每个发电机应获得的收入，并确保收入分配过程的透明和公平。</li></ul><h3 id="区块链的基本结构"><a href="#区块链的基本结构" class="headerlink" title="区块链的基本结构"></a>区块链的基本结构</h3><p>在MW区块链中，每个区块记录了以下关键信息：</p><ol><li><strong>发电机的功率输出</strong>：每个发电机的功率输出通过区块链记录，确保电力交易的透明性。</li><li><strong>传输线的功率流动</strong>：电力在传输线上的流动也被记录，提供了一个完整的电力流动图。</li><li><strong>负载的功率消耗</strong>：记录每个负载节点的功率消耗，以确保电力供应和需求的平衡。</li><li><strong>时间戳</strong>：每一笔功率交易都带有时间戳，确保功率流动的时间序列清晰可见。</li></ol><h3 id="相关公式-2"><a href="#相关公式-2" class="headerlink" title="相关公式"></a>相关公式</h3><p>MW区块链的核心在于功率流动的精确计算。通过分形断层图和区块链结合，电力交易中的功率流动可以通过以下公式描述：</p><ul><li><p><strong>功率流动公式</strong>：</p><script type="math/tex; mode=display">P_{\text{flow}} = \sum_{i=1}^{n} P_{\text{gen}, i} - \sum_{j=1}^{m} P_{\text{load}, j}</script><p>该公式表示电网中各发电机和负载之间的功率流动，区块链可以记录并实时更新这些数据。</p></li><li><p><strong>电价计算公式</strong>：</p><script type="math/tex; mode=display">C_{\text{MW}} = \frac{P_{\text{flow}}}{\text{Cost of Power Generation per MW}}</script><p>电价基于每兆瓦功率的生成成本进行计算，通过区块链记录和验证每一笔交易，确保定价的透明性。</p></li><li><p><strong>收入分配公式</strong>：</p><script type="math/tex; mode=display">\text{Revenue}_{\text{gen}, i} = P_{\text{gen}, i} \times C_{\text{MW}}</script><p>每个发电机的收入由其输出功率乘以每兆瓦电力的市场定价计算得出。</p></li></ul><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><p>作者通过一个简单的六节点电网实例，展示了如何使用区块链技术来跟踪和管理电网中的功率流动。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f499c85a.png" alt="fig8_1.png"></p><p><strong>实例1</strong>：图8.1展示了一个小型电网，其中有多个发电机和负载。通过区块链技术，系统可以准确记录每个发电机的功率输出和负载的功率消耗，并根据功率流动计算每个发电机应获得的收入。</p><p><img src="https://bu.dusays.com/2024/11/04/67284f4a98509.png" alt="fig8_2.png"></p><p><strong>实例2</strong>：作者进一步分析了一个六节点系统（图8.2），通过区块链记录各个传输线上的功率流动，计算各个发电机和负载的交易成本和电价。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Fractal Tomography for Power Grids 《电网的分形层析成像》&lt;/p&gt;
&lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;p&gt;这本书引入了一种新的 &lt;stro</summary>
      
    
    
    
    <category term="杂项" scheme="https://dropsong.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="阅读报告" scheme="https://dropsong.github.io/tags/%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>DRF Note</title>
    <link href="https://dropsong.github.io/posts/2ab4a7a3.html"/>
    <id>https://dropsong.github.io/posts/2ab4a7a3.html</id>
    <published>2024-10-31T13:13:48.000Z</published>
    <updated>2025-02-08T14:14:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="前后端不分离"><a href="#前后端不分离" class="headerlink" title="前后端不分离"></a>前后端不分离</h2><p>在前后端不分离的应用模式中，前端页面看到的效果都是由后端控制，由后端渲染页面或重定向，也就是后端需要控制前端的展示，<strong>前端与后端的耦合度很高</strong>。</p><p>这种应用模式比较适合纯网页应用，但是当后端对接 App 时， App 可能并不需要后端返回一个 HTML 网页，而仅仅是数据本身，所以后端原本返回网页的接口不适用于前端 App 应用，为了对接 App 后端还需再开发一套接口。</p><p><img src="https://s2.loli.net/2024/10/31/8UXlbRckEPfj431.png" alt="91-1.png"></p><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>在前后端分离的应用模式中，<strong>后端仅返回前端所需的数据，不再渲染 HTML 页面，不再控制前端的效果</strong>。至于前端用户看到什么效果，从后端请求的数据如何加载到前端中，都由前端自己决定，网页有网页的处理方式， App 有 App 的处理方式，但无论哪种前端，所需的数据基本相同，后端仅需开发一套逻辑对外提供数据即可。</p><p><img src="https://s2.loli.net/2024/10/31/XSgUJVkBMQlnvHF.png" alt="91-2.png"></p><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>RESTful 是一种软件架构风格、<strong>设计风格</strong>，而不是标准，只是提供了一组设计原则和约束条件。</p><p>REST 全称是 Representational State Transfer，中文意思是<strong>表征状态转移</strong>。如果一个架构符合 REST 的约束条件和原则，我们就称它为 RESTful 架构。一个简单的点是，相比我们之前编写的 Django 代码，符合 REST 约束的会<strong>更规范地设计 url</strong> .</p><p>理论上 REST 架构风格并不是绑定在 HTTP 上，只不过目前 HTTP 是唯一与 REST 相关的实例。 所以我们这里描述的 REST 也是通过 HTTP 实现的 REST。</p><p><strong>RESTful 的核心操作：URL 定位资源，用 HTTP 动词（GET,POST,PUT,DELETE）描述操作。</strong></p><p>相关文章：<br><a href="https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html</a></p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getAllCars</span><br><span class="line">/createNewCar</span><br><span class="line">/deleteAllRedCars</span><br></pre></td></tr></table></figure><p>应该改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET     /Cars</span><br><span class="line">POST    /Cars</span><br><span class="line">PUT     /Cars/2   # 这个2仅是示例</span><br><span class="line">DELETE  /Cars?color=Red</span><br></pre></td></tr></table></figure><p>这种设计极大地减少了 urls 的数量。对于某一个资源的操作，它们的 url 是相同的。<strong>每一个资源，对应到后端，就是一个模型类。</strong></p><h2 id="安装-DRF"><a href="#安装-DRF" class="headerlink" title="安装 DRF"></a>安装 DRF</h2><p>DRF 官网： <a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org/</a></p><p>我这里装在了虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-filter  <span class="comment"># Filtering support</span></span><br></pre></td></tr></table></figure><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>创建一个 Django 项目 day1031, 创建应用 books.</p><p>在 <code>./day1031/settings.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>      <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果想使用基于浏览器的可视化的 API 目录，并且希望获得一个登录登出功能，那么可以在根路由下添加下面的路由，这个功能类似 Django 自带的 admin 后台：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./day1031/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)) <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>迁移。runserver.</p><p>现在就可以访问 <a href="http://127.0.0.1:8000/api-auth/login/">http://127.0.0.1:8000/api-auth/login/</a> 了。</p><p>新增 <code>./books/urls.py</code> 。</p><p>在 <code>./day1031/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;api/&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>这么做的目的是，访问自己的应用时有一个前缀。其实也可以不这么做，这里只是教学演示。</p><p>在 <code>./books/models.py</code> 中增加下面内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图书模型类 BookInfo</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># verbose_name 用于在后台管理中，不显示 “btitle”，而是“图书标题”</span></span><br><span class="line">    btitle = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;图书标题&#x27;</span>)</span><br><span class="line">    bpub_date = models.DateField(verbose_name=<span class="string">&#x27;出版时间&#x27;</span>)</span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;阅读量&#x27;</span>)</span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;评论量&#x27;</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;逻辑删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_books&#x27;</span> <span class="comment"># 指明数据库表名，写不写都行</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;图书&#x27;</span>  <span class="comment"># 在admin站点中显示的名称</span></span><br><span class="line">        verbose_name_plural = verbose_name <span class="comment"># 显示的复数名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义每个数据对象的显示信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;图书:《&quot;</span>+self.btitle+<span class="string">&quot;》&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义英雄模型类HeroInfo</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    hgender = models.SmallIntegerField(choices=GENDER_CHOICES, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;性别&#x27;</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">200</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;描述信息&#x27;</span>)</span><br><span class="line">    hbook = models.ForeignKey(BookInfo, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;图书&#x27;</span>) <span class="comment">#外键</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;逻辑删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;tb_heros&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;英雄&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>新增 <code>./books/serializers.py</code> ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;专门用于对图书进行进行序列化和反序列化的类: 序列化器类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 当前序列化器在序列化数据的时候,使用哪个模型</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        <span class="comment"># fields = [&quot;id&quot;,&quot;btitle&quot;] # 多个字段可以使用列表声明,如果是所有字段都要转换,则使用 &#x27;__all__&#x27;</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span> <span class="comment"># 多个字段可以使用列表声明,如果是所有字段都要转换,则使用 &#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码之后解释。</p><p>在 <code>./books/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="comment"># 之前导入的是函数视图，现在改为类视图，参见：</span></span><br><span class="line"><span class="comment"># https://github.com/dropsong/py_webServer/blob/master/day1010/booktest/urls.py</span></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> BookInfoAPIView</span><br><span class="line"></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由对象</span></span><br><span class="line">routers = DefaultRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过路由对象对视图类进行路由生成</span></span><br><span class="line"><span class="comment"># 通过 restful 设计，注册类视图</span></span><br><span class="line">routers.register(<span class="string">&quot;books&quot;</span>,BookInfoAPIView) </span><br><span class="line"></span><br><span class="line">urlpatterns+=routers.urls</span><br></pre></td></tr></table></figure><p>在 <code>./books/views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    <span class="comment"># 当前视图类所有方法使用得数据结果集是谁?(从哪一个模型里查数据)</span></span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 当前视图类使用序列化器类是谁</span></span><br><span class="line">    serializer_class = BookInfoSerializer</span><br></pre></td></tr></table></figure><p>上面的 queryset 和 serializer_class 实际上是面向切面编程，传值进去之后，会为框架所用。</p><p>在 <code>./day1031/setting.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>迁移，运行。</p><p><img src="https://s2.loli.net/2024/11/01/VseUm3GvEK7Ykta.jpg" alt="91-3.jpeg"></p><p>这个可视化的页面是方便观察、管理的，实际上前端只需要拿到 json 就行了。</p><p>我们可以通过 <code>http://127.0.0.1:8000/api/books/1/</code>（这个链接符合 REST 规范）进行修改等操作。</p><p>这里的数据修改可以在数据库中看到同步：</p><p><img src="https://bu.dusays.com/2024/11/01/6724c15dd9fe9.png" alt="91-4.png"></p><p>简单的原理总结：</p><p><img src="https://s2.loli.net/2024/11/01/YWXR5BZlqCTne2s.png" alt="91-5.png"></p><p>之后做项目的时候，前端已经写好了，启动上，这个时候我们就可以专注于写后端。这就是前后端分离。</p><h1 id="序列化概述"><a href="#序列化概述" class="headerlink" title="序列化概述"></a>序列化概述</h1><p><img src="https://bu.dusays.com/2024/11/01/6724d766ac98e.png" alt="91-6.png"></p><p>安装 pygments :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygments --proxy=<span class="string">&quot;127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>出于演示目的，创建一个新的名为 snippets 的 app :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp snippets</span><br></pre></td></tr></table></figure><p>在 <code>./day1031/settings.py</code> 中增加下面内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;snippets&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/models.py</code> 中增加下面内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;created&#x27;</span>]</span><br></pre></td></tr></table></figure><p>迁移，这里我们只迁移新的应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations snippets</span><br><span class="line">python3 manage.py migrate snippets</span><br></pre></td></tr></table></figure><p>新建 <code>./snippets/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在序列化类中没有的字段，查询时得不到，新增也不需要提交这个字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>) <span class="comment"># readonly GET 时需要，POST 时不需要</span></span><br><span class="line">    title = serializers.CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">&#x27;base_template&#x27;</span>: <span class="string">&#x27;textarea.html&#x27;</span>&#125;) <span class="comment"># style 是为了测试方便</span></span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># validated 验证后的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Create and return a new `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 现在这个函数好像没做什么，但是之后我们会填写自己的逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 数据已经经过序列化的验证。若验证后想做一些自己的操作，然后再 save ，就可以在这里写代码</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instance 用来帮我们查出实例（想想 books/2 这个链接）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Update and return an existing `Snippet` instance, given the validated data.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果前端提交为空，也不会赋空值，而是原来的值</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">&#x27;title&#x27;</span>, instance.title)</span><br><span class="line">        instance.code = validated_data.get(<span class="string">&#x27;code&#x27;</span>, instance.code)</span><br><span class="line">        instance.linenos = validated_data.get(<span class="string">&#x27;linenos&#x27;</span>, instance.linenos)</span><br><span class="line">        instance.language = validated_data.get(<span class="string">&#x27;language&#x27;</span>, instance.language)</span><br><span class="line">        instance.style = validated_data.get(<span class="string">&#x27;style&#x27;</span>, instance.style)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>这里我们可以看到，相比于直接继承 <code>serializers.ModelSerializer</code> ，继承其父类 <code>serializers.Serializer</code> 会需要更多代码，同时也意味着可以在更大程度上自定义。</p><h1 id="序列化器的使用"><a href="#序列化器的使用" class="headerlink" title="序列化器的使用"></a>序列化器的使用</h1><p>进入 django shell :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from snippets.models import Snippet</span><br><span class="line">&gt;&gt;&gt; from snippets.serializers import SnippetSerializer</span><br><span class="line">&gt;&gt;&gt; from rest_framework.renderers import JSONRenderer</span><br><span class="line">&gt;&gt;&gt; from rest_framework.parsers import JSONParser</span><br><span class="line">&gt;&gt;&gt; snippet = Snippet(code=<span class="string">&#x27;foo = &quot;bar&quot;\n&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; snippet.save()</span><br><span class="line">&gt;&gt;&gt; snippet = Snippet(code=<span class="string">&#x27;print(&quot;hello, world&quot;)\n&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; snippet.save()</span><br></pre></td></tr></table></figure><p>这个时候就可以在数据库中看到更新的数据。</p><p>观察一下序列化：</p><p><img src="https://s2.loli.net/2024/11/02/gtzxda2XnmJOq3N.png" alt="91-7.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ser1.data</span><br><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: 2, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;print(&quot;hello, world&quot;)\n&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>: False, <span class="string">&#x27;language&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;friendly&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(ser1)</span><br><span class="line">&lt;class <span class="string">&#x27;snippets.serializers.SnippetSerializer&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(ser1.data)</span><br><span class="line">&lt;class <span class="string">&#x27;rest_framework.utils.serializer_helpers.ReturnDict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>同时可以看到:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; issubclass(<span class="built_in">type</span>(ser1.data), dict)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>说明我们可以把它当作字典用。</p><p>上面只是中间结果（例如 False 其实是不合规范的，实际上要 false），要完成最终的序列化过程，我们还需要将数据转换成 json 格式。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; content = JSONRenderer().render(ser1.data)</span><br><span class="line">&gt;&gt;&gt; content</span><br><span class="line">b<span class="string">&#x27;&#123;&quot;id&quot;:2,&quot;title&quot;:&quot;&quot;,&quot;code&quot;:&quot;print(\\&quot;hello, world\\&quot;)\\n&quot;,&quot;linenos&quot;:false,&quot;language&quot;:&quot;python&quot;,&quot;style&quot;:&quot;friendly&quot;&#125;&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(content)</span><br><span class="line">&lt;class <span class="string">&#x27;bytes&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>顺带一提，实际我们这里只是理解框架做的事情，真正写项目的时候不会用到这些。</p><p>反序列化则是上面过程的逆向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import io</span><br><span class="line">&gt;&gt;&gt; stream = io.BytesIO(content)</span><br><span class="line">&gt;&gt;&gt; type(stream)</span><br><span class="line">&lt;class &#x27;_io.BytesIO&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; data = JSONParser().parse(stream)</span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">&#123;&#x27;id&#x27;: 2, &#x27;title&#x27;: &#x27;&#x27;, &#x27;code&#x27;: &#x27;print(&quot;hello, world&quot;)\n&#x27;, &#x27;linenos&#x27;: False, &#x27;language&#x27;: &#x27;python&#x27;, &#x27;style&#x27;: &#x27;friendly&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; serializer = SnippetSerializer(data=data)</span><br><span class="line">&gt;&gt;&gt; serializer.is_valid()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; serializer.validated_data</span><br><span class="line">&#123;&#x27;title&#x27;: &#x27;&#x27;, &#x27;code&#x27;: &#x27;print(&quot;hello, world&quot;)&#x27;, &#x27;linenos&#x27;: False, &#x27;language&#x27;: &#x27;python&#x27;, &#x27;style&#x27;: &#x27;friendly&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; serializer.save()</span><br><span class="line">&lt;Snippet: Snippet object (3)&gt;</span><br></pre></td></tr></table></figure><p>在上面的操作之后，就可以在数据库中看到新增了一条数据。</p><p>也可以同时序列化多个对象，只需要为 serializer 添加一个 <code>many=True</code> 的标志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ser2 = SnippetSerializer(Snippet.objects.all(), many=True)</span><br></pre></td></tr></table></figure><h1 id="ModelSerializers"><a href="#ModelSerializers" class="headerlink" title="ModelSerializers"></a>ModelSerializers</h1><p>正如之前的演示一样，ModelSerializers 要方便的多，若想只选择几个字段而不是全部，打开之前代码的注释，运行即可看到效果。</p><p>DRF 的序列化类有一个 repr 属性，可以通过打印序列化器类实例的结构（representation）查看它的所有字段。以下操作在 Django Shell 中进行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from snippets.serializers import SnippetSerializer</span><br><span class="line">&gt;&gt;&gt; serializer = SnippetSerializer()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(repr(serializer))</span><br></pre></td></tr></table></figure><p>It’s important to remember that <code>ModelSerializer</code> classes don’t do anything particularly magical, they are simply a shortcut for creating serializer classes:</p><ul><li>An automatically determined set of fields.</li><li>Simple default implementations for the <code>create()</code> and <code>update()</code> methods.</li></ul><h1 id="编写常规的Django视图"><a href="#编写常规的Django视图" class="headerlink" title="编写常规的Django视图"></a>编写常规的Django视图</h1><p>在 <code>./snippets/views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>Note that because we want to be able to POST to this view from clients that won’t have a CSRF token we need to mark the view as <code>csrf_exempt</code>. This isn’t something that you’d normally want to do, and REST framework views actually use more sensible behavior than this, but it’ll do for our purposes right now.</p><p>新增 <code>./snippets/urls.py</code> ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.snippet_list),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>./day1031/urls.py</code> 中新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)), </span><br></pre></td></tr></table></figure><p>这时运行 server, 就可以在 <code>http://127.0.0.1:8000/snippets/</code> 中看到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo = \&quot;bar\&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>我们解析一下这次的逻辑：<br>浏览器接受到访问 <code>http://127.0.0.1:8000/snippets/</code> 的请求，到 <code>./day1031/urls.py</code> 中寻找路由，由于 <code>snippets.urls</code> 被包含了，所以实际上也会查询到 <code>./snippets/urls.py</code> 中的路由，查询到路由信息，转到视图函数 <code>snippet_list</code> ，执行相关逻辑。</p><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_detail</span>(<span class="params">request, pk</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/urls.py</code> 中配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.snippet_detail),</span><br></pre></td></tr></table></figure><p>我们就可以在 <code>http://127.0.0.1:8000/snippets/1/</code> 中查看详情：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo = \&quot;bar\&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 postman 验证上面的代码逻辑。</p><p>在 vscode 中安装 postman 插件，如下操作：</p><p><img src="https://s2.loli.net/2024/11/03/GiWHNXgRY5u3bqo.png" alt="91-8.png" title="DELETE 操作"></p><p>在前端 <code>http://127.0.0.1:8000/snippets/</code> 中可以看到，第一条数据已经被删除：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>同时后端数据库中的对应数据也被删除。</p><p>在测试一下 PUT 的逻辑：</p><p><img src="https://s2.loli.net/2024/11/03/gmPsluKREaFzxqb.png" alt="91-9.png"></p><p>我们在前端 <code>http://127.0.0.1:8000/snippets/2/</code> 中看到，数据已经被修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>同时后端的数据库中，相应数据也已经被修改。</p><p>下面测试 POST（新增）：</p><p><img src="https://s2.loli.net/2024/11/03/RTm2avgDXBAWsfO.png" alt="91-10.png" title="这里 id 值没有具体的影响"></p><p>在前端 <code>http://127.0.0.1:8000/snippets/</code> 中可以看到新增了数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, world\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;print(\&quot;hello, how are you\&quot;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linenos&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;friendly&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>同时在后端数据库中也看到了相应数据。</p><h1 id="API-视图"><a href="#API-视图" class="headerlink" title="API 视图"></a>API 视图</h1><p>使用 <code>@api_view</code> 装饰器将一个传统的 Django 视图改造成 DRF 的 API 视图。</p><p>编写 <code>./snippets/views_v2.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DRF 的 API 视图</span></span><br><span class="line"><span class="comment"># views.py 和 views_v2.py 只能有一个能成为 views.py</span></span><br><span class="line"><span class="comment"># 谁成为 views.py 谁就是真正起作用的那个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data) <span class="comment"># 注意这里改成了 Response</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_detail</span>(<span class="params">request, pk</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>运行以后，就可以在前端 <code>http://127.0.0.1:8000/snippets/</code> 看到 DRF 为我们生成的页面（而不是之前的只有 JSON 数据），类似于之前的 books 应用：</p><p><img src="https://s2.loli.net/2024/11/03/fh2Pk67qITsrZg9.png" alt="91-11.png"></p><p>补充：<br>DRF 引入了一个扩展 Django 常规 <code>HttpRequest</code> 对象的 <code>Request</code> 对象，并提供了更灵活的请求解析能力。<code>Request</code> 对象的核心功能是 <code>request.data</code> 属性，它和 <code>request.POST</code> 类似，但对于使用 Web API 更为有用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST # 只处理表单数据 只适用于 POST 方法</span><br><span class="line">request.data # 处理任意数据 适用于 POST，PUT 和 PATCH 等方法</span><br></pre></td></tr></table></figure><p>但是现在有一个问题，我们无法在前端访问 <code>http://127.0.0.1:8000/snippets.json</code> ，而之前的 books 可以，这怎么解决呢？</p><p>在 <code>./snippets/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.snippet_list),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.snippet_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns) <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/views.py</code> 中作修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_list</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snippet_detail</span>(<span class="params">request, pk, <span class="built_in">format</span> = <span class="literal">None</span></span>):</span><br><span class="line">  <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>现在就可以在 <code>http://127.0.0.1:8000/snippets.json</code> 中看到 json 数据。<br>访问 <code>http://127.0.0.1:8000/snippets/2.json</code> 也同样可以看到 json 数据。</p><p>截至目前的代码可以参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1031">https://github.com/dropsong/py_webServer/tree/master/day1031</a></p><h1 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h1><p>我们复制一份上面的代码，在这基础上修改。新的代码会在后面放出。</p><p>在 <code>./snippets/views.py</code> 中（全部代码）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/urls.py</code> 中（全部代码）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    <span class="comment"># path(&#x27;snippets/&lt;int:pk&gt;/&#x27;, views.SnippetDetail.as_view()),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a snippet instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_object</span>(<span class="params">self, pk</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Snippet.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        <span class="comment"># 修改时会传入 snippet 实例</span></span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/urls.py</code> 中将注释打开。</p><p>runserver, 一切正常。</p><p>本节的代码参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1103">https://github.com/dropsong/py_webServer/tree/master/day1103</a></p><h1 id="使用混合类（mixins）"><a href="#使用混合类（mixins）" class="headerlink" title="使用混合类（mixins）"></a>使用混合类（mixins）</h1><p><img src="https://s2.loli.net/2024/11/04/8bYNhCWfXt5gDzF.png" alt="91-12.png"></p><p>观察下面的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    serializer = SnippetSerializer(data=request.data)</span><br><span class="line">    <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><p>痛点：其实很多时候，这里的写法固定，能否更方便程序员开发呢？</p><p>其实这里使用混合类，就是为了寻求不同层次的封装。回忆最开始的时候，我们使用了一个非常强大的 ModelViewSet，就是舍弃了一些自由，换来了方便。</p><p>官网资料：<br><a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/">https://www.django-rest-framework.org/tutorial/3-class-based-views/</a><br>在其中找到 <strong>Using mixins</strong> 部分，这里不再赘述。</p><p>一些总结：</p><p><img src="https://s2.loli.net/2024/11/07/eQrwq3LOHTEi6yY.png" alt="91-12dot5.png"></p><h1 id="Authentication-amp-Permissions"><a href="#Authentication-amp-Permissions" class="headerlink" title="Authentication &amp; Permissions"></a>Authentication &amp; Permissions</h1><p>我们在之前的代码基础上进行修改。</p><p>在 <code>./snippets/models.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snippet （代码）片段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    owner = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>, related_name=<span class="string">&#x27;snippets&#x27;</span>, on_delete=models.CASCADE)  <span class="comment"># add</span></span><br><span class="line">    highlighted = models.TextField()       <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;created&#x27;</span>]</span><br></pre></td></tr></table></figure><p>在上面的代码中：</p><ul><li><code>related_name=&#39;snippets&#39;</code> 是反向关联的名称，定义了从 User 模型访问 Snippet 的方式。设定 <code>related_name=&#39;snippets&#39;</code> 后，可以通过 <code>user.snippets.all()</code> 获取某个 User 实例下的所有 Snippet 实例。</li><li><code>on_delete=models.CASCADE</code> 决定当关联的 User 被删除时的行为。<code>models.CASCADE</code> 表示删除 User 时，所有关联的 Snippet 也会被删除，以保持数据库的一致性。</li></ul><p>迁移（这里会遇到一点小情况，具体在官网可查）。</p><p>将 <code>./snippets/models.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_lexer_by_name</span><br><span class="line"><span class="keyword">from</span> pygments.formatters.html <span class="keyword">import</span> HtmlFormatter</span><br><span class="line"><span class="keyword">from</span> pygments <span class="keyword">import</span> highlight</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snippet （代码）片段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    owner = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>, related_name=<span class="string">&#x27;snippets&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    highlighted = models.TextField(default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&#x27;created&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存的时候，需要改变行为，这个时候就要重写 save</span></span><br><span class="line">    <span class="comment"># 里面具体的逻辑可以暂时不用关心</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Use the `pygments` library to create a highlighted HTML</span></span><br><span class="line"><span class="string">        representation of the code snippet.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        lexer = get_lexer_by_name(self.language)</span><br><span class="line">        linenos = <span class="string">&#x27;table&#x27;</span> <span class="keyword">if</span> self.linenos <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        options = &#123;<span class="string">&#x27;title&#x27;</span>: self.title&#125; <span class="keyword">if</span> self.title <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        formatter = HtmlFormatter(style=self.style, linenos=linenos,</span><br><span class="line">                                  full=<span class="literal">True</span>, **options)</span><br><span class="line">        self.highlighted = highlight(self.code, lexer, formatter)</span><br><span class="line">        <span class="built_in">super</span>().save(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>上面，我们为 Snippet 模型添加了两个字段，其中关于代码高亮的字段，我们在 save 方法里处理了。但是那个 user 字段呢？我们在序列化 Snippet 的时候，这个 User 字段当然也要序列化。在 <code>./snippets/serializers.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>]</span><br></pre></td></tr></table></figure><p>将 <code>./snippets/views.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status, generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippets = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a snippet instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_object</span>(<span class="params">self, pk</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Snippet.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        <span class="comment"># 修改时会传入 snippet 实例</span></span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, pk, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserList</span>(generics.ListAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDetail</span>(generics.RetrieveAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view()),</span><br><span class="line">path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br></pre></td></tr></table></figure><p>runserver, 在 <code>127.0.0.1:8000/users/</code> 中可以看到：</p><p><img src="https://s2.loli.net/2024/11/04/xGpwE42NzbMCsho.png" alt="91-13.png"></p><p>并且详情页可以访问。</p><p>这个 User 可以看到之后，再和 Snippets 关联等之后的操作就会比较方便。</p><p><strong>回顾一下我们的目标，我们希望代码片段的 owner 是通过登录状态自动获取的。</strong></p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1104">https://github.com/dropsong/py_webServer/tree/master/day1104</a></p><p>下面为方便起见，我们使用 ModelSerializer 和 ModelViewSet. 我们另起一份代码。</p><p>将 <code>./snippets/serializers.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>]</span><br></pre></td></tr></table></figure><p>类似地，我们修改 <code>./snippets/views.py</code> 和 <code>./snippets/urls.py</code> 如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> UserAPIView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">routers = DefaultRouter()</span><br><span class="line">routers.register(<span class="string">&quot;users&quot;</span>, UserAPIView)</span><br><span class="line"></span><br><span class="line">urlpatterns += routers.urls</span><br></pre></td></tr></table></figure><p>运行，尝试在前端提交 Snippets, 报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IntegrityError at /snippets/</span><br><span class="line">NOT NULL constraint failed: snippets_snippet.owner_id</span><br><span class="line">Request Method:    POST</span><br><span class="line">Request URL:    http://127.0.0.1:8000/snippets/</span><br><span class="line">Django Version:    4.2</span><br><span class="line">Exception Type:    IntegrityError</span><br><span class="line">Exception Value:    </span><br><span class="line">NOT NULL constraint failed: snippets_snippet.owner_id</span><br><span class="line">Exception Location:    /home/zhiyue/myenv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py, line 328, in execute</span><br><span class="line">Raised during:    snippets.views.SnippetsAPIView</span><br></pre></td></tr></table></figure><p><strong>此时无法添加新的代码片段，因为它的外键字段 owner 没有定义序列化方法。</strong></p><p>修改 <code>./snippets/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line">    <span class="comment"># 具体细节在继承关系里，需要看源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAPIView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><p>runserver, 访问前端 <code>127.0.0.1:8000/snippets/</code> ，<strong>登录 admin 账户</strong>，再次发 POST 请求，可以成功。</p><p><strong>新的需求：</strong> 我们希望 owner 这个字段新增的时候不需要由前端给后端，但是显示代码片段的时候还是要显示。</p><p>修改 <code>./snippets/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>)</span><br></pre></td></tr></table></figure><p>runserver, 可以在前端 <code>127.0.0.1:8000/snippets/</code> 中看到 owner.</p><p>为了可以看到 json 数据，以及之后的方便，我们将代码改为与官网统一。修改 <code>./snippets/views.py</code> 和 <code>./snippets/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line">    <span class="comment"># 具体细节在继承关系里，需要看源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserList</span>(generics.ListAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDetail</span>(generics.RetrieveAPIView):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p><strong>新的需求：</strong> 在前端 <code>127.0.0.1:8000/snippets/</code> ，只有登录的用户才有下面的 POST 框，未登录的用户没有。</p><p>还是面向切面编程，在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,)  <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line">    <span class="comment"># 具体细节在继承关系里，需要看源码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><p>runserver, 可以看到，登出后，下方无 POST 框。</p><p>同理，我们在详情页也做类似的操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,) <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>效果不再展示。</p><p><strong>问题/需求</strong> : 现在登录之后，A 用户可以修改 B 用户的 snippets .</p><p>新建 <code>./snippets/permissions.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IsOwnerOrReadOnly</span>(permissions.BasePermission):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Custom permission to only allow owners of an object to edit it.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 详情页中才能写这个函数，因为只有详情也才有 obj(对象)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># Read permissions are allowed to any request,</span></span><br><span class="line">        <span class="comment"># so we&#x27;ll always allow GET, HEAD or OPTIONS requests.</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write permissions are only allowed to the owner of the snippet.</span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><p>对 <code>./snippets/views.py</code> 作如下修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span><br></pre></td></tr></table></figure><p>runserver, 用户查看不是自己的代码时，下方无 PUT 框。</p><h1 id="Relationships-amp-Hyperlinked-APIs"><a href="#Relationships-amp-Hyperlinked-APIs" class="headerlink" title="Relationships &amp; Hyperlinked APIs"></a>Relationships &amp; Hyperlinked APIs</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>我们在前端 <code>127.0.0.1:8000/</code> 中，只能看到 books，看不到 snippets. 如下：</p><p><img src="https://s2.loli.net/2024/11/09/6KhmOLiBZ1eb49y.png" alt="91-14.png"></p><p>仅管我们在 <code>./day1031/urls.py</code>(全局的 url) 中已经写了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)), <span class="comment"># 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h2><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>然后在 <code>./snippets/urls.py</code> 中，作出修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),  <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>然后在 <code>./day1031/urls.py</code>(全局 urls) 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;books.urls&#x27;)), # 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;snippets.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将 books 注释掉。这个不是好的解决方案，我们之后再处理。</p><h2 id="Hyperlinked-APIs"><a href="#Hyperlinked-APIs" class="headerlink" title="Hyperlinked APIs"></a>Hyperlinked APIs</h2><p>需求：我们想要做一些代码高亮的活。</p><p>在 <code>./snippets/urls.py</code> 中新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view()), <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>./snippets/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br></pre></td></tr></table></figure><p>runserver, 访问 <code>127.0.0.1:8000/snippets/6/highlight/</code>, 效果：</p><p><img src="https://s2.loli.net/2024/11/09/IPSRyCDcitXVJFL.png" alt="91-15.png"></p><p>但是实际上，我们在 <code>127.0.0.1:8000/snippets/6/</code> 看到的效果是这样的：</p><p><img src="https://s2.loli.net/2024/11/09/MeYzcdym7wp4F39.png" alt="91-16.png"></p><p><strong>新的需求：</strong> 我们不希望代码直接堆积在 <code>127.0.0.1:8000/snippets/6/</code> 里，而是 <code>&quot;code&quot;:</code> 后面放一个链接，可以跳转到 <code>127.0.0.1:8000/snippets/6/highlight/</code> .</p><p>目前为止的代码可以参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1107">https://github.com/dropsong/py_webServer/tree/master/day1107</a></p><p><strong>我们另起一份代码。</strong></p><p>在 <code>./snippets/serializers.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;snippet-highlight&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;html&#x27;</span>) <span class="comment"># add</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        <span class="comment"># 顺序不要求</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;highlight&#x27;</span>) <span class="comment"># modify</span></span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view(), name = <span class="string">&#x27;snippet-highlight&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 效果：</p><p><img src="https://s2.loli.net/2024/11/09/g9iIqfTC4ezZjtw.png" alt="91-17.png"></p><p>在 <code>./snippets/serializers.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前的不要了</span></span><br><span class="line"><span class="comment"># class SnippetSerializer(serializers.ModelSerializer):</span></span><br><span class="line"><span class="comment">#     # owner 是一个 User 对象</span></span><br><span class="line"><span class="comment">#     owner = serializers.ReadOnlyField(source=&#x27;owner.username&#x27;)</span></span><br><span class="line"><span class="comment">#     highlight = serializers.HyperlinkedIdentityField(view_name=&#x27;snippet-highlight&#x27;, format=&#x27;html&#x27;)</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = Snippet</span></span><br><span class="line"><span class="comment">#         # 顺序不要求</span></span><br><span class="line"><span class="comment">#         fields = (&#x27;id&#x27;, &#x27;title&#x27;, &#x27;code&#x27;, &#x27;linenos&#x27;, &#x27;language&#x27;, &#x27;style&#x27;, &#x27;owner&#x27;, &#x27;highlight&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.HyperlinkedModelSerializer): <span class="comment"># modify</span></span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">&#x27;snippet-highlight&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        <span class="comment"># 顺序不要求</span></span><br><span class="line">        fields = (<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>, <span class="string">&#x27;highlight&#x27;</span>) <span class="comment"># modify</span></span><br></pre></td></tr></table></figure><p>同时在 <code>./snippets/urls.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view(), name = <span class="string">&#x27;snippet-detail&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view(), name = <span class="string">&#x27;snippet-highlight&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view(), name = <span class="string">&#x27;user-detail&#x27;</span>), <span class="comment"># modify</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 效果：</p><p><img src="https://s2.loli.net/2024/11/09/WASekHcL9aDQo3V.png" alt="91-18.png"></p><h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><p>在 <code>./day1031/settings.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局分页功能</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>  <span class="comment"># 演示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的作用是在列表页增加分页功能。</p><p>runserver, 成功。</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1109">https://github.com/dropsong/py_webServer/tree/master/day1109</a></p><h1 id="ViewSets"><a href="#ViewSets" class="headerlink" title="ViewSets"></a>ViewSets</h1><p>目标：和 <code>./snippets/views.py</code> 相比，<code>./books/views.py</code> 相当简洁，我们如何一步一步将 <code>./snippets/views.py</code> 简化？</p><p><strong>我们另起一份代码。</strong></p><p>将 <code>snippets/views.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class SnippetList(generics.ListCreateAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line"><span class="comment">#     # 具体细节在继承关系里，需要看源码</span></span><br><span class="line"><span class="comment">#     def perform_create(self, serializer):</span></span><br><span class="line"><span class="comment">#         serializer.save(owner=self.request.user)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="comment"># class SnippetDetail(generics.RetrieveUpdateDestroyAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This ViewSet automatically provides `list`, `create`, `retrieve`,</span></span><br><span class="line"><span class="string">    `update` and `destroy` actions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Additionally we also provide an extra `highlight` action.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">                          IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, renderer_classes=[renderers.StaticHTMLRenderer]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">    </span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class UserList(generics.ListAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># class UserDetail(generics.RetrieveAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This viewset automatically provides `list` and `retrieve` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>将 <code>./snippets/urls.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet, api_root, UserViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line">snippet_list = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;create&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_detail = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;update&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;patch&#x27;</span>: <span class="string">&#x27;partial_update&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;delete&#x27;</span>: <span class="string">&#x27;destroy&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_highlight = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;highlight&#x27;</span></span><br><span class="line">&#125;, renderer_classes=[renderers.StaticHTMLRenderer])</span><br><span class="line">user_list = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">user_detail = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, api_root),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, snippet_list, name = <span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, snippet_detail, name = <span class="string">&#x27;snippet-detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, snippet_highlight, name = <span class="string">&#x27;snippet-highlight&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, user_list, name = <span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, user_detail, name = <span class="string">&#x27;user-detail&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><p>runserver, 功能一切正常。</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1110">https://github.com/dropsong/py_webServer/tree/master/day1110</a></p><h1 id="Routers"><a href="#Routers" class="headerlink" title="Routers"></a>Routers</h1><p>目标：简化 <code>./snippets/urls.py</code> .</p><p><strong>我们另起一份代码。</strong></p><p>修改 <code>./snippets/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class SnippetList(generics.ListCreateAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 重写这个函数，就可以改变新增行为，面向切面编程</span></span><br><span class="line"><span class="comment">#     # 具体细节在继承关系里，需要看源码</span></span><br><span class="line"><span class="comment">#     def perform_create(self, serializer):</span></span><br><span class="line"><span class="comment">#         serializer.save(owner=self.request.user)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="comment"># class SnippetDetail(generics.RetrieveUpdateDestroyAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = Snippet.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = SnippetSerializer</span></span><br><span class="line"><span class="comment">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This ViewSet automatically provides `list`, `create`, `retrieve`,</span></span><br><span class="line"><span class="string">    `update` and `destroy` actions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Additionally we also provide an extra `highlight` action.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">                          IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, renderer_classes=[renderers.StaticHTMLRenderer]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">    </span><br><span class="line"><span class="comment"># we delete this:</span></span><br><span class="line"><span class="comment"># class UserList(generics.ListAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># class UserDetail(generics.RetrieveAPIView):</span></span><br><span class="line"><span class="comment">#     queryset = User.objects.all()</span></span><br><span class="line"><span class="comment">#     serializer_class = UserSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This viewset automatically provides `list` and `retrieve` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>./snippets/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet, api_root, UserViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下删除：</span></span><br><span class="line"><span class="comment"># snippet_list = SnippetViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;list&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;post&#x27;: &#x27;create&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># snippet_detail = SnippetViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;retrieve&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;put&#x27;: &#x27;update&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;patch&#x27;: &#x27;partial_update&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;delete&#x27;: &#x27;destroy&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># snippet_highlight = SnippetViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;highlight&#x27;</span></span><br><span class="line"><span class="comment"># &#125;, renderer_classes=[renderers.StaticHTMLRenderer])</span></span><br><span class="line"><span class="comment"># user_list = UserViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;list&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># user_detail = UserViewSet.as_view(&#123;</span></span><br><span class="line"><span class="comment">#     &#x27;get&#x27;: &#x27;retrieve&#x27;</span></span><br><span class="line"><span class="comment"># &#125;)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># urlpatterns = [</span></span><br><span class="line"><span class="comment">#     path(&#x27;&#x27;, api_root),</span></span><br><span class="line"><span class="comment">#     path(&#x27;snippets/&#x27;, snippet_list, name = &#x27;snippet-list&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;snippets/&lt;int:pk&gt;/&#x27;, snippet_detail, name = &#x27;snippet-detail&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;, snippet_highlight, name = &#x27;snippet-highlight&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;users/&#x27;, user_list, name = &#x27;user-list&#x27;),</span></span><br><span class="line"><span class="comment">#     path(&#x27;users/&lt;int:pk&gt;/&#x27;, user_detail, name = &#x27;user-detail&#x27;),</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># urlpatterns = format_suffix_patterns(urlpatterns)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a router and register our ViewSets with it.</span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r&#x27;snippets&#x27;</span>, SnippetViewSet, basename=<span class="string">&#x27;snippet&#x27;</span>)</span><br><span class="line">router.register(<span class="string">r&#x27;users&#x27;</span>, UserViewSet, basename=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The API URLs are now determined automatically by the router.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>修改 <code>./snippets/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class SnippetSerializer(serializers.ModelSerializer):</span></span><br><span class="line"><span class="comment">#     # owner 是一个 User 对象</span></span><br><span class="line"><span class="comment">#     owner = serializers.ReadOnlyField(source=&#x27;owner.username&#x27;)</span></span><br><span class="line"><span class="comment">#     highlight = serializers.HyperlinkedIdentityField(view_name=&#x27;snippet-highlight&#x27;, format=&#x27;html&#x27;)</span></span><br><span class="line"><span class="comment">#     class Meta:</span></span><br><span class="line"><span class="comment">#         model = Snippet</span></span><br><span class="line"><span class="comment">#         # 顺序不要求</span></span><br><span class="line"><span class="comment">#         fields = (&#x27;id&#x27;, &#x27;title&#x27;, &#x27;code&#x27;, &#x27;linenos&#x27;, &#x27;language&#x27;, &#x27;style&#x27;, &#x27;owner&#x27;, &#x27;highlight&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    <span class="comment"># owner 是一个 User 对象</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">&#x27;owner.username&#x27;</span>)</span><br><span class="line">    <span class="comment"># highlight = serializers.HyperlinkedIdentityField(view_name=&#x27;snippet-highlight&#x27;, format=&#x27;html&#x27;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        <span class="comment"># 顺序不要求</span></span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, 成功。</p><h1 id="API-Guide"><a href="#API-Guide" class="headerlink" title="API Guide"></a>API Guide</h1><h2 id="快速了解"><a href="#快速了解" class="headerlink" title="快速了解"></a>快速了解</h2><p>参见： <a href="https://www.django-rest-framework.org/api-guide/requests/">官网 API Guide</a>，可在下拉菜单中选择相应内容。</p><p>主要关注内容：</p><ul><li>Request parsing<ul><li><code>.data</code></li><li><code>.query_params</code></li><li><code>.parsers</code></li></ul></li><li>Authentication<ul><li><code>.user</code></li></ul></li></ul><p>这部分内容可以在调试中学习体会：</p><p><img src="https://s2.loli.net/2024/11/10/S3TCbsNO4gxQmDz.png" alt="91-19.png"></p><p><code>request._request</code> :</p><ul><li>Django 原生的 request 对象</li><li>RESTframework 的 Request 对象扩展了 Django 的 HttpRequest 对象，所以 Django 原生的标准属性和方法也是可用的。例如 <code>request.META</code> 和 <code>request.session</code> 字典正常可用。</li><li>由于实现原因，Request 该类不继承自 HttpRequest 类，而是使用 composition 扩展了该类。</li></ul><p>后略。</p><p>几个值得注意的内容：</p><ul><li><a href="https://www.django-rest-framework.org/api-guide/viewsets/">https://www.django-rest-framework.org/api-guide/viewsets/</a></li><li><a href="https://www.django-rest-framework.org/api-guide/routers/">https://www.django-rest-framework.org/api-guide/routers/</a><ul><li>Note: If using namespacing with hyperlinked serializers you’ll also need to ensure that any <code>view_name</code> parameters on the serializers correctly reflect the namespace. In the examples above you’d need to include a parameter such as <code>view_name=&#39;app_name:user-detail&#39;</code> for serializer fields hyperlinked to the user detail view.</li></ul></li></ul><blockquote><p>解析器是干什么的？<br>因为前后端分离，可能采用 json、xml、html 等各种不同格式的内容，后端必须要有一个解析器来解析前端发送过来的数据，也就是翻译器。对应地，后端也有一个渲染器 Render ,将后端的数据翻译成前端明白的格式。</p></blockquote><p>下面简单演示一下 FileUploadParser .</p><p>新建一个应用 guide.</p><p>注册应用 <code>./day1031/settings.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;snippets&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;guide&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置全局 <code>./day1031/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;books.urls&#x27;)), # 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;snippets.urls&#x27;)), </span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;guide.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意这里将之前的一些代码注释掉了，想要实现之前的功能需要恢复。</p><p>新增 <code>./guide/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将 <code>./guide/views.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure><p>runserver, 可以进入 <code>127.0.0.1:8000/upload/aaa</code>，但是不能进入 <code>127.0.0.1:8000</code> 或者 <code>127.0.0.1:8000/upload</code> .</p><p>在 <code>file_obj = request.data[&#39;file&#39;]</code> 这行前面打断点，启动调试。</p><p>在 postman 中：</p><p><img src="https://s2.loli.net/2024/11/16/YctbDrdTuSpPMmU.png" alt="91-20.png"></p><p>在 Body 中选择 binary, 上传一个文件，向 <code>127.0.0.1:8000/upload/test/</code> 发送 PUT 请求。</p><p><img src="https://bu.dusays.com/2024/11/16/6738094ce24ed.png" alt="91-21.png"></p><p>调试中点击继续，得到 postman 的结果：</p><p><img src="https://s2.loli.net/2024/11/16/L1ECfAIslYXeKyF.png" alt="91-22.png"></p><p>下面简单演示一下 StaticHTMLRenderer .</p><p>modify <code>./guide/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure><p>modify <code>./guide/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView, simple_html_view</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 效果：在前端 <code>127.0.0.1:8000/simple_html_view/</code> 看到渲染好的 Hello,world .</p><h2 id="Serializers"><a href="#Serializers" class="headerlink" title="Serializers"></a>Serializers</h2><p>修改 <code>./guide/models.py</code> ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    email=models.EmailField()</span><br><span class="line">    content = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 酒店预订、入住日期、离开日期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>(models.Model):</span><br><span class="line">    description = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = models.DateTimeField()</span><br><span class="line">    finish = models.DateTimeField()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 酒店预订、姓名、房间号、日期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event1</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    room_number = models.IntegerField()</span><br><span class="line">    date = models.DateField()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    owner = models.ForeignKey(<span class="string">&#x27;auth.User&#x27;</span>,related_name=<span class="string">&#x27;accounts&#x27;</span>,on_delete=models.CASCADE,default=<span class="literal">None</span>,db_constraint=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>新增 <code>./guide/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>补充一个小细节：<br>Calling <code>.save()</code> will either create a new instance, or update an existing instance, depending on if an existing instance was passed when instantiating the serializer class:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .save() will create a new instance.</span></span><br><span class="line">serializer = CommentSerializer(data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .save() will update the existing `comment` instance.</span></span><br><span class="line">serializer = CommentSerializer(comment, data=data)</span><br></pre></td></tr></table></figure><p>这里的保存方式和代码中的 create, update 是对应的：</p><p><img src="https://s2.loli.net/2024/11/16/GIBPgqMfliysnTL.png" alt="91-23.png"></p><p>完善一下 comment 的功能：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CommentSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView, simple_html_view, CommentViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line">router.register(<span class="string">r&#x27;comment&#x27;</span>, CommentViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><p>runserver, worked.</p><p><strong>新的需求：</strong> 做一个<strong>字段级验证</strong>，如果 comment 内容里没有 <code>nihao</code> 就报错。</p><p>修改 <code>./guide/serializers.py</code> 为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Comment</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>runserver, worked.</p><p><strong>新的需求：</strong> 现在需要做一个<strong>对象级别的验证</strong> 。</p><p>做如下新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Event.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = EventSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line">router.register(<span class="string">r&#x27;event&#x27;</span>, EventViewSet)</span><br></pre></td></tr></table></figure><p>runserver, worked.</p><p><strong>验证器参数：</strong> （我们不再在代码中体现，而只是给出简单的例子）, Individual fields on a serializer can include validators, by declaring them on the field instance, for example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiple_of_ten</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> value % <span class="number">10</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;Not a multiple of ten&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameRecord</span>(serializers.Serializer):</span><br><span class="line">    score = serializers.IntegerField(validators=[multiple_of_ten])</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>Serializer classes can also include reusable validators that are applied to the complete set of field data. These validators are included by declaring them on an inner <code>Meta</code> class, like so:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    room_number = serializers.IntegerField(choices=[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">201</span>])</span><br><span class="line">    date = serializers.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># Each room only has one event per day.</span></span><br><span class="line">        validators = [</span><br><span class="line">            UniqueTogetherValidator(</span><br><span class="line">                queryset=Event.objects.<span class="built_in">all</span>(),</span><br><span class="line">                fields=[<span class="string">&#x27;room_number&#x27;</span>, <span class="string">&#x27;date&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>为演示目的，在全局的 url 配置中注释掉 snippets 的部分。</p><p>一些奇妙的改动：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Comment, Event, Event1, Account</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;<span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;&#125; <span class="comment"># 如果没有这句，会露出密码(密文)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = User(</span><br><span class="line">            email=validated_data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">            username=validated_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user.set_password(validated_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Event.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    serializer_class = EventSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CreateUserSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include, re_path</span><br><span class="line"><span class="keyword">from</span> guide.views <span class="keyword">import</span> FileUploadView, UserViewSet, simple_html_view, CommentViewSet, EventViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line">router.register(<span class="string">r&#x27;comment&#x27;</span>, CommentViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;event&#x27;</span>, EventViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;users&#x27;</span>, UserViewSet) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><p>runserver, 可以在前端看到一些 User 的改动。</p><h2 id="BaseSerializer"><a href="#BaseSerializer" class="headerlink" title="BaseSerializer"></a>BaseSerializer</h2><p>这是 DRF 中其它序列化器的基类，一般不直接使用。所以，下面的内容看看就好。</p><p>Serializer 类直接继承了 BaseSerializer 类,所以两者具有基本相同的 API:</p><ul><li><code>.data</code> 返回传出的原始数据。</li><li><code>.is_valid()</code> 反序列化并验证传入的数据。</li><li><code>.validated_data</code> 返回经过验证后的传入数据。</li><li><code>.errors</code> 返回验证期间的错误。</li><li><code>.save()</code> 将验证的数据保留到对象实例中。</li></ul><p>它还有可以覆写的四种方法：<br><code>.to_representation()</code> 重写此方法来改变读取操作的序列化结果。<br><code>.to_internal_value()</code> 重写此方法来改变写入操作的序列化结果。<br><code>.create() 和 .update()</code> 重写其中一个或两个来改变保存实例时的动作。</p><p>因为此类提供与 Serializer 类相同的接口，所以可以将它与现有的基于类的通用视图一起使用，就像使用常规 Serializer 或 ModelSerializer 一样。<strong>区别是 BaseSerializer 类并不会在可浏览的 API 页面中生成 HTML 表单。</strong></p><h1 id="Serializer-fields"><a href="#Serializer-fields" class="headerlink" title="Serializer fields"></a>Serializer fields</h1><h2 id="Core-arguments"><a href="#Core-arguments" class="headerlink" title="Core arguments"></a>Core arguments</h2><p>注意这里的标题是和官网对应的。</p><p><code>read_only</code>, <code>write_only</code> 不再赘述。</p><p><code>required</code> :<br>Normally an error will be raised if a field is not supplied during deserialization. Set to false if this field is not required to be present during deserialization.</p><p>例子：<br>我们在 <code>./guide/serializers.py</code> 中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>) <span class="comment"># modified</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>效果：POST 时前端无须提交 Created .</p><p>可以在官网查看：<code>allow_null</code>, <code>source</code>, <code>validators</code>, <code>label</code>, <code>help_text</code>, <code>initial</code> .</p><p><code>style</code> 例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use &lt;input type=&quot;password&quot;&gt; for the input.</span></span><br><span class="line">password = serializers.CharField(</span><br><span class="line">    style=&#123;<span class="string">&#x27;input_type&#x27;</span>: <span class="string">&#x27;password&#x27;</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="String-fields"><a href="#String-fields" class="headerlink" title="String fields"></a>String fields</h2><p>可以上官网查看，有些还是挺有用的。</p><p><code>EmailField</code>, <code>RegexField</code> .</p><p><code>SlugField</code> :<br>这个可以实现的，正则也能实现，只不过这个更简单一点（代价是功能受限）。</p><p><code>URLField</code>, <code>UUIDField</code>, <code>FilePathField</code>, <code>IPAddressField</code> .</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>可以在官网查看 Numeric fields, Date and time fields, Choice selection fields 等。</p><p>这里演示一下 ChoiceField ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    <span class="comment"># content = serializers.CharField(max_length=200)</span></span><br><span class="line">    content = serializers.ChoiceField(choices=[<span class="number">100</span>, <span class="number">101</span>])</span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/11/24/ruVdtHbJEnpk8DW.png" alt="91-24.png"></p><p>回滚此次改动。</p><h1 id="Serializer-relations"><a href="#Serializer-relations" class="headerlink" title="Serializer relations"></a>Serializer relations</h1><p><a href="https://www.django-rest-framework.org/api-guide/relations/">https://www.django-rest-framework.org/api-guide/relations/</a></p><p>在 <code>./guide/models.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 唱片和歌曲的模型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(models.Model):  <span class="comment"># 唱片</span></span><br><span class="line">    album_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    artist = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.album_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Track</span>(models.Model):  <span class="comment"># 歌曲</span></span><br><span class="line">    album = models.ForeignKey(Album, related_name=<span class="string">&#x27;tracks&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    order = models.IntegerField()</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    duration = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        unique_together = [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;order&#x27;</span>]</span><br><span class="line">        ordering = [<span class="string">&#x27;order&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%d: %s&#x27;</span> % (self.order, self.title)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./guide/admin.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">admin.site.register(Album)</span><br><span class="line">admin.site.register(Track)</span><br></pre></td></tr></table></figure><p>一通操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Album.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AlbumSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line">router.register(<span class="string">r&#x27;albums&#x27;</span>, AlbumViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;tracks&#x27;</span>, TrackViewSet)</span><br></pre></td></tr></table></figure><p>runserver, worked:</p><p><img src="https://s2.loli.net/2024/11/24/Wgh4z9GX8tPejwa.png" alt="91-25.png"></p><p><strong>新的需求：</strong> 我们想要在唱片下面顺便显示一些歌曲。</p><p>作修改如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    tracks = serializers.StringRelatedField(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br></pre></td></tr></table></figure><p>效果，前端得到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;previous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;album_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唱片1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;1: 蚂蚁&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;2: 东风破&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1110_2">https://github.com/dropsong/py_webServer/tree/master/day1110_2</a></p><h1 id="Nested-relationships"><a href="#Nested-relationships" class="headerlink" title="Nested relationships"></a>Nested relationships</h1><p>嵌套关联。</p><p><strong>我们另起一份代码。</strong></p><p>将 <code>./guide/serializers.py</code> 修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Album, Comment, Event, Event1, Account, Track</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># content = serializers.ChoiceField(choices=[100, 101])</span></span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;<span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;&#125; <span class="comment"># 如果没有这句，会露出密码(密文)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = User(</span><br><span class="line">            email=validated_data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">            username=validated_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user.set_password(validated_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套关联</span></span><br><span class="line"><span class="comment"># we deleted sth and add this:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    tracks = TrackSerializer(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/albums/</code> we see: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;count&quot;: 2,</span><br><span class="line">    &quot;next&quot;: null,</span><br><span class="line">    &quot;previous&quot;: null,</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;album_name&quot;: &quot;唱片1&quot;,</span><br><span class="line">            &quot;artist&quot;: &quot;周杰伦&quot;,</span><br><span class="line">            &quot;tracks&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 1,</span><br><span class="line">                    &quot;order&quot;: 1,</span><br><span class="line">                    &quot;title&quot;: &quot;蚂蚁&quot;,</span><br><span class="line">                    &quot;duration&quot;: 300,</span><br><span class="line">                    &quot;album&quot;: 1</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2,</span><br><span class="line">                    &quot;order&quot;: 2,</span><br><span class="line">                    &quot;title&quot;: &quot;东风破&quot;,</span><br><span class="line">                    &quot;duration&quot;: 400,</span><br><span class="line">                    &quot;album&quot;: 1</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;album_name&quot;: &quot;唱片2&quot;,</span><br><span class="line">            &quot;artist&quot;: &quot;朴树&quot;,</span><br><span class="line">            &quot;tracks&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新的需求：</strong> 能否在 Album 页面 POST 的时候（就是那个按钮），一并提交歌曲的信息呢？</p><p>作修改如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/serializers.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = [<span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套关联</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># tracks = TrackSerializer(many=True, read_only=True)</span></span><br><span class="line">    tracks = TrackSerializer(many=<span class="literal">True</span>) <span class="comment"># 修改时，需要去掉 read_only 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接近于固定写法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        tracks_data = validated_data.pop(<span class="string">&#x27;tracks&#x27;</span>)</span><br><span class="line">        album = Album.objects.create(**validated_data) <span class="comment"># 保存一类</span></span><br><span class="line">        <span class="comment"># 保存多类</span></span><br><span class="line">        <span class="keyword">for</span> track_data <span class="keyword">in</span> tracks_data:</span><br><span class="line">            Track.objects.create(album=album, **track_data)</span><br><span class="line">        <span class="keyword">return</span> album</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/albums/</code> we POST this: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;album_name&quot;: &quot;唱片3&quot;,</span><br><span class="line">    &quot;artist&quot;: &quot;好妹妹&quot;,</span><br><span class="line">    &quot;tracks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;order&quot;: 1,</span><br><span class="line">            &quot;title&quot;: &quot;你飞到城市另一边&quot;,</span><br><span class="line">            &quot;duration&quot;: 300</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;order&quot;: 2,</span><br><span class="line">            &quot;title&quot;: &quot;冬&quot;,</span><br><span class="line">            &quot;duration&quot;: 400</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>worked.</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1125">https://github.com/dropsong/py_webServer/tree/master/day1125</a></p><h1 id="自定义关系类型字段"><a href="#自定义关系类型字段" class="headerlink" title="自定义关系类型字段"></a>自定义关系类型字段</h1><p>Custom relational fields.</p><p><strong>我们另起一份代码。</strong></p><p>修改 <code>./guide/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> guide.models <span class="keyword">import</span> Album, Comment, Event, Event1, Account, Track</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentSerializer</span>(serializers.Serializer):</span><br><span class="line">    email = serializers.EmailField()</span><br><span class="line">    content = serializers.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># content = serializers.ChoiceField(choices=[100, 101])</span></span><br><span class="line">    created = serializers.DateTimeField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Comment.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        instance.email = validated_data.get(<span class="string">&#x27;email&#x27;</span>, instance.email)</span><br><span class="line">        instance.content = validated_data.get(<span class="string">&#x27;content&#x27;</span>, instance.content)</span><br><span class="line">        instance.created = validated_data.get(<span class="string">&#x27;created&#x27;</span>, instance.created)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_content</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that the comment is about nihao.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;nihao&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;not about nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    description = serializers.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    start = serializers.DateTimeField()</span><br><span class="line">    finish = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Event</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;finish&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Check that start is before finish.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;start&#x27;</span>] &gt; data[<span class="string">&#x27;finish&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;finish must occur after start&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        extra_kwargs = &#123;<span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>&#125;&#125; <span class="comment"># 如果没有这句，会露出密码(密文)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        user = User(</span><br><span class="line">            email=validated_data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">            username=validated_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user.set_password(validated_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = [<span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 自定义关系字段，之前都是 CharField 之类的，这里我们自定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackListingField</span>(serializers.RelatedField):</span><br><span class="line">    <span class="comment"># 改变查询时显示的样式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_representation</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 时长格式： 秒 -&gt; 几分几秒</span></span><br><span class="line">        duration = time.strftime(<span class="string">&#x27;%M:%S&#x27;</span>, time.gmtime(value.duration))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Track %d: %s (%s)&#x27;</span> % (value.order, value.title, duration)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    tracks = TrackListingField(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = [<span class="string">&#x27;album_name&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>, <span class="string">&#x27;tracks&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/albums/</code> we see:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8000/albums/?page=2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;previous&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;album_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唱片1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;Track 1: 蚂蚁 (05:00)&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Track 2: 东风破 (06:40)&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;album_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唱片2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;朴树&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>worked.</p><h1 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a>Validators</h1><h2 id="Validators-1"><a href="#Validators-1" class="headerlink" title="Validators"></a>Validators</h2><p>在全局 url 配置中打开注释，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api2/&#x27;</span>, include(<span class="string">&#x27;books.urls&#x27;</span>)), <span class="comment"># 使用自己应用内的路由,例如 &#x27;api/&#x27; ，但为方便我们就留空</span></span><br><span class="line">    <span class="comment"># path(&#x27;&#x27;, include(&#x27;snippets.urls&#x27;)), </span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;guide.urls&#x27;</span>)), </span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)), <span class="comment"># 有这个，才有 DRF 的登录</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们现在使用 UniqueValidator 防止重复添加同一本书。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./books/serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 和 models.py 不能冲突</span></span><br><span class="line">    btitle = serializers.CharField(max_length=<span class="number">20</span>, validators=[UniqueValidator(queryset=BookInfo.objects.<span class="built_in">all</span>())])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 当前序列化器在序列化数据的时候,使用哪个模型</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_date&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>]</span><br></pre></td></tr></table></figure><p>runserver, 效果：不能再添加一本书名重复的书籍。</p><p>另外可以关注：</p><ul><li><code>UniqueForDateValidator</code></li><li><code>UniqueForMonthValidator</code></li><li><code>UniqueForYearValidator</code></li></ul><h2 id="Advanced-field-defaults"><a href="#Advanced-field-defaults" class="headerlink" title="Advanced field defaults"></a>Advanced field defaults</h2><p>CurrentUserDefault:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./books/serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework.validators <span class="keyword">import</span> UniqueValidator</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> BookInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 和 models.py 不能冲突</span></span><br><span class="line">    btitle = serializers.CharField(max_length=<span class="number">20</span>, validators=[UniqueValidator(queryset=BookInfo.objects.<span class="built_in">all</span>())])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示登录的用户（仅展示功能，这个效果意味不明）</span></span><br><span class="line">    owner = serializers.CharField(</span><br><span class="line">        default=serializers.CurrentUserDefault()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 当前序列化器在序列化数据的时候,使用哪个模型</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_date&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>, <span class="string">&#x27;owner&#x27;</span>]</span><br></pre></td></tr></table></figure><p>效果：展示已经登录的用户。</p><h1 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h1><p>在全局 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [   <span class="comment"># add</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.IsAuthenticated&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：访问网站的任何资源，若未登录，都会提示 <code>Authentication credentials were not provided.</code></p><p>为了之后的演示，我们将上面的新增代码注释掉。</p><p>在 <code>./guide/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, permission_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@permission_classes(<span class="params">[IsAuthenticated]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example_view</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span>  <span class="comment"># 注意，文本显示允许</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>在 <code>./guide/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">    path(<span class="string">&#x27;example_view/&#x27;</span>, example_view),  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>runserver, 在未登录状态下访问 <code>127.0.0.1:8000/example_view/</code> 提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authentication credentials were not provided.</span><br></pre></td></tr></table></figure><p>若登录，则提示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;request was permitted&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>另外可以关注 API Reference 里面的：</p><ul><li>IsAuthenticated</li><li>IsAdminUser</li><li>IsAuthenticatedOrReadOnly</li></ul><h1 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h1><p>做缓存只能做查询的缓存，新增、修改、删除的缓存是做不了的。</p><p>我们对 snippet 页面做一个缓存：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./sinppets/views.py</span></span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics, permissions</span><br><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.vary <span class="keyword">import</span> vary_on_cookie, vary_on_headers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This ViewSet automatically provides `list`, `create`, `retrieve`,</span></span><br><span class="line"><span class="string">    `update` and `destroy` actions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Additionally we also provide an extra `highlight` action.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">                          IsOwnerOrReadOnly]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写列表页</span></span><br><span class="line">    <span class="comment"># With cookie: cache requested url for each user for 2 hours</span></span><br><span class="line">                                            <span class="comment"># add ------------------</span></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">cache_page(<span class="params"><span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span></span>)</span>) </span></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">vary_on_cookie</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">        </span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">detail=<span class="literal">True</span>, renderer_classes=[renderers.StaticHTMLRenderer]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user) </span><br><span class="line">                                             <span class="comment"># ----------------- add</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This viewset automatically provides `list` and `retrieve` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetHighlight</span>(generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    renderer_classes = [renderers.StaticHTMLRenderer] <span class="comment"># 配置渲染器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object() <span class="comment"># 在详情页中拿到了某个 snippet 对象</span></span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>没做缓存、刚设置缓存、设置缓存之后取数据是三种不同的速度，平均就时间而言：刚设置缓存 &gt; 没做缓存 &gt; 设置缓存之后。</p><p><img src="https://s2.loli.net/2024/11/28/tI9FopidhZOA6RC.jpg" alt="91-26.jpeg"></p><p>但是我们目前实现的缓存<strong>还比较低级</strong>。例如我们在 <code>127.0.0.1:8000/snippets/2/</code> 中删除一条数据，再次访问 <code>127.0.0.1:8000/snippets/</code>，会发现数据仍然存在，因为<strong>缓存没有失效</strong>（在后端的数据库中也可以印证，数据其实已经删除了）。</p><p>缓存需要在数据发生变更的时候失效，自己写，在 <code>perform</code> 里处理。不用过于担心，或者这个在 redis 中实现也比较方便。</p><h1 id="Throttling-限流"><a href="#Throttling-限流" class="headerlink" title="Throttling 限流"></a>Throttling 限流</h1><p>限流是为了防止爬虫。</p><p>在全局 setting 里：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [   <span class="comment"># ------------------------ add</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,  <span class="comment"># 匿名的</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span>   <span class="comment"># 已经登录的</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/sec&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;500/day&#x27;</span></span><br><span class="line">    &#125;                               <span class="comment"># ------------------------- add</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：未登录，则一秒内最多访问一次；登录，则每天可以访问 500 次（随便设的）。</p><p>下面尝试局部的限流：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局 settings</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_THROTTLE_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;,  # 匿名的</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;   # 已经登录的</span></span><br><span class="line">    <span class="comment"># ],</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/min&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    throttle_classes = [UserRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;upload/&lt;str:filename&gt;/&#x27;</span>, FileUploadView.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;simple_html_view/&#x27;</span>, simple_html_view),</span><br><span class="line">    path(<span class="string">&#x27;example_view/&#x27;</span>, example_view),</span><br><span class="line">    path(<span class="string">&#x27;example_view1/&#x27;</span>, ExampleView.as_view()),  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>上面的是用类，下面尝试用视图函数来实现：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./guide/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FileUploadParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileUploadView</span>(views.APIView):</span><br><span class="line">    parser_classes = [FileUploadParser]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, filename, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        file_obj = request.data[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="comment"># do some stuff with uploaded file</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, renderer_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> StaticHTMLRenderer</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@renderer_classes(<span class="params">[StaticHTMLRenderer]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_html_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Comment.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CommentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Event.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    serializer_class = EventSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = CreateUserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Album.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AlbumSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, permission_classes, throttle_classes <span class="comment"># add</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@permission_classes(<span class="params">[IsAuthenticated]</span>)</span></span><br><span class="line"><span class="meta">@throttle_classes(<span class="params">[UserRateThrottle]</span>)  </span><span class="comment"># add</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example_view</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    throttle_classes = [UserRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>runserver, 在 <code>127.0.0.1:8000/example_view/</code> 实现了类似的效果。</p><p><strong>如何识别客户端？</strong></p><blockquote><p>要限流，就必须识别客户端。DRF 如何判断、区分当前客户端的身份呢？<br>DRF 利用 HTTP 报头的 <code>&#39;x-forwarded-for&#39;</code> 或 WSGI 中的 <code>&#39;remote-addr&#39;</code> 变量来唯一标识客户端的 IP 地址。如果存在 <code>&#39;x-forwarded-for&#39;</code> 头部属性，则使用它，否则将使用 WSGI 中 <code>&#39;remote-addr&#39;</code> 变量的值。<br>在代理的情况下，如果想严格标识唯一的客户端 IP 地址，需要首先设置 <code>NUM_PROXIES</code> 来配置 API 后面运行的应用程序代理的数量。此设置应为大于等于 0 的整数。如果设置为非零，则一旦排除了任何应用程序代理 IP 地址，客户端 IP 将被标识为 <code>&#39;x-forwarded-for&#39;</code> 头中的最后一个 IP 地址。如果设置为零，则 <code>&#39;remote-addr&#39;</code> 的值将始终用作标识 IP 地址。重要的是要清楚，如果配置了 <code>NUM_PROXIES</code>, 那么 NAT(网络地址转换) 网关后面的所有客户机都将被视为单个客户机。</p></blockquote><p><strong>新的需求：</strong> 我们发现，上面的限流都是读的全局 settings, 因此限流策略是一样的。但是我们想在不同的页面实现不同的限流策略。</p><p>新建文件 <code>./guide/throttles.py</code>: </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BurstRateThrottle</span>(<span class="title class_ inherited__">UserRateThrottle</span>):</span><br><span class="line">    scope = <span class="string">&#x27;burst&#x27;</span></span><br></pre></td></tr></table></figure><p>在 <code>./guide/views.py</code> 中，我们注释掉之前的，改写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># throttle_classes = [UserRateThrottle]</span></span><br><span class="line">    throttle_classes = [BurstRateThrottle]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>在全家 settings 中配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_THROTTLE_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;,  # 匿名的</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;   # 已经登录的</span></span><br><span class="line">    <span class="comment"># ],</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;user&#x27;: &#x27;10/min&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;5/min&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一种更简单的方法：</strong> 去官网查找内容 <code>ScopedRateThrottle</code> .</p><h1 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h1><p>之前已经装过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure><p>在全局 settings 中注册应用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;books&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;snippets&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;guide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_filters&#x27;</span>  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在全局 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PAGE_SIZE&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.permissions.IsAuthenticated&#x27;,</span></span><br><span class="line">    <span class="comment"># ]</span></span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_THROTTLE_CLASSES&#x27;: [</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;,  # 匿名的</span></span><br><span class="line">    <span class="comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;   # 已经登录的</span></span><br><span class="line">    <span class="comment"># ],</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;user&#x27;: &#x27;10/min&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;5/min&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>], <span class="comment"># add</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方便起见，我们修改一下 <code>./guide/serializers.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrackSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Track</span><br><span class="line">        fields = [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;duration&#x27;</span>]</span><br></pre></td></tr></table></figure><p>现在我们具体地实现一下过滤功能：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    filter_backends = [DjangoFilterBackend,filters.SearchFilter,filters.OrderingFilter]</span><br><span class="line">    filterset_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;order&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;album__album_name&#x27;</span>] <span class="comment">#外键加入两个下划线</span></span><br><span class="line">    ordering_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br></pre></td></tr></table></figure><p>runserver, easy to play around. worked.</p><p>目前为止的代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1128">https://github.com/dropsong/py_webServer/tree/master/day1128</a></p><h1 id="Pagination-1"><a href="#Pagination-1" class="headerlink" title="Pagination"></a>Pagination</h1><p><strong>我们另起一份代码。</strong></p><p>在 <code>./guide/views.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页类    add</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardResultsSetPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    page_size = <span class="number">2</span>   <span class="comment"># 数字小是仅作演示</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span>  <span class="comment"># 这个名字不能改</span></span><br><span class="line">    max_page_size = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrackViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    filter_backends = [DjangoFilterBackend,filters.SearchFilter,filters.OrderingFilter]</span><br><span class="line">    filterset_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;order&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;album__album_name&#x27;</span>] <span class="comment">#外键加入两个下划线</span></span><br><span class="line">    ordering_fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line">    queryset = Track.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = TrackSerializer</span><br><span class="line">    pagination_class = StandardResultsSetPagination  <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>为了防止之前分页设置的影响，我们在全局 settings 中注释掉：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_PAGINATION_CLASS&#x27;: &#x27;rest_framework.pagination.PageNumberPagination&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;PAGE_SIZE&#x27;: 2,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;1/hour&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;user&#x27;: &#x27;10/min&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;5/min&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [<span class="string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runserver, on front page <code>127.0.0.1:8000/tracks/</code> we see it worked.</p><p>但是这和之前的有什么区别呢？</p><p>我们可以手动地调整请求 url 为： <code>127.0.0.1:8000/tracks/?page_size=3</code>, 可以看到很好地实现了效果。</p><p>最后的代码版本：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1201">https://github.com/dropsong/py_webServer/tree/master/day1201</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;h2 id=&quot;前后端不分离&quot;&gt;&lt;a href=&quot;#前后端不分离&quot; class=&quot;headerlink&quot; title=&quot;前后端不分离&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Django" scheme="https://dropsong.github.io/tags/Django/"/>
    
    <category term="后端" scheme="https://dropsong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="DRF" scheme="https://dropsong.github.io/tags/DRF/"/>
    
    <category term="postman" scheme="https://dropsong.github.io/tags/postman/"/>
    
    <category term="网页缓存" scheme="https://dropsong.github.io/tags/%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Python 高级</title>
    <link href="https://dropsong.github.io/posts/eadf1d9.html"/>
    <id>https://dropsong.github.io/posts/eadf1d9.html</id>
    <published>2024-10-22T12:41:29.000Z</published>
    <updated>2025-01-11T09:47:52.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>内网穿透原理图：</p><p><img src="https://s2.loli.net/2024/10/21/zoUnOfhdAH7kBEx.png" alt="90-1.png"></p><p>但是这种技术妨碍了 ISP 收互联网企业的带宽费用，因此 ISP 不会喜欢这种技术。</p><p>代码：<br><a href="https://github.com/dropsong/py_webServer">https://github.com/dropsong/py_webServer</a></p><h1 id="GIL（全局解释器锁）"><a href="#GIL（全局解释器锁）" class="headerlink" title="GIL（全局解释器锁）"></a>GIL（全局解释器锁）</h1><p>Python 语言和 GIL 没有关系。仅仅是由于<strong>历史原因</strong>在 Cpython 虚拟机(解释器)，<strong>难以移除</strong> GIL。</p><p>GIL：全局解释器锁。<strong>每个线程在执行的过程都需要先获取 GIL</strong>，保证同一时刻只有一个线程可以执行代码。</p><p>线程释放 GIL 锁的情况： 在 IO 操作等可能会引起阻塞的 system call 之前，可以暂时释放 GIL，但在执行完毕后，必须重新获取 GIL，Python 3.x 使用计时器（执行时间达到阈值后，当前线程释放GIL）或 Python 2.x tickets 计数达到 100</p><p><strong>Python 使用多进程是可以利用多核的 CPU 资源的。</strong></p><p><strong>多线程爬取比单线程性能有提升</strong>，因为遇到 IO 阻塞会自动释放 GIL 锁</p><h1 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h1><ul><li><code>xx</code>: 公有变量</li><li><code>_x</code>: 单前置下划线，私有化属性或方法，<code>from somemodule import *</code> 禁止导入，类对象和子类可以访问</li><li><code>__xx</code>：双前置下划线，避免与子类中的属性命名冲突，无法在外部直接访问（名字重整所以访问不到）</li><li><code>__xx__</code>:双前后下划线，用户名字空间的魔法对象或属性。例如:<code>__init__</code> ，<strong>不要自己发明这样的名字</strong></li><li><code>xx_</code>:单后置下划线，用于避免与 Python 关键词的冲突</li></ul><h1 id="模块导入问题"><a href="#模块导入问题" class="headerlink" title="模块导入问题"></a>模块导入问题</h1><p>不可变类型的全局变量用 from 方式导入的时候，相当于一份拷贝，在一个文件中修改，对另一个文件中的值没有影响。</p><h1 id="多继承的解决方案"><a href="#多继承的解决方案" class="headerlink" title="多继承的解决方案"></a>多继承的解决方案</h1><p>总结：</p><ol><li>使用 <code>super()</code></li><li>使用 <code>*args</code>、<code>**kwargs</code></li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******多继承使用 super().__init__ 发生的状态******&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;parent 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;parent 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs) <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son1 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, *args, **kwargs</span>): <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, *args, **kwargs) <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Son2 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandson</span>(Son1, Son2):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, gender</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Grandson 的 init 开始被调用&#x27;</span>)</span><br><span class="line">        <span class="comment"># 多继承时，相对于使用类名.__init__方法，要把每个父类全部写一遍</span></span><br><span class="line">        <span class="comment"># 而 super 只用一句话，执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因</span></span><br><span class="line">        <span class="comment"># super(Grandson, self).__init__(name, age, gender)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age, gender)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Grandson 的 init 结束被调用&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Grandson.__mro__) <span class="comment">#打印出来顺序是谁，将来调用的就是谁</span></span><br><span class="line">gs = Grandson(<span class="string">&#x27;grandson&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;姓名：&#x27;</span>, gs.name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;年龄：&#x27;</span>, gs.age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;性别：&#x27;</span>, gs.gender)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;******多继承使用 super().__init__ 发生的状态******\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">******多继承使用 super().__init__ 发生的状态******</span></span><br><span class="line"><span class="string">(&lt;class &#x27;__main__.Grandson&#x27;&gt;, &lt;class &#x27;__main__.Son1&#x27;&gt;, &lt;class &#x27;__main__.Son2&#x27;&gt;, &lt;class &#x27;__main__.Parent&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"><span class="string">Grandson 的 init 开始被调用</span></span><br><span class="line"><span class="string">Son1 的 init 开始被调用</span></span><br><span class="line"><span class="string">Son2 的 init 开始被调用</span></span><br><span class="line"><span class="string">parent 的 init 开始被调用</span></span><br><span class="line"><span class="string">parent 的 init 结束被调用</span></span><br><span class="line"><span class="string">Son2 的 init 结束被调用</span></span><br><span class="line"><span class="string">Son1 的 init 结束被调用</span></span><br><span class="line"><span class="string">Grandson 的 init 结束被调用</span></span><br><span class="line"><span class="string">姓名： grandson</span></span><br><span class="line"><span class="string">年龄： 12</span></span><br><span class="line"><span class="string">性别： 男</span></span><br><span class="line"><span class="string">******多继承使用 super().__init__ 发生的状态******</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h1><h2 id="类属性、实例属性"><a href="#类属性、实例属性" class="headerlink" title="类属性、实例属性"></a>类属性、实例属性</h2><p>实例属性属于对象，类属性属于类。</p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Province</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    country = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># 实例属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例对象</span></span><br><span class="line">obj = Province(<span class="string">&#x27;山东省&#x27;</span>)</span><br><span class="line"><span class="comment"># 直接访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br><span class="line"><span class="comment"># 直接访问类属性</span></span><br><span class="line">Province.country</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">山东省</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>实例属性需要通过对象来访，类属性通过类访问。</strong></p><p>类属性在内存中只保存一份，实例属性在每个对象中都要保存一份。</p><h2 id="实例方法、静态方法、类方法"><a href="#实例方法、静态方法、类方法" class="headerlink" title="实例方法、静态方法、类方法"></a>实例方法、静态方法、类方法</h2><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ord_func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义实例方法，至少有一个 self 参数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(self.name)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_func</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义类方法，至少有一个 cls 参数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 定义静态方法 ，无默认参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = Foo(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用实例方法</span></span><br><span class="line">f.ord_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">Foo.class_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Foo.static_func()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">实例方法</span></span><br><span class="line"><span class="string">类方法</span></span><br><span class="line"><span class="string">静态方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="property-属性"><a href="#property-属性" class="headerlink" title="property 属性"></a>property 属性</h1><p>一种懒人方法，可以不用写括号。</p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am func&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 property 属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am prop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo_obj = Foo()</span><br><span class="line">foo_obj.func() <span class="comment"># 调用实例方法</span></span><br><span class="line">foo_obj.prop <span class="comment"># 调用 property 属性</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am func</span></span><br><span class="line"><span class="string">I am prop</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>property 属性可以用来实现只能读不能写的属性。 <del>（想必这就是莽蛇语言的独到之处了吧）</del></p><p>但是也可以有别的方法去写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@property&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.setter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.deleter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price </span><br><span class="line">obj.price = <span class="number">123</span> <span class="comment"># 自动执行 @price.setter 修饰的 price 方法，并将 123 赋值给方法的参数</span></span><br><span class="line"><span class="keyword">del</span> obj.price <span class="comment"># 自动执行 @price.deleter 修饰的 price 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@property</span></span><br><span class="line"><span class="string">@price.setter</span></span><br><span class="line"><span class="string">@price.deleter</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用类属性的方式创建 property 属性</strong>时，经典类和新式类无区别：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">reuslt = obj.BAR <span class="comment"># 自动调用 get_bar 方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(reuslt)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">laowang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这种写法可以拓展为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_bar</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;必须两个参数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;set value&#x27;</span> + value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deleter...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar, set_bar, del_bar, <span class="string">&quot;description...&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.BAR   <span class="comment"># 自动调用第一个参数中定义的方法：get_bar</span></span><br><span class="line">obj.BAR = <span class="string">&quot;alex&quot;</span>  <span class="comment"># 自动调用第二个参数中定义的方法：set_bar 方法，并将“alex”当作参数传入</span></span><br><span class="line">desc = Foo.BAR.__doc__  <span class="comment"># 自动获取第四个参数中设置的值：description...</span></span><br><span class="line"><span class="built_in">print</span>(desc)</span><br><span class="line"><span class="keyword">del</span> obj.BAR  <span class="comment"># 自动调用第三个参数中定义的方法：del_bar 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">getter...</span></span><br><span class="line"><span class="string">setter...</span></span><br><span class="line"><span class="string">description...</span></span><br><span class="line"><span class="string">deleter...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 property 升级 getter 和 setter 方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMoney</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setMoney</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br><span class="line">            <span class="comment"># 定义一个属性，当对这个 money 设置值时调用 setMoney,当获取值时调用 getMoney</span></span><br><span class="line"></span><br><span class="line">    money = <span class="built_in">property</span>(getMoney, setMoney)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span> <span class="comment"># 调用 setMoney 方法</span></span><br><span class="line"><span class="built_in">print</span>(a.money) <span class="comment"># 调用 getMoney 方法</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="魔法属性-call"><a href="#魔法属性-call" class="headerlink" title="魔法属性 call"></a>魔法属性 call</h1><p>对象后面加括号，触发执行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj() <span class="comment"># 执行 __call__&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__call__</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>莽蛇语言魅力时刻。</p><h1 id="with-与“上下文管理器”"><a href="#with-与“上下文管理器”" class="headerlink" title="with 与“上下文管理器”"></a>with 与“上下文管理器”</h1><p>场景：应用程序打开某些资源并执行完业务逻辑之后，必须做的一件事就是要关闭（断开）该资源。</p><p><strong>普通版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m1</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;python 之禅&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这样写有一个潜在的问题，如果在调用 write 的过程中，出现了异常进而导致后续代码无法继续执行，close 方法无法被正常调用，因此资源就会一直被该程序占用者释放。那么该如何改进代码呢？</p><p><strong>进阶版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m2</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f.write(<span class="string">&quot;python 之禅&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;oops error&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>缺点是写起来太麻烦。</p><p><strong>高级版：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m3</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;Python 之禅&quot;</span>)</span><br></pre></td></tr></table></figure><p>一种更加简洁、优雅的方式就是用 <strong>with 关键字</strong>。类似于 C++ 的 RAII 。</p><p><strong>上下文管理器</strong>的实现和魔法属性 <code>__enter__()</code> 和 <code>__exit__()</code> 有关，和 C++ 原理上差不多，但是碍于 Python 混乱的语法，稍微显得麻烦一点，此处略去。</p><p>实现上下文管理器的另外方式：<br>Python 还提供了一个 contextmanager 的装饰器，更进一步简化了上下文管理器的实现方式。通过 yield 将函数分割成两部分，yield 之前的语句在 <code>__enter__</code> 方法中执行，yield 之后的语句在 <code>__exit__</code> 方法中执行。紧跟在 yield 后面的值是函数的返回值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_open</span>(<span class="params">path, mode</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(path, mode)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">with</span> my_open(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello , the simplest context manager&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="MySQL-知识补充"><a href="#MySQL-知识补充" class="headerlink" title="MySQL 知识补充"></a>MySQL 知识补充</h1><p>绕个弯补充一下，之后会可能会用到。</p><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>例子：</p><p><img src="https://s2.loli.net/2024/10/23/5BrHzRV8aN9pfm3.png" alt="90-2.png"></p><p>用字符串拼接的方式去进行 sql 是非常危险的。</p><p>解决方法，直接传到 <code>execute()</code> 中，不要分两步写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params = [find_name]</span><br><span class="line">count = cs1.execute(<span class="string">&#x27;select * from goods where name=%s&#x27;</span>, params)</span><br></pre></td></tr></table></figure><h2 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h2><p>在生产环境下操作数据库时，绝对不可以使用 root 账户连接，而是创建特定的账户，授予这个账户特定的操作权限。</p><p>MySQL 的账户可以分为以下几种：</p><ul><li>服务实例级账号：启动了一个 mysql，即为一个数据库实例；如果某用户如 root,拥有服务实例级分配的权限，那么该账号就可以删除所有的数据库、连同这些库中的表</li><li>数据库级别账号：对特定数据库执行增删改查的所有操作</li><li>数据表级别账号：对特定表执行增删改查等所有操作</li><li>字段级别的权限：对某些表的特定字段进行操作</li><li>存储程序级别的账号：对存储程序进行增删改查的操作</li></ul><p>注册新用户及之后的一些操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> akashi.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> yanfei           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用 <code>sudo mysql -u yanfei -p</code> 进入之后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> akashi             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names</span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> goods            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> miaochuan        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> goods limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                        <span class="operator">|</span> cate_name <span class="operator">|</span> brand_name <span class="operator">|</span> price    <span class="operator">|</span> is_show          <span class="operator">|</span> is_saleoff             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> r510vc <span class="number">15.6</span> 英寸笔记本      <span class="operator">|</span> 笔记本    <span class="operator">|</span> 华硕       <span class="operator">|</span> <span class="number">3399.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> g150th <span class="number">15.6</span> 英寸游戏本      <span class="operator">|</span> 游戏本    <span class="operator">|</span> 雷神       <span class="operator">|</span> <span class="number">8499.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> x550cc <span class="number">15.6</span> 英寸笔记本      <span class="operator">|</span> 笔记本    <span class="operator">|</span> 华硕       <span class="operator">|</span> <span class="number">2799.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> x240 超极本                 <span class="operator">|</span> 超级本    <span class="operator">|</span> 联想       <span class="operator">|</span> <span class="number">4880.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> u330p <span class="number">13.3</span> 英寸超极本       <span class="operator">|</span> 超级本    <span class="operator">|</span> 联想       <span class="operator">|</span> <span class="number">4299.000</span> <span class="operator">|</span> <span class="number">0x01</span>             <span class="operator">|</span> <span class="number">0x00</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------------+-----------+------------+----------+------------------+------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> goods <span class="keyword">values</span>(<span class="number">6</span>, 非常厉害的笔记本, 笔记本 ,联想, <span class="number">3333.0</span>);</span><br><span class="line">ERROR <span class="number">1142</span> (<span class="number">42000</span>): <span class="keyword">INSERT</span> command denied <span class="keyword">to</span> <span class="keyword">user</span> <span class="string">&#x27;yanfei&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">&#x27;goods&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><h3 id="主机操作"><a href="#主机操作" class="headerlink" title="主机操作"></a>主机操作</h3><p>在主机上配置账户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;192.168.19.129&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"># <span class="number">192.168</span><span class="number">.19</span><span class="number">.129</span> 是从机的 IP</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;backup&#x27;</span>@<span class="string">&#x27;192.168.19.129&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>修改 mysql 的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class="line">server-id = 1</span><br><span class="line">expire_logs_days = 1</span><br><span class="line">max_binlog_size = 100M</span><br><span class="line">binlog_do_db = <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>重启 mysql 服务（重启之前确保 test 数据库是存在的）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>查看二进制日志是否生成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="从机操作"><a href="#从机操作" class="headerlink" title="从机操作"></a>从机操作</h3><p>修改 mysql 的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line">expire_logs_days = 10</span><br><span class="line">max_binlog_size = 100M</span><br></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><p>配置主从库之间的通信：</p><p><img src="https://s2.loli.net/2024/10/24/oICvga6SjksDUmx.png" alt="90-3.png"></p><p>从机上设置从库（129 机）与主库（130 机）进行通信。先把从机的 test 数据库清空，模板：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">MASTER_HOST<span class="operator">=</span><span class="string">&#x27;master_host_name&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;replication_user_name&#x27;</span>,#backup</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;replication_password&#x27;</span>, #<span class="number">123</span></span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;recorded_log_file_name&#x27;</span>, # mysql<span class="operator">-</span>bin<span class="number">.000056</span></span><br><span class="line">MASTER_LOG_POS<span class="operator">=</span>recorded_log_position; # <span class="number">155</span></span><br></pre></td></tr></table></figure><p>作为一个可以参考的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&#x27;192.168.19.130&#x27;,</span><br><span class="line">MASTER_USER=&#x27;backup&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123&#x27;,</span><br><span class="line">MASTER_LOG_FILE=&#x27;mysql-bin.000149&#x27;,</span><br><span class="line">MASTER_LOG_POS=155;</span><br></pre></td></tr></table></figure><p><code>START SLAVE;</code> 开启主从同步线程（关闭用 <code>stop slave</code>）。</p><p><code>show slave status\G</code> ，一个可能的输出是：</p><p><img src="https://s2.loli.net/2024/10/24/reZftIPqCJHKbL2.png" alt="90-4.png"></p><p>针对多个数据库，设置为：</p><p><img src="https://bu.dusays.com/2024/10/24/671a16fe29f2c.png" alt="90-5.png"></p><h1 id="迷你-web-框架"><a href="#迷你-web-框架" class="headerlink" title="迷你 web 框架"></a>迷你 web 框架</h1><p>本节实现一个 mini frame web 框架。功能类似一个迷你的 Django .</p><p><img src="https://s2.loli.net/2024/10/24/5JlHCr97Ten1Nqd.jpg" alt="90-6.jpeg"></p><h2 id="定义-WSGI-接口"><a href="#定义-WSGI-接口" class="headerlink" title="定义 WSGI 接口"></a>定义 WSGI 接口</h2><p>WSGI 接口定义非常简单，它只要求 Web 开发者实现一个函数，就可以响应 HTTP 请求。我们来看一个最简单的 Web 版本的“Hello World!”：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>application()</code> 函数就是符合 WSGI 标准的一个 HTTP 处理函数，它接收两个参数：</p><ul><li><code>environ</code>：一个包含所有 HTTP 请求信息的 dict 对象。</li><li><code>start_response</code>：一个发送 HTTP 响应的函数。</li></ul><p><code>application()</code> 函数必须由 WSGI 服务器来调用。我们现在做的 web 服务器项目，就是一个既能解析静态网页，又能解析动态网页的服务器。</p><p>web 框架传递的字典的一个实际例子（不需要掌握）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;HTTP_ACCEPT_LANGUAGE&#x27;: &#x27;zh-cn&#x27;,</span><br><span class="line">    &#x27;wsgi.file_wrapper&#x27;: &lt;built-infunctionuwsgi_sendfile&gt;,</span><br><span class="line">    &#x27;HTTP_UPGRADE_INSECURE_REQUESTS&#x27;: &#x27;1&#x27;,</span><br><span class="line">    &#x27;uwsgi.version&#x27;: b&#x27;2.0.15&#x27;,</span><br><span class="line">    &#x27;REMOTE_ADDR&#x27;: &#x27;172.16.7.1&#x27;,</span><br><span class="line">    &#x27;wsgi.errors&#x27;: &lt;_io.TextIOWrappername=2mode=&#x27;w&#x27;encoding=&#x27;UTF-8&#x27;&gt;,</span><br><span class="line">    &#x27;wsgi.version&#x27;: (1,0),</span><br><span class="line">    &#x27;REMOTE_PORT&#x27;: &#x27;40432&#x27;,</span><br><span class="line">    &#x27;REQUEST_URI&#x27;: &#x27;/&#x27;,</span><br><span class="line">    &#x27;SERVER_PORT&#x27;: &#x27;8000&#x27;,</span><br><span class="line">    &#x27;wsgi.multithread&#x27;: False,</span><br><span class="line">    &#x27;HTTP_ACCEPT&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span><br><span class="line">    &#x27;HTTP_HOST&#x27;: &#x27;172.16.7.152: 8000&#x27;,</span><br><span class="line">    &#x27;wsgi.run_once&#x27;: False,</span><br><span class="line">    &#x27;wsgi.input&#x27;: &lt;uwsgi._Inputobjectat0x7f7faecdc9c0&gt;,</span><br><span class="line">    &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;,</span><br><span class="line">    &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;,</span><br><span class="line">    &#x27;HTTP_ACCEPT_ENCODING&#x27;: &#x27;gzip,deflate&#x27;,</span><br><span class="line">    &#x27;HTTP_CONNECTION&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">    &#x27;uwsgi.node&#x27;: b&#x27;ubuntu&#x27;,</span><br><span class="line">    &#x27;HTTP_DNT&#x27;: &#x27;1&#x27;,</span><br><span class="line">    &#x27;UWSGI_ROUTER&#x27;: &#x27;http&#x27;,</span><br><span class="line">    &#x27;SCRIPT_NAME&#x27;: &#x27;&#x27;,</span><br><span class="line">    &#x27;wsgi.multiprocess&#x27;: False,</span><br><span class="line">    &#x27;QUERY_STRING&#x27;: &#x27;&#x27;,</span><br><span class="line">    &#x27;PATH_INFO&#x27;: &#x27;/index.html&#x27;,</span><br><span class="line">    &#x27;wsgi.url_scheme&#x27;: &#x27;http&#x27;,</span><br><span class="line">    &#x27;HTTP_USER_AGENT&#x27;: &#x27;Mozilla/5.0(Macintosh;IntelMacOSX10_12_5)AppleWebKit/603.2.4(KHTML,likeGecko)Version/10.1.1Safari/603.2.4&#x27;,</span><br><span class="line">    &#x27;SERVER_NAME&#x27;: &#x27;ubuntu&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>如果请求是不是 html，是动态请求，后缀是 <code>.py</code>，那如何处理呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author luke</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 创建套接字</span></span><br><span class="line">        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 绑定</span></span><br><span class="line">        self.tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">        self.tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">service_client</span>(<span class="params">self, new_socket</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为这个浏览器返回数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求</span></span><br><span class="line">        <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">        <span class="comment"># .....</span></span><br><span class="line">        request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;&gt;&gt;&gt;&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">        request_lines = request.splitlines()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(request_lines)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">        <span class="comment"># get post put del</span></span><br><span class="line">        file_name = <span class="string">&quot;&quot;</span></span><br><span class="line">        ret = re.<span class="keyword">match</span>(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># print(&quot;*&quot;*50, file_name)</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(<span class="string">&quot;.py&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./html&quot;</span> + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                response = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;------file not found-----&quot;</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                html_content = f.read()</span><br><span class="line">                f.close()</span><br><span class="line">                <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">                response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">                <span class="comment"># response += &quot;hahahhah&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="comment"># 将response body发送给浏览器</span></span><br><span class="line">                new_socket.send(html_content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 2.2 如果是以.py结尾，那么就认为是动态资源的请求</span></span><br><span class="line">            header = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            body = <span class="string">&quot;hahahah %s &quot;</span> % time.ctime()</span><br><span class="line"></span><br><span class="line">            response = header + body</span><br><span class="line">            <span class="comment"># 发送response给浏览器</span></span><br><span class="line">            new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭套接</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">            new_socket, client_addr = self.tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监听套接字</span></span><br><span class="line">        self.tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行&quot;&quot;&quot;</span></span><br><span class="line">    wsgi_server = WSGIServer()</span><br><span class="line">    wsgi_server.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/25/ClMAvtNXp219oSa.png" alt="90-7.png"></p><p>上面的代码已经接下来的几个版本，参考代码：<br><a href="https://github.com/dropsong/py_webServer/tree/master/web_mini_frame">https://github.com/dropsong/py_webServer/tree/master/web_mini_frame</a></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>可以在函数里面定义函数，例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">line6</span>(<span class="params">k, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_line</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(k*x+b)</span><br><span class="line">    <span class="keyword">return</span> create_line</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 是 create_line 函数，函数中 k 的值是 1，b 的值是 2</span></span><br><span class="line">l1 = line6(<span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line">l1(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>函数、匿名函数、闭包、对象当做实参时有什么区别？</p><ol><li>匿名函数能够完成基本的<strong>简单功能</strong>，传递是这个函数的引用<strong>只有功能(lambda)</strong></li><li>普通函数能够完成<strong>较为复杂的功能</strong>，传递是这个函数的引用<strong>只有功能</strong></li><li>闭包能够将较为复杂的功能，传递是这个闭包中的<strong>函数以及数据</strong>，因此传递是功能+数据（<strong>相对于对象，占用空间少</strong>）</li><li>对象能够完成最为复杂的功能，传递是<strong>很多数据+很多功能</strong>，因此传递是功能+数据</li></ol><p><strong>闭包引用了外部函数的局部变量，若外部函数的局部变量没有及时释放，会消耗内存。</strong></p><p>闭包中对变量的修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个代码会报错</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    x = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----x=%d&quot;</span> % x)</span><br><span class="line">        x = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----x=%d&quot;</span> % x)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t1()</span><br></pre></td></tr></table></figure><p>因为我们打印 x 时，没有提前定义，需要在打印之前增加 <code>nonlocal x</code> ，使用外部函数的变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以正常运行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    x = <span class="number">200</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----x=%d&quot;</span> % x)</span><br><span class="line">        x = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----x=%d&quot;</span> % x)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----1----x=200</span></span><br><span class="line"><span class="string">----2----x=100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h2><p>初创公司有 N 个业务部门，基础平台部门负责提供底层的功能，如：数据库操作、redis 调用、监控 API 等功能。业务部门使用基础功能时，只需调用基础平台提供的功能即可。如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############### 基础平台提供的功能如下 ###############</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br><span class="line"><span class="comment">############### 业务部门 A 调用基础平台提供的功能 ###############</span></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br><span class="line"><span class="comment">############### 业务部门 B 调用基础平台提供的功能 ###############</span></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure><p>目前公司有条不紊的进行着，但是，以前基础平台的开发人员在写代码时候没有关注验证相关的问题，即：基础平台的提供的功能可以被任何人使用。现在需要对基础平台的所有功能<strong>进行重构，为平台提供的所有功能添加验证机制</strong>，即：执行功能前，先进行验证。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>遵循<strong>开放封闭原则</strong>，对拓展开放，对修改闭合。使用装饰器：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">w1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment"># 验证 1</span></span><br><span class="line">        <span class="comment"># 验证 2</span></span><br><span class="line">        <span class="comment"># 验证 3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>实际例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器一定是内部有闭包的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----permission check1----</span></span><br><span class="line"><span class="string">----permission check2----</span></span><br><span class="line"><span class="string">----test1-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>关于一些原理上的细节：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- 开始进行装饰 ---&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 开始进行装饰 ---</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">即使没有调用 test1() ，</span></span><br><span class="line"><span class="string">这段代码也相当于执行了：</span></span><br><span class="line"><span class="string">test1 = set_func(test1)</span></span><br><span class="line"><span class="string">因此会有输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- 开始进行装饰 ---&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">a</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----permission check2----&#x27;</span>)</span><br><span class="line">        func(a)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1----- %d&#x27;</span> % num)</span><br><span class="line"></span><br><span class="line">test1(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 开始进行装饰 ---</span></span><br><span class="line"><span class="string">----permission check1----</span></span><br><span class="line"><span class="string">----permission check2----</span></span><br><span class="line"><span class="string">----test1----- 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="多个装饰器装饰同一个函数"><a href="#多个装饰器装饰同一个函数" class="headerlink" title="多个装饰器装饰同一个函数"></a>多个装饰器装饰同一个函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---开始进行装饰权限 1 的功能---&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---这是权限验证 1----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_second</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---开始进行装饰权限 2 的功能---&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---这是权限验证 2----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离函数越近的先装饰</span></span><br><span class="line"><span class="meta">@add_first</span></span><br><span class="line"><span class="meta">@add_second</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----test1-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后装饰的先执行</span></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---开始进行装饰权限 2 的功能---</span></span><br><span class="line"><span class="string">---开始进行装饰权限 1 的功能---</span></span><br><span class="line"><span class="string">---这是权限验证 1----</span></span><br><span class="line"><span class="string">---这是权限验证 2----</span></span><br><span class="line"><span class="string">----test1-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">一种解释：</span></span><br><span class="line"><span class="string">s = add_second(test1)</span></span><br><span class="line"><span class="string">f = add_first(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个更具体的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeBold</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;b&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/b&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeItalic</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;i&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/i&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world-3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test1())</span><br><span class="line"><span class="built_in">print</span>(test2())</span><br><span class="line"><span class="built_in">print</span>(test3())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;b&gt;hello world-1&lt;/b&gt;</span></span><br><span class="line"><span class="string">&lt;i&gt;hello world-2&lt;/i&gt;</span></span><br><span class="line"><span class="string">&lt;b&gt;&lt;i&gt;hello world-3&lt;/i&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器(decorator)功能有很多，具体来说：</p><ol><li>引入日志，在执行某个函数前或者函数后记录日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li><li>等</li></ol><h3 id="被装饰的函数带返回值"><a href="#被装饰的函数带返回值" class="headerlink" title="被装饰的函数带返回值"></a>被装饰的函数带返回值</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;----hahah---&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">foo()</span><br><span class="line">ret=getInfo()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:30:36 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:30:37 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">getInfo called at Sun Oct 27 22:30:37 2024</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，上面的代码没有拿到返回值，应该修改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))</span><br><span class="line">        <span class="keyword">return</span> func() <span class="comment"># modified</span></span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getInfo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;----hahah---&#x27;</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">foo()</span><br><span class="line">ret=getInfo()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:35:25 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at Sun Oct 27 22:35:26 2024</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">getInfo called at Sun Oct 27 22:35:26 2024</span></span><br><span class="line"><span class="string">----hahah---</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>一般情况下为了让装饰器更通用，都可以加上 return .</strong></p><h3 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h3><p>装饰器带参数，在原有装饰器的基础上，设置外部变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timefun_arg</span>(<span class="params">pre=<span class="string">&quot;hello&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timefun</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_func</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s called at %s&quot;</span> % (func.__name__, pre))</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> wrapped_func</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的装饰过程</span></span><br><span class="line"><span class="comment"># 1. 调用 timefun_arg(&quot;wangdao&quot;)</span></span><br><span class="line"><span class="comment"># 2. 将步骤 1 得到的返回值，即 time_fun 返回， 然后 time_fun(foo)</span></span><br><span class="line"><span class="comment"># 3. 将 time_fun(foo)的结果返回，即 wrapped_func</span></span><br><span class="line"><span class="comment"># 4. 让 foo = wrapped_fun，即 foo 现在指向 wrapped_func</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&quot;wangdao&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg(<span class="params"><span class="string">&quot;python&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">too</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am too&quot;</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">foo called at wangdao</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">foo called at wangdao</span></span><br><span class="line"><span class="string">I am foo</span></span><br><span class="line"><span class="string">too called at python</span></span><br><span class="line"><span class="string">I am too</span></span><br><span class="line"><span class="string">too called at python</span></span><br><span class="line"><span class="string">I am too</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>前期提要：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwds</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am call&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am call</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>装饰器函数其实是这样一个接口约束，它必须接受一个 callable 对象作为参数，然后返回一个 callable 对象。在 Python 中一般 callable 对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是 callable 的。</p><p>一个具体的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.__func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwds</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am call&#x27;</span>)</span><br><span class="line">        self.__func(*args, **kwds)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am foo &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># t = Test(foo)</span></span><br><span class="line"><span class="comment"># t()</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">&#x27;akashi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am call</span></span><br><span class="line"><span class="string">I am foo akashi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="装饰后的注释问题"><a href="#装饰后的注释问题" class="headerlink" title="装饰后的注释问题"></a>装饰后的注释问题</h2><p>问题演示和解决方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Docstring&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example.__name__, example.__doc__) <span class="comment">#wper decorator</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">wper decorator</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_new_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)   </span><span class="comment"># focus this</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;decorator&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Calling decorated function...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;I am example1&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Called example1 function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(example1.__name__, example1.__doc__) <span class="comment"># example Docstring</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">example1 I am example1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="迷你-web-框架（续）"><a href="#迷你-web-框架（续）" class="headerlink" title="迷你 web 框架（续）"></a>迷你 web 框架（续）</h1><p>本节概要：<br>之前，去替换 html 模板中的变量时，替换的内容是随意写的，现在要替换的内容是从 mysql 数据库中查出来的，并把装饰器应用到框架里。</p><h2 id="version-6"><a href="#version-6" class="headerlink" title="version 6"></a>version 6</h2><p>在之前的 version 5 基础上，作如下改变。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mini_frame.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author luke</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">URL_FUNC_DICT = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">        URL_FUNC_DICT[url] = func</span><br><span class="line">        <span class="comment"># def call_func(*args, **kwargs):</span></span><br><span class="line">            <span class="comment"># return func(*args, **kwargs)</span></span><br><span class="line">        <span class="comment"># return call_func</span></span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.py&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/index.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这是实际要从数据库里边查出来</span></span><br><span class="line">    my_stock_info = <span class="string">&quot;哈哈哈，我是本月最佳员工。。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.py&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/center.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;这里是从mysql查询出来的数据。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="comment"># 由mini_frame框架添加响应码和头部</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)])</span><br><span class="line">    file_name = environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="comment"># file_name = &quot;/index.py&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> URL_FUNC_DICT[file_name]() <span class="comment"># 加括号是为了执行</span></span><br></pre></td></tr></table></figure><p>修改要点：</p><ul><li>使用字典替换 if 判断</li><li>使用装饰器实现路由功能</li></ul><h2 id="伪静态、静态、动态"><a href="#伪静态、静态、动态" class="headerlink" title="伪静态、静态、动态"></a>伪静态、静态、动态</h2><p>目前开发的网站其实都是动态网站，只是 URL 上有些区别，一般 URL 分为静态 URL、动态 URL、伪静态 URL 。</p><p><strong>静态 URL</strong> 类似于 <code>/news/2012-5-18/110.html</code> ，一般称为真静态 URL，每个网页<strong>有真实的物理路径</strong>，也就是真实存在服务器里的。</p><ul><li>网站打开速度快</li><li>网址结构比较友好，利于记忆</li><li>如果是中大型网站，则产生的页面特别多，不好管理</li><li>有利于 SEO</li></ul><p><strong>动态 URL</strong> 类似于 <code>/NewsMore.asp?id=5</code> 或者 <code>/DaiKuan.php?id=17</code> ，带有？号的 URL，一般称为动态网址，每个 URL 只是一个<strong>逻辑地址</strong>，并不是真实物理存在服务器硬盘里的。</p><ul><li>适合中大型网站，修改页面很方便</li><li>因为要进行运算，所以打开速度稍慢，不过这个可以忽略不计，服务器缓存技术可以解决该问题</li><li>URL 结构稍稍复杂，不利于记忆</li><li>搜索引擎已经能够很好地理解动态 URL，所以对 SEO 没有什么减分的影响（特别复杂的 URL 结构除外）</li></ul><p><strong>伪静态 URL</strong> 类似于 <code>/course/74.html</code> ，和真静态 URL 类似。通过伪静态规则把动态 URL 伪装成静态网址，也是<strong>逻辑地址</strong>，不存在物理地址。</p><ul><li>URL 比较友好，利于记忆</li><li>适合大中型网站，是个折中方案</li><li>设置麻烦，服务器要支持重写规则</li><li>增加服务器负担，速度变慢（虽然可以忽略）</li><li>可能造成动态 URL 和静态 URL 都被搜索引擎收录（可以用 robots 禁止掉动态地址）</li></ul><p>关于伪静态规则，一个具体的例子：</p><p><img src="https://bu.dusays.com/2024/10/28/671f575ce315f.png" alt="90-8.png"></p><h2 id="version-7"><a href="#version-7" class="headerlink" title="version 7"></a>version 7</h2><p>实现伪静态，作如下修改。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mini_frame.py</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">URL_FUNC_DICT = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_func</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># URL_FUNC_DICT[&quot;/index.py&quot;] = index</span></span><br><span class="line">        URL_FUNC_DICT[url] = func</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def call_func(*args, **kwargs):</span></span><br><span class="line">    <span class="comment">#   return func(*args, **kwargs)</span></span><br><span class="line">    <span class="comment"># return call_func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> set_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.html&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/index.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;哈哈哈哈 这是你的本月名称.....&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.html&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">center</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./templates/center.html&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    my_stock_info = <span class="string">&quot;这里是从mysql查询出来的数据。。。&quot;</span></span><br><span class="line"></span><br><span class="line">    content = re.sub(<span class="string">r&quot;\&#123;%content%\&#125;&quot;</span>, my_stock_info, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">env, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    file_name = env[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="comment"># file_name = &quot;/index.py&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if file_name == &quot;/index.py&quot;:</span></span><br><span class="line">    <span class="comment">#     return index()</span></span><br><span class="line">    <span class="comment"># elif file_name == &quot;/center.py&quot;:</span></span><br><span class="line">    <span class="comment">#     return center()</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return &#x27;Hello World! 我爱你中国....&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func = URL_FUNC_DICT[file_name]</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">        <span class="comment"># return URL_FUNC_DICT[file_name]()</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产生了异常：%s&quot;</span> % <span class="built_in">str</span>(ret)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web_server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># import dynamic.mini_frame</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, port, app, static_path</span>):</span><br><span class="line">        <span class="comment"># 1. 创建套接字</span></span><br><span class="line">        self.tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 绑定</span></span><br><span class="line">        self.tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, port))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">        self.tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">        self.application = app</span><br><span class="line">        self.static_path = static_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">service_client</span>(<span class="params">self, new_socket</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为这个客户端返回数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">        <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">        <span class="comment"># .....</span></span><br><span class="line">        request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(&quot;&gt;&gt;&gt;&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line">        <span class="keyword">if</span> request:</span><br><span class="line">            request_lines = request.splitlines()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span>*<span class="number">20</span>)</span><br><span class="line">            <span class="built_in">print</span>(request_lines)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">            <span class="comment"># get post put del</span></span><br><span class="line">            file_name = <span class="string">&quot;&quot;</span></span><br><span class="line">            ret = re.<span class="keyword">match</span>(<span class="string">r&quot;[^/]+(/[^ ]*)&quot;</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># print(&quot;*&quot;*50, file_name)</span></span><br><span class="line">                <span class="keyword">if</span> file_name == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    file_name = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">            <span class="comment"># 2.1 如果请求的资源不是以.html结尾，那么就认为是静态资源（css/js/png，jpg等）</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f = <span class="built_in">open</span>(self.static_path + file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    response = <span class="string">&quot;HTTP/1.1 404 NOT FOUND\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;------file not found-----&quot;</span></span><br><span class="line">                    new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    html_content = f.read()</span><br><span class="line">                    f.close()</span><br><span class="line">                    <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">                    response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                    response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">                    <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">                    <span class="comment"># response += &quot;hahahhah&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">                    new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                    <span class="comment"># 将response ic.mini_frame.applicationbody发送给浏览器</span></span><br><span class="line">                    new_socket.send(html_content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 2.2 如果是以.py结尾，那么就认为是动态资源的请求</span></span><br><span class="line"></span><br><span class="line">                env = <span class="built_in">dict</span>()  <span class="comment"># 这个字典中存放的是web服务器要传递给 web框架的数据信息</span></span><br><span class="line">                env[<span class="string">&#x27;PATH_INFO&#x27;</span>] = file_name</span><br><span class="line">                <span class="comment"># &#123;&quot;PATH_INFO&quot;: &quot;/index.py&quot;&#125;</span></span><br><span class="line">                <span class="comment"># body = dynamic.mini_frame.application(env, self.set_response_header)</span></span><br><span class="line">                body = self.application(env, self.set_response_header)</span><br><span class="line"></span><br><span class="line">                header = <span class="string">&quot;HTTP/1.1 %s\r\n&quot;</span> % self.status</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> temp <span class="keyword">in</span> self.headers:</span><br><span class="line">                    header += <span class="string">&quot;%s:%s\r\n&quot;</span> % (temp[<span class="number">0</span>], temp[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                header += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">                response = header+body</span><br><span class="line">                <span class="comment"># 发送response给浏览器</span></span><br><span class="line">                new_socket.send(response.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭套接</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_response_header</span>(<span class="params">self, status, headers</span>):</span><br><span class="line">        self.status = status</span><br><span class="line">        self.headers = [(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;mini_web v8.8&quot;</span>)]</span><br><span class="line">        self.headers += headers</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">            new_socket, client_addr = self.tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">            p = multiprocessing.Process(target=self.service_client, args=(new_socket,))</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭监听套接字</span></span><br><span class="line">        self.tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;控制整体，创建一个web 服务器对象，然后调用这个对象的run_forever方法运行&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])  <span class="comment"># 7890</span></span><br><span class="line">            frame_app_name = sys.argv[<span class="number">2</span>]  <span class="comment"># mini_frame:application</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;端口输入错误。。。。。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照以下方式运行:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 xxxx.py 7890 mini_frame:application&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mini_frame:application</span></span><br><span class="line">    ret = re.<span class="keyword">match</span>(<span class="string">r&quot;([^:]+):(.*)&quot;</span>, frame_app_name)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        frame_name = ret.group(<span class="number">1</span>)  <span class="comment"># mini_frame</span></span><br><span class="line">        app_name = ret.group(<span class="number">2</span>)  <span class="comment"># application</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照以下方式运行:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python3 xxxx.py 7890 mini_frame:application&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./web_server.conf&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        conf_info = <span class="built_in">eval</span>(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此时 conf_info是一个字典里面的数据为：</span></span><br><span class="line">    <span class="comment"># &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;static_path&quot;:&quot;./static&quot;,</span></span><br><span class="line">    <span class="comment">#     &quot;dynamic_path&quot;:&quot;./dynamic&quot;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sys.path.append(conf_info[<span class="string">&#x27;dynamic_path&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># import frame_name ---&gt;找frame_name.py</span></span><br><span class="line">    frame = <span class="built_in">__import__</span>(frame_name)  <span class="comment"># 返回值标记这 导入的这个模板</span></span><br><span class="line">    app = <span class="built_in">getattr</span>(frame, app_name)  <span class="comment"># 此时app就指向了 dynamic/mini_frame模块中的application这个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(app)</span></span><br><span class="line"></span><br><span class="line">    wsgi_server = WSGIServer(port, app, conf_info[<span class="string">&#x27;static_path&#x27;</span>])</span><br><span class="line">    wsgi_server.run_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>本次修改总结：<br>将字典里存放的 key 作了修改。另外模板里的 html 文件也作了相应修改（没有展示），将链接指向了 <code>/index.html</code> 和 <code>/center.html</code> 。</p><h2 id="version-8"><a href="#version-8" class="headerlink" title="version 8"></a>version 8</h2><p>从数据库查询数据，替换模板中的变量。</p><p>准备数据的过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database stock_db charset<span class="operator">=</span>utf8;</span><br><span class="line">use stock_db</span><br><span class="line">source <span class="operator">/</span>home<span class="operator">/</span>zhiyue<span class="operator">/</span>Downloads<span class="operator">/</span>stock_db.sql</span><br></pre></td></tr></table></figure><p>（这个 sql 文件不重要，我们这里只是演示）</p><p>表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> focus;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> note_info                <span class="operator">|</span> info_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 你确定要买这个？         <span class="operator">|</span>      <span class="number">36</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 利好                     <span class="operator">|</span>      <span class="number">37</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span>                          <span class="operator">|</span>      <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span>                          <span class="operator">|</span>      <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span>                          <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------------------+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> info limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> code   <span class="operator">|</span> short        <span class="operator">|</span> chg    <span class="operator">|</span> turnover <span class="operator">|</span> price <span class="operator">|</span> highs <span class="operator">|</span> <span class="type">time</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">000007</span> <span class="operator">|</span> 全新好       <span class="operator">|</span> <span class="number">10.01</span><span class="operator">%</span> <span class="operator">|</span> <span class="number">4.40</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">16.05</span> <span class="operator">|</span> <span class="number">14.60</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">000036</span> <span class="operator">|</span> 华联控股     <span class="operator">|</span> <span class="number">10.04</span><span class="operator">%</span> <span class="operator">|</span> <span class="number">10.80</span><span class="operator">%</span>   <span class="operator">|</span> <span class="number">11.29</span> <span class="operator">|</span> <span class="number">10.26</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">000039</span> <span class="operator">|</span> 中集集团     <span class="operator">|</span> <span class="number">1.35</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">1.78</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">18.07</span> <span class="operator">|</span> <span class="number">18.06</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-06</span><span class="number">-28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="number">000050</span> <span class="operator">|</span> 深天马A      <span class="operator">|</span> <span class="number">4.38</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">4.65</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">22.86</span> <span class="operator">|</span> <span class="number">22.02</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-07</span><span class="number">-19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="number">000056</span> <span class="operator">|</span> 皇庭国际     <span class="operator">|</span> <span class="number">0.39</span><span class="operator">%</span>  <span class="operator">|</span> <span class="number">0.65</span><span class="operator">%</span>    <span class="operator">|</span> <span class="number">12.96</span> <span class="operator">|</span> <span class="number">12.91</span> <span class="operator">|</span> <span class="number">2017</span><span class="number">-07</span><span class="number">-20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+--------+----------+-------+-------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现在，我们希望实现如下的效果：</p><p><img src="https://s2.loli.net/2024/10/28/opfrBlOsIAw29Ge.png" alt="90-9.png"></p><p>代码参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version8">https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version8</a></p><h2 id="version-9"><a href="#version-9" class="headerlink" title="version 9"></a>version 9</h2><p>让路由支持正则，实现增删改功能。</p><p><a href="https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version9">https://github.com/dropsong/py_webServer/tree/master/web_mini_frame/version9</a></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] -%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始使用 log 功能</span></span><br><span class="line">logging.debug(<span class="string">&#x27;这是 loggging debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是 loggging info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是 loggging a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是 an loggging error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是 loggging critical message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:9] - WARNING: 这是 loggging a warning message</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:10] - ERROR: 这是 an loggging err or message</span></span><br><span class="line"><span class="string">2017-11-06 23:07:35,725 - log1.py[line:11] - CRITICAL: 这是 loggging critical message</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>写到文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.WARNING,</span><br><span class="line">                    filename=<span class="string">&#x27;log.txt&#x27;</span>,</span><br><span class="line">                    filemode=<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] -%(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始使用 log 功能</span></span><br><span class="line">logging.debug(<span class="string">&#x27;这是 loggging debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是 loggging info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是 loggging a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是 an loggging error message&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是 loggging critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><p>既把日志输出到控制台，又写入文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 第一步，创建一个 logger</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO) <span class="comment"># Log 等级总开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步，创建一个 handler，用于写入日志文件</span></span><br><span class="line">logfile = <span class="string">&#x27;./log.txt&#x27;</span></span><br><span class="line">fh = logging.FileHandler(logfile, mode=<span class="string">&#x27;a&#x27;</span>) <span class="comment"># open 的打开模式这里可以进行参考</span></span><br><span class="line">fh.setLevel(logging.DEBUG) <span class="comment"># 输出到 file 的 log 等级的开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步，再创建一个 handler，用于输出到控制台</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.WARNING) <span class="comment"># 输出到 console 的 log 等级的开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步，定义 handler 的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&quot;</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步，将 logger 添加到 handler 里面</span></span><br><span class="line">logger.addHandler(fh)</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">logger.debug(<span class="string">&#x27;这是 logger debug message&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;这是 logger info message&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;这是 logger warning message&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;这是 logger error message&#x27;</span>)</span><br><span class="line">logger.critical(<span class="string">&#x27;这是 logger critical message&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h1><p>C, C++ 中无此设计。</p><p>我们想做一个类，这个类是用代码生成的。</p><h2 id="类也是对象"><a href="#类也是对象" class="headerlink" title="类也是对象"></a>类也是对象</h2><p>类的本质仍然是一个对象，于是可以做如下操作：</p><ol><li>将它赋值给一个变量</li><li>拷贝它</li><li>为它增加属性</li><li>将它作为函数参数进行传递</li></ol><p>下面展示自由的 Python 语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectCreator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_object = ObjectCreator()</span><br><span class="line"><span class="built_in">print</span>(my_object)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ObjectCreator) <span class="comment"># 你可以打印一个类，因为它其实也是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line">echo(ObjectCreator)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ObjectCreator.new_attribute = <span class="string">&#x27;foo&#x27;</span> <span class="comment"># 你可以为类增加属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把类名给一个变量</span></span><br><span class="line">val = ObjectCreator</span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_object))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ObjectCreator))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;__main__.ObjectCreator object at 0x7f15b9e8b050&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.ObjectCreator&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>创建类出来的那个类，叫<strong>元类</strong>。</p><h2 id="使用-type-创建类"><a href="#使用-type-创建类" class="headerlink" title="使用 type 创建类"></a>使用 type 创建类</h2><p>type 还有一种完全不同的功能，动态地创建类。</p><p>type 可以接受一个类的描述作为参数，然后返回一个类。（要知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在 Python 中是为了保持向后兼容性）</p><p>用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(类名, 由父类名称组成的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Test2 = <span class="built_in">type</span>(<span class="string">&#x27;Test2&#x27;</span>, (), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(Test2)</span><br><span class="line"></span><br><span class="line">Foo = <span class="built_in">type</span>(<span class="string">&#x27;Foo&#x27;</span>, (), &#123;<span class="string">&#x27;bar&#x27;</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(Foo.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承</span></span><br><span class="line">FooChild = <span class="built_in">type</span>(<span class="string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(FooChild.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建带有方法的类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echo_bar</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">#让 FooChild 类中的 echo_bar 属性，指向了上面定义的函数</span></span><br><span class="line">FooChild = <span class="built_in">type</span>(<span class="string">&#x27;FooChild&#x27;</span>, (Foo,), &#123;<span class="string">&#x27;echo_bar&#x27;</span>: echo_bar&#125;) </span><br><span class="line"></span><br><span class="line">my_foo = FooChild()</span><br><span class="line">my_foo.echo_bar()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Test2&#x27;&gt;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个更完整的例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_b</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.num)</span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_static</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----haha-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_class</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(cls.num)</span><br><span class="line"></span><br><span class="line">B = <span class="built_in">type</span>(<span class="string">&quot;B&quot;</span>, (A,), &#123;<span class="string">&quot;print_b&quot;</span>: print_b, <span class="string">&quot;print_static&quot;</span>: print_static,<span class="string">&quot;print_class&quot;</span>: print_class&#125;)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.print_b()</span><br><span class="line">b.print_static()</span><br><span class="line">b.print_class()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">----haha-----</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="metaclass-属性"><a href="#metaclass-属性" class="headerlink" title="metaclass 属性"></a>metaclass 属性</h2><p>当我们写下如下的代码时：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Python 做了如下的操作：</p><ol><li>Foo 中有 <code>__metaclass__</code> 这个属性吗？如果是，Python 会通过 <code>__metaclass__</code> 创建一个名字为 Foo 的类(对象)</li><li>如果 Python 没有找到 <code>__metaclass__</code>，它会继续在 Bar（父类）中寻找 <code>__metaclass__</code> 属性，并尝试做和前面同样的操作。</li><li>如果 Python 在任何父类中都找不到 <code>__metaclass__</code> ，它就会在模块层次中去寻找 <code>__metaclass__</code> ，并尝试做同样的操作。</li><li>如果还是找不到 <code>__metaclass__</code> ,Python 就会用内置的 type 来创建这个类对象。</li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 效果：将 Foo 的属性 bar 改成了 BAR</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upper_attr</span>(<span class="params">class_name, class_parents, class_attr</span>):</span><br><span class="line">    <span class="comment">#遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">    new_attr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name,value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">            new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用 type 来创建一个类，这里的返回值给了 Foo</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=upper_attr):</span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>))</span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bip</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的代码中 metaclass 是用了一个函数，接下来使用一个类：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpperAttrMetaClass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></span><br><span class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></span><br><span class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></span><br><span class="line">    <span class="comment"># 你很少用到__new__，除非你希望能够控制对象的创建</span></span><br><span class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class="line">    <span class="comment"># 如果你希望的话，你也可以在__init__中做些事情</span></span><br><span class="line">    <span class="comment"># 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name, class_parents, class_attr</span>):</span><br><span class="line">        <span class="comment"># 遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">        new_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法 1：通过&#x27;type&#x27;来做类对象的创建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法 2：复用 type.__new__方法</span></span><br><span class="line">        <span class="comment"># 这就是基本的 OOP 编程，没什么魔法</span></span><br><span class="line">        <span class="comment"># return type.__new__(cls, class_name, class_parents, new_attr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 的用法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=UpperAttrMetaClass):</span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>))</span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">bip</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。” （Python 界的领袖 Tim Peters）</p></blockquote><h1 id="元类实现-ORM"><a href="#元类实现-ORM" class="headerlink" title="元类实现 ORM"></a>元类实现 ORM</h1><p>ORM 是 Django 的核心思想，“Object Relational Mapping”，即对象-关系映射，简称 ORM。（JAVA 也是 ORM）</p><p>一句话理解：创建一个实例对象，用创建它的类名当做数据表名，用创建它的类属性对应数据表的字段，当对这个实例对象操作时，能够对应 MySQL 语句。</p><h2 id="需求场景-1"><a href="#需求场景-1" class="headerlink" title="需求场景"></a>需求场景</h2><p>我们在之前的 Django 开发中已经看到，我们写的类属性“好像”变成了对象属性（这使我们写代码更方便了），但这是怎么回事呢？</p><p><img src="https://bu.dusays.com/2024/10/30/67223d4973072.png" alt="90-10.png"></p><p>所谓的 ORM 就是让开发者在操作数据库的时候，能够像操作对象时通过 <code>xxxx.属性=yyyy</code> 一样简单，这是开发 ORM 的初衷。</p><p>本节完成一个和 insert 类似的 ORM ，简单地展示一下原理。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个类的工作：将 User 类的类属性删除，然后增加一些东西返回</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 判断是否需要保存</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="comment"># 判断是否是指定的 StringField 或者 IntegerField 的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">tuple</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v)) <span class="comment"># 日志</span></span><br><span class="line">                mappings[k] = v</span><br><span class="line">                <span class="comment"># example:</span></span><br><span class="line">                <span class="comment"># k: uid</span></span><br><span class="line">                <span class="comment"># v: (&#x27;uid&#x27;, &quot;int unsigned&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除这些已经在字典中存储的属性</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=ModelMetaclass):</span><br><span class="line">    uid = (<span class="string">&#x27;uid&#x27;</span>, <span class="string">&quot;int unsigned&quot;</span>)</span><br><span class="line">    name = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    email = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    password = (<span class="string">&#x27;password&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    <span class="comment"># 我们要将上面的四个变成对象属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="comment"># 通过 setattr 可以给对象新增属性</span></span><br><span class="line">            <span class="built_in">setattr</span>(self, name, value) </span><br><span class="line">            <span class="comment"># 这种操作只有写框架会需要，平时不需要</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v[<span class="number">0</span>])</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> args]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非常魔幻的写法。在 C++ 的构造函数中，你不会需要将 uid=, name= 这些写出来，</span></span><br><span class="line"><span class="comment"># 这里 Python 写出来，是直接传给了 __init__</span></span><br><span class="line">u = User(uid=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u.__dict__) <span class="comment"># 打印对象属性</span></span><br><span class="line">u.save()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Found mapping: uid ==&gt; (&#x27;uid&#x27;, &#x27;int unsigned&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: name ==&gt; (&#x27;username&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: email ==&gt; (&#x27;email&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: password ==&gt; (&#x27;password&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">&#123;&#x27;uid&#x27;: 12345, &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;email&#x27;: &#x27;test@orm.org&#x27;, &#x27;password&#x27;: &#x27;my-pwd&#x27;&#125;</span></span><br><span class="line"><span class="string">SQL: insert into User (uid,username,email,password) values (12345,Michael,test@orm.org,my-pwd)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一点微小的改进（增加了类型校验）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 判断是否需要保存</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="comment"># 判断是否是指定的 StringField 或者 IntegerField 的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">tuple</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除这些已经在字典中存储的属性</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将之前的 uid/name/email/password 以及对应的对象引用、类名字</span></span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=ModelMetaclass):</span><br><span class="line">    uid = (<span class="string">&#x27;uid&#x27;</span>, <span class="string">&quot;int unsigned&quot;</span>)</span><br><span class="line">    name = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    email = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    password = (<span class="string">&#x27;password&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    <span class="comment"># 当指定元类之后，以上的类属性将不在类中，而是在__mappings__属性指定的字典中存储</span></span><br><span class="line">    <span class="comment"># 以上 User 类中有</span></span><br><span class="line">    <span class="comment"># __mappings__ = &#123;</span></span><br><span class="line">    <span class="comment"># &quot;uid&quot;: (&#x27;uid&#x27;, &quot;int unsigned&quot;)</span></span><br><span class="line">    <span class="comment"># &quot;name&quot;: (&#x27;username&#x27;, &quot;varchar(30)&quot;)</span></span><br><span class="line">    <span class="comment"># &quot;email&quot;: (&#x27;email&#x27;, &quot;varchar(30)&quot;)</span></span><br><span class="line">    <span class="comment"># &quot;password&quot;: (&#x27;password&#x27;, &quot;varchar(30)&quot;)</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># __table__ = &quot;User&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, name, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v[<span class="number">0</span>])</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        args_temp = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> args:</span><br><span class="line">            <span class="comment"># 模拟做类型校验</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">int</span>):</span><br><span class="line">                args_temp.append(<span class="built_in">str</span>(temp))</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">str</span>):</span><br><span class="line">                args_temp.append(<span class="string">&quot;&quot;&quot;&#x27;%s&#x27;&quot;&quot;&quot;</span> % temp)</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(args_temp))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line"></span><br><span class="line">u = User(uid=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u.__dict__)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure><p><strong>模拟 ORM 中的继承：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="comment"># 判断是否需要保存</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="comment"># 判断是否是指定的 StringField 或者 IntegerField 的实例对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">tuple</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除这些已经在字典中存储的属性</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将之前的 uid/name/email/password 以及对应的对象引用、类名字</span></span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line">        <span class="comment"># return super().__new__(cls, name, bases, attrs)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(<span class="built_in">object</span>, metaclass=ModelMetaclass):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, name, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v[<span class="number">0</span>])</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">        args_temp = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> args:</span><br><span class="line">            <span class="comment"># 模拟做类型校验</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">int</span>):</span><br><span class="line">                args_temp.append(<span class="built_in">str</span>(temp))</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(temp, <span class="built_in">str</span>):</span><br><span class="line">                args_temp.append(<span class="string">&quot;&quot;&quot;&#x27;%s&#x27;&quot;&quot;&quot;</span> % temp)</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(args_temp))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    uid = (<span class="string">&#x27;uid&#x27;</span>, <span class="string">&quot;int unsigned&quot;</span>)</span><br><span class="line">    name = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    email = (<span class="string">&#x27;email&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line">    password = (<span class="string">&#x27;password&#x27;</span>, <span class="string">&quot;varchar(30)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u = User(uid=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(u.__dict__)</span><br><span class="line">u.save()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Found mapping: uid ==&gt; (&#x27;uid&#x27;, &#x27;int unsigned&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: name ==&gt; (&#x27;username&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: email ==&gt; (&#x27;email&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">Found mapping: password ==&gt; (&#x27;password&#x27;, &#x27;varchar(30)&#x27;)</span></span><br><span class="line"><span class="string">&#123;&#x27;uid&#x27;: 12345, &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;email&#x27;: &#x27;test@orm.org&#x27;, &#x27;password&#x27;: &#x27;my-pwd&#x27;&#125;</span></span><br><span class="line"><span class="string">SQL: insert into User (uid,username,email,password) values (12345,&#x27;Michael&#x27;,&#x27;test@orm.org&#x27;,&#x27;my-pwd&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="接口类与抽象类"><a href="#接口类与抽象类" class="headerlink" title="接口类与抽象类"></a>接口类与抽象类</h1><p>没什么好说的，和 C++ 笔记里的东西差不多，这里只放几个例子。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        e=Exception(<span class="string">&#x27;缺少编写 pay 方法&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> e  <span class="comment">#手动抛异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">payment</span>):</span><br><span class="line">    <span class="comment"># 这里类的方法不是一致的 pay,导致后面调用的时候找不到 pay</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paying</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付函数，总体负责支付，对应支付的对象和要支付的金额</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">payment, money</span>):</span><br><span class="line">    payment.pay(money)</span><br><span class="line"></span><br><span class="line">p = Alipay() <span class="comment"># 不报错</span></span><br><span class="line">pay(p, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/1030work/test.py&quot;, line 16, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    pay(p, 200)</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/1030work/test.py&quot;, line 13, in pay</span></span><br><span class="line"><span class="string">    payment.pay(money)</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/1030work/test.py&quot;, line 4, in pay</span></span><br><span class="line"><span class="string">    raise e  #手动抛异常</span></span><br><span class="line"><span class="string">    ^^^^^^^</span></span><br><span class="line"><span class="string">Exception: 缺少编写 pay 方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alipay 没有 pay 方法，走到父类的 pay 方法后报错</span></span><br></pre></td></tr></table></figure><p>然而这样的代码还是可以改进，我们希望在编写代码的时候就能发现问题，而不是调用的时候才报错，为此引出抽象类。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> abstractmethod, ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass= ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paying</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = Alipay()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">TypeError: Can&#x27;t instantiate abstract class Alipay with abstract method pay</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>原因和 C++ 中的一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内网穿透&quot;&gt;&lt;a href=&quot;#内网穿透&quot; class=&quot;headerlink&quot; title=&quot;内网穿透&quot;&gt;&lt;/a&gt;内网穿透&lt;/h1&gt;&lt;p&gt;内网穿透原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/10/21/zoUnO</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://dropsong.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://dropsong.github.io/tags/python/"/>
    
    <category term="内网穿透" scheme="https://dropsong.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://dropsong.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Django Note</title>
    <link href="https://dropsong.github.io/posts/7d130280.html"/>
    <id>https://dropsong.github.io/posts/7d130280.html</id>
    <published>2024-10-10T16:24:01.000Z</published>
    <updated>2025-01-11T09:22:29.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端开发简介"><a href="#后端开发简介" class="headerlink" title="后端开发简介"></a>后端开发简介</h1><p>后端开发框架：</p><ul><li>Java: Spring</li><li>Python: Django, Flask, tornado</li></ul><p>MVC 框架（核心思想：解耦。）:</p><p><img src="https://s2.loli.net/2024/10/10/GfHtKgrUdCQk8Sc.png" alt="89-1.png"></p><p>Web MVC 框架模块功能：</p><p><img src="https://s2.loli.net/2024/10/10/BrizRKn6gotuUyw.png" alt="89-2.png"></p><p>M: Model，模型，和数据库进行交互。<br>V: View，视图，产生 html 页面。<br>C: Controller，控制器，接收请求，进行处理，与 M 和 V 进行交互，返回应答。</p><p>Django 一般前后端不分离，虽然也可以分离。</p><p>Django 遵循 MVC 思想，但是有自己的一个名词，叫做 <strong>MVT</strong>。Django 遵循<strong>快速开发</strong>和 <strong>DRY(Do not repeat yourself)</strong> 原则，不要自己去重复一些工作。</p><p>MVT 各部分功能：</p><p><img src="https://s2.loli.net/2024/10/10/WsMHqjhKFTuibCl.png" alt="89-3.png"></p><p>M: Model，模型，和 MVC 中 M 功能相同，和数据库进行交互。<br>V: View，视图，和 MVC 中 C 功能相同，接收请求，进行处理，与 M 和 T 进行交互，返回应答。<br>T: Template，模板，和 MVC 中 V 功能相同，产生 html 页面。</p><h1 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h1><p>虚拟环境是真实 python 环境的复制版本。</p><p>在虚拟环境中使用的 python 是复制的 python，安装 python 包也是安装在复制的 python 中。</p><p>安装虚拟环境工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-venv</span><br></pre></td></tr></table></figure><p>创建虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv myenv</span><br></pre></td></tr></table></figure><p>激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> myenv/bin/activate</span><br></pre></td></tr></table></figure><p>想退出虚拟环境，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>退出了虚拟环境，如何再次进入？首先，导航到虚拟环境所在的目录。</p><p>在该目录下，运行以下命令来激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure><p>现在，尝试在虚拟环境里面下载东西。注意，<strong>即使配置了翻墙工具，虚拟环境中的 pip 请求可能无法正确通过代理</strong>。解决方案（port 需要视情况改动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>安装完成后，我们可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>查看内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">cat</span> requirements.txt </span><br><span class="line">jieba==0.42.1</span><br></pre></td></tr></table></figure><p>这个 txt 文件的作用是，我们<strong>可以使用它方便地创建需要的环境</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>在虚拟环境中安装 Django :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==4.2 --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><h2 id="创建-Django-项目"><a href="#创建-Django-项目" class="headerlink" title="创建 Django 项目"></a>创建 Django 项目</h2><p>注意：创建应用必须先进入虚拟环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(myenv) zhiyue@168:~/myenv$ django-admin startproject day1010</span><br><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">ls</span></span><br><span class="line">bin  day1010  include  lib  lib64  pyvenv.cfg</span><br><span class="line">(myenv) zhiyue@168:~/myenv$ <span class="built_in">cd</span> day1010/</span><br><span class="line">(myenv) zhiyue@168:~/myenv/day1010$ tree</span><br><span class="line">.</span><br><span class="line">├── day1010</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br><span class="line"></span><br><span class="line">2 directories, 6 files</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>__init__.py</code>: 说明 day1010 是一个 python 包。</li><li><code>settings.py</code>: 项目的配置文件。</li><li><code>urls.py</code>: 进行 url 路由的配置。</li><li><code>wsgi.py</code>: （对接某种类似协议的东西）web 服务器和 Django 交互的入口。</li><li><code>manage.py</code>: 项目的管理文件。</li></ul><h2 id="创建-Django-应用"><a href="#创建-Django-应用" class="headerlink" title="创建 Django 应用"></a>创建 Django 应用</h2><p><img src="https://s2.loli.net/2024/10/10/OP9r4ZyjRi8nbdT.png" alt="89-4.png"></p><p>一个项目由很多个应用组成的，每一个应用完成一个功能模块。</p><p>注意，创建应用时需要先进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp booktest</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2024/10/10/ljF6Sv4J9boyq1x.png" alt="89-5.png"></p><p>对于 booktest 文件夹下的文件：</p><ul><li><code>__init__.py</code>: 说明目录是一个 Python 模块。</li><li><code>models.py</code>: 写和数据库项目的内容，设计模型类。</li><li><code>views.py</code>: 接收请求，进行处理，与 M 和 T 进行交互，返回应答。定义处理函数，<strong>视图函数</strong>。</li><li><code>tests.py</code>: <strong>写测试代码的文件</strong>。</li><li><code>admin.py</code>: 网站后台管理相关的文件。</li><li><code>migrations</code>: （作用后面讲解）</li></ul><h2 id="应用注册"><a href="#应用注册" class="headerlink" title="应用注册"></a>应用注册</h2><p>建立应用和项目之间的联系，需要对应用进行注册。</p><p>在 day1010/settings.py 中 INSTALLED_APPS 下添加应用的名称就可以完成安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest&#x27;</span>,   <span class="comment"># 新增内容</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>在开发阶段，为了能够快速预览到开发的效果，django 提供了一个纯 python 编写的轻量级 web 服务器，仅在开发阶段使用。</p><p>运行服务器的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><h1 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p><img src="https://s2.loli.net/2024/10/10/2rmv4jLbWOHYfDk.png" alt="89-6.png"></p><p>ORM 框架帮我们把类和数据表进行了映射，可以让我们<strong>通过类和类对象操作它所对应的表格（数据库）中的数据</strong>。ORM 框架还可以<strong>根据我们设计的类自动生成数据库中的表格</strong>，省去了我们自己建表的过程。</p><p>使用 django 进行数据库开发的步骤如下：</p><ol><li>在 <code>models.py</code> 中定义模型类</li><li>迁移去数据库中看表是否生成</li><li>通过类和对象完成数据增删改查操作</li></ol><h2 id="模型类设计"><a href="#模型类设计" class="headerlink" title="模型类设计"></a>模型类设计</h2><p>在 models.py 中定义模型类如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br></pre></td></tr></table></figure><h2 id="模型类生成表"><a href="#模型类生成表" class="headerlink" title="模型类生成表"></a>模型类生成表</h2><p>生成迁移文件，根据模型类生成创建表的迁移文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure><p>Django 框架根据我们设计的模型类生成了迁移文件，在迁移文件中可以看到 fields 列表中每一个元素跟 BookInfo 类属性名以及属性的类型是一致的。同时我们发现多了一个 id 项，这一项是 Django 框架帮我们自动生成的，在创建表的时候 id 就会作为对应表的主键列，并且主键列自动增长。</p><p>执行迁移，根据第一步生成的迁移文件在数据库中创建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>执行迁移命令后，Django 框架会读取迁移文件自动帮我们在数据库中生成对应的表格。</p><p>Django 默认采用 sqlite3 数据库，db.sqlite3 就是 Django 框架帮我们自动生成的数据库文件。 sqlite3 是一个很小的数据库，通常用在手机中，它跟 mysql 一样，我们也可以通过 sql 语句来操作它。</p><p>在 vscode 安装 SQLite Viewer 插件，可以查看此文件。</p><p><img src="https://s2.loli.net/2024/10/10/EQVHzKtcAwdiy4Z.png" alt="89-7.png"></p><p>上面生成的表的名字叫做 booktest_bookinfo，booktest 是应用的名字，bookinfo 是模型类的名字。</p><h2 id="通过模型类操作数据表"><a href="#通过模型类操作数据表" class="headerlink" title="通过模型类操作数据表"></a>通过模型类操作数据表</h2><p>进入项目 shell 的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py shell</span><br></pre></td></tr></table></figure><p>在 shell 终端中演示的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import BookInfo</span><br><span class="line">&gt;&gt;&gt; b = BookInfo()</span><br><span class="line">&gt;&gt;&gt; b.btitle = <span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">&gt;&gt;&gt; from datetime import <span class="built_in">date</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data = <span class="built_in">date</span>(2022,11,11)</span><br><span class="line">&gt;&gt;&gt; b.save()</span><br></pre></td></tr></table></figure><p>注意我之前把 date 拼成了 data ，神智不清了一会。现在将错就错。</p><p><img src="https://s2.loli.net/2024/10/10/VAqcK67UHxRe2j9.png" alt="89-8.png"></p><p><code>b.save()</code> 之后才会将数据保存进数据库。</p><p>查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import BookInfo</span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(<span class="built_in">id</span>=1)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;BookInfo: BookInfo object (1)&gt;</span><br><span class="line">&gt;&gt;&gt; b.btitle</span><br><span class="line"><span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data</span><br><span class="line">datetime.date(2022, 11, 11)</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from datetime import <span class="built_in">date</span></span><br><span class="line">&gt;&gt;&gt; b.bpub_data = <span class="built_in">date</span>(1999,9,9)</span><br><span class="line">&gt;&gt;&gt; b.save()</span><br></pre></td></tr></table></figure><p>刷新，可以看到数据已经被修改。</p><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b.delete()</span><br><span class="line">(1, &#123;<span class="string">&#x27;booktest.BookInfo&#x27;</span>: 1&#125;)</span><br></pre></td></tr></table></figure><p>刷新，可以看到数据已经被删除。</p><p>现在，在 <code>models.py</code> 中设计一个新的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>可以看到生成了一张新表。</p><p>重新在 BookInfo 中插入一条数据，可以看到 id =2 ，过程略。</p><p>在 heroinfo 中插入数据，并尝试关联两张表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import HeroInfo</span><br><span class="line">&gt;&gt;&gt; h = HeroInfo()</span><br><span class="line">&gt;&gt;&gt; h.hname = <span class="string">&#x27;雷电将军&#x27;</span></span><br><span class="line">&gt;&gt;&gt; h.hcomment = <span class="string">&#x27;梦想一心&#x27;</span></span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(<span class="built_in">id</span> = 2)</span><br><span class="line">&gt;&gt;&gt; h.hbook = b</span><br><span class="line">&gt;&gt;&gt; h.save()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/11/5x3KcaMz6fX4GBC.png" alt="89-9.png"></p><p>查询操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: HeroInfo object (1)&gt;, &lt;HeroInfo: HeroInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()[0]</span><br><span class="line">&lt;HeroInfo: HeroInfo object (1)&gt;</span><br><span class="line">&gt;&gt;&gt; HeroInfo.objects.all()[0].hname</span><br><span class="line"><span class="string">&#x27;雷电将军&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="关联操作"><a href="#关联操作" class="headerlink" title="关联操作"></a>关联操作</h2><p>省流：由一查多，由多查一。</p><p>目前的数据库：</p><p><img src="https://s2.loli.net/2024/10/11/NJsOQkcw5C2uEyK.jpg" alt="89-10.jpeg"></p><p>查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; h.hbook.btitle</span><br><span class="line"><span class="string">&#x27;三哼经&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.get(btitle = <span class="string">&#x27;转生成为雷电将军然后天下无敌&#x27;</span></span><br><span class="line">... )</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;BookInfo: BookInfo object (2)&gt;</span><br><span class="line">&gt;&gt;&gt; b.bpub_data</span><br><span class="line">datetime.date(2022, 11, 11)</span><br><span class="line">&gt;&gt;&gt; b.heroinfo_set.all()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: HeroInfo object (1)&gt;, &lt;HeroInfo: HeroInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; b.heroinfo_set.all()[0].hname</span><br><span class="line"><span class="string">&#x27;雷电将军&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h1><p>假设我们要设计一个新闻网站，我们需要编写展示给用户的页面，网页上展示的新闻信息是从哪里来的呢？<strong>是从数据库中查找到新闻的信息，然后把它展示在页面上</strong>。但是我们的网站上的新闻每天都要更新，这就意味着对数据库的增、删、改、查操作，那么我们需要每天写 sql 语句操作数据库吗? 这样会非常繁琐，所以我们可以设计一个页面，通过对这个页面的操作来实现对新闻数据库的增删改查。那么问题来了，老板说我们需要在建立一个新网站，是不是还要设计一个页面来实现对新网站数据库的增删改查操作？但是这样的页面有很大的重复性，那有没有一种方法能够很快生成管理数据库表的页面呢？有，那就是 <strong>Django 的后台管理</strong>。Django 能够根据定义的模型类自动地生成管理页面。使用 Django 的管理模块，需要按照如下步骤操作：</p><ol><li>管理界面本地化</li><li>创建管理员</li><li>注册模型类</li><li>自定义管理页面</li></ol><p><strong>本地化</strong>，打开 day1010/settings.py ，找到语言编码、时区的设置项，将内容改为如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>创建管理员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>根据提示操作即可。</p><p>启动 server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中进入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin/</span><br></pre></td></tr></table></figure><p>注册模型类：<br>登录后台管理后，默认没有我们创建的应用中定义的模型类，需要在自己应用中的 admin.py 文件中注册，才可以在后台管理中看到，并进行增删改查操作。</p><p>在 booktest/admin.py 中，编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo)</span><br><span class="line">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure><p>到浏览器中刷新页面，可以看到模型类 BookInfo 和 HeroInfo 的管理了。</p><p>出现如下问题：</p><p><img src="https://s2.loli.net/2024/10/11/sEUmehQlTLP2idf.png" alt="89-11.png"></p><p>为什么没有直接显示书名呢？因为是 str(object) 的返回值。我们可以重写 str 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>在列表页只显示出了 BookInfo object，对象的其它属性并没有列出来，查看非常不方便。Django 提供了<strong>自定义管理页面的功能</strong>，比如列表页要显示哪些值。</p><p>修改 booktest/admin.py 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_data&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;hname&#x27;</span>, <span class="string">&#x27;hgender&#x27;</span>, <span class="string">&#x27;hcomment&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br><span class="line">admin.site.register(HeroInfo, HeroInfoAdmin)</span><br></pre></td></tr></table></figure><p>刷新，发现功能实现。</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>什么是视图：<br>一个 url 首先到达路由（这里的“路由”和计算机网络中的“路由”概念不同），路由会分配到对应的视图函数，不同的网址路由会分配到不同的视图函数。</p><h2 id="定义视图函数"><a href="#定义视图函数" class="headerlink" title="定义视图函数"></a>定义视图函数</h2><p>视图就是一个 Python 函数，被定义在 views.py 中。</p><p>打开 booktest/views.py 文件，定义视图 index 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="url-配置语法"><a href="#url-配置语法" class="headerlink" title="url 配置语法"></a>url 配置语法</h2><p>一个简单的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, index) <span class="comment"># 仅做教学示例</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>回到主页，浏览器显示 <code>hello python</code> 。</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>模板不仅仅是一个 html 文件。</p><h2 id="模板文件的使用"><a href="#模板文件的使用" class="headerlink" title="模板文件的使用"></a>模板文件的使用</h2><p>创建模板文件夹，名字为 templates,与 booktest 在同一个路径级别。</p><p>在 <code>settings.py</code> 中，添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&#x27;templates&#x27;</span>],  <span class="comment"># 添加</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 templates 下新建一个 index.html，并写入如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个模板文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对 <code>views.py</code> 和 <code>urls.py</code> 作如下改动：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader,RequestContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> myrender(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myrender</span>(<span class="params">request, template_path, context_dict=&#123;&#125;</span>):</span><br><span class="line">    <span class="comment"># 1.加载模板文件, 模板对象</span></span><br><span class="line">    temp = loader.get_template(template_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.定义模板上下文:给模板文件传递数据，模板渲染:产生标准的 html 内容</span></span><br><span class="line">    res_html = temp.render(context_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.返回给浏览器</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res_html)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>刷新页面，可以看到效果。</p><p>现在，对 <code>index.html</code> 作如下修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个模板文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    使用模板变量：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实我们是不需要 myrender 的，上面写 myrender 的目的是为了理解 render 帮我们做了什么。我们可以直接改为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment"># from django.template import loader,RequestContext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def myrender(request, template_path, context_dict=&#123;&#125;):</span></span><br><span class="line"><span class="comment">#     # 1.加载模板文件, 模板对象</span></span><br><span class="line"><span class="comment">#     temp = loader.get_template(template_path)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 2.定义模板上下文:给模板文件传递数据，模板渲染:产生标准的 html 内容</span></span><br><span class="line"><span class="comment">#     res_html = temp.render(context_dict)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     # 3.返回给浏览器</span></span><br><span class="line"><span class="comment">#     return HttpResponse(res_html)</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/11/U4qJVb6eMDzPnQS.png" alt="89-12.png"></p><h2 id="模板文件进阶用法"><a href="#模板文件进阶用法" class="headerlink" title="模板文件进阶用法"></a>模板文件进阶用法</h2><p>下面实现了一个 for 循环，直接看例子，简洁明了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;showbooks.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br></pre></td></tr></table></figure><p>在 templates 文件夹下新增 <code>showbooks.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/13/Ld3Ow1I6RPq8A97.png" alt="89-13.png"></p><p>现在，我们尝试实现更高级的功能：把这两个文本做成超链接，点开之后可以查看详情。</p><p>为了做成超链接，首先要修改 <code>showbooks.html</code> 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/books/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; book.btitle &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在 <code>urls.py</code> 中增加路由信息：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>,views.detail)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们将 detail 函数设计为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, bid</span>):</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    heros = book.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;detail.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>:book, <span class="string">&#x27;heros&#x27;</span>:heros&#125;)</span><br></pre></td></tr></table></figure><p>最后，<code>detail.html</code> 内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图书详情<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">英雄信息如下： <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for hero in heros %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123;hero.hname&#125;&#125; --- &#123;&#123;hero.hcomment&#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> 没有英雄信息 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2024/10/13/fRB2y3ucMYCFrwV.jpg" alt="89-14.jpeg"></p><p><code>&#123;% empty %&#125;</code> 有什么用？我们删除”应龙“的数据，然后点击”三哼经“的链接，就会显示”没有英雄信息“。</p><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><p>现在我们将 sqlite 切换为 mysql.</p><p>在 settings.py 中修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;test2&#x27;</span>,            <span class="comment"># 使用的数据库的名字,数据库必须手动创建</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,             <span class="comment"># 链接 mysql 的用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;jtsws&#x27;</span>,        <span class="comment"># 用户对应的密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,        <span class="comment"># 指定 mysql 数据库所在电脑 ip</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,               <span class="comment"># mysql 服务的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装（我不确定这两个是否有用，有可能你只需要执行接下来的一个命令）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pkg-config python3-dev default-libmysqlclient-dev build-essential</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p>相关讨论参见：<br><a href="https://stackoverflow.com/questions/76585758/mysqlclient-cannot-install-via-pip-cannot-find-pkg-config-name-in-ubuntu">https://stackoverflow.com/questions/76585758/mysqlclient-cannot-install-via-pip-cannot-find-pkg-config-name-in-ubuntu</a></p><p>生成迁移文件、执行迁移：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><p>我们可以看到，test2（原本为空）中多出了很多 table :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_test2            |</span><br><span class="line">+----------------------------+</span><br><span class="line">| auth_group                 |</span><br><span class="line">| auth_group_permissions     |</span><br><span class="line">| auth_permission            |</span><br><span class="line">| auth_user                  |</span><br><span class="line">| auth_user_groups           |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| booktest_bookinfo          |</span><br><span class="line">| booktest_heroinfo          |</span><br><span class="line">| django_admin_log           |</span><br><span class="line">| django_content_type        |</span><br><span class="line">| django_migrations          |</span><br><span class="line">| django_session             |</span><br><span class="line">+----------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from booktest_bookinfo</span><br><span class="line">    -&gt; ;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>为了演示方便，我们接下来仍然使用 sqlite.</p><h1 id="更多细节的演示"><a href="#更多细节的演示" class="headerlink" title="更多细节的演示"></a>更多细节的演示</h1><p>btw, 不使用 SQLite Viewer 了，使用更强大的 vscode 插件 SQLite3 Editor(by yy0931).</p><p>实现效果：</p><p><img src="https://s2.loli.net/2024/10/14/skaq6OMjwcblXZH.png" alt="89-15.png"></p><p>点击“新增”会新增一本指定的书《C 语言开发宝典》（同时数据库中也删除）；点击书名背后的删除会删除该书（同时数据库中也删除）。</p><p><code>models.py</code> 更新为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line">    <span class="comment"># 阅读量，default 是在 django 的逻辑层（模型类层），而不是数据库中</span></span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格,最大位数为 10,小数为 2</span></span><br><span class="line">    bprice = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br></pre></td></tr></table></figure><p>修改 models 文件后需要重新 migrate.</p><p>修改 <code>showbooks.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图书信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/create&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/books/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span> &#123;&#123; book.btitle &#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span>---<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/delete&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最后，<code>views.py</code> 中也要添加相应的逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;hello python&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_books</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;showbooks.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>: books&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, bid</span>):</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    heros = book.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;detail.html&#x27;</span>, &#123;<span class="string">&#x27;book&#x27;</span>:book, <span class="string">&#x27;heros&#x27;</span>:heros&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;新增一本图书&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.创建 BookInfo 对象</span></span><br><span class="line">    b = BookInfo()</span><br><span class="line">    b.btitle = <span class="string">&#x27;C 语言开发宝典&#x27;</span></span><br><span class="line">    b.bpub_data = date(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2.保存进数据库</span></span><br><span class="line">    b.save()</span><br><span class="line">    <span class="comment"># 3.返回应答,让浏览器再访问/books,重定向</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/books&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">request, bid</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;删除点击的图书&#x27;&#x27;&#x27;</span></span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span> = bid)</span><br><span class="line">    book.delete()</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/books&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="字段属性和选项"><a href="#字段属性和选项" class="headerlink" title="字段属性和选项"></a>字段属性和选项</h1><h2 id="模型类属性命名限制"><a href="#模型类属性命名限制" class="headerlink" title="模型类属性命名限制"></a>模型类属性命名限制</h2><ul><li>不能是 python 的保留关键字。</li><li>不允许使用连续的下划线，这是由 django 的查询方式决定的。比如 <code>Books__Info</code> 是不可以的。</li><li>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：<br><code>属性名=models.字段类型(选项)</code></li></ul><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p>官方文档：<br><a href="https://docs.djangoproject.com/en/4.2/ref/models/fields/#field-types">https://docs.djangoproject.com/en/4.2/ref/models/fields/#field-types</a></p><p>使用时需要引入 django.db.models 包，几个常用的如下：</p><ul><li><code>AutoField</code> 自动增长的 IntegerField，通常不用指定，不指定时 Django 会自动创建属性名为 id 的自动增长属性。</li><li><code>BooleanField</code> 布尔字段，值为 True 或 False。</li><li><code>NullBooleanField</code> 支持 Null、True、False 三种值。</li><li><code>CharField(max_length=最大长度)</code> 字符串。参数 max_length 表示最大字符个数。</li><li><code>TextField</code> 大文本字段，一般超过 4000 个字符时使用。</li><li><code>IntegerField</code> 整数。</li><li><code>DecimalField(max_digits=None,decimal_places=None)</code> 十进制浮点数。参数 max_digits 表示总位。参数 decimal_places 表示小数位数。（精度较高，建议用这个）</li><li><code>FloatField</code> 浮点数。参数同上（精度不够）。</li><li><code>DateField</code>、<code>TimeField</code>、<code>DateTimeField</code></li><li><code>FileField</code> 上传文件字段。</li><li><code>ImageField</code> 继承于 FileField，对上传的内容进行校验，确保是有效的图片。</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>通过选项实现对字段的约束。</p><p>官网可查：<br><a href="https://docs.djangoproject.com/en/4.2/ref/models/fields/">https://docs.djangoproject.com/en/4.2/ref/models/fields/</a></p><p>对比： null 是数据库范畴的概念，blank 是后台管理页面表单验证范畴的。</p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><p>通过 <code>模型类.objects</code> 属性可以调用如下函数，实现对模型类对应的数据表的查询。</p><p><code>get</code> 函数：</p><ul><li>返回表中满足条件的<strong>一条且只能有一条</strong>数据</li><li>返回值是一个模型类对象</li><li>参数中写查询条件<ul><li>如果查到多条数据，则抛异常 MultipleObjectsReturned</li><li>查询不到数据，则抛异常 DoesNotExist</li></ul></li></ul><p><code>all</code> 函数：</p><ul><li>返回模型类对应表格中的所有数据</li><li><strong>返回值是 QuerySet 类型</strong></li><li>查询集，可以拿出来进行遍历</li></ul><p><code>filter</code> 函数：</p><ul><li>返回满足条件的数据</li><li><strong>返回值是QuerySet类型</strong></li><li>参数写查询条件</li></ul><p><code>exclude</code> 函数：</p><ul><li>返回不满足条件的数据</li></ul><p><code>order_by</code> 函数：</p><ul><li>对查询结果进行排序</li><li>返回值是 QuerySet</li><li>参数中写根据哪些字段进行排序</li></ul><p>下面展示一些例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; c = BookInfo.objects.filter(bcomment=34)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;]&gt;</span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(btitle__contains=<span class="string">&#x27;传&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(btitle__endswith=<span class="string">&#x27;部&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 天龙八部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>空查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刚刚给这本书加了点价格</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b= BookInfo.objects.filter(bprice__isnull=False)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><p>范围查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(id__in = [1,3,5])</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><p>比较查询：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = BookInfo.objects.filter(id__gt=3)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;, &lt;BookInfo: C 语言开发宝典&gt;]&gt;</span><br></pre></td></tr></table></figure><h2 id="F-对象"><a href="#F-对象" class="headerlink" title="F 对象"></a>F 对象</h2><p>作用：用于对象属性之间的比较。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db.models import F</span><br><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.filter(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>))</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; BookInfo.objects.filter(bread__gt=F(<span class="string">&#x27;bcomment&#x27;</span>)*2)</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><p>没有问题：</p><p><img src="https://s2.loli.net/2024/10/14/g7o4pfNcIY9CP5B.png" alt="89-16.png"></p><h2 id="Q-对象"><a href="#Q-对象" class="headerlink" title="Q 对象"></a>Q 对象</h2><p>作用：用于查询时条件之间的逻辑关系。not、and、or，可以对 Q 对象进行 <code>&amp;|~</code> 操作（和 C 语言对应的运算符）。</p><p>我们改变一下演示的方式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F,Q</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 练习 Q 对象</span></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">filter</span>(Q(id__gt=<span class="number">2</span>) &amp; Q(bread__gt=<span class="number">19</span>)))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"><span class="comment"># 后略</span></span><br></pre></td></tr></table></figure><p>访问 /index2 , 我们可以在终端中的一堆打印信息中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;QuerySet [&lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>作用：对查询结果进行聚合操作。</p><p>我们在 <code>views.py</code> 中演示：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum,Count,Max,Min,Avg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_aggregate</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">all</span>().aggregate(Count(<span class="string">&#x27;id&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.aggregate(Sum(<span class="string">&#x27;bread&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># count() 的特殊待遇</span></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">all</span>().count())</span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.count())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(BookInfo.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>).count())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时 <code>urls.py</code> 中添加路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate), <span class="comment"># 新增</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>页面 <code>http://127.0.0.1:8000/aggregate/</code> 返回 ok；终端中看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;id__count&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;bread__sum&#x27;: 126&#125;</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p>在 <code>models.py</code> 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsType</span>(models.Model):</span><br><span class="line">    <span class="comment"># 类型名</span></span><br><span class="line">    type_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表类型下面的信息</span></span><br><span class="line">    type_news = models.ManyToManyField(<span class="string">&#x27;NewsInfo&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新闻类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># 新闻标题</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 发布时间</span></span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 信息内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 关系属性, 代表信息所属的类型,注意不能和上面的同时开启</span></span><br><span class="line">    <span class="comment">#news_type = models.ManyToManyField(&#x27;NewsType&#x27;)</span></span><br></pre></td></tr></table></figure><p>多对多会生成三张表。</p><p>迁移之后，查看数据库：</p><p><img src="https://s2.loli.net/2024/10/15/GJAsV9pK1RW4fCh.jpg" alt="89-17.jpeg"></p><p>建表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; n = NewsType()</span><br><span class="line">&gt;&gt;&gt; n.type_name = <span class="string">&#x27;IT&#x27;</span></span><br><span class="line">&gt;&gt;&gt; n.save()</span><br><span class="line">&gt;&gt;&gt; n = NewsType()</span><br><span class="line">&gt;&gt;&gt; n.type_name = <span class="string">&#x27;考研&#x27;</span></span><br><span class="line">&gt;&gt;&gt; n.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;408上热搜&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content  = <span class="string">&#x27;计算机卷疯了&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;金毛师王兴趣转移&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content  = <span class="string">&#x27;将诺贝尔奖挂在嘴边&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br><span class="line">&gt;&gt;&gt; i = NewsInfo()</span><br><span class="line">&gt;&gt;&gt; i.title = <span class="string">&#x27;神秘男子在武当山接引雷劫&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.content = <span class="string">&#x27;雷击木附近出现神秘舍利子&#x27;</span></span><br><span class="line">&gt;&gt;&gt; i.save()</span><br></pre></td></tr></table></figure><p>在第三张表中添加多对多关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n = NewsType.objects.get(<span class="built_in">id</span> = 1)</span><br><span class="line">&gt;&gt;&gt; n.type_news.add(2)</span><br><span class="line">&gt;&gt;&gt; n.type_news.remove(2)</span><br></pre></td></tr></table></figure><p>（现在第三张表为空）</p><p>第二种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n 还是之前的 n</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; i = NewsInfo.objects.filter(id__lt=3)</span><br><span class="line">&gt;&gt;&gt; i</span><br><span class="line">&lt;QuerySet [&lt;NewsInfo: NewsInfo object (1)&gt;, &lt;NewsInfo: NewsInfo object (2)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt; n.type_news.set(i)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/15/aqFfydDXNmPZAE8.png" alt="89-18.png" title="虽然这个文章对应的 tag 不是我想要的（恼）"></p><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p><img src="https://s2.loli.net/2024/10/15/n5PbIvTj7BJOtia.png" alt="89-19.png"></p><h1 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h1><p><img src="https://s2.loli.net/2024/10/15/E3CZHYVfk57UOeJ.png" alt="89-20.png"></p><p>我们设计一个类：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>迁移之后，我们尝试在表中导入数据（<a href="https://drive.google.com/file/d/1dsSPiALc3Ccnq4rhEkJQUDe5poou98l5/view?usp=drive_link">一个 sql 文件</a>）。</p><p>安装 sqlite3 命令行工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sqlite3</span><br></pre></td></tr></table></figure><p>进入虚拟环境，进入包含 db.sqlite3(即 django 自带的那个数据库) 的目录。</p><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 db.sqlite3</span><br></pre></td></tr></table></figure><p>执行上面的命令后，会进入 SQLite 命令行中。</p><p>在 SQLite 命令行中，运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.read /home/zhiyue/Downloads/area.sql</span><br></pre></td></tr></table></figure><p>可能会出现 “database is locked” 错误，因为 SQLite 数据库文件被锁定。这个时候可以多试几次上面的命令，会补全的。</p><p>一睹芳容：</p><p><img src="https://s2.loli.net/2024/10/15/NrxVcQmKeFyS9Lh.png" alt="89-21.png"></p><p>上面这张图也可以帮助理解什么叫自关联。</p><p>编写模板页面 <code>area.html</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自关联案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前地区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; area.atitle &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级地区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; parent.atitle &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>下级地址<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for child in children %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; child.atitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写 views 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">areas</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取广州市的上级地区和下级地区&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取广州市的信息</span></span><br><span class="line">    area = Areas.objects.get(atitle=<span class="string">&#x27;广州市&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.查询广州市的上级地区</span></span><br><span class="line">    parent = area.aParent</span><br><span class="line">    <span class="comment"># 3.查询广州市的下级地址</span></span><br><span class="line">    children = area.areas_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;area.html&#x27;</span>, &#123;<span class="string">&#x27;area&#x27;</span>:area,<span class="string">&#x27;parent&#x27;</span>:parent, <span class="string">&#x27;children&#x27;</span>:children&#125;)</span><br></pre></td></tr></table></figure><p>最后，配置 urls.</p><p>效果：</p><p><img src="https://s2.loli.net/2024/10/15/Eqh3etBNQnIYfJR.png" alt="89-22.png"></p><h1 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h1><p><code>BookInfo.objects.all()-&gt;objects</code> 是一个什么东西呢？</p><ul><li>objects 是 Django 帮我自动生成的管理器对象，通过这个管理器可以实现对数据的查询。</li></ul><p>objects 是 <code>models.Manger</code> 类的一个对象，是 <code>models.Model</code> 的一个属性。</p><p>自定义管理器之后 Django 不再帮我们生成默认的 objects 管理器。</p><p>下面我们尝试<strong>自定义模型管理器类</strong>。</p><p><strong>需求</strong>：<br>我们要实现软删除。并非在数据库中删除数据，而是将 isDelete 字段设为 1 ，这样的字段不会在 all 查询中被查询到。</p><p>在 <code>models.py</code> 中新增管理器类，然后在 BookInfo 类中重写 objects.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoManager</span>(models.Manager):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;图书模型管理器类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.改变原有查询的结果集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类的 all 方法，获取所有数据</span></span><br><span class="line">        books = <span class="built_in">super</span>().<span class="built_in">all</span>() <span class="comment"># QuerySet</span></span><br><span class="line">        <span class="comment"># 2.对 books 中的数据进行过滤</span></span><br><span class="line">        books = books.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 返回 books</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># override 了 objects </span></span><br><span class="line">    objects = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><p>我们将《C语言开发宝典》的 isDelete 设为 1，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;BookInfo: 射雕英雄传&gt;, &lt;BookInfo: 天龙八部&gt;, &lt;BookInfo: 笑傲江湖&gt;, &lt;BookInfo: 雪山飞狐&gt;]&gt;</span><br></pre></td></tr></table></figure><p><strong>需求</strong>：<br>我们希望改进新增数据的方法，之前在命令行里一个一个敲非常麻烦。</p><p>这里我直接更新一版 <code>models.py</code> ，新增的功能在里面了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoManager</span>(models.Manager):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;图书模型管理器类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.改变原有查询的结果集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类的 all 方法，获取所有数据</span></span><br><span class="line">        books = <span class="built_in">super</span>().<span class="built_in">all</span>() <span class="comment"># QuerySet</span></span><br><span class="line">        <span class="comment"># 2.对 books 中的数据进行过滤</span></span><br><span class="line">        books = books.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 返回 books</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_book</span>(<span class="params">self, btitle, bpub_data</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;添加一本图书&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 1.创建一个图书对象</span></span><br><span class="line">        <span class="comment"># 获取 self 所在的模型类</span></span><br><span class="line">        model_class = self.model</span><br><span class="line">        book = model_class()</span><br><span class="line">        <span class="comment"># book = BookInfo()</span></span><br><span class="line">        book.btitle = btitle</span><br><span class="line">        book.bpub_data = bpub_data</span><br><span class="line">        <span class="comment"># 2.添加进数据库</span></span><br><span class="line">        book.save()</span><br><span class="line">        <span class="comment"># 3.返回 book</span></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    btitle = models.CharField(max_length= <span class="number">20</span>)</span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line">    <span class="comment"># 阅读量，default 是在 django 的逻辑层（模型类层），而不是数据库中</span></span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格,最大位数为 10,小数为 2</span></span><br><span class="line">    bprice = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评论量</span></span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除标记</span></span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override 了 objects </span></span><br><span class="line">    objects = BookInfoManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 str 后，打印对象会得到 return 返回的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.btitle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroInfo</span>(models.Model):</span><br><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.CASCADEon_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 删除 BookInfo 里面的书籍时，会自动删除依赖该书籍的英雄信息</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">&#x27;BookInfo&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 暂定</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hname</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsType</span>(models.Model):</span><br><span class="line">    <span class="comment"># 类型名</span></span><br><span class="line">    type_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表类型下面的信息</span></span><br><span class="line">    type_news = models.ManyToManyField(<span class="string">&#x27;NewsInfo&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新闻类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.type_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># 新闻标题</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 发布时间，自动添加</span></span><br><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 信息内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 关系属性, 代表信息所属的类型,注意不能和上面的同时开启</span></span><br><span class="line">    <span class="comment">#news_type = models.ManyToManyField(&#x27;NewsType&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>新增功能之后，可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from booktest.models import *</span><br><span class="line">&gt;&gt;&gt; from datetime import date</span><br><span class="line">&gt;&gt;&gt; BookInfo.objects.create_book(&#x27;日月前事&#x27;, date(2019, 1, 1))</span><br><span class="line">&lt;BookInfo: 日月前事&gt;</span><br></pre></td></tr></table></figure><p>在数据库中，可以看到这本书已经添加了进去。</p><h1 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h1><p>Django 默认生成的表名： <code>应用名小写_模型类名小写</code> 。</p><p>元选项可以更改表名。</p><p>例如，我们<strong>在 BookInfo 模型类中</strong>增加如下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;bookinfo&#x27;</span> <span class="comment"># 指定模型类对应表名</span></span><br></pre></td></tr></table></figure><h1 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h1><p>我们设计一个 404 页面。需要在 <code>settings.py</code> 中把 DEBUG 改为 FALSE. 然后：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOST=[<span class="string">&#x27;*&#x27;</span>] <span class="comment"># 允许绑定的 IP 地址列表</span></span><br></pre></td></tr></table></figure><p>404 页面设计如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404 - 找不到页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;http://img.netbian.com/file/2017/0326/64aab4ae3e632dbcbf9223995c654317.jpg&#x27;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">3em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ffcc00</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404   页面未找到<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>找不到页面   &#123;&#123; request_path &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>返回主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们仍回到 DEBUG 模式。</p><h1 id="捕获-url-参数"><a href="#捕获-url-参数" class="headerlink" title="捕获 url 参数"></a>捕获 url 参数</h1><p>官方文档：<br><a href="https://docs.djangoproject.com/en/4.2/topics/http/urls/">https://docs.djangoproject.com/en/4.2/topics/http/urls/</a></p><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;articles/2003/&quot;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&quot;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&quot;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&quot;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>官方文档里写的很清楚了，不再搬运。</p><h1 id="设计登录页面"><a href="#设计登录页面" class="headerlink" title="设计登录页面"></a>设计登录页面</h1><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>设计一个 <code>login.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login_check/&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),  <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check), <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 暂时先这样，这里打了断点</span></span><br></pre></td></tr></table></figure><p>填写数据后点击登录按钮：</p><p><img src="https://bu.dusays.com/2024/10/16/670f7d7fbf8f7.png" alt="89-23.png"></p><p><strong>避免 CSRF 报错的方法是注释掉 settings 中的校验</strong>。</p><ul><li>仅出于演示目的。实际上线时为了安全，不能这样做。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示目的</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="HttpReqeust-对象"><a href="#HttpReqeust-对象" class="headerlink" title="HttpReqeust 对象"></a>HttpReqeust 对象</h2><p>服务器接收到 http 协议的请求后，会根据报文创建 HttpRequest 对象，这个对象不需要我们创建，直接使用服务器构造好的对象就可以。<strong>视图的第一个参数必须是 HttpRequest 对象</strong>，在 <code>django.http</code> 模块中定义了 HttpRequest 对象的API。</p><p><strong>属性</strong>：</p><ul><li><strong>path</strong>: 一个字符串，表示请求的页面的完整路径，不包含域名和参数部分</li><li><strong>method</strong>: 一个字符串，表示请求使用的 HTTP 方法，常用值包括：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DETELE</code><ul><li>在浏览器中<strong>发出地址请求</strong>采用 get 方式，如超链接</li><li>在浏览器中点击表单的提交按钮发起请求，如果表单的 method 设置为 post, 则为 post 请求</li></ul></li><li>encoding: 一个字符串，表示提交的数据的编码方式<ul><li>这个属性是可写的</li></ul></li><li><strong>GET</strong>: QueryDict 类型对象，类似于字典，包含 get 请求方式的所有参数</li><li><strong>POST</strong>: QueryDict 类型对象，类似于字典，包含 post 请求方式的所有参数</li><li>FILES: 一个类似于字典的对象，包含所有的上传文件</li><li>COOKIES: 一个标准的 Python 字典，包含所有的 cookie，键和值都为字符串</li><li>session: 一个既可读又可写的类似于字典的对象，表示当前的会话，只有当 Django 启用会话的支持时才可用，详细内容见”状态保持”</li></ul><p>关于 GET 和 POST 的更多细节：</p><p><img src="https://bu.dusays.com/2024/10/16/670f87f1e19c6.jpeg" alt="89-24.jpeg"></p><p>用调试模式演示一下。打上断点，在浏览器输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/login/?a=10&amp;b=20&amp;c=python</span><br></pre></td></tr></table></figure><p>（实际上 <code>?</code> 前面的 <code>/</code> 可能要去掉？它好像是之后生成的，存疑）</p><p>我们可以看到 GET 拿到了这些数据：</p><p><img src="https://s2.loli.net/2024/10/16/9xNKVGcXbdOmwkf.png" alt="89-25.png"></p><h2 id="HttpResponse-对象"><a href="#HttpResponse-对象" class="headerlink" title="HttpResponse 对象"></a>HttpResponse 对象</h2><p>视图在接收请求并处理后，必须返回 HttpResponse 对象或子对象。</p><p><strong>属性</strong>：</p><ul><li><strong>content：表示返回的内容</strong></li><li>charset：表示 response 采用的编码字符集，默认为 utf-8</li><li><strong>status_code：返回的 HTTP 响应状态码</strong></li><li>content-type：指定返回数据的的 MIME 类型，默认为’text/html’</li></ul><h2 id="实战（续）"><a href="#实战（续）" class="headerlink" title="实战（续）"></a>实战（续）</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># num = 1</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username+<span class="string">&#x27;:&#x27;</span>+password)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在前端点击提交按钮后，后端的终端显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf:asdf</span><br><span class="line"></span><br><span class="line"># 这是我设置的用户名和密码</span><br></pre></td></tr></table></figure><p>演示一个简单的逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>异步的 javascript。在不全部加载某一个页面的情况下，<strong>对页面进行局部的刷新</strong>，ajax 请求都在后台。</p><p>图片，css 文件，js 文件都是静态文件。</p><p><img src="https://s2.loli.net/2024/10/16/2cRjOHI67U8YNpZ.png" alt="89-26.png"></p><p>大致流程：</p><ol><li>发起 ajax 请求：jquery(某个老旧的前端框架) 发起</li><li>执行相应的视图函数，返回 json 内容</li><li>执行相应的回调函数。通过判断 json 内容，进行相应处理。</li></ol><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>在 templates 文件夹下新建 <code>test_ajax.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax 页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定 btnAjax 的 click 事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#123;#alert(1)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnAjax&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/ajax_handle&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;dataType&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;async&#x27;</span>: <span class="literal">false</span>, <span class="comment">// 同步的 ajax 请求</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">success</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 进行处理</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// &#123;#alert(2)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">res</span> == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&#x27;#message&#x27;</span>).<span class="title function_">show</span>().<span class="title function_">html</span>(<span class="string">&#x27;提示信息&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#123;#alert(3)#&#125;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#message</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnAjax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ajax 请求&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建立 templates 的同级文件夹 static, 下面再设 js 文件夹。将 <a href="https://code.jquery.com/jquery-1.12.4.min.js">jquery-1.12.4.min.js</a> 放入其中。</p><p>在 <code>views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示 ajax 页面&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_ajax.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时在 <code>urls.py</code> 中配置好路由。</p><p>在 settings 中添加：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)] <span class="comment"># 静态文件的保存目录</span></span><br></pre></td></tr></table></figure><p>这时运行，会提示 ajax_handle 404 Not Found，合理。</p><p>在 <code>views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect, JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ajax_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ajax 请求处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 返回的 json 数据 &#123;&#x27;res&#x27;:1&#125;</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后新增路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle)</span><br></pre></td></tr></table></figure><p>运行，在点击按钮后，页面不加载的情况下，按钮下方多出了红色的字“提示信息”。</p><p><img src="https://s2.loli.net/2024/10/16/OR6Qxi47VjENcey.png" alt="89-27.png"></p><p>关于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;async&#x27;: false, // 同步的 ajax 请求</span><br></pre></td></tr></table></figure><p>这句代码，打开这个开关，在 html 文件中打开调试代码的注释，再运行。可以看到弹出窗口的消息提示顺序从“123”变成了“132”。</p><h2 id="Ajax-登录案例"><a href="#Ajax-登录案例" class="headerlink" title="Ajax 登录案例"></a>Ajax 登录案例</h2><p>尝试用 ajax 做一个登录：若用户输入错误，则不刷新页面，提示错误。</p><p>增加路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login_ajax&#x27;</span>, views.login_ajax),</span><br></pre></td></tr></table></figure><p>设计视图：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login_ajax</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login_ajax.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设计 html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax 登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnLogin&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 1.获取用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">                username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">                password = $(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.发起 post ajax 请求，/login_ajax_check, 携带用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;url&#x27;</span>:<span class="string">&#x27;/login_ajax_check/&#x27;</span>, <span class="comment">// 当是 post 请求时默认多写一个/让 urls 匹配保持一致</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;username&#x27;</span>:username,<span class="string">&#x27;password&#x27;</span>:password&#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;dataType&#x27;</span>: <span class="string">&#x27;json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">success</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 登录成功 &#123;&#x27;res&#x27;:1&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 登录失败 &#123;&#x27;res&#x27;:0&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data.<span class="property">res</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#errmsg&#x27;</span>).<span class="title function_">show</span>().<span class="title function_">html</span>(<span class="string">&#x27; 用 户 名 或 密码错误&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 跳转到首页</span></span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;/index&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#errmsg</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnLogin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errmsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设计登录校验：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_ajax_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;ajax 登录校验&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取用户名和密码</span></span><br><span class="line">    username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.进行校验,返回 json 数据</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="comment"># 用户名密码正确</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line">        <span class="comment"># return redirect(&#x27;/index&#x27;) ajax 请求在后台，不要返回页面或者重定向，这样是不行的，一定要返回 Json！</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 用户名或密码错误</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;res&#x27;</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p>不用忘了配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br></pre></td></tr></table></figure><p>运行，成功。</p><h1 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h1><p>http 协议是<strong>无状态</strong>的。下一次去访问一个页面时并不知道上一次对这个页面做了什么。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p><img src="https://s2.loli.net/2024/10/17/852LAXTSzUHIMV1.png" alt="89-28.png"></p><p>cookie 的特点：</p><ol><li>以<strong>键值对</strong>方式进行存储。</li><li>通过浏览器访问一个网站时，会将浏览器存储的跟网站相关的<strong>所有 cookie 信息</strong>发送给该网站的服务器。<code>request.COOKIES</code></li><li>cookie 是基于<strong>域名安全</strong>的。</li><li>cookie 是有<strong>过期时间</strong>的，如果不指定，默认关闭浏览器之后 cookie 就会过期。</li></ol><p>典型应用：记住用户名，网站的广告推送。</p><p>说明：这些广告推送的商品是基于你曾经在淘宝上点击的商品类别等条件筛选出来的，看上去这是在凤凰网上访问淘宝网的 Cookie，但是事实不是这样的，一般是采用 iframe 标签嵌套一个淘宝的广告页面到凤凰网的页面上，所以淘宝的 Cookie 并没有被凤凰网读取到，而是依然交给淘宝网读取的，可以通过”开发者工具”查看元素，如下图：</p><p><img src="https://bu.dusays.com/2024/10/17/670fe9eec2816.png" alt="89-29.png"></p><h3 id="Cookie-基本使用"><a href="#Cookie-基本使用" class="headerlink" title="Cookie 基本使用"></a>Cookie 基本使用</h3><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br></pre></td></tr></table></figure><p>在 <code>views.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;设置 cookie 信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    response = HttpResponse(<span class="string">&#x27;设置 cookie&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置一个 cookie 信息,名字为 num, 值为 2</span></span><br><span class="line">    response.set_cookie(<span class="string">&#x27;num&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">#下面是设置 cookie 在两周之后过期</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;num&#x27;, 2, max_age=14*24*3600)</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;num&#x27;, 1,expires=datetime.now()+timedelta(days=14))</span></span><br><span class="line">    <span class="comment"># 返回 response</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>运行，访问 <code>/set_cookie</code> 页面之后，再去该网站的其他页面，都可以在 F12 中看到多了我们自己添加的 cookie.</p><p>获取 cookie:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 cookie 的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 取出 cookie num 的值</span></span><br><span class="line">    num = request.COOKIES[<span class="string">&#x27;num&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure><p>同时配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br></pre></td></tr></table></figure><h3 id="记住用户名案例"><a href="#记住用户名案例" class="headerlink" title="记住用户名案例"></a>记住用户名案例</h3><p>如果在前面的 <code>login.html</code> 我们勾选了记住用户名，那么如何实现下次 login 的时候，用户名在里边呢？</p><p>在 <code>views.py</code> 中对原来的函数作如下修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行，可以发现实现效果。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="https://s2.loli.net/2024/10/17/OX7iBcUT1EkLm8d.png" alt="89-30.png"></p><p>session 存储在服务器端。在服务器端进行状态保持的方案就是 Session .</p><p><strong>session 的特点</strong>：</p><ol><li>session 是以<strong>键值对</strong>进行存储的。</li><li>session 依赖于 cookie。唯一的标识码 sessionid 保存在 cookie 中。</li><li>session 也是有过期时间，如果不指定，默认两周就会过期。</li><li>session 与 cookie 的差异，cookie 无论保存什么值进去，取出来都是字符串，session 保存进去什么类型，取出来就是什么类型。</li></ol><p>Django 项目默认启用 Session，可以在 MIDDLEWARE 配置里找到。</p><p>设置 SESSION_ENGINE 项，指定 Session 数据存储的方式，可以存储在数据库、django 的缓存、Redis 等。</p><p><strong>默认存储方式</strong>，存储在数据库中，如下设置可以写，也可以不写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.db&#x27;</span><br></pre></td></tr></table></figure><p><strong>存储在缓存中</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cache&#x27;</span><br></pre></td></tr></table></figure><p><strong>混合存储</strong>，优先从本机内存中存取，如果没有则从数据库中存取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE=&#x27;django.contrib.sessions.backends.cached_db&#x27;</span><br></pre></td></tr></table></figure><p>如果存储在数据库中，需要在项 INSTALLED_APPS 中安装 Session 应用。</p><h3 id="依赖于-Cookie"><a href="#依赖于-Cookie" class="headerlink" title="依赖于 Cookie"></a>依赖于 Cookie</h3><p>在使用 Session 后，会在 Cookie 中存储一个 sessionid 的数据，每次请求时浏览器都会将这个数据发给服务器，服务器在接收到 sessionid 后，会根据这个值找出这个请求者的 Session。</p><p>存储 Session 时，键与 Cookie 中的 sessionid 相同，值是开发人员设置的键值对信息，进行了 base64 编码，过期时间由开发人员设置。</p><h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_session</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;设置 session&#x27;&#x27;&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;yomiya&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;age&#x27;</span>] = <span class="number">17</span></span><br><span class="line">    <span class="comment"># request.session.set_expiry(5)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;设置 session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 session&#x27;&#x27;&#x27;</span></span><br><span class="line">    username = request.session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    age = request.session[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(username+<span class="string">&#x27;:&#x27;</span>+<span class="built_in">str</span>(age))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),</span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check),</span><br><span class="line">    path(<span class="string">&#x27;test_ajax/&#x27;</span>, views.test_ajax),</span><br><span class="line">    path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax/&#x27;</span>, views.login_ajax),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br><span class="line">    path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br><span class="line">    path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line">    path(<span class="string">&#x27;set_session/&#x27;</span>, views.set_session), <span class="comment"># add</span></span><br><span class="line">    path(<span class="string">&#x27;get_session/&#x27;</span>, views.get_session), <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问 /set_session , 在 F12 中可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionid=xsjm51tmhguylsknjf53nvvzsf83hgui;</span><br></pre></td></tr></table></figure><p>与数据库中的一致，同时数据库中 session_data 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJxVjDsOgzAQRO_iOrLW2HhJyvQ5A1rWayAfW-JToCh3j5EoknJm3ry3amldhnadZWrHoC7KqNNv1xE_JO1DuFPqs-aclmns9I7oY531LQd5Xg_2TzDQPJQ3NghWjDccHfuavQC4M9mGEDxLtAiurkMHleFKIDj0ZCMRVIwSyRbprkv0kmLb8mvcqHTUl2jw8wWmp0Dd:1t1I46:CMmhgMpr67_q-bZvtptryM6HddKavAQEW83ZsPD4TQI</span><br></pre></td></tr></table></figure><p>访问 /get_session, 浏览器显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yomiya:17</span><br></pre></td></tr></table></figure><p>清除 session：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def clear_session(request):</span></span><br><span class="line"><span class="comment">#     &#x27;&#x27;&#x27;清除 session 信息&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     # request.session.clear()</span></span><br><span class="line"><span class="comment">#     # request.session.flush()</span></span><br><span class="line"><span class="comment">#     return HttpResponse(&#x27;清除成功&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="记住用户登录状态案例"><a href="#记住用户登录状态案例" class="headerlink" title="记住用户登录状态案例"></a>记住用户登录状态案例</h3><p>需求：已登录的用户在访问 /login 时，直接访问首页，不需要再输入用户名和密码。</p><p>修改 <code>views.py</code> 中的 login、login_check 函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 判断用户是否登录</span></span><br><span class="line">    <span class="keyword">if</span> request.session.has_key(<span class="string">&#x27;islogin&#x27;</span>):</span><br><span class="line">    <span class="comment"># 用户已登录, 跳转到首页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        request.session[<span class="string">&#x27;islogin&#x27;</span>] = <span class="literal">True</span> <span class="comment"># add</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="cookie-和-session-的应用场景"><a href="#cookie-和-session-的应用场景" class="headerlink" title="cookie 和 session 的应用场景"></a>cookie 和 session 的应用场景</h2><p>cookie: 记住用户名。<strong>安全性要求不高</strong>。</p><p>session: 涉及到<strong>安全性要求比较高</strong>的数据。如用户名、余额、等级、验证码等。</p><p>深度延伸，如果用户禁用 cookie，如何使用 session :<br><a href="https://www.cnblogs.com/ceceliahappycoding/p/10544075.html">https://www.cnblogs.com/ceceliahappycoding/p/10544075.html</a></p><h1 id="模板进阶"><a href="#模板进阶" class="headerlink" title="模板进阶"></a>模板进阶</h1><h2 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_var</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模板变量&#x27;&#x27;&#x27;</span></span><br><span class="line">    my_dict = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;字典键值&#x27;</span>&#125;</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    book = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 定义模板上下文</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;my_dict&#x27;</span>:my_dict, <span class="string">&#x27;my_list&#x27;</span>:my_list, <span class="string">&#x27;book&#x27;</span>:book&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_var.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure><p>templates 文件夹下 <code>test_var.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学习模板变量<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    使用字典属性:&#123;&#123; my_dict.title &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    使用列表元素:&#123;&#123; my_list.1 &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    使用对象属性:&#123;&#123; book.btitle &#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后配置路由。转到浏览器对于路径可以看到效果。</p><h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><p>可以通过 <code>&#123;&#123; forloop.counter &#125;&#125;</code> 得到 for 循环遍历到了第几次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if 条件 %&#125;</span><br><span class="line">&#123;% elif 条件 %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：进行比较操作时，比较操作符两边必须有空格。</strong></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>格式：<strong>模板变量｜过滤器：参数</strong></p><p>在 templates 文件夹下新建 <code>test_filters.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">&#123;% load filters %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for book in books %&#125;</span><br><span class="line">        &#123;% if book.id|mod %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>&#123;&#123; book.id &#125;&#125;--&#123;&#123; book.btitle|length &#125;&#125;--&#123;&#123; book.bpub_data|date:&#x27;Y 年-m 月-d 日&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>&#123;&#123; book.btitle &#125;&#125;--&#123;&#123; book.bpub_data &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">default 过滤器:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content|default:&#x27;没有数据&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建 <code>templatetags/filters.py</code> 文件，其中 templatetags 文件夹与 <code>models.py</code> 文件同级。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filters.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="comment"># 过滤器其实就是 python 函数</span></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Library 类的对象</span></span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义的过滤器函数，至少有一个参数，最多两个</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;判断 num 是否为偶数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_val</span>(<span class="params">num, val</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;判断 num 是否能被 val 整除&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num%val == <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_filters</span>(<span class="params">request</span>):</span><br><span class="line">    books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_filters.html&#x27;</span>, &#123;<span class="string">&#x27;books&#x27;</span>:books&#125;)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p><strong>注意配置自定义过滤器不会自动加载，必须重启 Django 服务</strong>。</p><p>效果：</p><p><img src="https://s2.loli.net/2024/10/17/s6MqLU4Qau5TXbw.png" alt="89-31.png"></p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p><strong>模板继承是为了重用 html 页面内容</strong>。比如很多网站的头部导航条和底部版权版权信息不变的。</p><p><img src="https://s2.loli.net/2024/10/17/fagkvYymUP1wV7C.png" alt="89-32.png"></p><p>在 templates 文件夹下创建 <code>base.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;父模板文件&#123;% endblock title %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>导航条<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block b1 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父模板 b1 块中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock b1 %&#125;</span><br><span class="line">&#123;% block b2 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是父模板 b2 块中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock b2 %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_template_inhert</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;base.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>在 templates 文件夹下创建 <code>child.html</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">&#123;% block title %&#125;子模板文件&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block b1 %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    &lt;h1&gt;这是子模板 b1 块中的内容&lt;/h1&gt;</span><br><span class="line">&#123;% endblock b1 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block b2 %&#125;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line">    &lt;h1&gt;这是子模板 b2 块中的内容&lt;/h1&gt;</span><br><span class="line">&#123;% endblock b2 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_template_inhert</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># return render(request, &quot;base.html&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;child.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行即可对比前后效果。</p><h2 id="html-转义"><a href="#html-转义" class="headerlink" title="html 转义"></a>html 转义</h2><p>增加 <code>html_escape.html</code> 页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html 转义<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">html 转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">使用 safe 过滤器关闭转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; content|safe &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">使用 autoescape 关闭转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">    &#123;&#123; content &#125;&#125;</span><br><span class="line">    &#123;&#123; content &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">模板硬编码中的字符串默认不会经过转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; test|default:&#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27; &#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">手动进行转义:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;&#123; test|default:&#x27;<span class="symbol">&amp;lt;</span>h1<span class="symbol">&amp;gt;</span>hello<span class="symbol">&amp;lt;</span>/h1<span class="symbol">&amp;gt;</span>&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加视图函数 html_escape:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">html_escape</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;html 转义&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;html_escape.html&#x27;</span>,&#123;<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;&lt;h1&gt;hello&lt;/h1&gt;&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/17/ASMt8urZjh729ys.png" alt="89-33.png"></p><h1 id="csrf-攻击"><a href="#csrf-攻击" class="headerlink" title="csrf 攻击"></a>csrf 攻击</h1><p>CSRF 全拼为 Cross Site Request Forgery，译为跨站请求伪造。CSRF 指攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF 能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><p><img src="https://bu.dusays.com/2024/10/17/67111b92bfa6d.png" alt="89-34.png"></p><p>接下来我们演示这一攻击。</p><p>设计一个修改密码的页面 <code>change_pwd.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改密码页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/change_pwd_action/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;% csrf_token %&#125; --&gt;</span></span><br><span class="line">    新密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;change_pwd.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd_action</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模拟修改密码处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取新密码</span></span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.返回一个应答</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;修改密码为:%s&#x27;</span>%pwd)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>这个时候，我们修改密码，可以成功。</p><p>但是这个时候，假如有一个猥琐黑客，直接访问了 <code>/change_pwd_action</code> ，就可以通过一些手段修改我们的密码，怎么办？</p><p>答案是凉拌。</p><p>不过还好，Django 框架为我们提供了预防这种攻击的方法。</p><p>在 settings 中打开 CsrfViewMiddleware :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>, <span class="comment"># 打开</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这个时候，再回到 <code>/change_pwd</code> 修改密码，就会被阻止。</p><p>我们把之前 <code>change_pwd.html</code> 的注释打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改密码页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/change_pwd_action/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    新密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候就可以成功修改了！</p><p>防御的大致原理是，只有在本页面发出的请求可以访问到 <code>/change_pwd_action</code> 。</p><p><img src="https://s2.loli.net/2024/10/18/FptNwV4iG6loxT1.jpg" alt="89-35.jpeg"></p><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><p>在用户注册、登录页面，为了<strong>防止暴力请求</strong>，可以加入验证码功能，如果验证码错误，则不需要继续处理，可以减轻业务服务器、数据库服务器的压力。</p><p>安装 Pillow :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow --proxy=&quot;http://127.0.0.1:7897&quot;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /verify_code</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="comment"># from django.utils.six import BytesIO #django 3 以后丢弃了</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 引入随机函数模块</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="comment"># 定义变量，用于画面的背景色、宽、高 RGB</span></span><br><span class="line">    bgcolor = (random.randrange(<span class="number">20</span>, <span class="number">100</span>), random.randrange(<span class="number">20</span>, <span class="number">100</span>), <span class="number">255</span>)</span><br><span class="line">    width = <span class="number">100</span></span><br><span class="line">    height = <span class="number">25</span></span><br><span class="line">    <span class="comment"># 创建画面对象</span></span><br><span class="line">    im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), bgcolor)</span><br><span class="line">    <span class="comment"># 创建画笔对象</span></span><br><span class="line">    draw = ImageDraw.Draw(im)</span><br><span class="line">    <span class="comment"># 调用画笔的 point()函数绘制噪点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">        xy = (random.randrange(<span class="number">0</span>, width), random.randrange(<span class="number">0</span>, height))</span><br><span class="line">        fill = (random.randrange(<span class="number">0</span>, <span class="number">255</span>), <span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        draw.point(xy, fill=fill)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义验证码的备选值</span></span><br><span class="line">    str1 = <span class="string">&#x27;ABCD123EFGHIJK456LMNOPQRS789TUVWXYZ0&#x27;</span></span><br><span class="line">    <span class="comment"># 随机选取 4 个值作为验证码</span></span><br><span class="line">    rand_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rand_str += str1[random.randrange(<span class="number">0</span>, <span class="built_in">len</span>(str1))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造字体对象，ubuntu 的字体路径为“/usr/share/fonts/truetype/freefont”</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&#x27;FreeMono.ttf&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">    <span class="comment"># 构造字体颜色</span></span><br><span class="line">    fontcolor = (<span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>), random.randrange(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 绘制 4 个字</span></span><br><span class="line">    draw.text((<span class="number">5</span>, <span class="number">2</span>), rand_str[<span class="number">0</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">25</span>, <span class="number">2</span>), rand_str[<span class="number">1</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">50</span>, <span class="number">2</span>), rand_str[<span class="number">2</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">75</span>, <span class="number">2</span>), rand_str[<span class="number">3</span>], font=font, fill=fontcolor)</span><br><span class="line">    <span class="comment"># 释放画笔</span></span><br><span class="line">    <span class="keyword">del</span> draw</span><br><span class="line">    <span class="comment"># 存入 session，用于做进一步验证</span></span><br><span class="line">    request.session[<span class="string">&#x27;verifycode&#x27;</span>] = rand_str</span><br><span class="line">    <span class="comment"># 内存文件操作</span></span><br><span class="line">    <span class="keyword">import</span> io</span><br><span class="line">    buf = io.BytesIO()</span><br><span class="line">    <span class="comment"># 将图片保存在内存中，文件类型为 png</span></span><br><span class="line">    im.save(buf, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将内存中的图片数据返回给客户端，MIME 类型为图片 png</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(buf.getvalue(), <span class="string">&#x27;image/png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>修改 <code>login.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login_check/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/verify_code&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vcode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改一些逻辑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># # 判断用户是否登录</span></span><br><span class="line">    <span class="comment"># if request.session.has_key(&#x27;islogin&#x27;):</span></span><br><span class="line">    <span class="comment"># # 用户已登录, 跳转到首页</span></span><br><span class="line">    <span class="comment">#     return HttpResponseRedirect(&#x27;/index&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.COOKIES:</span><br><span class="line">        username = request.COOKIES[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_check</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登录校验视图&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取用户输入验证码</span></span><br><span class="line">    vcode1 = request.POST.get(<span class="string">&#x27;vcode&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取 session 中保存的验证码</span></span><br><span class="line">    vcode2 = request.session.get(<span class="string">&#x27;verifycode&#x27;</span>)</span><br><span class="line">    <span class="comment"># 进行验证码校验</span></span><br><span class="line">    <span class="keyword">if</span> vcode1 != vcode2:</span><br><span class="line">        <span class="comment"># 验证码错误</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># request.POST 保存的是 post 方式提交的参数 QueryDict</span></span><br><span class="line">    <span class="comment"># request.GET 保存是 get 方式提交的参数 类型也是 QueryDict</span></span><br><span class="line">    username=request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password=request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">&#x27;remember&#x27;</span>) <span class="comment"># add</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># just an example</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&#x27;akashi&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        resp =  HttpResponseRedirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">        request.session[<span class="string">&#x27;islogin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">            resp.set_cookie(<span class="string">&#x27;username&#x27;</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在可以实现效果：验证码不通过则无法登录。</p><h1 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h1><p>当某一个 url 配置的地址发生变化时，页面上使用反向解析生成地址的位置不需要发生变化。</p><p>新建 <code>url_reverse.html</code> 页面，里边加入首页超链接:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_reverse</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;url_reverse.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>如果我们修改 <code>urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index),  <span class="comment"># 去掉</span></span><br><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index), <span class="comment"># 改为</span></span><br></pre></td></tr></table></figure><p>则原来能用的链接都失效了。</p><p>将 <code>url_reverse.html</code> 修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    url 反向解析生成 index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    /show_args/1/2:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;/show_args/1/2&quot;&gt;/show_args/1/2&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    动态产生/show_args/1/2:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;&#123;% url &#x27;show_args&#x27; 1 2 %&#125;&quot;&gt;/show_args/1/2&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /show_kwargs/3/4:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;/show_kwargs/3/4&quot;&gt;/show_kwargs/3/4&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    动态产生/show_kwargs/3/4:&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;&#123;% url &#x27;show_kwargs&#x27; c=3 d=4 %&#125;&quot;&gt;/show_kwargs/3/4&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时在 <code>urls.py</code> 中新增（修改）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index), <span class="comment"># 原本</span></span><br><span class="line">path(<span class="string">&#x27;index1/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>), <span class="comment"># 改为</span></span><br><span class="line"></span><br><span class="line">path(<span class="string">&#x27;show_args/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;show_kwargs/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_args</span>(<span class="params">request, a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span>(a) + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_kwargs</span>(<span class="params">request, c, d</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span>(c) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(d))</span><br></pre></td></tr></table></figure><p>效果，第一个链接不可以访问，第二个可以：</p><p><img src="https://s2.loli.net/2024/10/18/YCvVmOidxRwPteF.png" alt="89-36.png"></p><p><strong>下面我们做一些更复杂的操作。</strong></p><p>在 booktest 文件夹下新增 <code>urls.py</code> . 注意现在我们有两个 <code>urls.py</code> :</p><ul><li><code>day1010/day1010/urls.py</code> （旧）</li><li><code>day1010/booktest/urls.py</code> （新）</li></ul><p>在 <code>day1010/day1010/urls.py</code>（旧）中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index1/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;index2/&#x27;</span>, views.index2),</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, views.show_books),</span><br><span class="line">    path(<span class="string">&#x27;books/&lt;int:bid&gt;&#x27;</span>, views.detail),</span><br><span class="line">    path(<span class="string">&#x27;create/&#x27;</span>, views.create),</span><br><span class="line">    path(<span class="string">&#x27;delete&lt;int:bid&gt;&#x27;</span>, views.delete),</span><br><span class="line">    path(<span class="string">&#x27;aggregate/&#x27;</span>,views.use_aggregate),</span><br><span class="line">    path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.login),</span><br><span class="line">    path(<span class="string">&#x27;login_check/&#x27;</span>, views.login_check),</span><br><span class="line">    path(<span class="string">&#x27;test_ajax/&#x27;</span>, views.test_ajax),</span><br><span class="line">    path(<span class="string">&#x27;ajax_handle/&#x27;</span>, views.ajax_handle),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax/&#x27;</span>, views.login_ajax),</span><br><span class="line">    path(<span class="string">&#x27;login_ajax_check/&#x27;</span>, views.login_ajax_check),</span><br><span class="line">    path(<span class="string">&#x27;set_cookie/&#x27;</span>, views.set_cookie),</span><br><span class="line">    path(<span class="string">&#x27;get_cookie/&#x27;</span>, views.get_cookie),</span><br><span class="line">    path(<span class="string">&#x27;set_session/&#x27;</span>, views.set_session),</span><br><span class="line">    path(<span class="string">&#x27;get_session/&#x27;</span>, views.get_session),</span><br><span class="line">    <span class="comment"># path(&#x27;clear_session/&#x27;, views.clear_session),</span></span><br><span class="line">    path(<span class="string">&#x27;test_var/&#x27;</span>, views.test_var),</span><br><span class="line">    path(<span class="string">&#x27;test_filters/&#x27;</span>, views.test_filters),</span><br><span class="line">    path(<span class="string">&#x27;test_template_inhert/&#x27;</span>, views.test_template_inhert),</span><br><span class="line">    path(<span class="string">&#x27;html_escape/&#x27;</span>, views.html_escape),</span><br><span class="line">    path(<span class="string">&#x27;change_pwd/&#x27;</span>, views.change_pwd),</span><br><span class="line">    path(<span class="string">&#x27;change_pwd_action/&#x27;</span>, views.change_pwd_action),</span><br><span class="line">    path(<span class="string">&#x27;verify_code/&#x27;</span>, views.verify_code),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;url_reverse/&#x27;</span>, views.url_reverse),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include((<span class="string">&#x27;booktest.urls&#x27;</span>,<span class="string">&#x27;booktest&#x27;</span>),namespace = <span class="string">&#x27;booktest&#x27;</span>)),  <span class="comment"># 将那个文件的内容合并过来</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>day1010/booktest/urls.py</code>（新）中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;show_args/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;show_kwargs/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在 <code>url_reverse.html</code> 中打开注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    url 反向解析生成 index 链接:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /show_args/1/2:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_args/1/2&quot;</span>&gt;</span>/show_args/1/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    动态产生/show_args/1/2:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;booktest:show_args&#x27; 1 2 %&#125;&quot;</span>&gt;</span>/show_args/1/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    /show_kwargs/3/4:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_kwargs/3/4&quot;</span>&gt;</span>/show_kwargs/3/4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    动态产生/show_kwargs/3/4:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;booktest:show_kwargs&#x27; c=3 d=4 %&#125;&quot;</span>&gt;</span>/show_kwargs/3/4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在这些链接都可以访问：</p><p><img src="https://bu.dusays.com/2024/10/18/6711f1f5d9db6.png" alt="89-37.png"></p><p>现在，对 <code>day1010/booktest/urls.py</code>（新）作修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面加了 1</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> booktest <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;show_args1/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span>,views.show_args,name=<span class="string">&#x27;show_args&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;show_kwargs1/&lt;int:c&gt;/&lt;int:d&gt;&#x27;</span>,views.show_kwargs,name=<span class="string">&#x27;show_kwargs&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再次运行，结果：</p><p><img src="https://bu.dusays.com/2024/10/18/6711f3bec195a.png" alt="89-38.png"></p><h1 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h1><p>在 static 文件夹下新增 images 文件夹，里面放入 <code>amber.png</code></p><p>templates 文件夹下新增 <code>static_test.html</code> 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>静态文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/images/amber.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/abc/images/amber.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">动态获取 STATIC_URL,拼接静态文件路径:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/amber.png&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_test</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;static_test.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>配置路由（老方法）。</p><p>结果：</p><p><img src="https://s2.loli.net/2024/10/18/q39OQKGMDYWRgxU.png" alt="89-39.png"></p><p>可以看到，中间那张无法加载。</p><p>如果在 settings 中，修改：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;static/&#x27;</span> <span class="comment"># del</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;abc/&#x27;</span> <span class="comment"># add</span></span><br></pre></td></tr></table></figure><p>那么结果变成：第一张无法加载，其他可以加载。</p><p><strong>体现了动态获取 STATIC_URL 的好处</strong>。</p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p><strong>中间件函数</strong>是 django 框架给我们预留的函数接口，让我们可以干预请求和应答的过程。</p><p><img src="https://s2.loli.net/2024/10/18/eXdmK8HBNoaFgt6.png" alt="89-40.png" title="面向切面编程 AOP"></p><p>需求：现在我们需要禁掉一些有恶意行为的 IP 访问网站。</p><p>一种方法，我们可以使用装饰器模式，在每一个视图函数前加装饰器：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXCLUDE_IPS = [<span class="string">&#x27; 192.168.0.108&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blocked_ips</span>(<span class="params">view_func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取浏览器端的 ip 地址</span></span><br><span class="line">        user_ip = request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> EXCLUDE_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;Forbidden&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> view_func(request, *view_args, **view_kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@blocked_ips</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是这样有一个问题，如果要禁止某个 IP 访问所有页面，我们需要对所有的视图函数加装饰器。这样非常麻烦（提问：是否通过 vim 操作并不麻烦）。</p><p>第二个思路是使用中间件。</p><p>在 ./booktest/ 下新建 <code>myMiddleware.py</code> 文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockedIPSMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, get_response </span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;中间件类&#x27;&#x27;&#x27;</span></span><br><span class="line">    EXCLUDE_IPS = [<span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数调用之前会调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        user_ip = request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> BlockedIPSMiddleware.EXCLUDE_IPS:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;Forbidden&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;中间件类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, get_response </span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---init---&#x27;</span>)</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;产生 request 对象之后，url 匹配之前调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_request----&#x27;</span>)</span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;process_request me&#x27;)</span></span><br><span class="line">        response=self.get_response(request)</span><br><span class="line">        <span class="comment"># 视图函数调用之后，内容返回浏览器之前</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------response------&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;url 匹配之后，视图函数调用之前调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_view----&#x27;</span>)</span><br><span class="line">        <span class="comment"># view 视图函数没有得到执行，但是还是要走 process_response</span></span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;process_view&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionTest1Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数发生异常时调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_exception1----&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exception)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionTest2Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;视图函数发生异常时调用&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----process_exception2----&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 settings 中注册：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest.myMiddleware.BlockedIPSMiddleware&#x27;</span>,  <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>重启服务，发现无法访问（因为本机地址被禁了）。</p><h1 id="后台管理（续）"><a href="#后台管理（续）" class="headerlink" title="后台管理（续）"></a>后台管理（续）</h1><p>一些零碎的知识点。</p><p><code>admin.py</code> 新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型管理类&#x27;&#x27;&#x27;</span></span><br><span class="line">    list_per_page = <span class="number">10</span> <span class="comment"># 指定每页显示 10 条数据</span></span><br><span class="line">    <span class="comment">#方法名也可以作为一列进行显示</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>]</span><br><span class="line">    actions_on_bottom = <span class="literal">True</span> <span class="comment"># 底部显示动作窗口</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment">#顶部不显示动作窗口</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页右侧过滤栏</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Areas, AreaInfoAdmin)</span><br></pre></td></tr></table></figure><p>在 <code>models.py</code> 中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自关联的模型类设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Areas</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 地区名称</span></span><br><span class="line">    atitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 关系属性，代表当前地区的父级地区</span></span><br><span class="line">    aParent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>,on_delete=models.CASCADE,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.atitle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.aParent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.aParent.atitle</span><br><span class="line"></span><br><span class="line">    parent.short_description = <span class="string">&#x27;父级地区名称&#x27;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/18/PG3DNO1cRiortyK.png" alt="89-41.png"></p><p>目前的这个管理页面的新增功能有点弱，作修改。</p><p><code>admin.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaStackedInline</span>(admin.StackedInline):</span><br><span class="line">    <span class="comment"># 写多类的名字</span></span><br><span class="line">    model = Areas</span><br><span class="line">    extra = <span class="number">2</span> <span class="comment">#下面新增位置显示数目，默认显示 3 个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;地区模型管理类&#x27;&#x27;&#x27;</span></span><br><span class="line">    list_per_page = <span class="number">10</span> <span class="comment"># 指定每页显示 10 条数据</span></span><br><span class="line">    <span class="comment">#方法名也可以作为一列进行显示</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>]</span><br><span class="line">    actions_on_bottom = <span class="literal">True</span> <span class="comment"># 底部显示动作窗口</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment">#顶部不显示动作窗口</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页右侧过滤栏</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;atitle&#x27;</span>] <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># add</span></span><br><span class="line">    fields = [<span class="string">&#x27;aParent&#x27;</span>, <span class="string">&#x27;atitle&#x27;</span>] </span><br><span class="line">    inlines = [AreaStackedInline] <span class="comment">#以块的形式</span></span><br></pre></td></tr></table></figure><p>感觉没什么用。</p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p>新建文件夹 <code>./static/media</code> .</p><p>在 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_ROOT=os.path.join(BASE_DIR,<span class="string">&#x27;static/media&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 <code>./booktest/models.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PicTest</span>(models.Model):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;上传图片&#x27;&#x27;&#x27;</span></span><br><span class="line">    goods_pic = models.ImageField(upload_to=<span class="string">&#x27;booktest&#x27;</span>)</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./booktest/admin.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo,Areas,PicTest</span><br><span class="line"></span><br><span class="line">admin.site.register(PicTest)</span><br></pre></td></tr></table></figure><p>在后台管理页面可以直接上传图片了。由于我们的配置，图片会被存放在 <code>./static/media/booktest/</code> 下面。</p><p>在数据库中，可以看到存储的是一个路径：</p><p><img src="https://s2.loli.net/2024/10/19/OFfqDl8ugwBrbHm.png" alt="89-42.png"></p><p>新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> PicTest</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pic_show</span>(<span class="params">request</span>):</span><br><span class="line">    pic=PicTest.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    context=&#123;<span class="string">&#x27;pic&#x27;</span>:pic&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;pic_show.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><p>在 <code>./templates/</code> 下新增 <code>pic_show.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/media/&#123;&#123; pic.goods_pic &#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./day1010/urls.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;pic_show/&#x27;</span>, views.pic_show),</span><br></pre></td></tr></table></figure><p>在 <code>./templates/</code> 下新增 <code>upload_pic.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload_handle/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./booktest/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /show_upload</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示上传图片页面&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;upload_pic.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>接下来编写 upload_handle 的逻辑。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> day1010 <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;上传图片处理&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取上传文件的处理对象</span></span><br><span class="line">    pic = request.FILES[<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.创建一个文件</span></span><br><span class="line">    save_path = <span class="string">&#x27;%s/booktest/%s&#x27;</span>%(settings.MEDIA_ROOT,pic.name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 3.获取上传文件的内容并写到创建的文件中</span></span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> pic.chunks():</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.在数据库中保存上传记录</span></span><br><span class="line">    PicTest.objects.create(goods_pic=<span class="string">&#x27;booktest/%s&#x27;</span>%pic.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.返回</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>此时，<code>/show_upload/</code> 页面可以正常工作。</p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>在 <code>./templates/</code> 下新建 <code>show_area.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in areas %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>./booktest/views.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_area</span>(<span class="params">request</span>):</span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;show_area.html&#x27;</span>,&#123;<span class="string">&#x27;areas&#x27;</span>: areas&#125;)</span><br></pre></td></tr></table></figure><p>配置路由。</p><p>运行，在浏览器中查看。这个显示太长了，我们希望进行分页。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_area</span>(<span class="params">request, pindex=<span class="number">1</span></span>):</span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 分页,每页显示 10 条</span></span><br><span class="line">    paginator = Paginator(areas, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 获取第 pindex 页的内容</span></span><br><span class="line">    pindex = <span class="built_in">int</span>(pindex)</span><br><span class="line">    <span class="comment"># page 是 Page 类的实例对象</span></span><br><span class="line">    page = paginator.page(pindex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;show_area.html&#x27;</span>,&#123;<span class="string">&#x27;page&#x27;</span>: page&#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>show_area.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% for pindex in page.paginator.page_range %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- &#123;# 判断是否是当前页 #&#125; --&gt;</span></span><br><span class="line">    &#123;% if pindex == page.number %&#125;</span><br><span class="line">        &#123;&#123; pindex &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; pindex &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;show_area/&#x27;</span>, views.show_area), <span class="comment"># do not remove</span></span><br><span class="line">path(<span class="string">&#x27;show_area/&lt;int:pindex&gt;&#x27;</span>, views.show_area),</span><br></pre></td></tr></table></figure><p>运行，可以进行正常的分页、翻页操作。</p><p>增加“上一页” “下一页” 功能，修改 <code>show_area.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示地区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for area in page %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; area.atitle &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 判断是否有上一页 --&gt;</span></span><br><span class="line">&#123;% if page.has_previous %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; page.previous_page_number &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for pindex in page.paginator.page_range %&#125;</span><br><span class="line">    <span class="comment">&lt;!-- &#123;# 判断是否是当前页 #&#125; --&gt;</span></span><br><span class="line">    &#123;% if pindex == page.number %&#125;</span><br><span class="line">        &#123;&#123; pindex &#125;&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; pindex &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 判断是否有下一页 --&gt;</span></span><br><span class="line">&#123;% if page.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/show_area/&#123;&#123; page.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s2.loli.net/2024/10/19/8MzOvGBADSr9VZK.png" alt="89-43.png"></p><h1 id="省市县选择案例"><a href="#省市县选择案例" class="headerlink" title="省市县选择案例"></a>省市县选择案例</h1><p>这部分内容其实偏前端。</p><p>新建 <code>./templates/areas.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>收件地址选择<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发起一个 ajax 请求 /prov，获取所有省级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取信息,使用 get</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 涉及到信息修改,使用 post</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;/prov&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 回调函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">            res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 prov 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">            prov = $(<span class="string">&#x27;#prov&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            for(i=0; i&lt;res.length; i++)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                id = res[i][0]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                atitle = res[i][1]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                option_str = &#x27;&lt;option value=&quot;&#x27;+id + &#x27;&quot;&gt;&#x27;+ atitle+ &#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // 向 prov 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                prov.append(option_str)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+ <span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 向 prov 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                prov.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定 prov 下拉列表框的 change 事件，获取省下面的市的信息</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#prov&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起一个 ajax 请求 /city，获取省下面市级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取点击省的 id</span></span></span><br><span class="line"><span class="language-javascript">            prov_id=$(<span class="variable language_">this</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&#x27;/city/&#x27;</span>+prov_id, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">                res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 city 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                city = $(<span class="string">&#x27;#city&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 city 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                city.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择市---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis = $(<span class="string">&#x27;#dis&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择县---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历取值添加到 city 下拉列表框中</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 向 city 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                    city.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定 city 下拉列表框的 change 事件，获取市下面的县的信息</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#city&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起一个 ajax 请求 /dis，获取市下面县级地区的信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取点击市的 id</span></span></span><br><span class="line"><span class="language-javascript">            city_id=$(<span class="variable language_">this</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&#x27;/dis/&#x27;</span>+city_id, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取返回的 json 数据</span></span></span><br><span class="line"><span class="language-javascript">                res = data.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis = $(<span class="string">&#x27;#dis&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空 dis 下拉列表框</span></span></span><br><span class="line"><span class="language-javascript">                dis.<span class="title function_">empty</span>().<span class="title function_">append</span>(<span class="string">&#x27;&lt;option&gt;---请选择县---&lt;/option&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 变量 res 数组，获取每一个元素:[地区 id, 地区标题]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 遍历取值添加到 dis 下拉列表框中</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>(res, <span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    id = item[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                    atitle = item[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    option_str = <span class="string">&#x27;&lt;option value=&quot;&#x27;</span>+id + <span class="string">&#x27;&quot;&gt;&#x27;</span>+ atitle+<span class="string">&#x27;&lt;/option&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 向 dis 下拉列表框中追加元素</span></span></span><br><span class="line"><span class="language-javascript">                    dis.<span class="title function_">append</span>(option_str)</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;prov&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择省---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择市---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;dis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>---请选择县---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>视图函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">areas</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;省市县选中案例&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;areas.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prov</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取所有省级地区的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取所有省级地区的信息</span></span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__isnull=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 2.变量 areas 并拼接出 json 数据：atitle id</span></span><br><span class="line">    areas_list = []</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</span><br><span class="line">        areas_list.append((area.<span class="built_in">id</span>, area.atitle))</span><br><span class="line">    <span class="comment"># 3.返回数据</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;data&#x27;</span>:areas_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">city</span>(<span class="params">request, pid=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;获取 pid 的下级地区的信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1.获取 pid 对应地区的下级地区</span></span><br><span class="line">    <span class="comment"># area = AreaInfo.objects.get(id=pid)</span></span><br><span class="line">    <span class="comment"># areas = area.areainfo_set.all()</span></span><br><span class="line">    areas = Areas.objects.<span class="built_in">filter</span>(aParent__id=pid)</span><br><span class="line">    <span class="comment"># 2.变量 areas 并拼接出 json 数据：atitle id</span></span><br><span class="line">    areas_list = []</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</span><br><span class="line">        areas_list.append((area.<span class="built_in">id</span>, area.atitle))</span><br><span class="line">    <span class="comment"># 3.返回数据,返回给前端，对方得到的是数组</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;data&#x27;</span>: areas_list&#125;)</span><br></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;areas/&#x27;</span>, views.areas),</span><br><span class="line">path(<span class="string">&#x27;prov/&#x27;</span>,views.prov),</span><br><span class="line">path(<span class="string">&#x27;city/&lt;int:pid&gt;&#x27;</span>,views.city),</span><br><span class="line">path(<span class="string">&#x27;dis/&lt;int:pid&gt;&#x27;</span>,views.city),</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://s2.loli.net/2024/10/19/y5aszKWZI4JC1re.png" alt="89-44.png"></p><p>上一级区域选择之后，到下一级菜单中会自动显示该区域的下级单位。</p><p>实际上此类功能现在一般交由第三方处理。</p><h1 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h1><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-tinymce --proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span><br></pre></td></tr></table></figure><p>在 settings 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;booktest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;tinymce&#x27;</span>,     <span class="comment"># add</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>继续在 settings 中增加配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TINYMCE_DEFAULT_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;theme&#x27;</span>: <span class="string">&#x27;silver&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;width&#x27;</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 <code>./day1010/urls.py</code> :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;tinymce/&#x27;</span>,include(<span class="string">&#x27;tinymce.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>在 <code>./booktest/models.py</code> 新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tinymce.models <span class="keyword">import</span> HTMLField</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfo</span>(models.Model):</span><br><span class="line">    gcontent=HTMLField()</span><br></pre></td></tr></table></figure><p>迁移。</p><p>在 <code>./booktest/admin.py</code> 中新增：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo,Areas,PicTest,GoodsInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfoAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">admin.site.register(GoodsInfo,GoodsInfoAdmin)</span><br></pre></td></tr></table></figure><p>可以在后台管理页面看到效果：</p><p><img src="https://s2.loli.net/2024/10/19/rVazPwmZcn36hSF.png" alt="89-45.png"></p><p>如何在前台看到呢？</p><p>新建 <code>./templates/show.html</code> :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>展示富文本编辑器内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">id:&#123;&#123;g.id&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;%autoescape off%&#125;</span><br><span class="line">&#123;&#123;g.gcontent&#125;&#125;</span><br><span class="line">&#123;%endautoescape%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123;g.gcontent|safe&#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">request</span>):</span><br><span class="line">    goods=GoodsInfo.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">    context=&#123;<span class="string">&#x27;g&#x27;</span>:goods&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;show.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><p>配置路由。运行成功。</p><p>如何在前台使用这个富文本编辑器呢？ <del>关于这个，小编也很好奇呢</del></p><p>本文章的示例代码参见：<br><a href="https://github.com/dropsong/py_webServer/tree/master/day1010">https://github.com/dropsong/py_webServer/tree/master/day1010</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;后端开发简介&quot;&gt;&lt;a href=&quot;#后端开发简介&quot; class=&quot;headerlink&quot; title=&quot;后端开发简介&quot;&gt;&lt;/a&gt;后端开发简介&lt;/h1&gt;&lt;p&gt;后端开发框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: Spring&lt;/li&gt;
&lt;li&gt;Python: Dja</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="中间件" scheme="https://dropsong.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="Django" scheme="https://dropsong.github.io/tags/Django/"/>
    
    <category term="后端" scheme="https://dropsong.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="sqlite" scheme="https://dropsong.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>承德行</title>
    <link href="https://dropsong.github.io/posts/a854c4ab.html"/>
    <id>https://dropsong.github.io/posts/a854c4ab.html</id>
    <published>2024-10-03T13:43:49.000Z</published>
    <updated>2024-10-07T03:23:20.085Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>const zd = 北漂日记::Z_2<br>const_list = {F, M, B, Z, zd}</p></div><p>前两天和 zd 去了承德。</p><p>我们首先在唐山取车，稍作停留就直接上高速，向承德进发。</p><p>承德是一座很有看头的城市，清王朝在这里留下了浓墨重彩的一笔。某著名热河蛮子，网红马督公，拍过一期关于承德的节目，用来当做电子榨菜再合适不过。</p><p>城市零星地散落在山峦之中，高速公路好像切中肯綮一般，变幻成桥梁和隧道在燕山山脉中肆意穿行。</p><p>山对人类是很亲切的，但是为什么呢？我想象自己是造物主，现在要为人类设出一片天地。最开始，是一片超平坦的世界。然后，我要隆起为山，凹陷为谷，花草风月、飞禽走兽填其中。于是我得到答案，山对人类是很亲切的，有了山，大地就从一个需要匍匐的对象，变成可以拥抱的了。</p><p>承德的人文、自然的景观相距很远，我们时间有限，就只打算看看人文的部分。</p><p>赶到时已是晚上，于是在宾馆安顿下，简单出去走了走。</p><p><img src="https://bu.dusays.com/2024/10/03/66feaa8de961c.jpg" alt="88-1"></p><p>这张照片也发给了领妹，得到一个“很绚”的评价。</p><p>第二天早上觅食的时候，偶遇世纪初集市：</p><p><img src="https://bu.dusays.com/2024/10/03/66feabe171d2e.jpg" alt="88-2.jpg"></p><p>避暑山庄：</p><p><img src="https://bu.dusays.com/2024/10/03/66feac53365b5.jpg" alt="88-3.jpg" title="著名的错别字"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac6aa83c0.jpg" alt="88-3dot5.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac69ea4d5.jpg" alt="88-4.jpg" title="小布达拉宫"></p><p><img src="https://bu.dusays.com/2024/10/07/6703540c5a854.jpg" alt="88-5.jpg" title="小长城"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac76839e3.jpg" alt="88-6.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feac7034f95.jpg" alt="88-7.jpg"></p><p>避暑山庄的山路大巴，司机开起来非常有自信。</p><p>山庄的小长城上，可以远眺外八庙，其中最惹眼的就是小布达拉宫。</p><p>下午去了小布达拉宫：</p><p><img src="https://bu.dusays.com/2024/10/03/66feadb1ae1d4.jpg" alt="88-8.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feadb0e0d3e.jpg" alt="88-9.jpg" title="天葬台"></p><p><img src="https://bu.dusays.com/2024/10/03/66feadb662854.jpg" alt="88-10.jpg"></p><p><img src="https://bu.dusays.com/2024/10/03/66feada54b40c.jpg" alt="88-11.jpg" title="金顶"></p><p>晚上，搭了高铁离开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;const zd = 北漂日记::Z_2&lt;br&gt;const_list = {F, M, B, Z, zd}&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;前两天和 zd 去了承德。&lt;/p&gt;
&lt;p&gt;我们首先在唐山取车，稍作停留就直接上</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://dropsong.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>横线纸</title>
    <link href="https://dropsong.github.io/posts/c96740b0.html"/>
    <id>https://dropsong.github.io/posts/c96740b0.html</id>
    <published>2024-09-29T02:34:20.000Z</published>
    <updated>2025-02-17T02:53:10.629Z</updated>
    
    <content type="html"><![CDATA[<div class="note success no-icon flat"><p>在本博客的生活类文章中，为保护相关人的隐私或其他原因，使用字母代替人名。<br>但是字母很容易冲突、重复，起名也是个大麻烦，因此我将它们分为全局 const 变量和局部变量。全局 const 变量指代的人名在整个博客的“生活”栏目下的文章保持一致——即该字母指代现实世界中的同一个人，而局部变量只在其出现的文章内保持一致。<br>在这篇文章之前的全局 const 变量：F、M、B、Z<br>同时，我宣布除此之外的在这之前使用的字母均为局部变量。<br>若需要增加全局 const 变量，我会在文章开头声明。例如我想声明 ALPHA 为全局 const 变量：<br>const ALPHA<br>考虑这种情形，我并不确定这次用到的人名下次会不会继续用到，因此新增全局 const 变量时需要引用到之前某个具体文章里的人物字母，则形式可以如下：<br>cosnt ALPHA = 文章名::ALPHA<br>在一篇文章开头添加 const_list 以增加可读性：<br>const_list = { … }<br>若一篇文章需要用一下，但是以后的出场机会应该也很少，故只是临时引用一下之前文章提到的人物：<br>using 文章名::ALPHA</p></div><div class="note info simple"><p>const_list = {F, M, B, Z}</p></div><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=28684050&auto=0&height=66"></iframe></body></center></html><p><br></p><p><i>权力认为牺牲者的痛苦是忘恩负义。</i></p><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><blockquote><p>……<br>近来心绪很差，我一向自以为比较温和的性格，近日常常会暴跳如雷，常处于一触即发的态势，我自己也不知道是怎么回事。<br>对从教这件事，我已是深恶痛绝！而□□□□对教师工资，每月都有扣项，从业初至现在，累计扣款计千余元，真有苛政如虎的感觉。时时让你怒从心头起，恶向胆边生。<br>暑假曾跟（你）提起的那个姑娘，已跟我正式分手。说不上“失恋”，因为根本无恋可谈。心痛的只是，真爱为谁？活到这把年纪，再谈“情”说“爱”，像是奢谈。不说玩深沉的话，点根烟，站在苍茫的天底下，闲看风气云散。要是心情更好的话，端住手中的烟，无声无息地燃烧，不用多久，身前身后，青烟袅袅 ……<br>以后再同那女孩路上相遇时，竟视若路人。我呢，宰相般大度地向她点头，差点哈腰，伊竟扬长而去，我则目瞪口呆。孔子云：世上唯小人与女人难养，此言真矣。中正又云：天要下雨，娘要嫁人，娘希匹，随她去吧！<br>闲聊到此，望兄指点迷津，救我一把！<br>□<br>97.11.8</p></blockquote><p>某天家中无人，我在翻箱倒柜的时候 —— 是的，我常常翻箱倒柜：</p><p><i>I am monarch of all I survey, My right there is none to dispute. </i></p><p>另一个某天 F 和 M 午休的时候，我和 B 对电视柜抽屉进行了硕果累累的发掘，然后把所有的光碟——也就是发掘的成果，砸了个稀烂。于是光碟这种东西在退出历史舞台之前，首先退出了我家。后来我也想过当时为什么要这么做，可能单纯是因为想听听光碟被掰成两半的声音。</p><p>但那是另外的事情，总之 ——</p><p>总之这次，我发现了这封信。</p><p>据 M 所说，F 也曾给 M 写过情书。这封信被 M 藏在一个顶层的柜子里，不知道 M 离开的时候有没有带走。</p><p>从结果上看来，两封信的主人公并不是同一个人。</p><p>F 比 M 大九岁，M 生下我的时候才二十出头，那么认识的时候也许 M 才刚刚成年，结合我的出生年份两人应该也没有认识很久。某年，M 在集上摆了个小摊卖袜子，被 F 看到了，F 就怂恿自己带的学生去买袜子 —— 这是我听到的起源故事。</p><p>F 还是符合那个年代对“文艺青年”的想象的，这点在家里的老相册里可以印证，也许他自己也这么想，但在我看来 F 更像是小钱德勒。F 总是梳着那个年代流行的发型，甚至在我看来还有点小帅，在不知何处的睡佛雕像前，他就是梳着这样的一头头发，踩在一块石头上摆了个 pose.</p><p>F 是个小镇中学教师，M 可能没上过初中。</p><p>早年，我们租房住。据 M 所说，她怀着的时候条件清贫到房东太太都看不下去，做了猪脚汤，端着送过来。我对那里唯二的记忆是，我在床边蹦跶摔下去，砸碎了一地脸盆；M 从缝纫机里面翻出一颗绿色包装的糖给我。</p><p>小时候 F 和 M 常带我出入 KTV ，我能回忆起旋转彩灯下，一群人在晃动的玻璃舞台上双手举过头顶、忘乎所以的样子。然而记忆却是这般神奇：当我回忆起这幅画面的时候，它是寂静无声的，但当我发现这场景应当有吵闹的流行音乐时，记忆又离我而去了。</p><p>我并不喜欢去 KTV，但仍然会去，只有如此，我才能得到 F 和 M 的承诺，在周末晚上可以多玩 30min 的赛尔号。</p><p>在去 KTV 消遣这件事上，F 和 M 并不总是一致行动。有一次，在一个看起来比较高级的 KTV 包厢里，里面一个女服务员在陪着他们唱歌。中途，两三人来到 F 面前，问 F 要不要大伙一起请个公主，立即有人附和：『哇哦，公主哎~』，但其中一人低下头看到 F 边的我和 B ，表情似乎难以察觉地扭曲了一下，脸像张揉皱的纸那样铺满了明暗的色块，说道，还是算了。</p><p>F 在 KTV 里常常会唱周杰伦的青花瓷。</p><p>不过，在 KTV 的经历也给我留下了一些别的印记：我的音乐列表中有不少世纪初的音乐。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>F 想要吃什么东西的时候，就会先问我和 B：“你们吃不吃，不吃我吃了啊？” 他会得到不吃的答案，然后心满意足地夹上他想吃的那块肉。</p><p>小时候去 C 市市区的一大期待是 KFC，一次快要回去时，终于要去买 KFC 的全家桶，于是 F 就去买，买完过马路和我们汇合时，差点被一辆摩托车撞到（很近，但没碰到）。F 讪笑一下：“买个全家桶差点被撞死。”</p><p>F 虽然几乎一辈子都在学校里，但也试图创业过几次。</p><p>最开始是一个淘宝店，那时候，淘宝才刚刚兴起。F 也不知道要卖些什么好，于是找了一个稳当的差事，替人充话费。这个活究竟是如何在淘宝店上操作的，现在的我已经无法想象，不过肯定是一个利润微薄的营生。小店门可罗雀，顾客也只是 F 拉来的亲戚，还按要求刷了好评，最后小店大约的确是关了。</p><p>之后，F 又盯上了镇里的净水器生意。跑来跑去，按照 F 的意思说，启动资金不够，遗憾离场。</p><p>F 也好给他人出商业主意。某个小区附近的门铺，F 怂恿一位女老板开个饭店，谁知真的开成了，竟也赚了不少钱。后来去那个饭店吃饭的时候，老板总要客气客气，只是回去的时候，F 往往感慨一番：“当初就是我撺掇人家开店的，现在生意多好了啊。” 恨恨的同时，又带点军师的孤芳自赏之味。</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>M 出轨一事，我在初三便已怀疑。</p><p>电话传来一个陌生男人的声音，其时我已变声。男人听到我的声音后，顿时慌了神，以为我是 F ，急忙应付几句就挂断了。当然，这是小事，可能是误会。但到高中的时候，就成为事实了。</p><p>在我考去市里的高中后，虽然我提出可以住宿，但 M 还是跟来陪读了，于是 F 和 B 住一起，M 就和我住一起。在这期间，发生了三件事。</p><p>M 和我遗弃了我们养的狗。一天，M 兴冲冲地抱了一只泰迪回来，说自己从别人家下的小狗里抱了一只，带过来养养。小狗长得很快，第一天只能舔舐掺了牛奶的粥，不久就能狼吞虎咽地干饭了。它学下楼梯的时候我就在下面护着防止它滚下来，它吠行人的时候我就拽拽绳子。但是有一天，它忽然就不行了。我们把它送走吧。我们不能送宠物医院吗？宠物医院很贵的，我们家里没钱。M 准备了一个麻袋，并且说自己带着这个不好开车，要求我开电动车，她坐在后面提着麻袋就行。回去的路上，她微信打电话给 F 和 B 说了这件事，还说我哭了，B 嘎嘎的笑出声来。</p><p>M 丢失了三万块钱后怀疑并声称是我偷的。我不记得这事是何时发生的，但这大致和弃狗这件事相差不久。F 首先发现了这件事并质问 M ，最后不了了之，但直到最后，都没有为了这三万块钱报警。大一的时候，F 和 M 互揭老底，说这三万是 M 偷着给了她的男人，当然，他们各执一词。</p><p>M 在我高烧 40 度后指责我给她添了麻烦。</p><p>M 不仅扮演她自己，也扮演过我。</p><p>我的 QQ 号是小学的时候 M 帮着注册的，因此密码和密保也是 M 设置的，但在高中之前，我没有手机，F 和 M 每周只让我碰 30 分钟电脑。同学向我要 QQ 号的时候，我理所当然的把这唯一的 QQ 号告诉他们。M 就在我不知道的时候，用我的身份和他们聊天，包括我第二次暗恋的对象 w。我不知道 M 在这样的角色扮演中尝到了什么滋味，后来我也会想，M 是否是在补偿自己没怎么上过学的青少年时期。总之结果是，我在一个周末删除了所有初中及以前的 QQ 好友，并在高中拿到自己手机后才修改了 QQ 密码。</p><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>我有强迫症。</p><p>无意义的重复。我在阅读的时候，常常会需要重复阅读之前已经读过的句子，效率极低。后来，这个强迫症也延续到了视频上，在考研看网课的时候也影响极大，直到今天都在折磨我。</p><p>我原本并没有强迫症，一步步的发展是有迹可循的。</p><p>小学的时候，某一次数学测试，题量很大，全是密密麻麻的填空题，我只得了 69 分（大家考的都不好）。晚上放学时，F 进到班级，数学老师带着一种江郎才尽的口气不无遗憾地告知了 F，彼时一些同学还在教室里，有些已经在外面的走廊里排队。F 忽然怪吼一声，音量是我从未听过的，至于他是怎样训斥的，我当时就没有听见了。</p><p>在那之后，数学考试时我就会变得极度紧张。</p><p>这种强迫行为一开始并没有发展到阅读上，因为我记得那时候我还可以愉快地看《三侠五义》《围城》之类的长小说。</p><p>初一的时候，由于 w 的缘故，强迫症消退了很多。但是后来，我甚至会重复自己的笔画：在已经写下的字上重复描摹。初二的班长借过我的数学作业，可能注意过这一奇怪的现象。</p><p>后来，我的强迫行为发展到阅读，这使我语文考试进度巨慢，只能压缩作文的时间。也渐渐难以支撑长篇小说（或者说阅读长小说需要花费更多的精力）。</p><h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><p>F 半强制地决定了我的高考志愿。</p><p>于是我便在本可以去学计算机专业的情况下，念了某管理专业。这就是后话了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success no-icon flat&quot;&gt;&lt;p&gt;在本博客的生活类文章中，为保护相关人的隐私或其他原因，使用字母代替人名。&lt;br&gt;但是字母很容易冲突、重复，起名也是个大麻烦，因此我将它们分为全局 const 变量和局部变量。全局 const 变量</summary>
      
    
    
    
    <category term="生活" scheme="https://dropsong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 进阶</title>
    <link href="https://dropsong.github.io/posts/85b8f708.html"/>
    <id>https://dropsong.github.io/posts/85b8f708.html</id>
    <published>2024-09-19T04:40:27.000Z</published>
    <updated>2024-10-30T05:17:46.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><p>这里是 Python 的一些零碎知识点。</p><p>多值参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age = <span class="number">18</span>, gender = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># (2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True&#125;</span></span><br></pre></td></tr></table></figure><p>另外，了解元组和字典的拆包（自行查找资料）。</p><p><code>if __name__ == &quot;__main__&quot;</code> 是什么？</p><blockquote><p>该语句下面缩进的内容在<code>python xxx.py</code>时会执行，而在<code>import xxx</code>时不会执行。</p></blockquote><p><strong>类属性</strong>，类似于 C++ 中的<strong>类的静态成员</strong>。</p><p><strong>类方法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod   </span><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_tool_cnt</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;工具对象总数： %d&quot;</span> % cls.count)</span><br></pre></td></tr></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>实现起来比 C++ 简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    instance = <span class="literal">None</span>    <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建对象，分配空间&quot;</span>)</span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, music_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;播放器初始化&quot;</span>)</span><br><span class="line">        self.music_name = music_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">player1 = MusicPlayer(<span class="string">&#x27;弯弯的月亮&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(player1.music_name)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer(<span class="string">&#x27;竹楼情歌&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(player2.music_name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(player1)</span><br><span class="line"><span class="built_in">print</span>(player2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">创建对象，分配空间</span></span><br><span class="line"><span class="string">播放器初始化</span></span><br><span class="line"><span class="string">弯弯的月亮</span></span><br><span class="line"><span class="string">播放器初始化</span></span><br><span class="line"><span class="string">竹楼情歌</span></span><br><span class="line"><span class="string">&lt;__main__.MusicPlayer object at 0x7f4c18f16790&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MusicPlayer object at 0x7f4c18f16790&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="观其大略"><a href="#观其大略" class="headerlink" title="观其大略"></a>观其大略</h2><p>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下（伪代码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型 1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型 2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型 <span class="number">3</span>, 错误类型 <span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型 3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无论是否有异常，都会执行的代码&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h2><p>当函数执行出现异常，会将异常传递给函数的调用一方。如果传递到主程序，仍然没有异常处理，程序才会被终止。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    <span class="keyword">return</span> demo1() <span class="comment"># 利用异常的传递性，在主程序捕获异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(demo2())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输入整数：abc</span></span><br><span class="line"><span class="string">未知错误 invalid literal for int() with base 10: &#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="抛出-raise-异常"><a href="#抛出-raise-异常" class="headerlink" title="抛出 raise 异常"></a>抛出 raise 异常</h2><p>应用场景：<br>在开发中，除了代码执行出错 Python 解释器会抛出异常之外，还可以<strong>根据应用程序特有的业务需求主动抛出异常。</strong></p><p>示例：<br>提示用户输入密码，如果长度少于 8，抛出异常。当前函数只负责提示用户输入密码，如果密码长度不正确，需要其他的函数进行额外处理，因此可以抛出异常，由其他需要处理的函数捕获异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>():</span><br><span class="line"></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主动抛出异常&quot;</span>)</span><br><span class="line">    ex = Exception(<span class="string">&quot;密码长度不够&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(input_password())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入密码：123</span></span><br><span class="line"><span class="string">主动抛出异常</span></span><br><span class="line"><span class="string">密码长度不够</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入密码：1234234545</span></span><br><span class="line"><span class="string">1234234545</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>让自定义异常像通用异常一样使用（若链接内容不可访问，可去 archive.ph 查找）：<br><a href="https://python3-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html">https://python3-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html</a></p><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><p>原则：每一个文件都可以被导入。</p><p>一个独立的 Python 文件就是一个模块。在导入文件时，文件中所有没有任何缩进的代码，都会被执行一遍。因此需要配合 <code>__name__</code> 属性使用。</p><p><strong>包是一个包含多个模块的特殊目录。</strong> 目录下有一个特殊的文件 <code>__init__.py</code></p><p>在外界使用包中的模块：</p><p><img src="https://s2.loli.net/2024/09/16/6hNBfD2TYicIrqP.png" alt="86-1.png"></p><p>如果希望自己开发的模块，分享给其他人，可以按照以下步骤操作：</p><ol><li>制作发布压缩包<ol><li>创建 <code>setup.py</code></li><li>构建模块</li><li>生成发布压缩包</li></ol></li><li>安装模块</li></ol><p>创建 <code>setup.py</code>：</p><p><img src="https://s2.loli.net/2024/09/16/2NuGxiRUlYeVAwH.png" alt="86-2.png"></p><p>构建模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py build</span><br></pre></td></tr></table></figure><p>生成发布压缩包（注意：要制作哪个版本的模块，就使用哪个版本的解释器执行）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py sdist</span><br></pre></td></tr></table></figure><p>安装模块（示例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf wd_message-1.0.tar.gz</span><br><span class="line">cd wd_message-1.0</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>卸载模块（直接从安装目录下，把安装模块的目录删除就可以）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/lib/python3.6/dist-packages/</span><br><span class="line">sudo rm -r wd_message*</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>没什么好记录的，大致和 Cpp 差不多。</p><p>展示目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dir_dfs</span>(<span class="params">path, width</span>):</span><br><span class="line">    file_list = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*width + filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path+<span class="string">&#x27;/&#x27;</span>+filename):</span><br><span class="line">            dir_dfs(path+<span class="string">&#x27;/&#x27;</span>+filename, width+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dir_dfs(<span class="string">&#x27;.&#x27;</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="手撕红黑树"><a href="#手撕红黑树" class="headerlink" title="手撕红黑树"></a>手撕红黑树</h1><p>之前文章里写过平衡二叉树（虽然没写完），一些旋转操作的思路是通的。</p><div class="row"><iframe src="https://drive.google.com/file/d/1CYtVFas-RN0-FShGuYp9paXW_fWPQ9fD/preview" style="width:100%; height:550px"></iframe></div><h1 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h1><p>游戏素材在本小节末尾放出。</p><p>验证是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pygame.examples.aliens</span><br></pre></td></tr></table></figure><p>游戏中的坐标系：</p><p><img src="https://s2.loli.net/2024/09/19/KjPf6Dv53UNyoSi.png" alt="86-3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init() <span class="comment"># 使用其他模块之前，必须先 init</span></span><br><span class="line"></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">100</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">125</span>)  <span class="comment"># 描述矩形区域</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的原点 %d %d&quot;</span> % (hero_rect.x, hero_rect.y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的尺寸 %d %d&quot;</span> % (hero_rect.width, hero_rect.height))</span><br><span class="line"><span class="comment"># size 属性会返回矩形区域的 (宽, 高) 元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d %d&quot;</span> % hero_rect.size)</span><br><span class="line"></span><br><span class="line">pygame.quit() <span class="comment"># 卸载所有 pygame 模块</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pygame 2.6.0 (SDL 2.28.4, Python 3.12.1)</span></span><br><span class="line"><span class="string">Hello from the pygame community. https://www.pygame.org/contribute.html</span></span><br><span class="line"><span class="string">英雄的原点 100 500</span></span><br><span class="line"><span class="string">英雄的尺寸 120 125</span></span><br><span class="line"><span class="string">120 125</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>初始化游戏显示窗口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.set_mode()</span><br></pre></td></tr></table></figure><p>刷新屏幕内容显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.display.update()</span><br></pre></td></tr></table></figure><p>set_mode 方法：</p><ul><li>作用：创建游戏显示窗口</li><li>resolution 指定屏幕的 宽 和 高，默认创建的窗口大小和屏幕大小一致</li><li>flags 参数指定屏幕的附加选项，例如是否全屏等等，默认不需要传递</li><li>depth 参数表示颜色的位数，默认自动匹配</li><li><strong>返回值</strong>：暂时可以理解为游戏的屏幕，游戏的元素 都需要被绘制到游戏的屏幕上</li><li><strong>注意</strong>：必须使用变量记录 set_mode 方法的返回结果！因为：后续所有的图像绘制都基于这个返回结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_mode(resolution=(<span class="number">0</span>,<span class="number">0</span>), flags=<span class="number">0</span>, depth=<span class="number">0</span>) -&gt; Surface</span><br></pre></td></tr></table></figure><p>图像、游戏循环、游戏时钟、监听事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line">pygame.init() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像数据</span></span><br><span class="line">bg = pygame.image.load(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"><span class="comment"># blit 绘制图像</span></span><br><span class="line">screen.blit(bg, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主角小飞机</span></span><br><span class="line">hero = pygame.image.load(<span class="string">&quot;./images/me1.png&quot;</span>)</span><br><span class="line">screen.blit(hero, (<span class="number">150</span>,<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新屏幕</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时钟对象</span></span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录小飞机的初始位置</span></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">150</span>, <span class="number">300</span>, <span class="number">102</span>, <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 指定代码执行的频率</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 捕获事件</span></span><br><span class="line">    event_list = pygame.event.get()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(event_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(event_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> event_list:</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;游戏退出&quot;</span>)</span><br><span class="line">            pygame.quit()</span><br><span class="line">            exit() <span class="comment"># 直接终止当前正在执行的程序</span></span><br><span class="line"></span><br><span class="line">    hero_rect.y -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(hero_rect.bottom &lt; <span class="number">0</span>):</span><br><span class="line">        hero_rect.y = <span class="number">700</span></span><br><span class="line"></span><br><span class="line">    screen.blit(bg, (<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    screen.blit(hero, hero_rect)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure><p>在刚刚完成的案例中，图像加载、位置变化、绘制图像都需要程序员编写代码分别处理，为了简化开发步骤，pygame 提供了两个类：</p><ul><li><code>pygame.sprite.Sprite</code> 存储图像数据 image 和 位置 rect 的对象</li><li><code>pygame.sprite.Group</code></li></ul><p><strong>精灵</strong>：</p><ol><li>在游戏开发中，通常把显示图像的对象叫做精灵 Sprite</li><li>精灵有两个重要的属性<ol><li><code>image</code> 要显示的图像</li><li><code>rect</code> 图像要显示在屏幕的位置</li></ol></li><li>默认的 <code>update()</code> 方法什么也没做。<strong>子类可以重写此方法</strong>，在每次刷新屏幕时，更新精灵位置</li><li><strong>注意</strong>：<code>pygame.sprite.Sprite</code> 并没有提供 image 和 rect 两个属性。需要程序员从 pygame.sprite.Sprite 派生子类，并在子类的初始化方法中，设置 image 和 rect 属性。</li></ol><p><strong>精灵组</strong>：</p><ol><li>一个<strong>精灵组</strong>可以包含多个<strong>精灵</strong>对象</li><li>调用<strong>精灵组</strong>对象的 <code>update()</code> 方法可以自动调用<strong>组内每一个精灵</strong>的 <code>update()</code> 方法</li><li>调用精灵组对象的 <code>draw</code> 方法可以将组内每一个精灵的 image 绘制在 rect 位置</li><li><strong>注意</strong>：仍然需要调用 <code>pygame.display.update()</code> 才能在屏幕看到最终结果</li></ol><p>背景交替滚动的实现思路：</p><p><img src="https://s2.loli.net/2024/09/19/wyk6DFBh5iMOHGI.png" alt="86-4.png"></p><p>pygame 提供了两个非常方便的方法实现碰撞检测：</p><ul><li><code>pygame.sprite.groupcollide()</code> <strong>两个精灵组</strong>中所有精灵的碰撞检测</li><li><code>pygame.sprite.spritecollide()</code> 判断<strong>某个精灵</strong>和指定精灵组中的精灵的碰撞</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupcollide(group1, group2, dokill1, dokill2, collided = <span class="literal">None</span>) -&gt; Sprite_dict</span><br><span class="line"><span class="comment"># 如果将 dokill 设置为 True，则发生碰撞的精灵将被自动移除</span></span><br><span class="line"><span class="comment"># collided 参数是用于计算碰撞的回调函数，如果没有指定，则每个精灵必须有一个 rect 属性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spritecollide(sprite, group, dokill, collided = <span class="literal">None</span>) -&gt; Sprite_list</span><br><span class="line"><span class="comment"># 如果将 dokill 设置为 True，则 指定精灵组 中 发生碰撞的精灵将被自动移除</span></span><br><span class="line"><span class="comment"># collided 参数是用于计算碰撞的回调函数，如果没有指定，则每个精灵必须有一个 rect 属性</span></span><br><span class="line"><span class="comment"># 返回 精灵组 中跟 精灵 发生碰撞的 精灵列表</span></span><br></pre></td></tr></table></figure><p>整体的代码相当简洁，共两个代码文件和若干素材文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plane_sprites.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏幕大小的常量对象</span></span><br><span class="line">SCREEN_RECT = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">700</span>)</span><br><span class="line"><span class="comment"># 刷新的帧率</span></span><br><span class="line">FRAME_PER_SEC = <span class="number">15</span></span><br><span class="line"><span class="comment"># 创建敌机的定时器常量，为事件定义不同名字的常量，从而能够区分，从24算起</span></span><br><span class="line">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class="line"><span class="comment"># 英雄发射子弹事件，为事件定义不同名字的常量，从而能够区分</span></span><br><span class="line">HERO_FIRE_EVENT = pygame.USEREVENT + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image_name, speed=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义对象的属性</span></span><br><span class="line">        self.image = pygame.image.load(image_name)</span><br><span class="line">        self.rect = self.image.get_rect() <span class="comment"># 自动获取图像的尺寸</span></span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在屏幕的垂直方向上移动</span></span><br><span class="line">        self.rect.y += self.speed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Background</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, is_alt=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class="line">        <span class="keyword">if</span> is_alt:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类的方法实现</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否移出屏幕，如果移出屏幕，将图像设置到屏幕的上方</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/enemy1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 指定敌机的初始随机速度 1 ~ 3</span></span><br><span class="line">        self.speed = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 指定敌机的初始随机位置</span></span><br><span class="line">        self.rect.bottom = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        max_x = SCREEN_RECT.width - self.rect.width  <span class="comment">#减去自身宽度</span></span><br><span class="line">        self.rect.x = random.randint(<span class="number">0</span>, max_x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，保持垂直方向的飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            <span class="comment"># print(&quot;飞出屏幕，需要从精灵组删除...&quot;)</span></span><br><span class="line">            <span class="comment"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;敌机挂了 %s&quot; % self.rect)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法，设置image&amp;speed</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/me1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 设置英雄的初始位置</span></span><br><span class="line">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class="line">        self.rect.bottom = SCREEN_RECT.bottom - <span class="number">120</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 创建子弹的精灵组</span></span><br><span class="line">        self.bullets = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 英雄在水平方向移动</span></span><br><span class="line">        self.rect.x += self.speed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 控制英雄不能离开屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class="line">            self.rect.right = SCREEN_RECT.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发射子弹...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 1. 创建子弹精灵</span></span><br><span class="line">            bullet = Bullet()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 设置精灵的位置</span></span><br><span class="line">            bullet.rect.bottom = self.rect.y - i * <span class="number">20</span></span><br><span class="line">            bullet.rect.centerx = self.rect.centerx</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 将精灵添加到精灵组</span></span><br><span class="line">            self.bullets.add(bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/bullet1.png&quot;</span>, -<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断子弹是否飞出屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.bottom &lt; <span class="number">0</span>:</span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子弹被销毁...&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plane_main.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> plane_sprites <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaneGame</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏初始化&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 创建游戏的窗口</span></span><br><span class="line">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class="line">        <span class="comment"># 2. 创建游戏的时钟</span></span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        <span class="comment"># 3. 调用私有方法，精灵和精灵组的创建,也是初始化</span></span><br><span class="line">        self.__create_sprites()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 设置定时器事件 - 创建敌机　设定敌机的刷新时间为1s，</span></span><br><span class="line">        <span class="comment"># 英雄子弹事件的刷新频率为0.5秒</span></span><br><span class="line">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class="number">1000</span>)</span><br><span class="line">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__create_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建背景精灵和精灵组</span></span><br><span class="line">        bg1 = Background()</span><br><span class="line">        bg2 = Background(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建敌机的精灵组</span></span><br><span class="line">        self.enemy_group = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建英雄的精灵和精灵组</span></span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 1. 设置刷新帧率</span></span><br><span class="line">            self.clock.tick(FRAME_PER_SEC)</span><br><span class="line">            <span class="comment"># 2. 事件监听</span></span><br><span class="line">            self.__event_handler()</span><br><span class="line">            <span class="comment"># 3. 碰撞检测</span></span><br><span class="line">            self.__check_collide()</span><br><span class="line">            <span class="comment"># 4. 更新/绘制精灵组</span></span><br><span class="line">            self.__update_sprites()</span><br><span class="line">            <span class="comment"># 5. 更新显示</span></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__event_handler</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断是否退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == CREATE_ENEMY_EVENT:</span><br><span class="line">                <span class="comment"># print(&quot;敌机出场...&quot;)</span></span><br><span class="line">                <span class="comment"># 创建敌机精灵</span></span><br><span class="line">                enemy = Enemy()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将敌机精灵添加到敌机精灵组</span></span><br><span class="line">                self.enemy_group.add(enemy)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == HERO_FIRE_EVENT:</span><br><span class="line">                self.hero.fire()</span><br><span class="line">            <span class="comment"># elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:</span></span><br><span class="line">            <span class="comment">#     print(&quot;向右移动...&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用键盘提供的方法获取键盘按键 - 按键元组</span></span><br><span class="line">        keys_pressed = pygame.key.get_pressed()</span><br><span class="line">        <span class="comment"># 判断元组中对应的按键索引值 1</span></span><br><span class="line">        <span class="keyword">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class="line">            self.hero.speed = <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class="line">            self.hero.speed = -<span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hero.speed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_collide</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 子弹摧毁敌机</span></span><br><span class="line">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 敌机撞毁英雄</span></span><br><span class="line">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断列表时候有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(enemies) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 让英雄牺牲</span></span><br><span class="line">            self.hero.kill()</span><br><span class="line">            m = <span class="string">&quot;./sound/use_bomb.wav&quot;</span></span><br><span class="line">            pygame.mixer.music.load(m)</span><br><span class="line">            pygame.mixer.music.play()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 结束游戏</span></span><br><span class="line">            PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        self.back_group.update()</span><br><span class="line">        self.back_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.enemy_group.update()</span><br><span class="line">        self.enemy_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero_group.update()</span><br><span class="line">        self.hero_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero.bullets.update()</span><br><span class="line">        self.hero.bullets.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__game_over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pygame.quit()</span><br><span class="line">        exit()  <span class="comment">#进程结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建游戏对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    game = PlaneGame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动游戏</span></span><br><span class="line">    game.start_game()</span><br></pre></td></tr></table></figure><p>其中，<a href="https://drive.google.com/file/d/1rCyISM2Y4d4EBlUiZn0DUdHfP-PNMIVD/view?usp=drive_link">图片素材、音频素材</a>被放在 images 和 sound 文件夹下，被组织在上面两份代码的同级目录下。</p><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><p>查看或配置网卡信息（ifconfig）：</p><p><img src="https://s2.loli.net/2024/09/20/YGLRkjzsNTeniZh.png" alt="86-5.png"></p><p>路由查看：route 可以查看路由。<code>route -n</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">内核 IP 路由表</span><br><span class="line">目标           网关          子网掩码</span><br><span class="line">0.0.0.0       192.168.19.2  0.0.0.0</span><br><span class="line">169.254.0.0   0.0.0.0       255.255.0.0</span><br><span class="line">192.168.19.0  0.0.0.0       255.255.255.0</span><br></pre></td></tr></table></figure><p><code>0.0.0.0</code> 代表任意目的地，网关就是转发数据的设备。</p><p><strong>怎样查看端口及谁使用了端口？</strong></p><ul><li>用 <code>netstat -an</code> 查看端口状态</li><li><code>sudo lsof -i [tcp/udp]:2425</code> 必须是 root 才能查看</li><li><code>sudo lsof -i tcp:22</code> 查看哪一个进程用了这个端口</li><li><code>ps -elf |grep udp_server</code> 查看某个进程是否还在</li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 通信流程：</p><p><img src="https://s2.loli.net/2024/09/21/PAR6358lEycF4wo.png" alt="86-6.png"></p><p>port 的形象理解：</p><p><img src="https://s2.loli.net/2024/09/21/PtQ1jET79kDBm5w.png" alt="86-7.png"></p><p>看一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">s.bind(addr) <span class="comment"># 失败直接抛出异常</span></span><br><span class="line">temp = s.recvfrom(<span class="number">100</span>) <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">1</span>])</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>运行这段代码，然后在终端中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ netstat -an|grep 7656</span><br><span class="line">udp        0      0 192.168.31.106:7656     0.0.0.0:* </span><br></pre></td></tr></table></figure><p>终止运行（则查找不到了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ netstat -an|grep 7656</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">c.sendto(<span class="string">b&#x27;hello&#x27;</span>, dest_addr) <span class="comment"># 必须发送字节流</span></span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><p>在两个终端中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 server.py</span><br><span class="line">python3 client.py </span><br><span class="line">b&#x27;hello&#x27;</span><br><span class="line">(&#x27;192.168.31.106&#x27;, 33817)</span><br></pre></td></tr></table></figure><p>发送中文、全双工：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line">s.bind(addr) <span class="comment"># 失败直接抛出异常</span></span><br><span class="line">data, c_addr = s.recvfrom(<span class="number">100</span>) <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(c_addr)</span><br><span class="line">s.sendto(<span class="string">&#x27;?？??？？&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>), c_addr)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">c = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">7656</span>)</span><br><span class="line"><span class="comment"># c.sendto(b&#x27;hello&#x27;, dest_addr) # 必须发送字节流</span></span><br><span class="line">c.sendto(<span class="string">&#x27;zui &amp; 罚&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>), dest_addr) <span class="comment"># 必须发送字节流</span></span><br><span class="line">data , _ = c.recvfrom(<span class="number">100</span>) <span class="comment"># _ 表示我们不想要</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">c.close() <span class="comment"># 关闭时端口会释放</span></span><br></pre></td></tr></table></figure><p>终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 server.py </span><br><span class="line">zui &amp; 罚</span><br><span class="line">(&#x27;192.168.31.106&#x27;, 58158)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 client.py </span><br><span class="line">?？??？？</span><br></pre></td></tr></table></figure><p>当 UDP <code>recvfrom</code> 函数内填的大小，小于 client 发来的数据的大小时，<strong>Windows 会报错，Linux 会截断数据。</strong></p><p><code>sendto</code> 和 <code>recvfrom</code> 次数对等。</p><p>相关的命令总结：</p><ul><li>查看 ip <code>ifconfig</code></li><li>查看路由 <code>route -n</code></li><li>端口状态<ul><li><code>netstat -an|grep 端口</code></li><li>端口正在被哪个进程使用 <code>sudo lsof -i udp:2000</code></li></ul></li><li>进程查看 <code>ps -elf|grep 进程名字</code></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>可以查看之前的笔记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行 send, recv 操作</span></span><br><span class="line">    handle_c_fd.send(<span class="string">&#x27;我是服务器&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    data = c.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    c.send(<span class="string">&#x27;我是客户端&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>其实之前的笔记中，代码的变量命名容易造成误解，这里的更好。</p><p>演示 TCP 特性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行 send, recv 操作</span></span><br><span class="line">    handle_c_fd.send(<span class="string">&#x27;abcdefghij&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;192.168.31.106&#x27;, 57226)</span></span><br><span class="line"><span class="string">客户端消息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    data = c.recv(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data = c.recv(<span class="number">5</span>) <span class="comment"># TCP 可以，而 UDP 不行的操作</span></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    c.send(<span class="string">&#x27;客户端消息&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">abcde</span></span><br><span class="line"><span class="string">fghij</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>下面我们实现一个简易的文件下载器（实际上它可以发送 txt, jpg 等格式的文件）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_content</span>(<span class="params">file_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取文件的内容&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有下载的文件:%s&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照如下方式运行：python3 xxx.py 7890&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 运行方式为 python3 xxx.py 7890</span></span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 socket</span></span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">&#x27;192.168.31.106&#x27;</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>) <span class="comment"># 接收 1024 个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对方请求下载的文件名为:%s&quot;</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以 rb 方式打开，所以 file_content 中的数据已经是二进制的格式，因此不需要 encode 编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = <span class="string">&#x27;192.168.31.106&#x27;</span></span><br><span class="line">    server_port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入服务器 port:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要下载的文件名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">    recv_data = <span class="string">b&quot;&quot;</span>  <span class="comment"># 用于存储接收到的所有数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = tcp_client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 每次接收 1024 字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 如果没有数据，跳出循环</span></span><br><span class="line">        recv_data += chunk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;[接收]&quot;</span>+file_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意：<br><strong>若一次性接收数据，网络传输的数据量不一定能一次性到达。</strong> 即使将接收缓冲区的大小设置为 1024<em>40000，仍可能出现问题。这是因为 TCP 数据传输的机制不是一次性发送所有数据（尤其在网络延迟或带宽有限的情况下），实际上，数据是以小块的形式分批到达的。<em>*因此需要循环接收数据，直到完整地接收到文件的全部内容。</em></em></p><p>提问：<strong>TCP 为什么要三次握手？</strong><br><strong>省流</strong>：两次握手不足够，会造成 server 死锁。（可以分两种情况解释）<br><strong>详细</strong>：<br>假设我们设计为两次握手。<br>（一）<br>A(client) 机要连到 B(server) 机，但连接信息在网络中延误了。<br>于是A 机重新发送，这次 B 收到了，于是 B 发信息回 A，两机建立连接。传输完毕后，断开连接。<br>但此时，一开始的连接信息到达 B 机，于是 B 机发信息给 A，此时 B 机就认为已和 A 建立连接，B 机就等待 A 传数据过来，永远地等待在 recv 接口上。发生死锁。<br>（二）<br>C 给 S 发送一个连接请求分组，S 收到此分组，并发送确认应答分组。按照两次握手的协定，S 认为连接已经建立，可以开始发送数据分组。<br>但是，S 的应答分组在传输中丢失。<br>C 不知道 S 是否已准备好，不知道 S 建议什么样的序列号，不知道 S 是否收到自己的连接请求分组。在这种情况下，C 认为连接还未建立成功，将忽略 S 发来的任何数据分组，只等待连接确认应答分组。而 S 在发出的数据分组超时后，重复发送同样的分组。这样就形成了死锁。</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>安装 wireshark ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install wireshark</span><br></pre></td></tr></table></figure><p>windows 和 macos 安装比较容易，linux 安装参考：<br><a href="https://www.wireshark.org/docs/wsug_html_chunked/ChapterBuildInstall.html">https://www.wireshark.org/docs/wsug_html_chunked/ChapterBuildInstall.html</a></p><p>在 Debian 系统下运行 Wireshark 时遇到 “permission denied” 问题，通常是由于普通用户没有足够的权限捕获网络接口上的数据包。Wireshark 需要更高的权限来访问网络设备。</p><p>在安装过程中，系统会询问是否允许非 root 用户捕获数据包。选择“是”。</p><p><strong>将当前用户添加到 wireshark 组</strong>  </p><p>Wireshark 使用 wireshark 组来管理捕获数据包的权限。将当前用户添加到 wireshark 组中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG wireshark <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>然后，重新登录以使组更改生效，或运行以下命令刷新当前会话的用户组信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp wireshark</span><br></pre></td></tr></table></figure><p><strong>重新配置 dumpcap 权限</strong></p><p>Wireshark 使用一个名为 dumpcap 的工具来捕获数据包。需要确保它拥有合适的权限，以便普通用户可以使用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/bin/dumpcap</span><br><span class="line">sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p>运行以下命令来确认 dumpcap 具有正确的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getcap</span> /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p>输出应该类似于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/dumpcap = cap_net_admin,cap_net_raw+eip</span><br></pre></td></tr></table></figure><p>现在应该可以在普通用户模式下正常运行 Wireshark 而不会遇到“permission denied”错误。直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wireshark</span><br></pre></td></tr></table></figure><h2 id="TCP-数据报头"><a href="#TCP-数据报头" class="headerlink" title="TCP 数据报头"></a>TCP 数据报头</h2><p>四次挥手（这个图只是为了展示 ACK 在哪）：</p><p><img src="https://s2.loli.net/2024/09/23/wtdNAQm2C9OovKc.png" alt="86-8.png"></p><p>ACK 位置 1 表明确认号是合法的。如果 ACK 为 0，那么数据报不包含确认信息，确认字段被省略。</p><p><img src="https://s2.loli.net/2024/09/23/TZe42h98uqtJXMW.png" alt="86-9.png"></p><p>SYN：用于建立连接。当 SYN=1 时，表示发起一个连接请求。</p><p>FIN：用于释放连接。当 FIN=1 时，表明此报文段的发送端的数据已发送完成，并要求释放连接。</p><h2 id="UDP-代替-TCP"><a href="#UDP-代替-TCP" class="headerlink" title="UDP 代替 TCP"></a>UDP 代替 TCP</h2><p>相比而言，UDP 能传输更多的数据（一种典型情况：1472 &gt; 1460），这在经济上的好处是显而易见的（带宽很贵）；另外，UDP 在无线环境下表现比 TCP 更好。因此有不少用 UDP 代替 TCP 的研究。</p><p>可以使用 UDP 模仿 TCP ，但是需要程序员自己设计应用层协议，实现相关功能，缓存、加序列号、重传等。</p><h2 id="CS、BS-模式"><a href="#CS、BS-模式" class="headerlink" title="CS、BS 模式"></a>CS、BS 模式</h2><p>CS 模式： client/server 模式。</p><ul><li>客户端位于目标主机上可以保证性能，将数据缓存至客户端本地，从而<strong>提高数据传输效率</strong>。</li><li>一般来说客户端和服务器程序由一个开发团队创作，所以他们之间所<strong>采用的协议相对灵活</strong>。</li><li>客户端和服务器都需要有一个开发团队来完<br>成开发。<strong>工作量将成倍提升，开发周期较长</strong>。</li><li>从用户角度出发，需要将客户端安插至用户主机上，对<strong>用户主机的安全性构成威胁</strong>。</li></ul><p>BS 模式： browser/server 模式。</p><ul><li>没有独立的客户端，使用标准浏览器作为客户端，其<strong>工作开发量较小</strong>。</li><li><strong>移植性非常好，不受平台限制</strong>。</li><li>由于使用第三方浏览器，因此<strong>网络应用支持受限</strong>。</li><li>没有客户端放到对方主机上，<strong>缓存数据不尽如人意，从而传输数据量受到限制</strong>。</li><li>采用标准 http 协议进行通信，<strong>协议选择不灵活</strong>。</li></ul><h2 id="tcp-长连接和短连接"><a href="#tcp-长连接和短连接" class="headerlink" title="tcp 长连接和短连接"></a>tcp 长连接和短连接</h2><p>TCP 短连接：</p><ol><li>client 向 server 发起连接请求</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，此时双方任何一个都可以发起 close 操作</li></ol><p>TCP 长连接：</p><ol><li>client 向 server 发起连接</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，连接不关闭</li><li>后续读写操作…</li><li>长时间操作之后 client 发起关闭请求</li></ol><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>使用 epoll 实现的小型对话程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    handle_c_fd, c_addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span>(c_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 handle_c_fd, sys.stdin</span></span><br><span class="line">    epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==handle_c_fd.fileno():</span><br><span class="line">                data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>() <span class="comment"># server 说话，发给对方</span></span><br><span class="line">                handle_c_fd.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    handle_c_fd.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line"></span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 c, sys.stdin</span></span><br><span class="line">    epolL.register(c.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==c.fileno():</span><br><span class="line">                data = c.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data: </span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>()</span><br><span class="line">                c.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>改进，client 断开还可以再次连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    epolL.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上、注册</span></span><br><span class="line">                handle_c_fd, c_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(c_addr)</span><br><span class="line">                epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i==handle_c_fd.fileno():</span><br><span class="line">                data = handle_c_fd.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    epolL.unregister(handle_c_fd.fileno())</span><br><span class="line">                    handle_c_fd.close()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>() <span class="comment"># server 说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError: <span class="comment"># 按 ctrl+d 让 server 断开</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;I want to go.&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                handle_c_fd.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line"></span><br><span class="line">    c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    c.connect(dest_addr)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    <span class="comment"># 让 epoll 监听 c, sys.stdin</span></span><br><span class="line">    epolL.register(c.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, _ <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==c.fileno():</span><br><span class="line">                data = c.recv(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">if</span> data: </span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;对方断开&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> i==sys.stdin.fileno():</span><br><span class="line">                data = <span class="built_in">input</span>()</span><br><span class="line">                c.send(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure><p>现在我们实现一个聊天室，client 程序保持不变，server 端的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">5379</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    epolL = select.epoll()</span><br><span class="line">    epolL.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epolL.register(sys.stdin.fileno(), select.EPOLLIN)</span><br><span class="line">    client_list = []  <span class="comment"># 糟糕的 ds 选择</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填写到 events</span></span><br><span class="line">        events = epolL.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> i==s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上、注册</span></span><br><span class="line">                handle_c_fd, c_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(c_addr)</span><br><span class="line">                client_list.append(handle_c_fd)</span><br><span class="line">                epolL.register(handle_c_fd.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                remove_client = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">for</span> client <span class="keyword">in</span> client_list:</span><br><span class="line">                    <span class="keyword">if</span> client.fileno()==i:</span><br><span class="line">                        data = client.recv(<span class="number">100</span>)</span><br><span class="line">                        <span class="keyword">if</span> data:</span><br><span class="line">                            <span class="keyword">for</span> others <span class="keyword">in</span> client_list:</span><br><span class="line">                                <span class="keyword">if</span> others <span class="keyword">is</span> client:</span><br><span class="line">                                    <span class="keyword">pass</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    others.send(data)</span><br><span class="line">                        <span class="keyword">else</span>: <span class="comment"># 断开了就记录一下   ||   糟糕的 ds 选择</span></span><br><span class="line">                            remove_client = client</span><br><span class="line">                <span class="keyword">if</span> remove_client:</span><br><span class="line">                    client_list.remove(remove_client)</span><br><span class="line">                    epolL.unregister(remove_client.fileno())</span><br><span class="line">                    remove_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure><p><strong>端口复用</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>btw, <code>send()</code> 函数可选 <code>MSG_DONTWAIT</code> 参数，效果是：即使对方没法接受这次要发送的全部信息（缓冲区不够用了），也强行发送，多余部分直接截断。</p><h2 id="协议设计"><a href="#协议设计" class="headerlink" title="协议设计"></a>协议设计</h2><p>考虑这样的场景：我们需要持续发送多个文件。</p><p>这会带来一个问题，这些多个文件在传输过程中，会以字节流的形式变成：</p><p>文件名1 + 文件1内容 + 文件名2 + 文件2内容 + …</p><p>这样我们就没办法区分出各个内容了，这种现象叫做<strong>沾包</strong>。</p><p>为此，我们需要设计协议。一个自然的想法是：<br>（长度）&amp;（内容）+（长度）&amp;（内容）+ …</p><p>会用到这张表：</p><p><img src="https://s2.loli.net/2024/09/26/ScK8TUrLysADXB5.png" alt="86-10.png"></p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">train_content = <span class="string">&#x27;爱上地方传奇&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">train_head = <span class="built_in">len</span>(train_content)</span><br><span class="line"><span class="built_in">print</span>(train_head)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(train_head))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, train_head) <span class="comment"># I 表示整型数</span></span><br><span class="line"><span class="built_in">print</span>((train_head_bytes))</span><br><span class="line"></span><br><span class="line">b = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">b&#x27;\x12\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>一个简单的小例子，注意这个例子里很多问题没有处理，比如并没有循环接数据（这样就没法接受大一点的文件），再比如没有考虑代码复用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server 进行文件发送</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_init</span>():</span><br><span class="line">    s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_file</span>():</span><br><span class="line">    file_name = <span class="string">&#x27;adf.txt&#x27;</span></span><br><span class="line">    s = tcp_init()</span><br><span class="line">    handle_c_fd, client_addr = s.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先发火车头（比喻）</span></span><br><span class="line">    file_name_bytes = file_name.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(file_name_bytes))</span><br><span class="line">    handle_c_fd.send(train_head_bytes + file_name_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再发文件内容</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    file_content = f.read()</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(file_content))</span><br><span class="line">    handle_c_fd.send(train_head_bytes + file_content)</span><br><span class="line">    f.close()</span><br><span class="line">    handle_c_fd.close()</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_file()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">addr = (<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">tcp_client_socket.connect(addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次先读 4 个字节的火车头</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_name = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;aaa&#x27;</span>+file_name.decode(<span class="string">&#x27;utf8&#x27;</span>), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接文件的长度及内容</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_content = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f.write(file_content)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><h1 id="网盘设计（一）"><a href="#网盘设计（一）" class="headerlink" title="网盘设计（一）"></a>网盘设计（一）</h1><p>这是最初的一版，也是最简单的一版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s_listen = <span class="literal">None</span> <span class="comment"># 用来 listen 的 socket 对象</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        c_fd, c_addr = self.s_listen.accept()</span><br><span class="line">        user = User(c_fd)</span><br><span class="line">        user.deal_command()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    每个 User 对象对应一个客户端</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_c_fd</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.handle_c_fd = handle_c_fd</span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.handle_c_fd.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.handle_c_fd.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.handle_c_fd.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&#x27; &#x27;</span>*<span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.client:socket = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure><p>上面代码尚有功能未实现（其实就是核心的上传下载功能，不过这个在之前的代码里面有，可以直接拿过来），仅作示例。</p><h1 id="多进程编程"><a href="#多进程编程" class="headerlink" title="多进程编程"></a>多进程编程</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><code>top</code> 命令的前两行输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top - 16:46:57 up  1:58,  1 user,  load average: 1.51, 0.91, 0.91</span><br><span class="line">Tasks: 300 total,   1 running, 299 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><p>平均负载（load average），一般对于单个 cpu 来说，负载在 0～1.00 之间是正常的，超过 1.00 须引起注意。在多核 cpu 中，系统平均负载不应该高于 cpu 核心的总数。</p><p>buffers 与 cached 区别：buffers 指的是<strong>块设备的读写缓冲区</strong>，cached 指的是<strong>页面缓存</strong>。</p><p><strong>查看当前窗口启动的任务情况</strong>：</p><ul><li><code>python 1.while 死循环.py &amp;</code> 让进程后台运行</li><li><code>bg</code> 让暂停的进程在后台运行</li><li><code>fg</code> 拉到前台</li><li><code>jobs</code> 看后台任务</li></ul><p><strong>设置定时任务</strong>：</p><ul><li><code>crontab –e</code> 设置当前用户定时任务</li><li><code>vim /etc/crontab</code> 设置定时任务</li><li><code>crontab -l</code> 查看当前自己设置的定时任务</li></ul><p>多进程的简单演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----2----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----1----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Process 语法结构 <code>Process(group , target , name , args , kwargs)</code></p><ul><li><code>target</code> 如果传递了函数的引用，可以让这个子进程就执行这里的代码</li><li><code>args</code> 给 target 指定的函数传递的参数，以元组的方式传递</li><li><code>kwargs</code> 给 target 指定的函数传递命名参数，keyword 参数</li></ul><p>Process 创建的实例对象的常用方法：</p><ul><li><code>start()</code> 启动子进程实例（创建子进程）</li><li><code>is_alive()</code> 判断进程子进程是否还在活着</li><li><code>join([timeout])</code> 是否等待子进程执行结束，或等待多少秒 — <strong>回收子进程尸体</strong></li><li><code>terminate()</code> 不管任务是否完成，立即终止子进程</li></ul><p>获取 pid :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是父进程 pid = 6079</span></span><br><span class="line"><span class="string">我是子进程 pid = 6080</span></span><br><span class="line"><span class="string">子进程结束</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>给子进程指定的函数传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name, age, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程 &#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name, age, kwargs))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc, args=(<span class="string">&#x27;xiongda&#x27;</span>, <span class="number">5</span>), kwargs=&#123;<span class="string">&#x27;408&#x27;</span>:<span class="number">120</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">子进程 xiongda 5 &#123;&#x27;408&#x27;: 120&#125;</span></span><br><span class="line"><span class="string">我是父进程</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>孤儿进程：父进程退出（kill 杀死父进程），子进程变为孤儿。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 6586</span><br><span class="line">我是子进程 pid = 6587</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zhiyue@168:~$ ps -elf|grep test</span><br><span class="line">0 S zhiyue      6586    6574  0  80   0 -  5369 do_wai 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">1 S zhiyue      6587    6586  0  80   0 -  5369 hrtime 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">0 S zhiyue      6671    6646  0  80   0 -  2356 pipe_r 10:35 pts/3    00:00:00 grep test</span><br><span class="line">zhiyue@168:~$ kill -9 6586</span><br></pre></td></tr></table></figure><p>terminal 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 6586</span><br><span class="line">我是子进程 pid = 6587</span><br><span class="line">Killed</span><br></pre></td></tr></table></figure><p>terminal 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhiyue@168:~$ ps -elf|grep test</span><br><span class="line">1 S zhiyue      6587    1068  0  80   0 -  5369 hrtime 10:35 pts/2    00:00:00 python3 -u /home/zhiyue/Documents/0928work/test.py</span><br><span class="line">0 S zhiyue      6733    6646  0  80   0 -  2356 pipe_r 10:36 pts/3    00:00:00 grep test</span><br></pre></td></tr></table></figure><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>僵尸进程：子进程退出，父进程在忙碌，没有回收它，要避免僵尸。</p><p>Python 进程变为僵尸进程后，名字会改变。可以使用 <code>top</code> 查看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是子进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target = run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是父进程 pid = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>terminal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我是父进程 pid = 7283</span><br><span class="line">我是子进程 pid = 7284</span><br><span class="line">子进程结束</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="是否共享全局变量"><a href="#是否共享全局变量" class="headerlink" title="是否共享全局变量"></a>是否共享全局变量</h2><p>子进程创建是父进程的复制品，资源是独立使用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work1 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    nums.append(<span class="number">33</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work1 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;work2 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=work1)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;parent &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line">    p = Process(target=work2)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 11308</span></span><br><span class="line"><span class="string">work1 [11, 22, 33]</span></span><br><span class="line"><span class="string">parent [11, 22]</span></span><br><span class="line"><span class="string">work2 11309</span></span><br><span class="line"><span class="string">[11, 22]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>Process 之间有时需要通信，操作系统提供了很多机制来实现进程间的通信（例如管道，共享内存）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># q.put(4)  队列满了后，再放会阻塞</span></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="comment"># print(q.get())  队列空了后，再取会阻塞</span></span><br></pre></td></tr></table></figure><p><code>put()</code> 可以带参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">&#x27;消息4&#x27;</span>, <span class="literal">True</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;消息队列已满，现有消息数量：%s&#x27;</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">消息队列已满，现有消息数量：3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">最后一行会等待两秒才打印</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 初始化一个 Queue 对象，最多接受三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full()) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">&#x27;消息4&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;消息队列已满，现有消息数量：%s&#x27;</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">消息队列已满，现有消息数量：3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">最后一行会立即输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>推荐的方式：先判断消息列队是否已满，再写入；读取消息时，先判断消息列队是否为空，再读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">&quot;消息 4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(q.get_nowait())</span><br></pre></td></tr></table></figure><p>下面实际演示两个进程间的通信：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)</span><br><span class="line">    pw = Process(target=writer, args=(q,))</span><br><span class="line">    pr = Process(target=reader, args=(q,))</span><br><span class="line"></span><br><span class="line">    pw.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Put A to queue...</span></span><br><span class="line"><span class="string">Put B to queue...</span></span><br><span class="line"><span class="string">Get A from queue.</span></span><br><span class="line"><span class="string">Put C to queue...</span></span><br><span class="line"><span class="string">Get B from queue.</span></span><br><span class="line"><span class="string">Get C from queue.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h1><p>Python 已经帮我们做好了 dirty work, 建议爽用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">msg</span>):</span><br><span class="line">    t_start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 开始执行,进程号为%d&quot;</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成 0~1 之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(msg,<span class="string">&quot;执行完毕，耗时%0.2f&quot;</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    po = Pool(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">        <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">        po.apply_async(worker, (i,))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----start----&quot;</span>)</span><br><span class="line">    po.close() <span class="comment"># 关闭进程池，关闭后 po 不再接收新的请求</span></span><br><span class="line">    po.join() <span class="comment"># 等待 po 中所有子进程执行完成，必须放在 close 语句之后</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----start----</span></span><br><span class="line"><span class="string">0 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">1 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">2 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">0 执行完毕，耗时0.24</span></span><br><span class="line"><span class="string">3 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">3 执行完毕，耗时0.02</span></span><br><span class="line"><span class="string">4 开始执行,进程号为7836</span></span><br><span class="line"><span class="string">2 执行完毕，耗时0.61</span></span><br><span class="line"><span class="string">5 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">1 执行完毕，耗时0.70</span></span><br><span class="line"><span class="string">6 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">6 执行完毕，耗时0.63</span></span><br><span class="line"><span class="string">7 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">5 执行完毕，耗时0.89</span></span><br><span class="line"><span class="string">8 开始执行,进程号为7838</span></span><br><span class="line"><span class="string">7 执行完毕，耗时0.29</span></span><br><span class="line"><span class="string">9 开始执行,进程号为7837</span></span><br><span class="line"><span class="string">4 执行完毕，耗时1.55</span></span><br><span class="line"><span class="string">9 执行完毕，耗时0.74</span></span><br><span class="line"><span class="string">8 执行完毕，耗时1.43</span></span><br><span class="line"><span class="string">-----end-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>进程池中的 Queue</strong>：<br>如果要使用 Pool 创建进程，就需要使用 <code>multiprocessing.Manager()</code> 中的 <code>Queue()</code> ，而不是 <code>multiprocessing.Queue()</code> 。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 import 中的 Queue 为 Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reader 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reader 从 Queue 获取到消息：%s&quot;</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;writer 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;wangdao&quot;</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) start&quot;</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue() <span class="comment"># 使用 Manager 中的 Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 先让上面的任务向 Queue 存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line"></span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) End&quot;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(9168) start</span></span><br><span class="line"><span class="string">writer 启动(9174),父进程为(9168)</span></span><br><span class="line"><span class="string">reader 启动(9175),父进程为(9168)</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：w</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：n</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：g</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：d</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：o</span></span><br><span class="line"><span class="string">(9168) End</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>一种很类似于考研应试的加锁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----- in work1, g_num is %d -----&#x27;</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----- in work2, g_num is %d -----&#x27;</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mutex = threading.Lock()</span><br><span class="line">    t1 = threading.Thread(target=work1, args=(<span class="number">10000000</span>,))</span><br><span class="line">    t2 = threading.Thread(target=work2, args=(<span class="number">10000000</span>,))</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----- in work1, g_num is 19992828 ---------- in work2, g_num is 20000000 -----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 个线程对同一个全局变量操作之后的最终结果是:20000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="可迭代、迭代器、生成器"><a href="#可迭代、迭代器、生成器" class="headerlink" title="可迭代、迭代器、生成器"></a>可迭代、迭代器、生成器</h1><p>可迭代的：类中只重写了 <code>__iter__</code> 内置方法，就是可迭代的，这个方法要求返回一个迭代器。</p><p>迭代器：类中重写了 <code>__iter__</code> ，还需要重写 <code>__next__</code> 。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.container = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.container.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 只要重写了 __iter__ 方法，就会变成可迭代的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        myiterator = MyIter(self)</span><br><span class="line">        <span class="keyword">return</span> myiterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mylist</span>):</span><br><span class="line">        self.mylist:MyList = mylist</span><br><span class="line">        <span class="comment"># current 记录当前访问到的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        current = self.current</span><br><span class="line">        self.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> current &lt; <span class="built_in">len</span>(self.mylist.container):</span><br><span class="line">            <span class="keyword">return</span> self.mylist.container[current]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(<span class="number">666</span>)</span><br><span class="line">    mylist.add(<span class="number">667</span>)</span><br><span class="line">    mylist.add(<span class="number">668</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(mylist, Iterable))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># myiter = iter(mylist)</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line">    <span class="comment"># print(next(myiter))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">666</span></span><br><span class="line"><span class="string">667</span></span><br><span class="line"><span class="string">668</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以采用更简便的语法，即<strong>生成器(generator)</strong>。生成器是一类特殊的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>G</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7fe8669f9630</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(G)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><code>yield</code> 的作用：把当前上下文（寄存器的状态）保存起来，返回一个值——它后面跟的那个值。下次执行 next 操作，会从上次 yield 保存的现场位置继续执行。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fi</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        <span class="comment"># 这个语法太自由了，给我楞了一下</span></span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">F = fi(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/zhiyue/Documents/0929work/test.py&quot;, line 19, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(F))</span></span><br><span class="line"><span class="string">          ^^^^^^^</span></span><br><span class="line"><span class="string">StopIteration: done</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>又或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fi</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        <span class="comment"># 这个语法太自由了，给我楞了一下</span></span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">F = fi(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> F:</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 1 1 2 3 5 8 13 21 34</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>含有 <code>yield</code> 的函数称为生成器。</p><p>我们除了可以使用 <code>next()</code> 函数来唤醒生成器继续执行外，还可以使用 <code>send()</code> 函数来唤醒执行。使用 <code>send()</code> 函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">        temp = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">f.send(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line">f.send(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">haha</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">haha</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>协程（Coroutine），又称微线程，纤程。</p><p>协程是 Python 中另一种实现多任务的方式，只不过比线程需要的资源更少。通过<strong>保存、恢复 CPU 上下文</strong>的机制，可以在合适的时机把一个协程切换到另一个协程。</p><p><img src="https://s2.loli.net/2024/09/30/zsdLqWB3Ai62F8T.png" alt="86-11.png"></p><p>协程通过 <code>yield</code> 在用户态保存上下文，操作系统不感知。</p><p>实现多任务时，<strong>线程切换从系统层面远不止保存和恢复 CPU 上下文这么简单</strong>。操作系统为了程序运行的高效性每个线程都有<strong>自己的缓存 Cache</strong> 等数据，操作系统还会支持这些数据的恢复操作。所以线程的切换非常耗性能（相对协程来说）。但是协程的切换只是单纯地操作 CPU 的上下文，所以<strong>一秒钟切换个上百万次系统都抗的住</strong>。</p><p>模拟协程的机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work1---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work2---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">next</span>(w1)</span><br><span class="line">        <span class="built_in">next</span>(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">...（省略）...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h2><p>为了更好使用协程来完成多任务，python 中的 greenlet 模块对其封装，从而使得切换任务变的更加简单。</p><p>Debian 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-greenlet</span><br></pre></td></tr></table></figure><p>这只是一个功能非常初级的包，仅做演示目的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---A--&quot;</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---B--&quot;</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2) </span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到 gr1 中运行</span></span><br><span class="line">gr1.switch()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">---A--</span></span><br><span class="line"><span class="string">---B--</span></span><br><span class="line"><span class="string">(后略)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h2><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>greenlet 虽然实现了协程，但还需要人工切换，太麻烦。gevent 是一个比 greenlet 更强大的并且能够自动切换任务的模块。</p><p>其原理是当一个 greenlet 遇到 IO（访问网络、文件操作等）操作时，就自动切换到其他的 greenlet。等到 IO 操作完成，再适时切换回来继续执行。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd145ee0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0cd260: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f2ddd0a8860: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>可以看到，3 个 greenlet 是依次运行而不是交替运行。</p><p>gevent 切换执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment"># 用来模拟一个耗时操作，注意不是 time 模块中的 sleep</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892bb41ee0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba85260: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x7f892ba60860: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="monkey-补丁"><a href="#monkey-补丁" class="headerlink" title="monkey 补丁"></a>monkey 补丁</h3><p>先看一下没有补丁的情况（使用了<code>time.sleep()</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>打上补丁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all() <span class="comment"># 将程序中用到的耗时操作的代码，换为 gevent 中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果不唯一</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>猴子补丁作用：<br>monkey patch 是在执行时动态替换，通常是在 startup 的时候。用过 gevent 就会知道，会在最开头的地方 <code>gevent.monkey.patch_all()</code>，把标准库中的 <code>thread</code>、<code>socket</code> 等给替换掉。这样我们在<strong>后面使用 socket 的时候能够跟寻常一样使用，无需改动代码，就可以将它变成非堵塞的</strong>。</p><h2 id="官方的-asyncio"><a href="#官方的-asyncio" class="headerlink" title="官方的 asyncio"></a>官方的 asyncio</h2><p>文档： <a href="https://docs.python.org/zh-cn/3.12/library/asyncio-task.html">https://docs.python.org/zh-cn/3.12/library/asyncio-task.html</a></p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一行之后等待了一会才打印第二行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>对比下面两份代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">say_after</span>(<span class="params">delay, what</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">started at 15:43:57</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">finished at 15:44:00</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">say_after</span>(<span class="params">delay, what</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(what)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task1 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    task2 = asyncio.create_task(</span><br><span class="line">        say_after(<span class="number">2</span>, <span class="string">&#x27;world&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待直到两个任务都完成</span></span><br><span class="line">    <span class="comment"># （会花费约 2 秒钟。）</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">started at 15:49:46</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">finished at 15:49:48</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，预期的输出显示代码段的运行时间比之前快了 1 秒。</p><h2 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_downLoad</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET: %s&#x27;</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d bytes received from %s.&#x27;</span> % (<span class="built_in">len</span>(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.baidu.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.cskaoyan.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.qq.com/&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET: http://www.baidu.com/</span></span><br><span class="line"><span class="string">GET: http://www.cskaoyan.com/</span></span><br><span class="line"><span class="string">GET: http://www.qq.com/</span></span><br><span class="line"><span class="string">122235 bytes received from http://www.qq.com/.</span></span><br><span class="line"><span class="string">412916 bytes received from http://www.baidu.com/.</span></span><br><span class="line"><span class="string">46781 bytes received from http://www.cskaoyan.com/.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从上能够看到，收到数据的先后顺序不一定与发送顺序相同，这体现了异步，即不确定什么时候会收到数据，顺序不一定。</p><h1 id="网盘设计（二）"><a href="#网盘设计（二）" class="headerlink" title="网盘设计（二）"></a>网盘设计（二）</h1><p>增加了下载功能，改为循环收发的设计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.s_listen = <span class="literal">None</span> <span class="comment"># 用来 listen 的 socket 对象</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        c_fd, c_addr = self.s_listen.accept()</span><br><span class="line">        user = User(c_fd)</span><br><span class="line">        user.deal_command()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    每个 User 对象对应一个客户端</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_c_fd</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.handle_c_fd = handle_c_fd</span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.handle_c_fd.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.handle_c_fd.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.handle_c_fd.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&#x27; &#x27;</span>*<span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="comment"># 向客户端发送文件</span></span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        file_size = os.stat(fileName).st_size <span class="comment"># 发送文件大小</span></span><br><span class="line">        <span class="comment"># print(&#x27;ohla&#x27;)</span></span><br><span class="line">        <span class="comment"># print(file_size)</span></span><br><span class="line">        self.send_train(struct.pack(<span class="string">&#x27;I&#x27;</span>, file_size))</span><br><span class="line">        <span class="comment"># print(&#x27;server here&#x27;)</span></span><br><span class="line">        </span><br><span class="line">        f = <span class="built_in">open</span>(fileName, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            file_content = f.read(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> file_content:</span><br><span class="line">                self.handle_c_fd.send(file_content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 将 client 发来的文件保存在 server 上</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cycle_recv</span>(<span class="params">somefd, file, fileSize</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> total &lt; fileSize:</span><br><span class="line">        data = somefd.recv(<span class="number">10000</span>)</span><br><span class="line">        file.write(data)</span><br><span class="line">        total += <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.client:socket = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        send 火车，就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&#x27;I&#x27;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        recv 火车，就是把火车 recv 的内容返回出去</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;cd&#x27;</span>:</span><br><span class="line">                self.do_cd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;gets&#x27;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&#x27;puts&#x27;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;command wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.recv_train().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):  <span class="comment"># 从 server 那里拿文件</span></span><br><span class="line">        <span class="comment"># 先接文件的大小</span></span><br><span class="line">        file_size = struct.unpack(<span class="string">&#x27;I&#x27;</span>, self.recv_train())[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(&#x27;client recved size:&#x27;)</span></span><br><span class="line">        <span class="comment"># print(file_size)</span></span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(&#x27;client here&#x27;)</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;[接受]&#x27;</span> + fileName, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        cycle_recv(self.client, f, file_size)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        fileName = command.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;192.168.31.106&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure><p>进一步改进的思路：</p><p><img src="https://s2.loli.net/2024/10/03/Tea6NxFmBAcLyXD.png" alt="86-12.png"></p><p><img src="https://s2.loli.net/2024/10/03/BbNXm7lYjaDO5Fc.png" alt="86-13.png"></p><p>还可以考虑增加功能：</p><ul><li>用户名、密码存储在数据库中</li><li>秒传（某用户上传其他用户已经上传过的内容不会重复存一份）</li></ul><h1 id="阻塞模式、非阻塞模式"><a href="#阻塞模式、非阻塞模式" class="headerlink" title="阻塞模式、非阻塞模式"></a>阻塞模式、非阻塞模式</h1><p>本小节内容由 AIGC 改编。</p><p><strong>阻塞模式（Blocking Mode）</strong>：<br>这是套接字的默认行为。在阻塞模式下，诸如 <code>recv()</code> 或 <code>accept()</code> 等操作会一直等待，直到有数据到达或操作完成为止。比如，服务器等待客户端的连接请求时，<code>accept()</code> 会阻塞，直到有客户端连接上。</p><p><strong>非阻塞模式（Non-Blocking Mode）</strong>：</p><ul><li>在非阻塞模式下，诸如 <code>recv()</code>、<code>send()</code>、<code>accept()</code> 等操作如果不能立即完成，就会抛出一个 <code>BlockingIOError</code> 异常。程序可以继续做其他事情，而不是在等待某个操作完成。</li><li>非阻塞模式通常用于需要处理多个连接的服务器，如那些使用 <code>select()</code> 或 <code>poll()</code> 的服务器架构。非阻塞模式的使用场景：高并发服务器、异步 I/O 等。</li></ul><p><strong>示例代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 TCP 套接字</span></span><br><span class="line">tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定地址和端口</span></span><br><span class="line">tcp_server_tcp.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听连接</span></span><br><span class="line">tcp_server_tcp.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为非阻塞模式</span></span><br><span class="line">tcp_server_tcp.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环，处理多个客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client_socket, addr = tcp_server_tcp.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Accepted connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">        <span class="comment"># 如果没有客户端连接，继续执行其他任务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No incoming connections, doing other work...&quot;</span>)</span><br><span class="line">        <span class="comment"># 可以在这里做其他的事情</span></span><br></pre></td></tr></table></figure><p>我们在前面已经看到，有些代码可以在没有显式设置非阻塞的情况下使用 <code>epoll</code> 进行事件驱动的处理，但让我们仔细探讨一下<strong>为什么在某些情况下使用非阻塞模式仍然有其必要性</strong>，以及在某些代码中为什么不需要。</p><p><code>select.epoll()</code> 是 Linux 下的一种高级 I/O 多路复用机制，适用于高并发场景。<code>epoll</code> 本质上是事件驱动的，它能够监视多个文件描述符（如套接字、标准输入等），并在这些描述符有事件发生时通知程序，因此并不需要手动设置套接字为非阻塞。</p><ul><li><code>epoll.poll(-1)</code> 会阻塞并等待，直到有事件（如客户端发来的数据或服务器端的输入）发生。</li><li>当 <code>epoll</code> 监控到文件描述符上有可用的事件时，才会返回并让你处理数据。这种机制下，套接字的操作在正常情况下不会被阻塞，因为事件驱动会确保只有在数据准备好时才进行 I/O 操作。</li></ul><p><strong>为什么在这种情况下不需要非阻塞模式：</strong></p><p><code>epoll</code> 自己会处理套接字的事件，因此不需要套接字是非阻塞的。程序会在 <code>epoll.poll()</code> 返回时知道哪个文件描述符有事件发生，并且这些事件都准备好了进行处理（如 <code>recv()</code> 或 <code>send()</code>），所以它本质上已经是一种避免阻塞的机制。</p><p><strong>非阻塞模式的使用场景：</strong></p><p>虽然这里不需要手动设置非阻塞模式，但在一些不使用 <code>epoll</code> 或 <code>select</code> 的代码中，设置非阻塞的好处包括：</p><ul><li><p><strong>单独处理 I/O</strong>：如果不使用 <code>epoll</code> 或 <code>select</code>，并且需要继续处理其他任务时，可以通过将套接字设置为非阻塞避免等待 I/O。</p></li><li><p><strong>配合异步框架</strong>：在使用异步编程时（如 <code>asyncio</code>），套接字通常会被设置为非阻塞模式，允许事件循环继续处理其他事件而不是被某个套接字阻塞住。</p></li><li><p><strong>处理多个客户端</strong>：在不使用 <code>select</code> 或 <code>epoll</code> 时，服务器如果采用阻塞模式处理 I/O，就只能一次处理一个客户端。如果设置为非阻塞模式，则可以轮询处理多个客户端的请求。</p></li></ul><p><strong>为什么在 <code>epoll</code> 中不需要显式设置非阻塞：</strong></p><p>使用 <code>epoll</code> 监听文件描述符时，<code>epoll</code> 是事件驱动的，调用 <code>recv()</code> 或 <code>send()</code> 之类的操作时，事件已经准备好，因此不需要再通过设置套接字为非阻塞来避免阻塞操作。</p><p><strong>如果要结合非阻塞和 <code>epoll</code>：</strong></p><p>在某些情况下（如需要非阻塞的连接处理时），仍然可以结合两者使用。例如，如果想在其他地方做一些操作而不想等某个文件描述符就绪，就可以设置非阻塞。</p><h1 id="HTTP-协议头部解析"><a href="#HTTP-协议头部解析" class="headerlink" title="HTTP 协议头部解析"></a>HTTP 协议头部解析</h1><p>一些基本知识可以在网上找找，F12 打开看看就行。</p><p>当请求头没有 content-length 时，怎么知道请求体结束了？</p><p>http 的 header 和 body 之间是空行分割的，又因为每个头部项是以 <code>\r\n</code> 作为结束符，所以，数据流中是以 <code>\r\n\r\n</code> 来分割解析请求头（响应头）与请求体（响应体）的。如下图所示：</p><p><img src="https://bu.dusays.com/2024/10/05/6700b725a936f.png" alt="86-14.png"></p><p><strong>怎么知道（请求体）响应体结束了呢？</strong> http 协议规定，响应头的字段 content-length 用来表示响应体长度大小，但是，有可能发送请求头时，并不能知道完整的响应体长度（<strong>比如当响应数据太大，服务端流式处理的情况</strong>），这时需要设置请求头 Transfer-Encoding: chunked，使用数据块的方式传输，数据块格式如下图所示：</p><p><img src="https://bu.dusays.com/2024/10/05/6700b725b5cfa.png" alt="86-15.png"></p><p>HTTP 请求的类型（挑了几个重要的）：</p><ul><li><code>GET</code> 查询</li><li><code>POST</code> 新增</li><li><code>PUT</code> 修改</li><li><code>DELETE</code> 删除</li></ul><p>下面制作一个最简单的 web server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 为了确保端口复用</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2. 绑定</span></span><br><span class="line">tcp_server_socket.bind((<span class="string">&quot;192.168.31.106&quot;</span>, <span class="number">7890</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">http_head=new_socket.recv(<span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(http_head.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">response = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">response += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">response +=<span class="string">&#x27;&lt;html&gt;&lt;h1&gt;hello world&lt;/h1&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">new_socket.send(response.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 192.168.31.106:7890</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">DNT: 1</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浏览器的显示：一级标题 hello world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意需要在浏览器打开 <code>192.168.31.106:7890</code>（本机 IP 和对应的端口号）。</p><p>HTTP响应码总结（如果挂了可去 archive.org 查找）：<br><a href="https://zhuanlan.zhihu.com/p/66062179">https://zhuanlan.zhihu.com/p/66062179</a></p><p>概览：</p><p><img src="https://s2.loli.net/2024/10/05/RKOoHAgPds21Vj5.png" alt="86-16.png"></p><p>改进这个 web server :<br><a href="https://github.com/dropsong/py_webServer">https://github.com/dropsong/py_webServer</a></p><h1 id="Python-连接-MySQL"><a href="#Python-连接-MySQL" class="headerlink" title="Python 连接 MySQL"></a>Python 连接 MySQL</h1><h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>debian12 中已经安装了 MariaDB，它会与 MySQL 发生冲突。</p><p>使用以下命令卸载 MariaDB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove --purge mariadb-server mariadb-client mariadb-common mariadb-server-core mariadb-client-core</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt autoclean</span><br></pre></td></tr></table></figure><p>安装 MySQL :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>安装 pymysql:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pymysql</span><br></pre></td></tr></table></figure><p>大功告成！</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>一个简单有效的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,database=<span class="string">&#x27;akashi&#x27;</span>,user =<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor() <span class="comment"># 操作对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 insert 语句，并返回受影响的行数：添加一条数据</span></span><br><span class="line">    <span class="comment"># 增加</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;insert into goods(name, cate_name, brand_name, price, is_show, is_saleoff) values(&quot;redmibook&quot;, &quot;笔记本&quot;, &quot;xiaomi&quot;, 112, true, true)&#x27;</span>)</span><br><span class="line">    <span class="comment">#打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;insert into goods(name, cate_name, brand_name, price, is_show, is_saleoff) values(&quot;honor_book&quot;, &quot;笔记本&quot;, &quot;huawei&quot;, 111, true, true)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 更新</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(&#x27;update goods_cates set name=&quot;机械硬盘&quot; where name=&quot;硬盘&quot;&#x27;)</span></span><br><span class="line">    <span class="comment"># # 删除</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(&#x27;delete from goods_cates where id=6&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交之前的操作，如果之前已经之执行过多次的 execute，那么就都进行提交</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    <span class="comment"># 关闭 Connection 对象</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p><p>查询一行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,database=<span class="string">&#x27;akashi&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 select 语句，并返回受影响的行数：查询一条数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;select id,name from goods where id&gt;=4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询到%d 条数据:&quot;</span> % count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="comment"># 获取查询的结果</span></span><br><span class="line">        result = cs1.fetchone()</span><br><span class="line">        <span class="comment"># 打印查询的结果</span></span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取查询的结果</span></span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p><p>查询多行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建 Connection 连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;你知道的太多了&#x27;</span>,database=<span class="string">&#x27;akashi&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获得 Cursor 对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行 select 语句，并返回受影响的行数：查询一条数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&#x27;select id,name from goods where id&gt;=4&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询到%d 条数据:&quot;</span> % count)</span><br><span class="line"></span><br><span class="line">    result = cs1.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 关闭 Cursor 对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>以上代码经过验证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零碎知识&quot;&gt;&lt;a href=&quot;#零碎知识&quot; class=&quot;headerlink&quot; title=&quot;零碎知识&quot;&gt;&lt;/a&gt;零碎知识&lt;/h1&gt;&lt;p&gt;这里是 Python 的一些零碎知识点。&lt;/p&gt;
&lt;p&gt;多值参数:&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="编程" scheme="https://dropsong.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://dropsong.github.io/tags/python/"/>
    
    <category term="红黑树" scheme="https://dropsong.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="抓包" scheme="https://dropsong.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
    <category term="多进程" scheme="https://dropsong.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="网络编程" scheme="https://dropsong.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="进程池" scheme="https://dropsong.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="协程" scheme="https://dropsong.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
    <category term="HTTP协议" scheme="https://dropsong.github.io/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
