<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loveofpeach&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://loveofpeach.github.io/atom.xml" rel="self"/>
  
  <link href="https://loveofpeach.github.io/"/>
  <updated>2024-01-06T18:01:46.382Z</updated>
  <id>https://loveofpeach.github.io/</id>
  
  <author>
    <name>love of peach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库笔记</title>
    <link href="https://loveofpeach.github.io/posts/aaba1da3.html"/>
    <id>https://loveofpeach.github.io/posts/aaba1da3.html</id>
    <published>2024-01-01T12:00:26.000Z</published>
    <updated>2024-01-06T18:01:46.382Z</updated>
    
    <content type="html"><![CDATA[<p>数据库学习笔记。</p><h2 id="数据库的概念、分类"><a href="#数据库的概念、分类" class="headerlink" title="数据库的概念、分类"></a>数据库的概念、分类</h2><p>数据库的引入：<br>存储数据的结构或方式</p><ul><li>数组、链表：基于内存，短暂存储</li><li>文件：永久性存储，但是不利于查找</li><li>数据库：可以永久存储，并且可以更好的查找</li></ul><p>数据库的定义：存储结构化数据的仓库。<br>结构化数据一般指存储在数据库中，具有一定逻辑结构和物理结构的数据。</p><p>数据库的分类：</p><ul><li>关系型数据库<ul><li>通过外键关联来建立表与表之间的关系</li><li>例如：Oracle、MySQL、DB2、Informix、SQL Server、SQLite</li><li>关系型数据库把复杂的数据结构归结为简单的二元关系，在存储数据时实际就是采用的一张二维表（和Word和excell里表格几乎一样）</li><li>市场占有量较大的是MySQL和oracle数据库，而互联网场景最常用的是MySQL数据库</li><li>它通过SQL结构化查询语言来存取、管理关系型数据库的数据</li></ul></li><li>非关系型数据库<ul><li>数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li><li>不是对关系型数据库的否定，而是补充，主要针对大数据</li><li>种类<ul><li>键值对（key-value）：Redis、Memcached</li><li>按列存储：Hbase、Scylla、Cassandra</li><li>面向文档：MongoDB、CouchDB</li><li>图形存储：Neo4J</li></ul></li></ul></li></ul><p>数据库管理软件（DBMS）<br>数据库管理员（DBA）</p><p>数据库服务器、数据库和表的关系：</p><p><img src="https://bu.dusays.com/2024/01/01/6592be1d25bd0.png" alt="61-1.png"></p><p>数据在数据库中的存储方式：</p><p><img src="https://bu.dusays.com/2024/01/01/6592bfa307acc.png" alt="61-2.png"></p><p>SQL（Structured Query Language）：结构化查询语言</p><ul><li>是一种定义、操作、管理关系型数据库的句法。大多数关系型数据库都支持</li><li>结构化查询语言的工业标准由ANSI（美国国家标准学会，ISO的成员之一）维护</li><li>组成：<ul><li>DQL：数据查询语言</li><li>DML（Data Manipulation Language）：数据操作语言</li><li>DDL：数据定义语言</li><li>DCL：数据控制语言</li><li>TPL：事务处理语言</li><li>CCL：指针控制语言</li></ul></li></ul><p>mysql 的安装： <a href="https://www.bilibili.com/video/BV12q4y1U7sZ">https://www.bilibili.com/video/BV12q4y1U7sZ</a></p><p>数据库大小写不敏感。</p><h2 id="创建、显示、删除"><a href="#创建、显示、删除" class="headerlink" title="创建、显示、删除"></a>创建、显示、删除</h2><p>DDL（Data Definition Language）数据定义语言</p><ul><li>作用：用于描述数据库中要存储的现实世界实体的语言。即<strong>创建数据库和表的结构</strong>。</li><li>常用关键字：<ul><li><code>CREATE</code>：创建</li><li><code>ALTER</code>：修改</li><li><code>DROP</code>：删除</li><li><code>TRUNCATE</code>：截断</li></ul></li></ul><p>进入 sql ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>看到 mysql 的提示符，说明连接成功。</p><p>输入 <code>show schemas;</code> 查询自带的数据库。</p><p><img src="https://bu.dusays.com/2024/01/02/659423c467080.png" alt="61-3.png"></p><p>或者 <code>show databases;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/02/6594256b6299b.png" alt="61-4.png"></p><p>information_schema（元数据）<br>mysql（核心库）<br>performance_schema（性能相关）<br>sys（对DBA有好处）</p><p>注释记号：<code>#</code>、<code>--</code>、<code>/**/</code></p><p>创建数据库 <code>create database akashi;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/02/659429989faba.png" alt="61-5.png"></p><p>使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use akashi;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><p>显示表格（目前为空）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个另外的例子：</p><p><img src="https://bu.dusays.com/2024/01/02/65942b5cb0f1b.png" alt="61-6.png" title="下略"></p><p>删除一个库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database akashi;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/02/65942c4a092d2.png" alt="61-7.png" title="后来又建回来了QAQ"></p><p>创建表：</p><p><img src="https://bu.dusays.com/2024/01/02/6594301c6db3c.png" alt="61-8.png"></p><p>MySQL 常用数据类型：</p><p><img src="https://bu.dusays.com/2024/01/02/659431ad47258.png" alt="61-9.png"></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (id <span class="type">int</span>, name <span class="type">char</span>(<span class="number">20</span>), age <span class="type">int</span>, math <span class="type">float</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659435af32350.png" alt="61-10.png"></p><p>显示表的结构 <code>show create table member;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/03/659436dd80bfb.png" alt="61-11.png"></p><p>显示表的结构（第二种方法）<code>desc member;</code> ：</p><p><img src="https://bu.dusays.com/2024/01/03/659437a381f8c.png" alt="61-12.png"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改表，增加字段，add：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 <span class="keyword">member</span> 表中增加一个英语成绩，类型为 <span class="type">float</span> ，默认值为 <span class="number">60</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> english <span class="type">float</span> <span class="keyword">default</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659439c8c34d4.png" alt="61-13.png"></p><p>修改表，修改字段类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> modify name <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943b81a382f.png" alt="61-14.png"></p><p>改字段名字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> change name mname <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943c96b4403.png" alt="61-15.png" title="然后又改回去了，不提"></p><p>删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">drop</span> english;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943e41955c5.png" alt="61-16.png"></p><p>删除表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test1;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65943fbb7bac4.png" alt="61-17.png"></p><p>指定位置添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> english <span class="type">float</span> <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659440d9bab43.png" alt="61-18.png"></p><p>指定相对位置添加：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">member</span> <span class="keyword">add</span> xxx <span class="type">float</span> after id;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65944279d82ee.png" alt="61-19.png"></p><p>修改表结构：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/R-nPuXn6q3jDcq" alt="61-20"></p><h2 id="INSERT、UPDATE、DELETE"><a href="#INSERT、UPDATE、DELETE" class="headerlink" title="INSERT、UPDATE、DELETE"></a>INSERT、UPDATE、DELETE</h2><p>DML（Data Manipulation Language）数据操纵语言</p><ul><li>作用：用于向数据库表中插入、删除、修改数据</li><li>常用关键字：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code></li></ul><p>字符串使用单引号。</p><p>插入一条记录并查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id,name,age,math) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;xiaoshuai&#x27;</span>,<span class="number">30</span>,<span class="number">59</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65951dd78c979.png" alt="61-21.png"></p><p>插入一条记录，部分为默认值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id,name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;xiaoai&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65951f43b2a1c.png" alt="61-22.png"></p><p>插入多条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">&#x27;xiaomei&#x27;</span>,<span class="number">20</span>,<span class="number">100</span>),(<span class="number">4</span>,<span class="string">&#x27;lumine&#x27;</span>,<span class="number">17</span>,<span class="number">61</span>),(<span class="number">8</span>,<span class="string">&#x27;xiao&#x27;</span>,<span class="number">18</span>,<span class="number">85</span>);</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/YoQQDvFN2g3adR" alt="61-23"></p><p>修改一条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> age<span class="operator">=</span><span class="number">24</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/6595247bbaadb.png" alt="61-24.png"></p><p>修改一张表的全部记录（修改值相同）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> e_date<span class="operator">=</span><span class="string">&#x27;1999-10-10 10:10:10&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/fiG2taOrig2lIL" alt="61-25"></p><p>删除记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>插入空值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span>(name) <span class="keyword">values</span>(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/659528bd889dc.png" alt="61-26.png"></p><p><strong>同<code>insert</code>和<code>update</code>一样，从一个表中删除记录将引起其它表的参照完整性问题，在修改数据库数据时，头脑中应该始终不要忘记这个潜在的问题。</strong></p><p>Tip: mysql中文乱码</p><ul><li>mysql有六处使用了字符集，分别为：client 、connection、database、results、server 、system</li><li>client是客户端使用的字符集</li><li>connection是连接数据库的字符集设置类型，如果程序没有指明连接数据库使用的字符集类型就按照服务器端默认的字符集设置</li><li>database是数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将使用服务器安装时指定的字符集设置</li><li>results是数据库给客户端返回时使用的字符集设定，如果没有指明，使用服务器默认的字符集</li><li>server是服务器安装时指定的默认字符集设定</li><li>system是数据库系统使用的字符集设定</li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>DQL（Data Query Language）数据查询语言</p><ul><li>作用：查询数据</li><li>常用关键字：<code>SELECT</code></li></ul><p>基本select语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT [DISTINCT] [*] |&#123;column1, column2, column3..&#125; FROM table [where];</span><br></pre></td></tr></table></figure><p>基本select语句</p><ul><li><code>Select</code>指定查询哪些列的数据</li><li><code>column</code>指定列名</li><li><code>*</code>号代表查询所有列</li><li><code>From</code>指定查询哪张表</li><li><code>DISTINCT</code>可选，指显示结果时，是否剔除重复数据</li></ul><p>选择指定列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/7VHLGFI5Id0KgR" alt="61-27"></p><p>加入限制条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 会同时过滤不满足条件的和 <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/01/03/65953018d49f2.png" alt="61-28.png"></p><p>去重查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> e_date <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在select语句中可使用表达式对查询的列进行运算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT *|&#123;column1｜expression, column2｜expression，..&#125; FROM     table;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> age<span class="operator">+</span><span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>     <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>     <span class="number">34</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>     <span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在select语句中可使用as语句<code>SELECT column as 别名 from 表名;</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>                <span class="number">60030</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>               <span class="number">101020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>                <span class="number">62017</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age,age<span class="operator">+</span><span class="number">10</span><span class="operator">*</span><span class="number">100</span><span class="operator">+</span>math<span class="operator">*</span><span class="number">1000</span> <span class="keyword">as</span> total <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span> total  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>  <span class="number">60030</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span> <span class="number">101020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">62017</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在<code>where</code>子句中常用的运算符：</p><p><img src="https://bu.dusays.com/2024/01/03/6595421561e06.png" alt="61-29.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">25</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">30</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">60</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">17</span>,<span class="number">60</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>模糊查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%i&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%i__&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>is NULL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>order by</code>排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>调整升降序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>使用<code>limit</code>限制显示行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> xiaoshuai <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei   <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>offset</code>选项，偏移量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> limit <span class="number">3</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> xiaoai  <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> xiaomei <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> lumine  <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+------+------+---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p>数据完整性是为了保证插入到数据库中的数据是正确的，它防止了用户可能的输入错误。</p><p>数据完整性主要分为以下三类：</p><ul><li>实体完整性：规定表的一行（即每一条记录）在表中是唯一的实体。实体完整性通过表的主键来实现。</li><li>域完整性：指数据库表的列（即字段）必须符合某种特定的数据类型或约束。比如NOT NULL。</li><li>参照完整性：<ul><li>保证一个表的外键和另一个表的主键对应。</li><li>参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul></li></ul><p>定义表的约束</p><ul><li>定义主键约束<ul><li>primary key:不允许为空，不允许重复</li><li>可以区分两条记录的唯一性</li><li>删除主键：<code>alter table tablename drop primary key;</code> </li></ul></li><li>定义主键自动增长<ul><li>auto_increment</li></ul></li><li>定义唯一约束<ul><li>unique</li></ul></li><li>定义非空约束<ul><li>not null</li></ul></li><li>定义外键约束<ul><li>constraint ordersid_FK foreign key(ordersid) references orders(id)</li></ul></li></ul><h2 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h2><p>多表设计：一对多、多对多、一对一。（避免数据的冗余）</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/plm1uS5SjFJSNa" alt="61-30"></p><p><img src="https://bu.dusays.com/2024/01/06/65996c38becd4.png" alt="61-31.png"></p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/9hU_UtDsVsooy-" alt="61-32"></p><p>再设计一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> customer(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> auto_increment,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">primary</span> key(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>过程略。结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>    <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> customer <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `customer` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>再设计一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> order_table(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> order_id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> price <span class="type">float</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> user_id <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">foreign</span> key(user_id) <span class="keyword">references</span> customer(id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_akashi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> customer         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">member</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> order_table      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type     <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">char</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price    <span class="operator">|</span> <span class="type">float</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> user_id  <span class="operator">|</span> <span class="type">int</span>      <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>插入相关联的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_table <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;shanzi&#x27;</span>,<span class="number">520</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name   <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+-------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> order_table <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;Alcohol Pads&#x27;</span>,<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">ERROR <span class="number">1452</span> (<span class="number">23000</span>): Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`akashi`.`order_table`, <span class="keyword">CONSTRAINT</span> `order_table_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer` (`id`))</span><br></pre></td></tr></table></figure><p>此时，不能删除 ayaka ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> customer <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">ERROR <span class="number">1451</span> (<span class="number">23000</span>): Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`akashi`.`order_table`, <span class="keyword">CONSTRAINT</span> `order_table_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `customer` (`id`))</span><br></pre></td></tr></table></figure><p><strong>DQL数据查询语言</strong></p><ul><li>连接查询：交叉连接、内连接、外连接</li><li>联合查询</li><li>报表查询</li></ul><p>交叉连接（cross join），不带on子句，返回连接表中所有数据行的笛卡儿积：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">cross</span> <span class="keyword">join</span> order_table;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Lumine  <span class="operator">|</span>  <span class="number">500</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> nilou   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>内连接（inner join），返回连接表中符合连接条件及查询条件的数据行。</p><p>内连接查询：</p><ul><li>显式内连接：使用<code>inner join</code>关键字，在<code>on</code>子句中设定连接条件。</li><li>隐式内连接：不包含<code>inner join</code>关键字和<code>on</code>关键字，在<code>where</code>子句中设定连接条件。</li></ul><p>显式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">inner</span> <span class="keyword">join</span> order_table <span class="keyword">on</span> customer.id<span class="operator">=</span>order_table.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer <span class="keyword">as</span> c <span class="keyword">inner</span> <span class="keyword">join</span> order_table <span class="keyword">as</span> o <span class="keyword">on</span> c.id<span class="operator">=</span>o.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>隐式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customer,order_table <span class="keyword">where</span> customer.id<span class="operator">=</span>order_table.user_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span> order_id <span class="operator">|</span> name         <span class="operator">|</span> price <span class="operator">|</span> user_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> ayaka   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> shanzi       <span class="operator">|</span>   <span class="number">520</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> yoimiya <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> duojiaoyutou <span class="operator">|</span>    <span class="number">50</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+----------+--------------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据库学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;数据库的概念、分类&quot;&gt;&lt;a href=&quot;#数据库的概念、分类&quot; class=&quot;headerlink&quot; title=&quot;数据库的概念、分类&quot;&gt;&lt;/a&gt;数据库的概念、分类&lt;/h2&gt;&lt;p&gt;数据库的引入：&lt;br&gt;存储数据的结构或方式&lt;/p&gt;
</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="数据库" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>linux 基础</title>
    <link href="https://loveofpeach.github.io/posts/2259c81e.html"/>
    <id>https://loveofpeach.github.io/posts/2259c81e.html</id>
    <published>2024-01-01T11:17:08.000Z</published>
    <updated>2024-01-05T17:46:41.619Z</updated>
    
    <content type="html"><![CDATA[<p>在旧电脑上安装了 Ubuntu ，把 Windows 和其他文件一整个扬了的那种，有一种毁天灭地的美。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>windows 有盘符的概念，如C盘，D盘，E盘等等，但是 Linux 没有盘符的概念。</p><p>Linux 的目录结构：所有的目录都是从根目录<code>/</code>开始。</p><p><img src="https://bu.dusays.com/2024/01/03/65955a1662cc1.png" alt="60-1.png"></p><h2 id="cd、pwd、cat"><a href="#cd、pwd、cat" class="headerlink" title="cd、pwd、cat"></a>cd、pwd、cat</h2><p>查看命令的方式，可以使用 <code>man  命令</code>。</p><p><code>pwd</code>命令：print name of current/working directory, 打印当前目录的名字。</p><p><code>.</code>代表当前目录，<code>..</code>代表上一级目录。</p><p>回到上一次的目录 <code>cd -</code></p><p><code>cat</code>命令：concatenate files and print on the standard output, 查看文件内容。<br>对于读小文件而言，是没有问题的，但是当文件的内容非常多的时候，cat起不到应有的作用。</p><h2 id="useradd、userdel"><a href="#useradd、userdel" class="headerlink" title="useradd、userdel"></a>useradd、userdel</h2><p><strong><code>useradd</code>命令</strong>：create a new user or update default new user information, 添加用户的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd test3  //创建的用户属于三无产品，没有密码，在/home目录下面没有对应的文件夹，shell不一样</span><br><span class="line"></span><br><span class="line">sudo  useradd -m  test4  -s /bin/bash  //-m指定了在/home目录创建对应文件夹 -s指定shell类型</span><br><span class="line"></span><br><span class="line">//给test4创建密码</span><br><span class="line">sudo passwd test4</span><br><span class="line"></span><br><span class="line">//账号切换的命令</span><br><span class="line">su  test4  #su + 账号名字</span><br><span class="line"></span><br><span class="line">用户切换的时候，展现出来的就是一个栈结构，先进后出。</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/ibk055Ku4LIBxz" alt="60-2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wangdao@wangdao:~$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">.....</span><br><span class="line">gdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/false</span><br><span class="line">wangdao:x:1000:1000:wangdao,,,:/home/wangdao:/bin/bash</span><br><span class="line">sshd:x:122:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:123:127:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">test:x:1001:1001::/home/test:/bin/bash</span><br><span class="line">test2:x:1002:1002::/home/test2:/bin/sh</span><br><span class="line">test3:x:1003:1003::/home/test3:/bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangdao:x:1000:1000:wangdao,,,:/home/wangdao:/bin/bash</span><br><span class="line">test3:x:1003:1003::/home/test3:/bin/sh</span><br><span class="line"></span><br><span class="line">冒号是分隔符</span><br><span class="line">用户名  密码（x替代）  uid（用户id） gid（group id，组id）  用户对应的绝对路径  shell类型</span><br><span class="line">0  root    用户</span><br><span class="line">1~1000     系统用户</span><br><span class="line">1000之后    普通用户</span><br></pre></td></tr></table></figure><p><strong>注意：为了保证系统的安全性，不允许root用户直接进行登录。（root用户都是有的，因此知道账号）</strong></p><p><code>userdel</code>命令：delete a user account and related files, 删除用户以及用户所对应的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//-r选项可以删除用户以及用户对应的在/home下的文件夹，如果不加-r,就只会在/etc/passwd下面删除账号，不会删除/home的文件夹</span><br><span class="line">wangdao@wangdao:~$ sudo userdel test5 -r</span><br><span class="line">userdel: test5 mail spool (/var/mail/test5) not found</span><br></pre></td></tr></table></figure><h2 id="目录的创建与删除、tree"><a href="#目录的创建与删除、tree" class="headerlink" title="目录的创建与删除、tree"></a>目录的创建与删除、tree</h2><p><code>mkdir</code>命令：make directories, 创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir 20221230   //创建目录</span><br><span class="line">mkdir -p dir3/dir4/dir5 //创建多级目录可以加上-p,或者可以一级一级的创建</span><br></pre></td></tr></table></figure><p><code>rmdir</code>命令：remove empty directories, 删除空目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果目录不是空的，可以先进到内层目录，然后一级一级空目录的进行删除</span><br><span class="line">rmdir  dir1  //是空目录就可以直接删除</span><br><span class="line">rmdir dir1  //如果dir1里面还有目录就需要先进去，在一级一级删除</span><br></pre></td></tr></table></figure><p><code>tree</code>命令：打印目录的结构（安装与使用）：</p><p><img src="https://bu.dusays.com/2024/01/04/6596b357ca76a.png" alt="60-3.png"></p><h2 id="文件的创建"><a href="#文件的创建" class="headerlink" title="文件的创建"></a>文件的创建</h2><p>文件的创建命令：<code>touch</code>、<code>echo</code>、<code>cat</code>、<code>vi</code>/<code>vim</code></p><p><code>touch</code>：change file timestamps 改变时间戳（1970.1.1 0:0:0） ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file   //可以创建空文件</span><br></pre></td></tr></table></figure><p><code>echo</code>: display a line of text 回音命令</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/MNXtX4NQmRpA6b" alt="60-4"></p><p>创建空文件：</p><p><img src="https://bu.dusays.com/2024/01/04/6596b7e12daa9.png" alt="60-5.png"></p><p><code>cat</code>：使用 ctrl+d 进行正常退出，ctrl+c 异常退出（中断）。</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/DBuJtpAiIH_Dfz" alt="60-6"></p><p><code>vi</code>/<code>vim</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim file4  //执行以下步骤，键盘左上角Esc，再按shift + :,再输入wq，再按enter</span><br></pre></td></tr></table></figure><h2 id="文件内容的查看"><a href="#文件内容的查看" class="headerlink" title="文件内容的查看"></a>文件内容的查看</h2><p><code>cat</code>、<code>head</code>、<code>tail</code>、<code>more</code>、<code>less</code></p><ul><li>head - output the first part of files 查看文件的前面一部分内容</li><li>tail - output the last part of files 查看文件的尾部内容</li><li>more - file perusal filter for crt viewing 查看文件里面的内容，可以一行行的查阅。</li><li>less - opposite of more</li></ul><h2 id="文件的拷贝、移动、删除"><a href="#文件的拷贝、移动、删除" class="headerlink" title="文件的拷贝、移动、删除"></a>文件的拷贝、移动、删除</h2><p><code>cp</code> - copy files and directories 拷贝文件或者文件夹（目录）</p><p>普通文件的拷贝：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp  srcFile  destFile  //cp  源文件   目的文件</span><br><span class="line">cp file1  file2   </span><br><span class="line"></span><br><span class="line">//源文件与目的文件都存在的时候，最好加上-i选项，</span><br><span class="line">//可以进行提示，以免误操作（安全性的问题）</span><br><span class="line">cp -i file1  file2</span><br></pre></td></tr></table></figure><p>普通文件拷贝给目录文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp  file  dir</span><br><span class="line"></span><br><span class="line">如果dir中有file文件，就会直接覆盖；</span><br><span class="line">如果dir中没有file文件，就会创建一个file文件；</span><br><span class="line">如果dir中的file与源文件file的内容不一样，最好还是继续加上-i选项。</span><br></pre></td></tr></table></figure><p>目录拷贝给目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  -r  dir1  dir2  // -r 表明这个拷贝过程是递归的</span><br></pre></td></tr></table></figure><p><code>mv</code> - move (rename) files</p><p>可以移动普通文件，也可以移动目录文件。<br>“文件”是泛指。在 Linux 中，一切皆文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv  源文件  目的文件   </span><br><span class="line">// mv进行移动的时候，源文件会被删除</span><br><span class="line">// mv也有常用的 -i -f 选项</span><br></pre></td></tr></table></figure><p><code>rm</code> - remove files or directories</p><p>删除普通文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm  file</span><br></pre></td></tr></table></figure><p>删除目录文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm  -fr dir</span><br><span class="line">//-f 是强制的意思，-r 是递归的意思</span><br></pre></td></tr></table></figure><p>删除所有的文件（普通文件、目录文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -fr  *</span><br><span class="line">//*星号是一个通配符，代表的是所有类型的文件，包括普通文件、目录文件</span><br></pre></td></tr></table></figure><p><strong>注意：<code>rm</code>命令在使用的时候，最好加上<code>-i</code>，可以起提示作用。</strong></p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>-a</code>选项，显示文件夹下面的所有文件，包括隐藏文件。在 Linux 中，以<code>.</code>开头的文件是隐藏文件。</p><p><code>-l</code>选项，显示文件夹下的文件的具体信息。</p><p><code>-h</code>选项，将文件大小换算成人类可读的。</p><p><img src="https://bu.dusays.com/2024/01/05/6596f0ef830c7.png" alt="60-7.png"></p><p><code>-i</code>选项，将文件对应的结点号展示出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 3 wangdao wangdao 4.0K 12月 31 10:58 .</span><br><span class="line">drwxrwxr-x 4 wangdao wangdao 4.0K 12月 30 21:13 ..</span><br><span class="line">drwxrwxr-x 2 wangdao wangdao 4.0K 12月 31 10:54 dir1</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao   12 12月 31 09:00 file</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao   12 12月 31 11:05 file2</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao    0 12月 31 10:58 .file3</span><br><span class="line">-rw-rw-r-- 1 wangdao wangdao 4.2M 12月 30 21:17 The_Holy_Bible.txt</span><br><span class="line"></span><br><span class="line">/*----------------------</span><br><span class="line">d rwx rwx r-x</span><br><span class="line">- rw- rw- r--</span><br><span class="line">第一列代表的是文件类型  d目录文件  -普通文件 等等</span><br><span class="line">r  读</span><br><span class="line">w  写</span><br><span class="line">x  可执行</span><br><span class="line">本用户   组用户   其他用户</span><br><span class="line">-----------------------*/</span><br></pre></td></tr></table></figure><h2 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h2><p><code>ln</code> - make links between files</p><p>硬链接的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln  源文件   目的文件</span><br><span class="line">//源文件是已经存在的文件，目的文件是新创建的</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/y_eIKVhcPZco3N" alt="60-8" title="注意file和file5的 inode 号"></p><p>创建硬链接之后，相当于多创建了一个指向文件的指针。硬链接文件的 inode 号是一样的。修改任何一个文件，都会导致文件的内容发生改变。</p><p>软链接的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s  源文件  目的文件</span><br></pre></td></tr></table></figure><p>创建软链接之后，相当于对源文件创建了一个快捷方式，源文件与目的文件 inode 号不一样。删除源文件则快捷方式会失效，但删除软链接文件，源文件不受影响。</p><h2 id="chmod、umask"><a href="#chmod、umask" class="headerlink" title="chmod、umask"></a>chmod、umask</h2><p><code>chmod</code> - change file mode bits 改变文件的访问权限</p><p><img src="https://bu.dusays.com/2024/01/05/6597b7259ebac.png" alt="60-9.png"></p><p>文字设定法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u代表本用户   g代表组用户  o代表其他用户  a代表所有用户</span><br><span class="line">权限：r读权限   w写权限  x执行权限  -代表没有权限</span><br><span class="line">权限的增删  +代表增加权限   -代表去掉权限  =代表赋予某种权限</span><br><span class="line">chmod  u=r,g+r,o=x file7</span><br></pre></td></tr></table></figure><p>例子：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/1eiYdFfQ0lFSfW" alt="60-10"></p><p>数字设定法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 以下为注释</span><br><span class="line">rwx rwx r-x</span><br><span class="line">111 111 101</span><br><span class="line">7   7   5</span><br><span class="line">2^2 + 2^1 + 2^0 = 7</span><br><span class="line">r = 4</span><br><span class="line">w = 2</span><br><span class="line">x = 1</span><br><span class="line">- = 0</span><br><span class="line">普通文件的权限一般就是664 rw-rw-r--</span><br></pre></td></tr></table></figure><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[asdf@www.masswerk.at:2]$ pwd</span><br><span class="line">/home/asdf</span><br><span class="line">[asdf@www.masswerk.at:2]$ echo &quot;hello&quot; &gt; file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ ls</span><br><span class="line">file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ cat file1</span><br><span class="line">hello</span><br><span class="line">[asdf@www.masswerk.at:2]$ ll file1</span><br><span class="line">-rw-r-----  1  asdf      users            5  2024/01/05 23:12:07  file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ chmod 775 file1</span><br><span class="line">[asdf@www.masswerk.at:2]$ ll file1</span><br><span class="line">-rwxrwxr-x  1  asdf      users            5  2024/01/05 23:12:07  file1</span><br></pre></td></tr></table></figure><blockquote><p>以下关于 umask 的内容转载自 <a href="https://www.coorw.com/3210.html">https://www.coorw.com/3210.html</a></p></blockquote><p>在 linux 系统中，我们创建一个新的文件或者目录的时候，这些新的文件或目录都会有默认的访问权限，umask命令与文件和目录的默认访问权限有关。</p><p><code>umask</code>为 Shell 内建命令，用于设置创建文件时的权限掩码。权限掩码由 3 个八进制数字组成，将 777（八进制）减掉权限掩码后，即可得到新建文件的默认权限。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umask [-p] [-S] [MODE]</span><br></pre></td></tr></table></figure><p>后不跟任何选项与参数单独执行 <code>umask</code>，则以八进制格式显示当前权限掩码。</p><p>选项说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-p [MODE]</span><br><span class="line">// 以八进制数字形式显示或设置权限掩码。</span><br><span class="line">// 当 MODE 没有提供时，显示当前权限掩码，为默认选项</span><br><span class="line"></span><br><span class="line">-S [MODE]</span><br><span class="line">// 以字符形式显示或设置新建文件的默认权限。</span><br></pre></td></tr></table></figure><p><strong>注意：出于安全的考虑，文件的执行权限不能通过权限掩码来设置，必须手工修改。</strong></p><p>常用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 设置权限掩码并查看</span><br><span class="line"></span><br><span class="line">#设置权限掩码</span><br><span class="line">umask 044</span><br><span class="line"></span><br><span class="line">#查看权限掩码</span><br><span class="line">umask</span><br><span class="line">044</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 以字符形式显示新建文件的默认权限</span><br><span class="line"></span><br><span class="line">umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><code>find</code>命令：查找文件。</p><p><img src="https://bu.dusays.com/2024/01/06/65982ed6a564e.png" alt="60-11.png"></p><p>按照名字进行查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find  路径（绝对路径或相对路径） -name  &quot;文件名字&quot;</span><br><span class="line"></span><br><span class="line">文件名字可以使用通配符</span><br><span class="line">* 代表任意个字符</span><br><span class="line">? 代表任意一个字符</span><br><span class="line">[] 代表一个范围，中括号是数字或字母，也可结合使用</span><br></pre></td></tr></table></figure><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/gly_CGKT07Ma7-" alt="60-12"></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>重定向输入<code>&lt;</code>，就是 stdin<br>重定向输出<code>&gt;</code>或<code>1&gt;</code>，就是 stdout<br>重定向的错误输出<code>2&gt;</code>，就是 stderr</p><p><img src="https://bu.dusays.com/2024/01/06/65983aa216bc8.png" alt="60-13.png"></p><p><strong>linux 一切皆文件</strong><br>文件句柄（门把手）<br>文件描述符 fd<br>可以将文件描述符看成是操作文件的指针</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/0X3oMLu-e6tnRi" alt="60-14"></p><p>追加模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;</span><br><span class="line">标准输出的追加，在原有基础上继续追加。</span><br><span class="line">示例：</span><br><span class="line">echo &quot;Fischl&quot; &gt;&gt; file1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2&gt;&gt;</span><br><span class="line">标准错误的追加</span><br></pre></td></tr></table></figure><p>例外：</p><p><img src="https://bu.dusays.com/2024/01/06/65984077834f3.png" alt="60-15.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在旧电脑上安装了 Ubuntu ，把 Windows 和其他文件一整个扬了的那种，有一种毁天灭地的美。&lt;/p&gt;
&lt;h2 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot; title=&quot;文件系统&quot;&gt;&lt;/a&gt;文件系统&lt;/h2&gt;&lt;p&gt;win</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="linux" scheme="https://loveofpeach.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>2023 总结</title>
    <link href="https://loveofpeach.github.io/posts/ccc2b0d8.html"/>
    <id>https://loveofpeach.github.io/posts/ccc2b0d8.html</id>
    <published>2023-12-26T05:37:52.000Z</published>
    <updated>2023-12-31T12:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>写总结似乎是个人博客圈的时髦，正好考研告一段落，我也得闲回顾这一整年发生的事。记忆确实是重要的东西，因此想要在还能拂去灰尘，将它们擦拭干净的时候记录下来。</p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><center><i>你的人生一定会比别人活得麻烦</i></center><center><i>慵懒烦躁的无可救药</i></center><center><i>但那不是因为你有多优秀</i></center><center><i>而是因为你有多软弱</i></center><center><i>你这一辈子都要怀抱着这份软弱活下去</i></center><center><i>但愿你不要把这种麻烦</i></center><center><i>当作自己的生存价值</i></center><p><br></p><p>我还在北京瞎转的时候，总是要挤挤满了人的地铁。地铁上总是座无虚席，抓手也不剩几个，多数人站着只是因为他前后左右的人也是站着的而已。把人的躯干看成秆，脑袋便是穗。这黑色的麦田中，黄底黑字的抓手广告特别惹眼：</p><p><strong>BOSS 直聘 | 站着也能刷 BOSS 直聘了</strong></p><p>这些抓手会一排排地、有序地延伸下去，然后在连接的另一个车厢里拐个弯继续将整个列车串起来。这种景象十分有趣（amusing）：一根巨大的晾衣绳，将整个列车的人都晾了起来，列车起停，人们东倒西歪，就是一阵玄色的麦浪。</p><p>晚上洗完澡后，我一定会经过学校的快递站。这个时候一天的快递件差不多都被取走，员工们会把箱门打开准备明天的工作。</p><p>一排排、一列列、一箱箱的张开不同角度的门。</p><p>这些层层叠叠的形式将一丝诙谐蕴含其中，终于在大学生活快要结束的时候，为我带来了救赎。</p><blockquote><p>痛苦在一颗心中越积越多，就会在晴朗的一天像干草一样燃烧起来，放出一团无比欢乐的烈焰而统统燃尽。</p></blockquote><h2 id="祖母去世"><a href="#祖母去世" class="headerlink" title="祖母去世"></a>祖母去世</h2><p>祖母死了。</p><p>疫情放开后的年初，她在一个狂风大作的凌晨死了，我开车赶过去的时候，床头一个手机开着网易云音乐，已经在放般若波罗蜜多心经了（这玩意似乎不是死人的时候放的），一个有经验的约莫六十岁的男人扯掉她的造瘘袋，手忙脚乱地联系各种各样的人。</p><p>守夜那天晚上，人来之前，我和 F 及他的兄弟也没什么可说的。F 又扯到 M 的事上，当着祖母的面，最后得出结论：“你们要是跟和 M 在一块混的男的接触，就是认贼作父！”</p><p>丧事要到拂晓的时候才开始，在那之前，我睡在楼上的沙发上，试图回忆祖母这个概念。然而我并未与祖母生活过，以前的接触只能算是跟随 F 的探望，因此只能通过身边的人间接地了解。</p><p>M 和婆婆关系并不紧张，至少从我的视角来看是这样，这点似乎和很多家庭不一样。这位婆婆，也就是我的祖母，过的并不轻松。她嫁给了 G ，并给 G 生了三个儿子。G 是识字的，在 C 市尤其是农村，这个年纪的人识字就超过了很多人。有次我在看《水浒》，他凑过脑袋来把书合上看了眼封面，立即煞有介事地说：“少不看水浒…”。G 壮年时断断续续总有疾病缠身，因此很多事情都落在祖母的肩上。据说 G 曾靠着拼爹谋过一个好职位，看生产队的仓库，后来失了火，G 也就丢了这个工作。</p><p>当时 G 的家里穷，只能供一个上学，于是就让 F 去，最后读了个 C 市的二本师范，回到镇上教书。F 的青壮年时代，正是中国经济野蛮生长，遍地机会的时代。F 曾无数次和我吹嘘自己本来可以怎样：如果当初去了南京怎样，如果当时继续给镇上人家盖小二层怎样怎样。</p><p>F 的两个兄弟，其中一个老实巴交，因为不会用滴滴只能打上百块的出租车，最近的爱好是骂蓬佩奥，但幸运的是他的女儿比较厉害，初中的时候考过全县前几名，不过最近似乎厌学辍学中。F 的另一个兄弟 S 属于在深圳能当三和大神的水平，但是还要分出他两个哥哥的金钱和精力。最后 S 也离婚了，抛弃了自己的女儿，极少来往，后来又谈了两个，最近的一个自带女儿，他们的家庭教育也很崇尚威胁恐吓，甚至对外人也毫无自制，S 问 B 和我：“你们两个打一架，谁打的过谁？”，B 自谦地一笑：“那应该是我打的过”。这个没有血缘关系的小妹妹似乎很乐于见到我，喜欢往我身上扑，但是我对她的未来很悲观。某次年关，F 接到 S 的电话，立刻暴怒，厉声呵斥了一通，原来是 S 没钱过年，找 F 借点，挂掉电话后 F 又教训了我一番。</p><p>这些零碎的琐事，祖母都不是局外人。小学的时候，F 有一天晚上回来很晚（或者是没回来？记不清了），M 歇斯底里地怒了，将自己和 F 的照片一撕两半，大吵了一架，并且在电话里向婆婆哭诉。第二天我起来的时候，客厅桌上的玻璃碎了。</p><p>她在最后一年，还拉着我的手说：“去把你妈妈带回来好不好…你去求她，一定有用的…”，她落下泪来，一时没有主张。</p><p>是的，要失读者的望了，祖母并非一个可以向其寻求智慧的人，但情感上也无法苛求她做到更多。</p><p>疫情放开后，G 和祖母先后感染，G 痊愈后先回到家中，而祖母仍在医院。祖母回来之前，G 一直念叨，回来之后，就又回到之前的打骂状态——即使 G 是个瘫痪在床多年一直靠祖母照顾的人。</p><p>F 拒绝让 M 参加葬礼。</p><p>车队敲锣打鼓、惊天动地地出发，祖母的儿子们手执两个白色的纸棍，而孙辈则一红一白，这里的寓意似乎是，孙辈倒也不必过于悲伤，还须保留一点积极的心态。</p><p>火葬场业务繁忙，大概是由于无准备的疫情放开，死人太多的缘故，那阵子做白事的都赚翻了。</p><p>期间，只有两人因祖母的死难过，一个 G ，一个是 S ，怀念她的竟是两个最不肖的。G 瘫在楼上的床上大喊大叫要求见祖母一面，但是显然他的儿子们并不愿将他从二楼搬到一楼见一面祖母。</p><h2 id="最后的大学半年"><a href="#最后的大学半年" class="headerlink" title="最后的大学半年"></a>最后的大学半年</h2><p>新学期，和室友们去爬泰山。某个室友较胖被落在后面，但还是要坚持全程爬上山祈愿，我只好留在后面慢悠悠的走。</p><p>山顶很冷。</p><p>实习和毕业之前已经提过。</p><p>说实话，考研一战的时候我并无上岸的预期，因为当时能不能毕业都是问题。大三下学期，大家的选修课学分已经修满的时候，我大概只修了四五分，此外还有很多必修学分没有补上，另外大四一整年都在重修体育课。这实在是大学摆烂的恶果。</p><p>不过确有两个值得一提的课程，Python 和离散数学。Python 是选修课，离散数学是必修，因为当时有门必修课需要重修，但是课程改革后这门课被毙掉了，只能选一个外系的必修课替代，于是就选了离散数学。两门课的作业都被老师作为了优秀示范。Python 最后是优秀，离散数学最后拿了 80+/100 ，虽然没有预期的 90+ ，但对外系学生似乎也不错了：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/-luTUSJGESnTuX" alt="59-1"></p><p>这两门课让我捡起了一点信心，终于下定决心要准备考研了。虽然在之后被证明只是叶公好龙罢了。</p><h2 id="游戏戒退"><a href="#游戏戒退" class="headerlink" title="游戏戒退"></a>游戏戒退</h2><p>大学里摆烂的时候干什么了？主要是碎片化的信息和番剧游戏，另外读了可怜的十几本书大概。</p><p>碎片化信息和碎片化娱乐是注意力杀手，以至于到了后期我甚至无法看一个二十分钟的番剧视频——是的，哪怕是以娱乐为目的的视频，二十分钟集中注意力对我都是痛苦的。</p><p>我意识到需要改变，但必须“徐徐图之”，最后使用番剧和电影代替了碎片化信息的生态位。</p><p>按游玩时间排序，大概是王者荣耀，原神，Minecraft，和平精英，红警，以及和室友玩的战地之类的。王者是大学开始玩的，准备初试的时候还特地上王者号看了一眼邮件《再相见，真好！》，告诉我玩了 3300 个小时，并附 20 铭文碎片。</p><p>一战的时候游戏还没退，真就考研氛围组了，这次无论如何也要退了。</p><p>首先是王者荣耀，退这个坑应该是玩的腻了。虽然大学早期的时候我经常一个人单排，这个要是对匹配算法不服气的话是会上头的。但是后期基本都是和室友一块玩，一个人玩没意思，颇有点“年轻人的电子扑克”的意思，毕业之后自然退坑。</p><p>原神大概是今年四五月退的，退坑的方式比较奇怪。本想着退几天先，但在这没玩的几天里，我感觉自己与那边世界的联系愈发稀少，那里的时间变成一种与我无关的缓慢流动的黏稠物。但同时，主线和重要任务我还是随时可以体验，不去推进就永远在那里，世界好像被冻结封存起来。我就在这样一种破罐子破摔同时又有恃无恐的心态下弃游了。</p><p>Minecraft 的退坑就非常意外了，因为官方启动器出锅，我就退坑了。虽然了解到可以用第三方，例如 HMCL 之类的，但还是趁势退坑了。</p><p>枪战游戏苦手，没有室友带就不玩了，本身也没太大兴致。</p><p>崩铁甚至限时活动都没有，我就每个版本登录领一下十连抽。</p><p>如果硬要让我总结在游戏上的得失，其实也没有一个言之凿凿的结论，很难说没有游戏我就会变得更好或是更坏。游戏是转移注意力的方式，让我在思想上没有准备的时候对痛苦麻木一点。</p><h2 id="生日"><a href="#生日" class="headerlink" title="生日"></a>生日</h2><p>M 重组了自己的家庭，我也因此多了一个异父异母的亲妹妹。</p><p>我称她为“领域外的妹妹”，当然，只是我暗自这么称呼的，也许有机会可以征求她的意见。这么叫也许是为了将“异父异母的亲妹妹”这个名号简化的可爱一点。本博客的<a href="https://loveofpeach.github.io/posts/db1a1b2e.html"> 双曲线讲义 </a>其实就是领妹中考前给她写的讲义。</p><p>今年生日的时候，M 打电话让我和他们一家出去吃饭，打开车门的时候，领妹就坐在里面。</p><p>我们之前在我外婆家（可能现在也算是她外婆？）见过一面。她个子不高，留着齐肩短发，白色上衣，那时她正把床当桌子，蹲着写语文题。这就是一张很普通的现代床，中国很多家庭都有这种款式，只不过没有席梦思。外婆家是农村典型的三间两厨，几经装修，很多老物件都丢掉了。比如正屋进门就能看见的，拿着寿桃、额头硕大的寿星像，上面写着繁体的“福如东海水，寿比南山松”，另外其两侧八列（如果没记错的话）长幅挂画，上面大概是春夏秋冬，梅兰竹菊之类的。小时候正屋里面的长桌上还有一款古式的钟，每到正午就会 duang~ 地响几声，这个钟貌似还保存着。长桌的下面有一个小缸，以前每年外婆家都会做点豆瓣酱，我至今还记得自己掀开盖子闻豆瓣酱，回过头来发现外公半裸着上身，一手撑在草席上，一手摇着蒲扇看着我的神情。最后，还有一张中式的床，这张床现在仍在正屋西间使用，上面挂着偏粉色的红色的蚊帐，正对着长了两个角的老式电视机。不过，现在东间有了一个新的电视机。</p><p><img src="https://pic1.zhimg.com/80/v2-e25f3693f89ebf81c97cf1b994085be0_1440w.webp" alt="59-1dot5.webp" title="类似于这种"></p><p>领妹坐在车后座，前面是 M 和她的男人。</p><p>领妹还是留着一样的短发。这次见面，已是她中考结束之后，高中之前军训的日子。领妹是请假出来的，她披着一件雪白的外套，衬着里面墨绿的军训衣，车窗外的阳光照亮她的脖子，胸脯微微隆起形成好看的曲线，她的下身还穿着军训裤，我不记得她是否戴着眼镜。</p><p>沉默。</p><p>我把她放在车上的帽子往她那靠了靠。</p><p>“大学里就能攒一套房了吗？”领妹看了我一下，然后回过去稍微低下头，很认真地疑惑道。</p><p>“怎么可能。”</p><p>此时我并没有和 F 和 B 住在一起。我住在 C 市相对郊区的地方，F 和 B 住在 C 市的某个镇上。否则他们也不能正大光明地开着车来小区带我。</p><p>“那你房子哪来的呀？”</p><p>我稍加思索了一番，房子是 F 和 M 的，将来是留给 B 的，说 F 买的也不好（因为必然会加上称谓），说 M 买的也不好（考虑到领妹），说 F 和 M 一起买的也不合适（考虑到前面的司机）。就和领妹说，家里买的呗。</p><p>大一睡前扯淡的时候，当时还单身的室友表达了强烈的脱单欲望，于是我献计：大伙合起来到鹤岗买个超迷你的房子，然后在校园里找对象的时候就说自己已经买了房，没向家里要钱 balabala… </p><p>“嗯，我还以为大学里就能攒起一套房了呢。我觉得我应该攒不下来。”</p><p>我们还在到处溜达找吃饭的地的时候，M 和她的男人被一个热情的大姐拦下了，于是我们就去吃烤鱼。</p><p>四人桌，M 坐在我的左边，领妹坐在我的对面。我一般不在餐桌上找话题，于是这个艰巨的任务就交给两位社会人士了。</p><p>“你妹说以后人们可能会吃丸子，就沙发上一躺，吃着丸子。”</p><p>“毒品？”</p><p>“不是。就是把各种营养啊，各种味道的肉啊蔬菜之类的东西混在一起做成丸子。以后人们只要吃丸子就好了，很方便，也节省时间。”</p><p>“那不就是狗粮？”</p><p>“哈哈哈。。。确实嗷，那样就和狗粮差不多。”</p><p>我们吃的很慢，中途还因为水不断蒸发汤越来越咸加了几次汤。M 知道我喜欢吃鱼，但不知道唯独烤鱼除外——也许生鱼片也要排除，虽然我没吃过。总之，我们吃完就离开了。自动扶梯上，我和领妹间错一阶站在后面，我们现在一样高了。这时候，我就想，她一定要拿手比划过来，比划我们的身高了。她果然难掩笑意地把手伸过来，从自己的额头处水平地划到我的额头前方，露出小小的得意神情。</p><p>分别的时候，领妹坐在车里，探出视线来朝我摆手：“生日快乐。”</p><p>F 并未记得我的生日。</p><h2 id="二战的准备和失利"><a href="#二战的准备和失利" class="headerlink" title="二战的准备和失利"></a>二战的准备和失利</h2><p>一刻也没有为毕业多愁善感，接下来赶到战场的是——考研二战！</p><p>第一个月无论如何都睡不着，辗转反侧之后还是去医院开了艾司唑仑。这也为最后的失利埋下伏笔。</p><center><table>  <tbody>    <tr>      <td></td>      <td>态度</td>      <td>方法</td>      <td>信息差</td>      <td>知识</td>    </tr>    <tr>      <td>一战</td>      <td>敷衍</td>      <td>无</td>      <td>巨大</td>      <td>没学完</td>    </tr>    <tr>      <td>二战</td>      <td>勉强</td>      <td>有</td>      <td>仍有</td>      <td>充分</td>    </tr>  </tbody>  <colgroup>    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">    <col style="width: 20%;">  </colgroup></table></center><p>自认知识准备还是充分的，李林模拟卷最后130，140的样子，张宇的，超越的卷子，做的结果也都在博客里了。</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/G89VUf64Z0SQuk" alt="59-2"></p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/UKTo2Tqr5wcxL7" alt="59-3"></p><p>考数学的前一天晚上硬是睡不着觉，或许是几年前信息竞赛的时候被 F 打鼾弄得睡不着觉，留下了心理阴影，吃了 2.5 粒安眠药，平时只吃一颗。睡倒是睡着了，考试的时候晕晕乎乎，出现了很多 2^3=9 这类错误，平时能做出来的题都没有做出来。本来自己也是对自己千叮咛万嘱咐，第一问没做出来有时候不妨碍做第二问，但考场上就是没看。这样下来不知道能有几分。</p><p>专业课按 408 准备的，那么多功夫全白费了，到考前最后一天才发现咸鱼上有卖往年试题的。操作系统部分应该没什么，算法题我按自己的写法，不合题目要求也不知道能拿几分。这里确是输给信息差了。</p><p>政治没法估分，英语应该还是正常水平。</p><p>最后的结局恐怕能捞到一个非全就不错了。</p><p>去自习室的路上有一段路，路面上划了很多线，我骑着自行车路过的时候常常压着这些线玩，想象两边都是悬崖。</p><p>某夜十一点，等滴滴打车的时候，路灯下，十二月的雪洋洋洒洒：我竟从盛夏学到了大雪。</p><h2 id="第一台电脑"><a href="#第一台电脑" class="headerlink" title="第一台电脑"></a>第一台电脑</h2><p>是的，考研后买了我的第一台电脑。之前大学里都是用的 B 的二手电脑。</p><p>虽然不抱希望，还是要准备复试的。旧电脑开机都很卡顿了。</p><p>Redmibook，不到 5k.</p><h2 id="书，影视"><a href="#书，影视" class="headerlink" title="书，影视"></a>书，影视</h2><p>报菜名环节，只说一些能想起来的，不一定全。</p><p>书：</p><center><table>  <tbody>    <tr>      <td>书名</td>      <td>都柏林人</td>      <td>小径分岔的花园</td>      <td>对联趣谈</td>    </tr>  </tbody>  <colgroup>    <col style="width: 18.8889%;">    <col style="width: 23.6667%;">    <col style="width: 32.4444%;">    <col style="width: 25%;">  </colgroup></table></center><p>动漫：</p><center><table>  <tbody>    <tr>      <td>番名</td>      <td>备注</td>      <td>番名</td>      <td>备注</td>    </tr>    <tr>      <td>物语系列全部</td>      <td>按时间顺序二刷</td>      <td>龙与虎</td>      <td>二刷</td>    </tr>    <tr>      <td>名侦探柯南</td>      <td>主线部分</td>      <td>我推的孩子</td>      <td>有马佳奈谢谢</td>    </tr>    <tr>      <td>Spy Family</td>      <td>part2 中间弃之</td>      <td>灰色的果实</td>      <td></td>    </tr>    <tr>      <td>灰色的迷宫</td>      <td></td>      <td>灰色的乐园</td>      <td>打戏燃</td>    </tr>    <tr>      <td>药屋少女的呢喃</td>      <td>穿越到后宫的现代人</td>      <td>夏日重现</td>      <td>剧情节奏优秀</td>    </tr>    <tr>      <td>AI 电子基因</td>      <td>看4集弃了</td>      <td>恋如雨止</td>      <td>看3集弃了</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table></center><p>电影 &amp; 剧：</p><center><table>  <tbody>    <tr>      <td>电影名</td>      <td>备注</td>      <td>电影名</td>      <td>备注</td>    </tr>    <tr>      <td>壳中少女（压缩）</td>      <td>好看</td>      <td>壳中少女（燃烧）</td>      <td>好看</td>    </tr>    <tr>      <td>壳中少女（排气）</td>      <td>好看</td>      <td>末代皇帝</td>      <td>好看</td>    </tr>    <tr>      <td>唐红的恋歌</td>      <td>也就那样</td>      <td>零的执行人</td>      <td>也就那样</td>    </tr>    <tr>      <td>绯色的子弹</td>      <td>也就那样</td>      <td>万圣夜的新娘</td>      <td>也就那样</td>    </tr>    <tr>      <td>黑铁的鱼影</td>      <td>柯哀狂喜</td>      <td>流浪地球</td>      <td>（第二部）</td>    </tr>    <tr>      <td>利兹与青鸟</td>      <td>非常好看</td>      <td>想哭的我戴上<br>了猫的面具</td>      <td>至今已觉不新鲜</td>    </tr>    <tr>      <td>我不是药王</td>      <td>嗯</td>      <td>处女泉</td>      <td></td>    </tr>    <tr>      <td>犬王</td>      <td>银幕上的摇滚</td>      <td>铃芽之旅</td>      <td>一般</td>    </tr>    <tr>      <td>龙猫</td>      <td>挺好</td>      <td>魔女宅急便</td>      <td>好看</td>    </tr>    <tr>      <td>起风了</td>      <td></td>      <td>闪电侠一、二</td>      <td>垃圾</td>    </tr>    <tr>      <td>江户川柯南失踪事件～史上最糟糕的两天～</td>      <td>挺好</td>      <td>盗钥匙的方法</td>      <td>挺好</td>    </tr>  </tbody>  <colgroup>    <col style="width: 22%;">    <col style="width: 28%;">    <col style="width: 22%;">    <col style="width: 28%;">  </colgroup></table></center><blockquote><p>战场原：阿良良木君还真在处理什么事情，而且这次看来还是相当棘手的。我虽然没有那个时候的经历，但从文字上看，这次应该超过了春假时的程度。<br>羽川翼：果然你也这么想？<br>战场原：嗯，但是呢，从特意发这种信息这一点来看还算有所长进。以前的他可是只会盯着眼前呢。<br>羽川翼：是啊。<br>战场原：不行，电话打不通。不过，他毕竟是男孩子，也不用那么担心。好吧，等他回来看我跟他炫耀和羽川同学一起洗澡的事。<br>羽川翼：这也谈不上有什么效果吧。<br>战场原：就说羽川同学的身体曲线是这样…这里又是这样…如何？<br>羽川翼：不许用手比比划划的！<br>战场原：但这么一来，你遇到的那只虎只能靠我们自己对付了。<br>羽川翼：虎？但是那只虎已经…<br>战场原：嗯，我也曾想过那老虎莫非就是火灾的原因。难道不是？火灾的原因已经调查清楚了么？<br>羽川翼：不，那个还不清楚…<br>战场原：是吗，那可能是我「抢跑」了。</p></blockquote><h2 id="2023-的结束"><a href="#2023-的结束" class="headerlink" title="2023 的结束"></a>2023 的结束</h2><p>高中同学 Z 早上微信发消息出去搓一顿，可惜我作息颠倒，回复时已是下午，此君明日还须上班。</p><p>月底，和领妹一家外去搓了一顿，而后去超市买东西。领妹推着购物车玩很像我之前，加速，再把整个人重心压在推车上。我实在也没什么可买的，最后拿了丹麦的曲奇饼和不二家的棒棒糖，回到住所后也不知道为啥要买这个棒棒糖。</p><p>Well, Let’s call it a year.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写总结似乎是个人博客圈的时髦，正好考研告一段落，我也得闲回顾这一整年发生的事。记忆确实是重要的东西，因此想要在还能拂去灰尘，将它们擦拭干净的时候记录下来。&lt;/p&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>一类问题的新解法</title>
    <link href="https://loveofpeach.github.io/posts/f06381e8.html"/>
    <id>https://loveofpeach.github.io/posts/f06381e8.html</id>
    <published>2023-12-09T15:13:01.000Z</published>
    <updated>2023-12-25T09:07:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>一种考研数学中某类题型的新解法，与其背后的几何意义有关。目前各平台的考研博主中均未见到此类解法。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>若 $f(x)$ 在区间 $[a,b]$ 上连续，则积分上限的函数 $\Phi(x)=\int_{a}^{x} f(x)\, {\rm d}x$ 在 $[a,b]$ 上可导：</p><script type="math/tex; mode=display">\Phi'(x)=\frac{\rm d} { {\rm d}x}\int_a^x f(t){\rm d}t=f(x) \quad (x\in [a,b])</script><p>一般地，若 $f(t)$ 连续，$g(x)$ 和 $h(x)$ 可导，则：</p><script type="math/tex; mode=display">\frac{\rm d} { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t=f[h(x)]h'(x)-f[g(x)]g'(x)</script><p>上式可形成几何直观：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/_SlyQL8kzBX8PO" alt="58-1"></p><p>这里 $h$ 和 $g$ 可理解为从 $x\rightarrow t$ 的映射。积分变量为 $t$ ，不妨设 $g(x)&lt;h(x)$ ，对 $f(t)$ 从 $g(x)$ 到 $h(x)$ 积分，$\int_{g(x)}^{h(x)}f(t){\rm d}t$ 的几何意义即是上图中的阴影面积。那么 $\frac{ {\rm d} } { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t$即是阴影面积对 $x$ 的变化率。为此，我们考察当 $x$ 获得一个很小的增量 $\Delta x$ 时，阴影面积将如何变化：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/3uP9q5TP-67ltD" alt="58-2"></p><p>显然，阴影面积的变化为上图中紫色和绿色曲边梯形的面积变化（可正可负）之和。</p><p>当 $x$ 获得增量 $\Delta x$ 时，$h(x)$ 的增量为：</p><script type="math/tex; mode=display">\Delta y=h'(x)\Delta x+o(h'(x)\Delta x)</script><p>当 $\Delta y$ 很小时，绿色曲边梯形的高可用 $f[h(x)]$ 替代。</p><p>因此绿色面积为：</p><script type="math/tex; mode=display">f[h(x)][h'(x)\Delta x+o(h'(x)\Delta x)]</script><p>同理紫色面积为：</p><script type="math/tex; mode=display">f[g(x)][g'(x)\Delta x+o(g'(x)\Delta x)]</script><p>因为 $\int_{g(x)}^{h(x)}f(t){\rm d}t$ 是从 $g(x)$ 积到 $h(x)$ ，所以绿色面积<strong>贡献</strong>为正，紫色为负。当然，也可以从 N-L 公式的角度理解，记 $f(t)$ 原函数为 $F(t)$ ，则 $\int_{g(x)}^{h(x)}f(t){\rm d}t=[F(t)]_{g(x)}^{h(x)}$ ，由此可知紫色前应当加个负号：</p><script type="math/tex; mode=display">\begin{aligned}\Delta \int_{g(x)}^{h(x)}f(t){\rm d}t & = f[h(x)][h'(x)\Delta x+o(h'(x)\Delta x)] \\     & - f[g(x)][g'(x)\Delta x+o(g'(x)\Delta x)] \\\end{aligned}</script><p>对上式两边同除 $\Delta x$ ，再令 $\Delta x \rightarrow 0$ ，即得：</p><script type="math/tex; mode=display">\frac{ {\rm d} } { {\rm d}x}\int_{g(x)}^{h(x)}f(t){\rm d}t=f[h(x)]h'(x)-f[g(x)]g'(x)</script><h2 id="三维情形的拓展"><a href="#三维情形的拓展" class="headerlink" title="三维情形的拓展"></a>三维情形的拓展</h2><p>三维的情形其实我在 <a href="https://loveofpeach.github.io/posts/12839668.html">几何角度下的一个公式</a> 这篇文章中已经介绍了。</p><p>当时是我初学这块内容时，觉得同济书的证明过于吓人，试图从几何角度看看能不能建立直观，于是诞生了上面那篇文章。至于为什么是初学？因为大一疫情的时候在家摆烂，二重积分之后的高数一丁点没听。还好老师捞了一把没有挂高数。</p><h2 id="应试中的应用"><a href="#应试中的应用" class="headerlink" title="应试中的应用"></a>应试中的应用</h2><p>这类题目的特征是，它往往会要你对一个看起来不太能用求导做的积分做一些蜜汁操作。按照上面的思路，我们完全可以霸王硬求导 (′▽`〃)</p><p>是的，这里有一个 <a href="https://yanwenzi.fuhaoku.net/">颜文字网站</a> ，我并不会真的在心里默默地记了很多颜文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QAQ</span><br><span class="line">QwQ</span><br><span class="line">qwq</span><br><span class="line">qaq</span><br><span class="line">=_=</span><br><span class="line">:)</span><br></pre></td></tr></table></figure><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><p>先来看一道典型例题。你可以在 <a href="https://loveofpeach.github.io/posts/55931ee1.html">数二强化</a> 下的<strong>超越模拟题23</strong> pdf 第四页找到它。</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/9M8xf1ZlWt9Loz" alt="58-3"></p><p>看到这个形式，很容易想到洛必达：分母是 t 的函数，记为 $f(t)$ ，分子也是 t 的函数。现在的问题是如何对 $f(t)$ 求导：</p><p>让我们循着之前的思路，思考导函数最初的意义，即变化率。将题目中的积分区域画出来，其实就是要求阴影面积对 t 的变化率。</p><p>那么照着之前的推导，就是求被积函数在最外面的曲线上的积分。这提示我们使用曲线积分。</p><p>过程都在上面的图里面了。</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><p>上面的题型足以应付多数情况了，但是有一种例外！在这种情况下，照搬例一做法会得到错误答案，这是因为例一的积分区域、要求关于哪个变量的变化率天然地满足了一个限制条件。若无此限制条件，做法上还需进行调整才是。</p><p>下面的例子也补充了例一推导中疏漏的一处：</p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/j4VCgle3qV4cr9" alt="58-4"></p><p><img src="https://sway.office.com/s/jSZcrgReU4mecpIB/images/1oe9wwnJ79lmqE" alt="58-5"></p><p>你可以在 <a href="https://loveofpeach.github.io/posts/55931ee1.html">数二强化</a> 下的<strong>李林六24</strong> pdf 第16、17页找到它。</p><p>分析都在图里面了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一种考研数学中某类题型的新解法，与其背后的几何意义有关。目前各平台的考研博主中均未见到此类解法。&lt;/p&gt;
&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;若 $f(x)$ 在区间 $</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="考研数学" scheme="https://loveofpeach.github.io/tags/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/"/>
    
    <category term="高数" scheme="https://loveofpeach.github.io/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>硬盘学习资料</title>
    <link href="https://loveofpeach.github.io/posts/a72e3cc4.html"/>
    <id>https://loveofpeach.github.io/posts/a72e3cc4.html</id>
    <published>2023-11-18T03:45:05.000Z</published>
    <updated>2023-12-09T15:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>夫藏舟于壑，藏山于泽，谓之固矣，然而夜半有力者负之而走，昧者不知也。</p></blockquote><p>前一阵子，电脑的忽然死机让我有点担心数据的安全。于是买了一块硬盘备份数据，但思来想去，还是大厂商的云端硬盘更为安全。至于 blog 本身资料的备份，也可以设为不公开，保存在云上。</p><p>这里先放一些以前的旧资料，它们一开始是在一块看起来就非常不可靠的 32GB U盘上，现在保存在移动硬盘上。</p><p>虽然这些资料我大多都没看过，不过总会有需要的人吧。</p><p><a href="https://drive.google.com/file/d/1cH2VcvhQzRgvIb0mBKcUVpbXokWIAMDz/view?usp=drive_link">2016冬令营课件.zip</a> ，这里面的 ppt 导出 pdf 会丢失动画效果，因此就直接一整个压缩了：</p><p><img src="https://bu.dusays.com/2023/11/18/655844e283b26.png" alt="57-1（2016冬令营课件）"></p><p>树上 DP ：</p><div class="row"><iframe src="https://drive.google.com/file/d/1aCLi1pQKX97j-ZzU3JapP6E6OUYF56sb/preview" style="width:100%; height:550px"></iframe></div><p>数论选讲：</p><div class="row"><iframe src="https://drive.google.com/file/d/1YAAzJjKKbFpgv5aGyK8atn8OwAOGBJ3w/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;夫藏舟于壑，藏山于泽，谓之固矣，然而夜半有力者负之而走，昧者不知也。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一阵子，电脑的忽然死机让我有点担心数据的安全。于是买了一块硬盘备份数据，但思来想去，还是大厂商的云端硬盘更为安全。至于 blog 本身</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="动态规划" scheme="https://loveofpeach.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="数论" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>《龙与虎》短评</title>
    <link href="https://loveofpeach.github.io/posts/79ab37ca.html"/>
    <id>https://loveofpeach.github.io/posts/79ab37ca.html</id>
    <published>2023-10-15T12:17:21.000Z</published>
    <updated>2023-10-28T16:16:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看《龙与虎》，大约是几年前。最近二刷完，总想写点什么，然而我在写点什么之前又总想看看别人的评论，最后总是以 “我想写的别人都写到了，而且更深、更广” 这样的结局潦草作罢。</p><p>下面是目前我看到的最好的分析文章了：</p><blockquote><p><a href="https://www.zhihu.com/question/23648757/answer/2030795324">怎么评价《龙与虎》这部动画？ - 黑色耳机线的回答 - 知乎</a></p></blockquote><p>还是说点自己的感想吧。也许在 Songbirds 的伴奏下，读者还能勉强对付我用生硬文字拼凑出来的零星思考。</p><html><center><head>    <meta charset="utf-8">    <title></title></head><body>    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=554242361&auto=0&height=66"></iframe></body></center></html><p>说到底，情感这种东西最重要的是共同的经历。我们只能遗憾地承认，放眼人海，很难说两个人是天造地设的一对，非君不可，在不同的世界线里（假设），因缘际会，难免目及旁人。</p><p>那么，对彼此特殊的部分也就是两人共同的经历和回忆了，这是别人无法拥有、也无法夺走的优势。</p><p>这也是为什么异地恋难以善终、极具考验——因为你缺席（absent）了。开心无法分享，痛苦独自承担，情感的维系要么是一种自我感动式的催眠、沉溺于一种对另一半的抽象感觉，要么是出于维护在分开之前就已然积累的深厚的共同经历——这已经证明了共同经历的重要性。每天视频电话煲，放下手机的时刻，是否有种欣喜之后的空洞、重又陷入孤独的焦灼和无奈？这个时候如果别人在场，又会如何？遇到困难的时候 TA 会依靠别人吗？阔别许久，是否会有同一性的混乱？这次见面，你又变了一点，下次见面又会变成什么样呢？会变成我不认识的样子吗？明明以前在一起的时候，别人都说你变了，我却不以为然地笑着，你就是你呀。但是分别了这么久，我喜欢的是过去的你，还是现在的你呢？那么我又如何呢？我变了吗，变了很多吗？变到失去你曾经喜欢的我的那些特质了吗？如果是的话，我岂不是一个夺走名字，继承记忆的鸠占鹊巢的冒牌货？</p><p>但尚可安慰的是，从共同经历的重要性出发，我们也算是有一条明路可走：建构意义，创造回忆。必须指出，<em>寂寞无聊是一种由单调引起的东西，生活老是千篇一律，漫长的时间就会缩短做一团</em>，这种缩做一团的时间在计算共同经历的时候权值会显得非常可怜吧？</p><p>以上只是我观察别人的异地恋的一些胡思乱想，一个母胎 solo 的人竟然能乱七八糟、纸上谈兵似的想了这么多关于恋爱方面的事，我不禁哑然失笑。这种在玻璃上描摹他人的行为，并用自己的想象填充细节，多少有点滑稽。</p><p>但是我的理论在《龙与虎》里得到了很好的体现不是吗？<del>虽然用动画来印证显得有点可笑。</del>当高须和大河在教室里被逼着表态的时候，他们再也不能对两人建立起的深厚羁绊视而不见——因为对方已经占据了视线的全部。</p><p>这也是《小王子》想要告诉我们的：</p><blockquote><p>我那朵玫瑰，别人以为她和你们一样，但她单独一朵就胜过你们全部。因为她是我浇灌的。因为她是我放在花罩中的。因为她是我用屏风保护起来的。因为她身上的毛毛虫是我除掉的。因为我倾听过她的哀怨，她的吹噓，有时甚至是她的沉默。因为她是我的玫瑰。</p></blockquote><p>我们不能用一句总结性的话高度概括一部动画，或是一部小说，一个人，那是一种傲慢，并将抹煞全部的故事性。但在这里，还请允许我斗胆一句，大河是在扭曲的家庭中长大，最终得到救赎的孩子。这是很好的故事，但观看结束之后，我如同几年前一样，也如同网上所说的 “看完《龙与虎》之后，人均抑郁一周” 那样，陷入了一种郁郁寡欢的情绪，我知道这是我的软弱，也许我还会像以前那样写下诸如 “我的精神长久地处于今宵酒醒何处的混沌状态，只不过映入眼帘的既不是杨柳岸，也没有晓风和残月” 这种病恹恹到令人发笑的中二句子，但最近几年，我终于明白，无论是否有他人的帮助和陪伴，作出改变的首先必须是自己——至少这次，让这种无谓的情绪快点结束吧。</p><p>我定好明天的机械闹钟，如是想。</p><p>你未来到此处时，此花与吾同归于寂；你来到此处时，则此花颜色一时明白起来。</p><p>什么时候我也能遇到这样的人呢。</p><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.a322b2a206b49da0811aacf426758b05?rik=dAv0QHifXNRvyQ" alt="56-1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一次看《龙与虎》，大约是几年前。最近二刷完，总想写点什么，然而我在写点什么之前又总想看看别人的评论，最后总是以 “我想写的别人都写到了，而且更深、更广” 这样的结局潦草作罢。&lt;/p&gt;
&lt;p&gt;下面是目前我看到的最好的分析文章了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>OUTSIDER：从毛利兰到有马佳奈</title>
    <link href="https://loveofpeach.github.io/posts/578147a1.html"/>
    <id>https://loveofpeach.github.io/posts/578147a1.html</id>
    <published>2023-09-28T15:55:24.000Z</published>
    <updated>2023-12-28T13:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>毛利兰、约儿·佛杰、有马佳奈，这一类角色，她们的生活都被排除在剧情主线之外，但又是剧中的重要人物。这种割裂和冲突，部分原因可以归结于作者有意制造的党争，或者人物塑造的失策，<psw>“青山的本意是好的，人设表现的时候歪了”</psw>。不过我倾向于分析人物时不把作者的意志搬进来，而总是从剧情人物本身寻找解释，这样比较有趣。</p><p>作为对比，还须观察两个角色：灰原哀、战场原黑仪。灰原深度参与了剧情冲突的主线，而战场原在脱离非日常后，成为阿良良木历在非日常和日常之间游走的桥梁，在朋友需要的时候亦有亮眼表现。灰原和战场原是两个塑造非常成功、很有魅力的角色，<del>很符合大家对“现代女性”的想象</del>，<psw>原神🙏</psw></p><div class="note info flat"><p>文章包含博主的主观臆测和过度解读，没有考据，也不会详细介绍剧情。只是自娱自乐，或者供恰好看过《名侦探柯南》《Spy Family》《推しの子》《物语系列》的人打发时间。</p></div><p>兰最大的设定，空手道高手，其实在人物表现上是立不住的。她并没有给人一种高武力值应有的沉稳和外溢的安全感，这点可以和京极真对比。早期的时候，兰更像是一个“柯南报警器”，作用是看到命案现场用尖叫把柯南叫过来。后期似乎脱敏了，但兰的空手道功夫也仅仅限于在大局已定的时候帮助柯南收尾，制服暴走的犯人，起到一个锦上添花的作用（这个生态位还经常被其他角色替代），很少推动剧情的发展。再如兰的怕鬼设定，就更加可疑了。</p><p>这种脱离具体细节塑造和行为逻辑支撑的设定，只能叫做纸片人的“萌点”。比方说，在现实中你不可能真的期待一个手如柔荑、肤如凝脂的娇小妹子拿一把 AK47 突突敌人，但在二维世界里就可以：</p><p><img src="https://bu.dusays.com/2023/12/27/658bad8c339aa.png" alt="55-1.png"></p><p><img src="https://bu.dusays.com/2023/12/28/658d5d8e513cd.gif" alt="55-2.gif" title="不好意思其实我们原神是 3D 游戏"></p><p>因此兰的空手道设定也只是没有支撑的“萌点”而已，不能作为其“强大”的佐证。当然，这里需要对“勇气”和“强大”做出区分，强大并不是勇气的必要条件。兰当然有可贵的勇气。遗憾的是，虽然勇气在现实世界是稀缺的品质，但在二次元里却是一种泛滥的通货，尤其是《名柯》里，凡正面角色就没有一个没有勇气的。</p><p>事实上，毛利兰不仅不是一部分人想象的“强大独立的现代女性”，相反是一个典型的大和抚子式角色，空手道高手的设定落在她身上，在二维世界与现实世界微妙差异的作用下，甚至加强了她的“大和抚子性”。</p><blockquote><p>大和抚子：类似于中国人口中的“贤妻良母”、“贤内助”。</p></blockquote><p>早期的某一集中，一位普通男高路人向兰表白，遭到拒绝后仍纠缠不清，兰直接一拳（还是一腿忘了）砸弯了旁边的电灯柱，吓跑男高路人，而柯南在旁边目睹了全过程。</p><p>其实这个细节在传统男性视角下会非常有意思。兰的空手道功夫使她即使在外力下也可以保全自己的贞洁，这卸下了男性保护女性的义务，使他们放心，但她竟完全没有借着空手道，建立自己内心的秩序，在心理上划出缓冲区，保持一定的独立性。她还是那个将新一的半句话奉为圭臬，还是那个为犯人拉上窗帘，阻止警方狙击的人美歌甜小姐姐，没有自己的思考，很多时候表现为新一的依附。这种不平衡，即外在的强大和内心的弱小，势必会使自己沦为被依附者的武器，发挥物的功用。这种不平衡同样也表现在，心理上处于与自身外在力量不相称的对男方的守势的女性，会让传统观念的男性感觉自己占了便宜。当然，这里并不指新一，而是银幕外的观众。我确信大部分人不会想这么多，反而会认为想这么多的人脑子有病，心理阴暗，但他们一定潜意识里对这个细节感到满意。</p><p>在这种视角下，毛利兰简直比大和抚子还要大和抚子，还要贤惠，还要让人放心。</p><div class="note warning flat"><p>Spy Family 博主只看到了 Part2 的中间部分，因此只讨论在这之前的剧情。</p></div><p>与之非常类似的是 Spy Family 的约儿·佛杰。</p><p><img src="https://bu.dusays.com/2023/12/27/658bb5146539d.png" alt="55-3.png" title="我有一个住在澳门的威尼斯朋友"></p><p>约儿·佛杰设定上是一个杀手，组成家庭的初衷也是为了更好地执行暗杀的任务，但其所服务的组织、暗杀任务，只在第一话登场的时候提到。之后就完全掉线，约儿·佛杰成为 aniya 的保镖，时不时表现出一点病娇的属性：左手一把沾满红色液体的刀，右手提着渗出红色液体的手提包站在公寓面前，表情阴暗，让观众角色以为刚刚进行了可怖的暗杀——但是镜头一转，原来那红色液体是番茄汁，约儿·佛杰正打算去向同事请教如何做饭。</p><p>这完全就是“萌点”了好吧，<del>虽然我没发现哪里萌了。</del></p><p>而柯哀受欢迎的很大原因，在我看来，是因为，现代人在精神上是孤独的，这种孤独使他们幻想一种亲密无间的关系。</p><p><img src="https://bu.dusays.com/2023/12/27/658bba369c804.png" alt="55-4.png"></p><p>小时候读《三国》或是《三侠五义》的时候，常常能看到一个人拉着一个人的手倾诉衷肠的情节，“啊贤弟，愚兄以为…”这种，这要放在现代人身上鸡皮疙瘩早掉一地了。现代人的日常交流丢弃了严肃性，只在鲜少的场合，只对鲜少的个人流露真情（或者没有？），因此他们是孤独的。本博客就是一例，博主在日常生活中就没什么表达欲，国内社交平台近两年几乎没有发言，评论都不参与的那种。把表达欲倾泻在这个博客里倒是很好的做法，现今的社会环境，谁也不知道自己什么时候会因言获罪。</p><p>于是，<del>我们</del>柯哀党发现，CA 之间在新兰关系的粉色泡泡之上，还有一种稀缺可贵的特质，即消解孤独的互相信任、互相理解。</p><p>但距离感也不是越小越好的。如果两个人对对方的一切过往都知根知底，一切想法都了然于心，任何一丁点的情绪波动都能量子纠缠似的立刻察觉，那么完全可以说其实这两个人是一个人，一份意识在两具肉体里的备份。举例来说，甲试图安慰受伤的乙，但是因为二人心有灵犀，甲的想法，包括安慰的逻辑，甲视角下的事件，这些在产生的瞬间，乙必然也了解了。换言之，甲根本不需要进行这个安慰。由于思维同步，二人的生活经验也是共享的。那么甲在不在乙的身边又有什么影响呢？乙不还是一个人吗？</p><p><img src="https://bu.dusays.com/2023/12/27/658bc6097a109.png" alt="55-5.png"></p><p>因此亲密关系中的爱只能由他者提供，这个他者必然是与自己有所不同的。上面只是一个距离为零的极端情况，现时中自然是绝无可能的。再看看距离很小很小的次极端情况：阿良良木历和忍野忍。由于二次元的事您少管的原因，忍野忍被束缚在历的影子里，物理距离几乎为零，总是一致行动，一方也能感受到另一方的心理动摇，实际上这个设定是十分危险的。在后期的动画中，小忍会吃历的醋，但是在那较久之前，历和战场原办事的时候，按照“一方能感受到另一方的心理动摇”的设定，其实是细思极恐的。只是由于二人性格上的原因，忍野忍渴求爱而历恰好是个撞到小忍的博爱者，才能达到一种和谐的亲密关系。<psw>忍：只要你爱我并且愿意为我而死就行。历：我爱你并且愿意为你而死的同时也爱着别人。</psw></p><p>而 CA 之间的距离则是比较合适的，他们既有一致行动的紧密，也有分工配合的默契。一如《物语系列》中战场原和羽川翼的对话：“真的不去吗？” “嗯，既然他没有邀请我们去，说明暂时还没有这个必要，而且我们也有我们这边的事情要处理吧。” （大概是这么说的，记不太清）</p><p>《推しの子》中的有马佳奈则是比较特殊了，她有着灰原哀的头脑但是毛利兰的命运，主角出于“保护她不受伤害”的心理动机，将她排除在主线之外。哎，写到这就不想写了，好像也蛮对不住人家的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;毛利兰、约儿·佛杰、有马佳奈，这一类角色，她们的生活都被排除在剧情主线之外，但又是剧中的重要人物。这种割裂和冲突，部分原因可以归结于作者有意制造的党争，或者人物塑造的失策，&lt;psw&gt;“青山的本意是好的，人设表现的时候歪了”&lt;/psw&gt;。不过我倾向于分析人物时不把作者的意志搬</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="acg" scheme="https://loveofpeach.github.io/tags/acg/"/>
    
  </entry>
  
  <entry>
    <title>DS 强化</title>
    <link href="https://loveofpeach.github.io/posts/b161b9bb.html"/>
    <id>https://loveofpeach.github.io/posts/b161b9bb.html</id>
    <published>2023-09-26T03:18:48.000Z</published>
    <updated>2023-11-26T14:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XARSSwlpuYvBRT" alt="54-1-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/GqgrAHwQHlbosT" alt="54-1-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/D_efmTaVAl-duO" alt="54-1-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/1QQpi9ysJ1Nv5c" alt="54-1-4"></p><h2 id="栈、队列、数组"><a href="#栈、队列、数组" class="headerlink" title="栈、队列、数组"></a>栈、队列、数组</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/NrSkDGBxnjeYCV" alt="54-2-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/xILitM3Kx453zv" alt="54-2-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/JxdYxCt9AKvrM6" alt="54-2-3"></p><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/RzR8jeFgUeYipb" alt="54-3-1"></p><p><img src="https://bu.dusays.com/2023/11/11/654f5806ef75e.jpg" alt="54-3-2.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58066928c.jpg" alt="54-3-3.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58051df1a.jpg" alt="54-3-4.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f58063ae3b.jpg" alt="54-3-5.jpg"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/KEIv6MGM5jy_mT" alt="54-4-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/5hprMCgLmVrw2G" alt="54-4-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/qNv7DAWXCywuCd" alt="54-4-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/dUxZT2sAUNn212" alt="54-4-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/DYyXamZAhp2Giw" alt="54-4-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/22ugockT4IRCqD" alt="54-4-6"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/gPXtK7Bis2cE5X" alt="54-4-7"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/dy0IS0V955L0AB" alt="54-4-8"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/JS_yqyvH_0u9Bj" alt="54-4-9"></p><p>因为王道的算法太麻烦了，不利于人脑模拟算法执行，所以针对 AOE，我给出一个基于 DAG 上动态规划的算法。</p><p>定义 $S_i$ 为顶点 i 到终点的最长路径长度，则：</p><script type="math/tex; mode=display">S_i= \begin{cases}\underset{(i,j)\in E}{\overset{}{\mathrm{MAX}}}(S_j+\mathrm{len}(i,j)) & i \ne \mathrm{end} \\0 &i=\mathrm{end}\end{cases}</script><p>显然这个算法的时间复杂度是 $O(|E|)$ 的，代码递归地写就可以。</p><p>那么找出关键路径就很方便了：</p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/0JPB2Pn2zQJ-aT" alt="54-4-9dot5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/PsPTK3e4HJnh2T" alt="54-4-10"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/CX7B-2fwr6qhrx" alt="54-4-11"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/H91sedOcopFXM8" alt="54-5-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/vxuDjsATcmDc_o" alt="54-5-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/tnClkF0eEavuUC" alt="54-5-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/Lt_P3J6s3v2wFF" alt="54-5-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/sVKMLOLg6srvqt" alt="54-5-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/f_mAMTQPoqAHmz" alt="54-5-6"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/qwxBh2npMM69iw" alt="54-5-7"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/jSO8eGujXq3doM" alt="54-6-1"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XALx3u4WMch-zz" alt="54-6-2"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/pJSnHUqMVro-3m" alt="54-6-3"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/-NuOAU-Hme-KuF" alt="54-6-4"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/ncVQoXwLgBylw6" alt="54-6-5"></p><p><img src="https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/zrCDvln51cV1wI" alt="54-6-6"></p><p>运用快排的划分思想：</p><div class="row"><iframe src="https://drive.google.com/file/d/1XhE73Op43g3JI2i6B73Ii-CNNPLKprC6/preview" style="width:100%; height:550px"></iframe></div><h2 id="结课测试"><a href="#结课测试" class="headerlink" title="结课测试"></a>结课测试</h2><div class="row"><iframe src="https://drive.google.com/file/d/1sJKVhNZCxQVLIVRd7cP3jG2Qh51VrhqC/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://sway.office.com/s/t7eV6eAN5Lyx8o8e/images/XARSSw</summary>
      
    
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>物理复习讲义（一）</title>
    <link href="https://loveofpeach.github.io/posts/1f9ef124.html"/>
    <id>https://loveofpeach.github.io/posts/1f9ef124.html</id>
    <published>2023-09-22T04:52:35.000Z</published>
    <updated>2023-10-22T03:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前大学的某一年暑假，辅导了一个学生的高中物理。只有 10 天，每天 2 小时，基础不牢，让我从头开始，最后好像就把运动学的部分讲完了？印象最深的是硬杆弹簧一类的题目。</p><p>这是第一节课的讲义，后面的就没有用 markdown 写了，因而没有留存。我暂且把它挂在博客里。</p><hr><blockquote><p>配合小题狂做必修一使用</p></blockquote><h2 id="第一章-运动的描述"><a href="#第一章-运动的描述" class="headerlink" title="第一章 运动的描述"></a>第一章 运动的描述</h2><h3 id="知识点梳理"><a href="#知识点梳理" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><p><strong>质点</strong>：理想模型，忽略大小形状，具有质量。</p><ul><li>具体问题具体分析</li></ul><p><strong>参考系</strong>：描述物体运动时选定的参考。</p><p><strong>位移</strong>：矢量，由起点指向终点，大小和方向。</p><p><strong>速度</strong>：位移与发生该位移的时间的比。 $v=\Delta x/\Delta t$</p><ul><li>$1m/s=3.6km/h$</li><li>$v-t$图像，与$x-t$图像的关系，几何意义</li></ul><p><strong>加速度</strong>：速度的变化率。 $a=\Delta v/\Delta t$</p><ul><li>加速度具有方向，在未声明正方向的题目中需自行声明。</li><li>$v-t$图像中的加速度。</li></ul><h3 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h3><p><strong>p5第4题，p5第7题，p18第11题</strong>：设未知量，最后相消得到答案</p><p><strong>p10第11题</strong>：$v-t$图像中的加速度。</p><h2 id="第二章-匀变速直线运动"><a href="#第二章-匀变速直线运动" class="headerlink" title="第二章 匀变速直线运动"></a>第二章 匀变速直线运动</h2><h3 id="知识点梳理-1"><a href="#知识点梳理-1" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><p><strong>匀变速直线运动</strong>：加速度不变的直线运动。</p><ul><li>在辨析题中注意区分，例如圆周运动可以作为很多反例</li></ul><p><strong>通过$v-t$图像理解$x=\dfrac{1}{2}at^2+v_0t$的导出</strong></p><ul><li>并通过类似方法理解匀变速运动中中点时刻速度等于平均速度</li><li>平均速度的例题，p27第4题</li></ul><p><strong>联立$x=\dfrac{1}{2}at^2+v_0t$与$v=at+v_0$得到$v^2-v_0^2=2ax$</strong></p><p><strong>重要推论</strong>：$\Delta x=aT^2$</p><ul><li>含义：匀变速直线运动中，任意相等的连续时间间隔$(T)$内位移之差为定值$aT^2$</li><li><p>拓展(可忽略)：对于一个符合二次函数的数列，例如：</p><script type="math/tex; mode=display">1,4,9,16,25,... (1)</script><p>逐项作差：</p><script type="math/tex; mode=display">3,5,7,9,...(2)</script><p>对$(2)$继续作差：</p><script type="math/tex; mode=display">2,2,2,...(3)</script><p>将得到定值。其中数列(1)可理解为位移，数列(2)理解为速度。而数列(3)中的数与二次函数的二次项系数有关，在匀变速直线运动中与加速度有关。<strong>推论$\Delta x=aT^2$实质上与此类似，</strong> 在$x-t$图像（$x=\dfrac{1}{2}at^2+v_0t$为二次函数）上等距取点，算出函数值作差（第一次作差）得到等间隔内的位移,将此位移继续作差（第二次作差）得到定值。</p></li><li><p><strong>拓展(尽量掌握)</strong>：第$m$个时间$T$内与第$n$个时间$T$内的位移差$\Delta x=x_m-x_n=(m-n)aT^2$</p></li><li>例题： p40第9题</li></ul><p><strong>初速度为0的匀加速直线运动中几个重要的比例式：</strong></p><ul><li>时间等分：使用几何方法在$v-t$图像中理解</li><li>位移等分：通过前$x$，前$2x$，$…$,前$nx$位移时的速度之比为：<script type="math/tex; mode=display">v_1:v_2:v_3:...:v_n=1:\sqrt 2:\sqrt 3:...:\sqrt n</script>推导方法，由$v^2-v_0^2=2ax$导出</li><li>位移等分：通过第一个$x$,第二个$x$，$…$,第$n$个$x$所用时间之比：<script type="math/tex; mode=display">t_1:t_2:t_3:...:t_n=1:(\sqrt 2-1):(\sqrt 3-\sqrt 2):...:(\sqrt n-\sqrt{n-1})</script>推导过程及应用均由例题展示</li><li>例题： p29第7题，p36第10题</li></ul><p><strong>自由落体运动</strong>：匀变速直线运动的一种特例，$a=g$，$v_0=0$</p><script type="math/tex; mode=display">v=gt,x=\dfrac{1}{2}gt^2</script><p>例题，p37第6题，p38第8题</p><p><strong>竖直上抛运动</strong>：仍然是匀变速直线运动的一种</p><p><strong>实验 - 小车速度随时间的变化规律</strong>注意点:</p><ul><li>交流电频率$50Hz,$打点计时器打出的两点时间间隔为$0.02s$</li><li>小车释放位置：靠近打点计时器</li><li>先接通电源打点，后释放小车</li><li>改变钩码数量，重复实验</li><li><strong>实验方案创新</strong>，频闪照相，等效替代等，通过$v-t$图像理解剪下纸带的长度</li></ul><p>例题：p21第10题</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p><strong>利用$x-t$图像与$v-t$图像寻找解题思路</strong></p><ul><li>在选择题中减少计算量，例题：p25第5题，p27第7题，<strong>p39第4题</strong></li><li>典型分析，p34第11题，数学方法寻找思路。匀加速匀减速直线运动$(a\ne0)$在$x-t$图像中是二次函数<br>设曲线 <script type="math/tex">b:x=-t^2+v_0t+C</script> 在切点处 $b$ 与 $a$ 速度相等，即2m/s，又 $v_b=-2t+v_0$ ，得 $v_0=8$ .切点坐标 $(3,8)$ 代入曲线 $b$ 方程，得 $C=-7$ .<br>再根据$x-t$图像的几何意义答题。</li></ul><p><strong>利用匀变速直线运动的对称性逆向思考</strong></p><ul><li>例题，p26第10题，<strong>p39第7题</strong></li></ul><p><strong>公式$v^2-v_0^2=2ax$建立方程组</strong></p><ul><li>由该公式列出不同等式，并通过调整系数联立各等式的左边。例题p30第9题</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前大学的某一年暑假，辅导了一个学生的高中物理。只有 10 天，每天 2 小时，基础不牢，让我从头开始，最后好像就把运动学的部分讲完了？印象最深的是硬杆弹簧一类的题目。&lt;/p&gt;
&lt;p&gt;这是第一节课的讲义，后面的就没有用 markdown 写了，因而没有留存。我暂且把它挂在博</summary>
      
    
    
    
    <category term="杂项" scheme="https://loveofpeach.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="高中物理" scheme="https://loveofpeach.github.io/tags/%E9%AB%98%E4%B8%AD%E7%89%A9%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>妙联趣谈</title>
    <link href="https://loveofpeach.github.io/posts/10746325.html"/>
    <id>https://loveofpeach.github.io/posts/10746325.html</id>
    <published>2023-09-11T10:12:38.000Z</published>
    <updated>2023-09-26T03:45:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近淘得一本旧书，名《妙联趣谈》，安徽文艺出版社。</p><p>OCR 图片转文字，校对一次。转载部分内容：</p><p>一，一些有趣的对联。</p><p>二，网上搜不到内容或是背景故事的对联。只用了 Google 和必应，也许搜的不够全面。</p><p>除少数字的用法、过长的段落分段外，不作任何修改。如果需要看繁体字，右下设置有简繁切换，但是不能保证完全正确对应。</p><blockquote><p>修改一览：<br>丫环 -&gt; 丫鬟<br>单引号误作双引号</p></blockquote><p>其中部分对联在网上搜得诸多版本，各有不同；部分背景故事疑有杜撰成分。</p><h2 id="已有"><a href="#已有" class="headerlink" title="已有"></a>已有</h2><h3 id="东坡挽朝云"><a href="#东坡挽朝云" class="headerlink" title="东坡挽朝云"></a>东坡挽朝云</h3><blockquote><p>不合时宜，唯有朝云能识我；<br>独弹古调，每逢暮雨倍思卿。</p></blockquote><p>苏东城生活在内外矛盾日益尖锐的北宋年代。他政治思想比较保守，但有自己的独立见解。他反对过王安石新法在实施过程中所出现的流弊；也反对司马光那种对新法一概废弃的错误做法。在三十多年的仕途中，屡遭贬谪，怅恨不能自己。</p><p>东坡有两个丫鬟，名叫朝云、暮雨。有一次东坡扪着肚皮笑着问家人：“这里面装的是什么？” 大家都说是满腹经纶，只有朝云说：“我看是一肚子不合时宜的牢骚。” 颇得东坡赏识。不久，朝云病故，东坡便作此联哀挽她。这真是伯牙绝弦，更无知音了。</p><blockquote><p>陶之二评：<br>朝云吐槽犀利，东坡表现出自嘲精神。</p></blockquote><h3 id="哑联"><a href="#哑联" class="headerlink" title="哑联"></a>哑联</h3><blockquote><p>狗啃河上（和尚）骨； （东坡出）<br>水流东坡诗（尸）。   （佛印对）</p></blockquote><p>苏东坡被贬黄州后，游赤壁，访沙湖，赏心悦目，写下了“大江东去浪淘尽千古风流人物”的名句，倒也不乏兴味。有一天晚上，他邀好友佛印和尚泛舟长江之上，清风徐来，水波不兴，轻舟荡漾，临风把酒，好不痛快。酒过三巡，佛印向东坡索句。少顷，东坡用手向左岸一指，笑而不语。佛印循指望去，只见岸上农夫披星戴月，荷锄而归，不解东坡之意，待回首向东坡问时，只见东坡笑而不答，自斟自喝，非常得意。佛印好不气恼，再向河岸上远眺，才发现岸上有一条大黄狗正在狼吞虎咽地啃东西，才恍然大悟，原来苏东坡是借此情景来打趣取乐的。佛印也不甘示弱，急中生智，随即将手中题有苏东坡诗句的一把扇子拋入水中，然后从苏东坡手中夺过酒壶，也自斟自饮起来，苏东坡一见此举，心照不宣，抚掌大笑，这就是传之于后世的双关哑联。</p><blockquote><p>陶之二评：<br>雅。</p></blockquote><h3 id="姑嫂赛联"><a href="#姑嫂赛联" class="headerlink" title="姑嫂赛联"></a>姑嫂赛联</h3><blockquote><p>嫂嫂看书——心思“汉”；<br>姑姑追禽——手拉郎！</p></blockquote><p>据说苏小妹的嫂嫂——苏东坡的夫人正在看书。苏小妹蹑手蹑脚地走过去从嫂嫂手中将书抢过来一看，原来是《三国志平话》，并且正在看关云长“身在曹营心在汉”这一节。苏小妹素以聪明灵巧闻名，今天她要借嫂嫂看书来开她一个玩笑。</p><p>于是逗嫂嫂说：“好啊，你在偷看《杨太真外传》（当时禁止妇女看此书），我一定要对大哥讲。”嫂嫂知道小姑伶俐风趣，忙接过话题说：“我看太真是公开的，怕什么！你才真是在房里躲着看‘太真’呢！”小妹这一下弄得很难堪，忙以退为进地说：“好了，好了，你可真厉害，我不冤枉你，你看的是《三国志》中关羽‘身在曹营心汉’对吗？我赞你一句：嫂嫂看书——心思‘汉’。”（双关语，“汉”即男子汉），这一下小妹总算转败为胜了，她又反辱相讥地补充一句：“我说的完全是事实，没有冤枉你吧！”小妹以为这一下可以封住嫂嫂的嘴了，真是手舞足蹈，得意忘形。恰巧，这时一个小喜鹤飞过来了，苏小妹击败嫂嫂之后，和丫鬟们追逐小喜鹊玩去了。东坡夫人站在一旁干生气，想不出一个好词儿来回击这个能小姑。忽然她灵机一动：小妹己经许配给了秦少游，“禽”与“秦”同音。她忙跑去喊住小妹说：“我也回敬你一句：‘姑姑追禽——手拉郎！’ 好吗？巧吧！”小妹羞红了脸，撇娇逞强地说：“我不许你这样欺侮人。”一头撞到嫂嫂怀里，真真假假地哭闹了一番⋯⋯</p><blockquote><p>陶之二评：<br>苏小妹可爱。</p></blockquote><h3 id="华罗庚的妙对"><a href="#华罗庚的妙对" class="headerlink" title="华罗庚的妙对"></a>华罗庚的妙对</h3><blockquote><p>妙人儿，倪家少女；<br>搞长弓，张府高才。</p></blockquote><p>据说本世纪初，在北洋军阀统治时期，它的嫡系安徽督军倪嗣冲有一个女儿名叫倪妙。倪妙读了几句书，也懂得古诗与对联，妄自尊大，骄横不可一世。她要找一个才貌双全的女婿，经过许多人的介绍，都不合心意。于是她出了一个“求乘龙快婿”的上联，即“妙人儿，倪家少女！”声称：只要有个青年能对出下联，不论家世，均可作为配偶。此讯传出后，安庆以及全国各地不知有多少痴情人，煞费苦心，想对出下联，以便高攀名门小姐，荣耀一生。可是，尽管喧噪了一时，都没有人能对出。认为这是拆字对。“少女”联结为 “妙”，“人儿”合起为“倪”，所以无法对出。被人称为“安庆绝对”。</p><p>一九八一年四月，华老来肥讲学，住在稻香楼宾馆。一天，在宾馆客厅踱步时，遇见女服务员小倪。华老脱口而出，吟出此上联。恰好科技大学派来照料华老的张医生在他身旁。华老即隐喻“张”，接出下联。对得轻松酒脱，颇有雅俗共赏之趣，引得全场大笑。六十年前的“绝对”，被华老一语道破，当年未能对出的痴情儿郎，能在须眉 斑自之际，惊闻此讯，能不发出了却终生一宿愿之感叹吗？</p><blockquote><p><strong>注：</strong><br>此为千古绝对，下联颇多。书中背景故事疑有杜撰。 参考：<br><a href="https://tieba.baidu.com/p/693394314">唐河文化吧_妙人儿倪家少女</a><br><a href="https://tieba.baidu.com/p/1173092288">心中梦吧_妙人儿倪家少女:求下联</a><br><a href="https://zhidao.baidu.com/question/2059107661514273227.html">为什么说倪家少女是妙人儿？</a><br>陶之二评：<br>上联尽显倪家少女的聪慧自信。下联对的不是很好，虽然陶某也对不出。</p></blockquote><h3 id="寇准作联回辽"><a href="#寇准作联回辽" class="headerlink" title="寇准作联回辽"></a>寇准作联回辽</h3><blockquote><p>朝无相，营无将，你国中利害相将，将来必散；<br>天能度，地能量，我皇上宽宏度量，量也无妨。</p></blockquote><p>宋真宗时，当时北方大辽经常侵犯中原。他们深知宋朝武备不修，国内虚弱，因而拟出上联交使者带来，嘲笑并侮辱宋朝。并且试探宋朝有没有勇气敢于用强硬的态度回击他们。当时朝中文武百官看到此联，认为这是番邦下的战表，均惊慌失措，相对无言。唯有寇准镇定自若，义愤填膺地奋笔疾书，当即写出下联，狠狠回击了番邦。辽王接到此下联后，认为不能小视宋朝，还是以议和为好。</p><h3 id="昆明大观楼长联"><a href="#昆明大观楼长联" class="headerlink" title="昆明大观楼长联"></a>昆明大观楼长联</h3><blockquote><p>五百里滇池，奔来眼底，披襟岸帻，喜茫茫空阔无边。看东骧神骏，西翥灵仪，北走蜿蜒，南翔缟素。高人韵士，何妨选胜登临！趁蟹屿螺洲，梳裹就风鬟雾鬓；更蘋天苇地，点缀些翠玉丹霞，莫孤负四围香稻，万倾晴纱，九夏芙蓉，三春杨柳。<br>数千年往事，注到心头，把酒凌虚，叹滚滚英雄谁在！想汉习楼船，唐标铁柱，宋挥玉斧，元跨革囊，伟烈丰功，费尽移山心力。尽珠帘画栋，卷不及暮雨朝云；便断碣残碑，都付与苍烟落照。只赢得几杵疏钟，半江渔火，两行秋雁，一枕清霜。</p></blockquote><p>昆明大观楼是清代康熙二十九年（公元一六九〇年）经王继文建造的。咸丰七年 （公元一八五七年）被兵火所毁；同治五年 （公元一八六六年）又由马如龙重修。修复后的大观楼，殿阁耸峙，绿树成萌，湖光山色，相映成趣。有揽胜阁、涌月亭、观稼堂和“蓬莱别境”等胜景，是我国著名的游览胜地。大观楼上的长联系清代诗人孙髯所作。这是一副誉满中外的著名对联。上下联共一百八十字，世称天下第一长联。其中描写景物，陈述史实，反复低徊，一唱三叹，确实可以当作一篇优美的抒情诗。</p><p>就其内容来看，上联是“喜”，尽情领受眼前佳景。“喜”字是整个上联的意脉。作者一开始就抓住了滇池的特征，从寥廓的空间落墨，写眼前佳景，起势非凡，除暗点大观楼的地理位置，还透露出作者登临大观楼，饱览汪洋浩瀚的滇池时的喜悦。接着用一“看”字，作为四个排偶句的尖头领字。从东、南、西、北四个方面，对周围山峦的情态，用“骧、翥、走、翔，四个声调各异的动词，作了动态的刻画，把山峦描写得很灵动，很有生气，真可以说是写活了。</p><p>接着用 “高人韵士”一转，由景转到人。“何妨选胜登临”，紧紧承上而来，是说如此风景佳丽的名胜，值得登临一览，趁着这螺状蟹形的洲屿扮妆得象仕女那样，具有淡雅丰姿的美好时节，更加上水中青萍、滩头修苇，凌空翠鸟，照眼红霞的迷人最色，何不来此一游！最后，作者把思路推开一层，用不同季节而又富有地区特征的香稻，晴纱、芙蓉、杨柳，来渲染大观楼的迷人景色。满眼风光长画卷，整个上联描绘的这幅画面，层次分明，色彩绚丽，景物浓淡相宜，动静相生。艺木地再现了滇池风物，字里行间充满着诗人热爱祖国河山的美好感情。没有游览过昆明大观楼的人，读了这副上联，会感到这里的风光着实令人神往。</p><p>下联是“叹”，依次陈述历史沿革。 “叹”字成为整个下联的意脉。上联从广阔空间着墨，下联则从旷远的时间下笔。作者先用 “注到心头” 一句奠定怀古基调，又用 “叹”自然过渡到历史的追怀。接着用一“想” 字作为下面四句的尖头领字，统领 “汉” “唐” “宋” “元” 这四则与云南有关的历史典故，说明自汉唐以来，滇池就是一处青史著称的胜地。接着作者以“伟烈丰功，费尽移山心力”再总承一句表示对古代英雄的赞美。然后，笔锋陡转，指出：尽管帝王的基业一时繁华，也禁不住政治风云的变化，即使是昔日宣扬封建帝王的碑碣，也已折断或字迹模糊，笼罩在黄昏的烟霭之中，倒卧在残阳的斜照之下。诗人感叹风物虽好，却是人世沧桑，碑碣虽存，但为历史陈迹。从而呼应了前文的“叹滚滚英雄谁在”一句。最后以凄凉肃杀的秋景作结，烘托了浓重的凭吊气氛，表现出凄清苍凉的情调，预示着封建王朝不可避免的衰亡的命运，从中不难窥到作者因盛世的“繁华春去”而产生对现实严重不满与深切失望的心境。这种心境在当时正直爱国的文人中，是有广泛的代表性的。</p><p>就艺术上来看，全联基调很象北宋范仲淹的名篇《岳阳楼记》。写岳阳楼，离不开洞庭湖，因为洞庭湖是“巴陵胜状”，是岳阳楼的 “大观”。同样的道理，写昆明大观楼，势必要写滇池，才能见出此地的风光，可见此联构思的奇巧。</p><p>全联共一百八十字，没有一个重复的宇，这真是难得的。大观楼这副对联，以字数论还不是我国最长的对联，四川江津县临江城楼联共有一千六百一十二个字。然而，大观楼长联叙事抒情紧紧结合，对仗工整，字句典雅，情景交融，气势不凡，洵属对联中之杰作。</p><blockquote><p><strong>注：</strong><br>「蘋」有两个音「pín」和「píng」，对应两个义项，在简化过程中分别给了「⿱艹频」和「苹」。<br>参见：<a href="https://www.zhihu.com/question/410512837/answer/1369171883">「蘋」「苹」「⿱艹频」三字的关系是怎样的? - Kushim Jiang的回答 - 知乎</a><br>陶之二评：<br>评不了。</p></blockquote><h2 id="暂无"><a href="#暂无" class="headerlink" title="暂无"></a>暂无</h2><h3 id="对联之谜"><a href="#对联之谜" class="headerlink" title="对联之谜"></a>对联之谜</h3><blockquote><p>二三四五；<br>六七八九。</p></blockquote><p>添字联：</p><blockquote><p>二三四五添一；<br>六七八九加十。</p></blockquote><p>在“四人帮”横行的一九七五年春节，某地有一位叫做“三爷”的老红军，在自己的大门上贴出了“二三四五，六七八九” 的奇怪对联。当时好多人都解不开其中的迷，人们问到三爷，他只是笑笑，根本不讲。三爷的儿手是一位公务员，他于春节后的一天，特从城里赶回家向老人拜年。他一看此联，就知道它的谜底是：讽刺“四人帮”专横暴虐，弄得人民缺“一”（即衣）少“十”（即食）。他替老头子捏了一把汗，暗地里向他打个招呼，叫他想方设法将这副春联毁掉。可是老头子根本不理睬，只说：“有事我承担，你别管，我自有对策。”儿子只好摇摇头，很快就回公安局去了。</p><p>大约过了六七天，大队民兵营长找上门来，说是公社政法委员请三爷过去有事商量，三爷毫不犹豫地就去了。公社政法委员开诚布公地谈了这副春联在社会上引起了巨大的反响，要求三爷把它毁掉，免得惹事生非，自找麻烦。可是三爷反问：“你们是怎样解释这副春联的呢？我没有别的意思，我是在歌领我们通过无产阶级文化大革命，国家日新月异，步步高升呀！”</p><p>“那为什么不写‘一’呢？”政法委员反问道。</p><p>“这‘一’是代表封资修的。我们是在不要封资修的基础上创出无产阶级新世界来。”三爷答。</p><p>“那为什么又没有写‘十’呢？” 政法委员又问。</p><p>“现在不是在提倡继续革命吗？有了‘十’，就是到了顶；到了顶就不是继续革命论者，那还了得！” 三爷侃侃而谈。</p><p>三爷说得头头是道，公社政法委员无言以对，只好不欢而散。这场风波也就这样平息下来了。</p><p>五年后，一九八一年春节来到了，三爷在自家大门上贴上了：“二三四五添一；六七八九加十”的春联。人们一看就知道这是说明三中全会之后，党落实了农村经济政策，人民的生活正在好转。这副春联道出了人民的心声，歌颂了党的英明伟大。</p><blockquote><p>陶之二评：<br>我们走了一些弯路。</p></blockquote><h3 id="一联串姻缘"><a href="#一联串姻缘" class="headerlink" title="一联串姻缘"></a>一联串姻缘</h3><blockquote><p>黑壁墙下，黑面书生，黑巴巴，臭嗡嗡，呸，你且去，今生休想；<br>红花楼上，红粉佳人，红冬冬，香扑扑，喈，我就来，前世姻缘。</p></blockquote><p>传说过去有一个在相爷家陪伴公子读书的书童，由于不小心，将相爷最心爱的一对玉麒麟打碎了。书童知道这个祸事闯的不小，不被打死，也要掉一身皮。他抓住相爷尚未发觉的时机，立即溜出府门，跑到民问，拜一个乡间老太婆作母亲，靠捡粪打柴维持生活。这个书童有一天起得很早，出去捡粪，不知不觉溜进一位大官僚人家后花园里。他正在花园里捡粪，忽听得邻近花园的一座绣楼上，有读书的声音，他跑过去一听，原来还是一位少女正在聚精会神地读古文。这时，他已有很长时间没有读过书了。今天听到读书声，分外感到亲切有趣。直听到这位小姐不读为止，他才姗娜而去。</p><p>从此，他每天都要起早到这儿听小姐读书，因为他没有钱买书，只有通过听书来学习古文，以便将来能参加“乡试”。日久天长，书童听书的事被小姐发现了。开始，小姐抱着好奇心，只要有书童听，她就读得更起劲。小姐起劲地读，捡粪的书童听得就更入神了，常常情不自禁地随着小姐的诵读而眉飞色舞，欣然微笑。小姐一见这情景，就犯疑起来，莫非这捡粪的伢子真懂诗文？于是起身到窗前仔细瞧一瞧这小子是个什么样儿。那位捡粪的孩子忽然听不到读书声，立即抬起头来对绣楼上望一望，怡好两个人的目光对在一起，小姐将拾粪的伢子看清楚了，原来是个蓬头垢面的小青年。她一见听读书的人是这个模样，心里好笑，脱口说出了上联。那拾粪的伢子当场对出了下联，而且扔掉粪扒粪箕，绕过后园就要上楼来了。这一下可把小姐急坏了，忙命丫鬟在楼口守住，不准他上楼来。可这位捡粪的伢子很厉害，竟然和丫鬟闹了起来。那位大官僚刚刚起床，听家里有人吵闲，就打发家奴前去问个清楚明白。一会儿，家奴将捡粪的伢子拖到老爷面前。拾粪的伢子振振有词，理直气壮地说：“休得无礼，我是你家小姐请来的！不信有对联为证，你们竟敢这样？！”老爷将小姐找来一问，小姐承认了有此事，但不过是逗之以取乐而已。这位老爷毕竟很有眼力，一个拾粪的伢子居然能出口成章，这里面自有奥妙。他叫小姐回绣楼去，叫家奴将捡粪的伢子带到书房内，由老爷亲自过问。事后，经过多次的考察与鉴别，老爷认为这伢子很有才华，就将他收下，并亲自作主，将女儿许配给他。以后这书童考上了进士，这个姻缘可真是一联串起来的了。</p><blockquote><p>陶之二评：<br>旧文人意淫爽文。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近淘得一本旧书，名《妙联趣谈》，安徽文艺出版社。&lt;/p&gt;
&lt;p&gt;OCR 图片转文字，校对一次。转载部分内容：&lt;/p&gt;
&lt;p&gt;一，一些有趣的对联。&lt;/p&gt;
&lt;p&gt;二，网上搜不到内容或是背景故事的对联。只用了 Google 和必应，也许搜的不够全面。&lt;/p&gt;
&lt;p&gt;除少数字的</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="对联" scheme="https://loveofpeach.github.io/tags/%E5%AF%B9%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>OS 强化</title>
    <link href="https://loveofpeach.github.io/posts/64934ad2.html"/>
    <id>https://loveofpeach.github.io/posts/64934ad2.html</id>
    <published>2023-09-03T12:35:13.000Z</published>
    <updated>2023-12-02T12:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PV-大题知识梳理"><a href="#PV-大题知识梳理" class="headerlink" title="PV 大题知识梳理"></a>PV 大题知识梳理</h2><p>pv理发师：</p><div class="row"><iframe src="https://drive.google.com/file/d/1yAXR9bhB1vJQkRlMUhff9PzWc6yAFShq/preview" style="width:100%; height:550px"></iframe></div><p>pv23年：</p><div class="row"><iframe src="https://drive.google.com/file/d/1GN7ntq6BFJeUV1I-KXRSk5JvOqlEY2Je/preview" style="width:100%; height:550px"></iframe></div><h2 id="存储管理知识梳理"><a href="#存储管理知识梳理" class="headerlink" title="存储管理知识梳理"></a>存储管理知识梳理</h2><p>1 s = 10^3 ms<br>1 ms = 10^3 μs<br>1 μs = 10^3 ns</p><p><img src="https://bu.dusays.com/2023/09/05/64f70bee6fcc2.jpg" alt="51-2-1.jpg"></p><p>32 位系统：一个进程的虚拟地址的合法范围：<code>0x00000000</code>~<code>0xFFFFFFFF</code>，即 $2^{32}$ 个，按字节寻址，即进程的虚拟地址空间为 4 GB .</p><p>现代计算机中，一个进程几乎不可能占用连续的物理内存空间，只可能占用连续的逻辑地址空间。</p><p>若一个逻辑地址页内偏移量有 12 位，即一个页面的逻辑地址号有 $2^{12}$ 个，因按字节寻址，每个地址号对应 1 个 B ，所以一个页面的大小为 $2^{12}B=4KB$ .</p><p><img src="https://bu.dusays.com/2023/09/06/64f7e26e51101.jpg" alt="51-2-2.jpg"></p><p>下面放点文物：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43e75606.jpg" alt="存储管理手稿-1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43cca6e0.jpg" alt="存储管理手稿-2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43e7a220.jpg" alt="存储管理手稿-3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f7e43c1cbac.jpg" alt="存储管理手稿-4.jpg"></p><p>下面放出清晰的 pdf 文件（需要科学）：</p><div class="row"><iframe src="https://drive.google.com/file/d/1CGKa-IydzLsyHfWU0N-Kwcrmu0YAHBqS/preview" style="width:100%; height:550px"></iframe></div><h2 id="文件系统知识梳理"><a href="#文件系统知识梳理" class="headerlink" title="文件系统知识梳理"></a>文件系统知识梳理</h2><p>“簇” 就是 “块” ：</p><ul><li>“簇” 是 Windows 的叫法</li><li>“块” 是 Linux 的叫法</li></ul><p><img src="https://bu.dusays.com/2023/09/11/64ff205b5df6d.jpg" alt="文件系统手稿-1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205d505f1.jpg" alt="文件系统手稿-2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205e3efa6.jpg" alt="文件系统手稿-3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205f72a34.jpg" alt="文件系统手稿-4.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205ef32d2.jpg" alt="文件系统手稿-5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff205dbb5e2.jpg" alt="文件系统手稿-6.jpg"></p><p>下面放出清晰的 pdf 文件：</p><div class="row"><iframe src="https://drive.google.com/file/d/1wYfdvifgyMz2gqRsWuW6IyVeRzHm_qNI/preview" style="width:100%; height:550px"></iframe></div><h2 id="第一章题目"><a href="#第一章题目" class="headerlink" title="第一章题目"></a>第一章题目</h2><p><img src="https://bu.dusays.com/2023/09/15/6503d9c720cdd.jpg" alt="51_4_1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c924f8e.jpg" alt="51_4_2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c62e879.jpg" alt="51_4_3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c922a0f.jpg" alt="51_4_4.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c80c93b.jpg" alt="51_4_5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c8980b8.jpg" alt="51_4_6.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c6776d7.jpg" alt="51_4_7.jpg"></p><p><img src="https://bu.dusays.com/2023/09/15/6503d9c944f20.jpg" alt="51_4_8.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c7427027e.jpg" alt="51_4_9.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c741e6f08.jpg" alt="51_4_10.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c742e82dc.jpg" alt="51_4_11.jpg"></p><p><img src="https://bu.dusays.com/2023/12/02/656b1e6882be9.jpg" alt="51_4_11dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c7ae38ca1.jpg" alt="51_4_12.jpg"></p><p><img src="https://bu.dusays.com/2023/09/20/6509c7ae730b1.jpg" alt="51_4_13.jpg"></p><h2 id="第二章题目"><a href="#第二章题目" class="headerlink" title="第二章题目"></a>第二章题目</h2><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/uXtIuTI6IBae0z" alt="51_5_1.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/-CdUJcXZCqI95h" alt="51_5_2.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/b-FbyYLlKV4yGa" alt="51_5_3.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/8MI6Rv5pq8Ac73" alt="51_5_4.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Gnu5GbtTmsrMsc" alt="51_5_5.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/6oF4_ajD6OUueM" alt="51_5_6.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/IESvlE4nBDWVld" alt="51_5_7.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/gLB5CXZVlQawqh" alt="51_5_8.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/9G3nXCoYtDAYGU" alt="51_5_9.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/OnCsnViYEl5fLN" alt="51_5_10.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/fn59N2n6660j5S" alt="51_5_11.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Gql6WLhuK08V-R" alt="51_5_12.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Kkv4FZ1IJQmQiY" alt="51_5_13.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ddR0QBZmZ4YyKc" alt="51_5_14.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/klqQKcHfPCcWXF" alt="51_5_15.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/R775UqM-slB_ev" alt="51_5_16.jpg"></p><h2 id="第三章题目"><a href="#第三章题目" class="headerlink" title="第三章题目"></a>第三章题目</h2><p>best fit（动态分区分配算法中的知识点）：优先用小的空闲区。</p><p><img src="https://bu.dusays.com/2023/09/24/650f171cbcb56.jpg" alt="51_6_1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171ca0969.jpg" alt="51_6_2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f17b975f55.jpg" alt="51_6_3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d1d731.jpg" alt="51_6_4.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171c8a17d.jpg" alt="51_6_5.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d7a37c.jpg" alt="51_6_6.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171c7dc24.jpg" alt="51_6_7.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171cd716b.jpg" alt="51_6_8.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d07733.jpg" alt="51_6_9.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f171d3d78d.jpg" alt="51_6_10.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f180c13de8.jpg" alt="51_6_11.jpg"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/T79bDJPoZBzuyj" alt="51_6_12"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/A3QPiplOvO_ZJS" alt="51_6_13"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/XZPvWKjQPVIokc" alt="51_6_14"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/SFTKa8IMrV4UQV" alt="51_6_15"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/For33_smdVnVXU" alt="51_6_16"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/u-goPXjaGqvV9I" alt="51_6_17"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/YUhz128N62Bki_" alt="51_6_18"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/dqTjKnUFL9DCZu" alt="51_6_19"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ERn2yjQbkxfhLC" alt="51_6_20"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/HvMQ2Np3x-aN54" alt="51_6_21"></p><h2 id="第四章题目"><a href="#第四章题目" class="headerlink" title="第四章题目"></a>第四章题目</h2><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/nouk9ff56GYTox" alt="51-7-1"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/tTfvEy9PLcn_Bq" alt="51-7-2"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/tC_IUV-MZFC_sv" alt="51-7-3"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/97TJlNpzsirWGR" alt="51-7-4"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/rpPfd48oXEra9f" alt="51-7-5"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/FenZlM9zGiQp8o" alt="51-7-6"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/sq2tRq3AwKwUQL" alt="51-7-7"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/9zSbyUBouhSb8u" alt="51-7-8"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ERyccl4ogzBiye" alt="51-7-9"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/X2i5ylygZqeJvq" alt="51-7-10"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/SyESeaOUFOQ5iZ" alt="51-7-11"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/kKZVtGInpZsRmH" alt="51-7-12"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/qZJC8odZKzVj4R" alt="51-7-13"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/F-lWLsd-_gQY01" alt="51-7-14"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/8PkPu3Z644pe1J" alt="51-7-15"></p><h2 id="第五章题目"><a href="#第五章题目" class="headerlink" title="第五章题目"></a>第五章题目</h2><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/h24b_V4Sbtou7M" alt="51-8-1"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/TsPaJfPoopoBw5" alt="51-8-2"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/bM3LBKqY60iQGF" alt="51-8-3"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/khtX55bFLUqMoz" alt="51-8-4"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/eWyklMvz69uOwV" alt="51-8-5"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/NKQbnIgNAYcLRI" alt="51-8-6"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/Z_oIgXy9sEKjBH" alt="51-8-7"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/t51puGdjSYbPeB" alt="51-8-8"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/kY-PBvctdIFc6s" alt="51-8-9"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/M0VV7bj8zWyjrz" alt="51-8-10"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/I3t7wymhhAfJAN" alt="51-8-11"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/ScFFgjzZrHAvfZ" alt="51-8-12"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/V6fak3uJHczj0r" alt="51-8-13"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/tfpAn6xyM0rqFj" alt="51-8-14"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/5d1sEQl7S21ai_" alt="51-8-15"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/LVR5L0EYYZ5ufc" alt="51-8-16"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/YxGCZIxYYpLOqw" alt="51-8-17"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/kenR5i5wcpNrFo" alt="51-8-18"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/EAk89k_E5By9h8" alt="51-8-19"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/U6Z3Omvc7iIJ_f" alt="51-8-20"></p><p><img src="https://sway.office.com/s/k8nD8clUxR34WHCL/images/30ho-ZD3sfUpi7" alt="51-8-21"></p><h2 id="操作系统强化课测试"><a href="#操作系统强化课测试" class="headerlink" title="操作系统强化课测试"></a>操作系统强化课测试</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Cw9_kYzQ8SVe1kPwHMWtV6p1hZlQxqqS/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PV-大题知识梳理&quot;&gt;&lt;a href=&quot;#PV-大题知识梳理&quot; class=&quot;headerlink&quot; title=&quot;PV 大题知识梳理&quot;&gt;&lt;/a&gt;PV 大题知识梳理&lt;/h2&gt;&lt;p&gt;pv理发师：&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe </summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="OS" scheme="https://loveofpeach.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>数二强化</title>
    <link href="https://loveofpeach.github.io/posts/55931ee1.html"/>
    <id>https://loveofpeach.github.io/posts/55931ee1.html</id>
    <published>2023-08-22T03:37:17.000Z</published>
    <updated>2023-12-25T04:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>跨考一下，不想继续本科专业了，换个专业学学。</p><h2 id="记忆内容"><a href="#记忆内容" class="headerlink" title="记忆内容"></a>记忆内容</h2><p><img src="https://bu.dusays.com/2023/09/06/64f88cd045bbf.jpg" alt="记忆1.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88cd064caf.jpg" alt="记忆2.jpg"></p><p><img src="https://bu.dusays.com/2023/09/17/65070afdd6cd8.jpg" alt="记忆3.jpg"></p><p><img src="https://bu.dusays.com/2023/09/24/650f1c7fbfcf2.jpg" alt="记忆4.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/FeizLSpnG5xulD" alt="记忆5.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/38Wa6sEatXCjWb" alt="记忆6.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/eumUUaHM0iqN6n" alt="记忆7.jpg"></p><p><img src="https://bu.dusays.com/2023/11/11/654f55c727e33.jpg" alt="记忆-8.jpg"></p><p><img src="https://bu.dusays.com/2023/11/18/65582be41ad28.jpg" alt="记忆9.jpg"></p><p><img src="https://bu.dusays.com/2023/11/18/65582ef4e4632.png" alt="记忆10.png"></p><p><img src="https://bu.dusays.com/2023/12/02/656b20f31a2fc.jpg" alt="记忆11.jpg"></p><script type="math/tex; mode=display">1^2+2^2+3^2+ \cdots +n^2=\frac{1}{6}n(n+1)(2n+1)</script><script type="math/tex; mode=display">\int \csc x\, {\rm d}x=\ln |\csc x-\cot x|+C</script><p>一些积分的奇技淫巧：</p><script type="math/tex; mode=display">\int\frac{a\sin x+b\cos x}{c\sin x+d\cos x}\, {\rm d}x\stackrel{待定系数}{=}\int\frac{A(c\cos x-d\sin x)+B(c\sin x+d\cos x)}{c\sin x+d\cos x}\, {\rm d}x</script><script type="math/tex; mode=display">\int_{0}^{\pi} xf(\sin x)\, {\rm d}x=\frac{\pi}{2}\int_{0}^{\pi} f(\sin x)\, {\rm d}x</script><p>区间再现（或称 “区间不变”）：</p><script type="math/tex; mode=display">\int_{a}^{b} f(x)\, {\rm d}x\stackrel{x=a+b-t}{=}\int_{a}^{b} f(a+b-t)\, {\rm d}t</script><p>线性代数：</p><script type="math/tex; mode=display">r(A+B)\leqslant r(A)+r(B)</script><p>设直线 L 的方程为 Ax+By+C=0 ，点 P 的坐标为（x0,y0），则点 P 到直线 L 的距离就是：</p><script type="math/tex; mode=display">\frac{|Ax_0+By_0+C|}{\sqrt{A^2+B^2}}</script><h2 id="中值定理证明题"><a href="#中值定理证明题" class="headerlink" title="中值定理证明题"></a>中值定理证明题</h2><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c6eb7c.jpg" alt="中值定理证明题-01.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6956c85.jpg" alt="中值定理证明题-02.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6be119f.jpg" alt="中值定理证明题-03.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b10a5a.jpg" alt="中值定理证明题-04.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b5e9f8.jpg" alt="中值定理证明题-05.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c78073.jpg" alt="中值定理证明题-06.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6b8970f.jpg" alt="中值定理证明题-07.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c364cc.jpg" alt="中值定理证明题-08.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e67b88a7.jpg" alt="中值定理证明题-09.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42e6c6e6eb.jpg" alt="中值定理证明题-10.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e42f18e326c.jpg" alt="中值定理证明题-11.jpg"></p><h2 id="严选题"><a href="#严选题" class="headerlink" title="严选题"></a>严选题</h2><p><img src="https://bu.dusays.com/2023/09/06/64f88d3ded921.jpg" alt="严选题-01.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4399234.jpg" alt="严选题-02.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d42606a8.jpg" alt="严选题-03.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4482cfc.jpg" alt="严选题-04.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d75678cd.jpg" alt="严选题-05.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d452eb52.jpg" alt="严选题-06.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4219713.jpg" alt="严选题-07.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d4312ace.jpg" alt="严选题-08.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d40e8d39.jpg" alt="严选题-09.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88d421c329.jpg" alt="严选题-10.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88df4cca0b.jpg" alt="严选题-11.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc76569a.jpg" alt="严选题-12.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc932a17.jpg" alt="严选题-13.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc866846.jpg" alt="严选题-14.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc85d6e6.jpg" alt="严选题-15.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc8ba272.jpg" alt="严选题-16.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc6631c9.jpg" alt="严选题-17.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc664b9d.jpg" alt="严选题-18.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc89f5a4.jpg" alt="严选题-19.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88dc9089d1.jpg" alt="严选题-20.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e80cdb1a.jpg" alt="严选题-21.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e82b4d75.jpg" alt="严选题-22.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8375f6f.jpg" alt="严选题-23.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8399956.jpg" alt="严选题-24.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e83e864d.jpg" alt="严选题-25.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/iwslomIHO6qY1x" alt="严选题-26.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8332b21.jpg" alt="严选题-27.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e843cd4d.jpg" alt="严选题-28.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8454507.jpg" alt="严选题-29.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88e8a2a1ea.jpg" alt="严选题-30.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88fffce3a1.jpg" alt="严选题-31.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffdc5828.jpg" alt="严选题-32.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffef3f48.jpg" alt="严选题-33.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffd913dd.jpg" alt="严选题-34.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88fff1a2c5.jpg" alt="严选题-35.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffe7405f.jpg" alt="严选题-36.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffda45c5.jpg" alt="严选题-37.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890072db7a.jpg" alt="严选题-38.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88ffe183bb.jpg" alt="严选题-39.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f88fffc6e49.jpg" alt="严选题-40.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890d94e4fe.jpg" alt="严选题-41.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890dbeceb1.jpg" alt="严选题-42.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890dec33b3.jpg" alt="严选题-43.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890ddf2508.jpg" alt="严选题-44.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e09d8a0.jpg" alt="严选题-45.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e0dc3af.jpg" alt="严选题-46.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890de3d5d5.jpg" alt="严选题-47.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e0c7677.jpg" alt="严选题-48.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890df9c40f.jpg" alt="严选题-49.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f890e01431c.jpg" alt="严选题-50.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89152339d0.jpg" alt="严选题-51.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89154b2ded.jpg" alt="严选题-52.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f8915442489.jpg" alt="严选题-53.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89156d3afb.jpg" alt="严选题-54.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89158104e1.jpg" alt="严选题-55.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f8918166099.jpg" alt="严选题-56.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89157ad981.jpg" alt="严选题-57.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f89157aa7e0.jpg" alt="严选题-58.jpg"></p><p><img src="https://sway.office.com/s/HOet5N2yuCNtqogN/images/3wLJfG7hFVArDr" alt="严选题-59.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891574a7d1.jpg" alt="严选题-60.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891eba49d3.jpg" alt="严选题-61.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891ed16c88.jpg" alt="严选题-62.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f0d41f4.jpg" alt="严选题-63.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3567aa.jpg" alt="严选题-64.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3a40e7.jpg" alt="严选题-65.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3eb296.jpg" alt="严选题-66.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f3d8b3e.jpg" alt="严选题-67.jpg"></p><p><img src="https://bu.dusays.com/2023/09/06/64f891f41f0fb.jpg" alt="严选题-68.jpg"></p><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><p>数学的真实（:</p><div class="row"><iframe src="https://drive.google.com/file/d/18s7qMJF6d8zeHbTSth0tZy9sNI90JIaF/preview" style="width:100%; height:550px"></iframe></div><h2 id="网课"><a href="#网课" class="headerlink" title="网课"></a>网课</h2><p>智慧的结晶（:</p><div class="row"><iframe src="https://drive.google.com/file/d/126vaWF2oBPKgwW83vsbcll7eyIRr9vES/preview" style="width:100%; height:550px"></iframe></div><h2 id="李林四-23"><a href="#李林四-23" class="headerlink" title="李林四 23"></a>李林四 23</h2><p>辛酸的挣扎（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1VuVrmEuk568oMvcrS-gbOcl6ZO-WXTzT/preview" style="width:100%; height:550px"></iframe></div><h2 id="超越模拟题-23"><a href="#超越模拟题-23" class="headerlink" title="超越模拟题 23"></a>超越模拟题 23</h2><p>绝望的洒脱（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1zQORNaoRJh9FapiIhTREMHl4xQWU8WGa/preview" style="width:100%; height:550px"></iframe></div><h2 id="张宇八卷-24"><a href="#张宇八卷-24" class="headerlink" title="张宇八卷 24"></a>张宇八卷 24</h2><p>苟延的残喘（:</p><div class="row"><iframe src="https://drive.google.com/file/d/11B7G1iCV0jWBpIOm2l-oZFFiK49VHZRM/preview" style="width:100%; height:550px"></iframe></div><h2 id="李林六-24"><a href="#李林六-24" class="headerlink" title="李林六 24"></a>李林六 24</h2><p>临终的关怀（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1yuO5QXlG-Umqsi5RHCliGfu7_SbRHykG/preview" style="width:100%; height:550px"></iframe></div><h2 id="杂项试卷"><a href="#杂项试卷" class="headerlink" title="杂项试卷"></a>杂项试卷</h2><p>棺的回响（:</p><div class="row"><iframe src="https://drive.google.com/file/d/1AHHsrtnCSgppt7455gxIDkcxjz790hJz/preview" style="width:100%; height:550px"></iframe></div><h2 id="李林四-24"><a href="#李林四-24" class="headerlink" title="李林四 24"></a>李林四 24</h2><p>内心的宁静（:</p><div class="row"><iframe src="https://drive.google.com/file/d/16cD8NIFUEeNytv3PaZN6ZiuIC4HXiukT/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跨考一下，不想继续本科专业了，换个专业学学。&lt;/p&gt;
&lt;h2 id=&quot;记忆内容&quot;&gt;&lt;a href=&quot;#记忆内容&quot; class=&quot;headerlink&quot; title=&quot;记忆内容&quot;&gt;&lt;/a&gt;记忆内容&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="考研数学" scheme="https://loveofpeach.github.io/tags/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>俄罗斯方块</title>
    <link href="https://loveofpeach.github.io/posts/41a3284b.html"/>
    <id>https://loveofpeach.github.io/posts/41a3284b.html</id>
    <published>2023-08-20T11:57:04.000Z</published>
    <updated>2023-12-02T13:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕。。。</p><p>在搞了在搞了。。。</p><p>真的没啥时间推进。。。</p><p>vscode 做项目有点不方便啊，再装 vs 有点麻烦。。。</p><p>真的拖了很久了。。。</p><p>很久很久以前，有一个小白励志用 C++ 做一个俄罗斯方块，后来他觉得没必要和自己过不去，不如用 Python 做，后来幽于名为“应试”的缧绁之中，然后就没有然后了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;咕咕咕。。。&lt;/p&gt;
&lt;p&gt;在搞了在搞了。。。&lt;/p&gt;
&lt;p&gt;真的没啥时间推进。。。&lt;/p&gt;
&lt;p&gt;vscode 做项目有点不方便啊，再装 vs 有点麻烦。。。&lt;/p&gt;
&lt;p&gt;真的拖了很久了。。。&lt;/p&gt;
&lt;p&gt;很久很久以前，有一个小白励志用 C++ 做一个俄罗斯方块，后来</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>听《二泉》</title>
    <link href="https://loveofpeach.github.io/posts/bf733412.html"/>
    <id>https://loveofpeach.github.io/posts/bf733412.html</id>
    <published>2023-07-30T16:54:25.000Z</published>
    <updated>2023-09-22T04:26:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.4JgaeLzyr2oAt-IPnCV-fAHaE8" alt="48-1" title="来自网络"></p><p>无锡某处的阿炳雕像曾给我留下深刻的印象。乍看上去，他好像并非哪里的伟人，竟是和芸芸众生一样，受难之后低下自己的头颅，满不在乎地继续生活。但他谦卑地戴上帽子，架着圆形的墨镜，支起二胡，撑开右臂，彷佛将要用磅礴无尽的力量推出弓时——历史于此刻凝固。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1xb411a7hx&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>有一些演奏会上的二泉映月，技巧高超，细节饱满丰富，还有很多其他乐器的伴奏，但是却不一定能像这个视频里的一样触动人心。</p><p>事实上，如果能“有幸”见到一个真正的靠着街头卖艺讨生活的人，你会更加深刻地认识到：人是被命运卷入其中的。</p><p>十几年前，C 市的路上还跑着数不清的人力三轮，市中心（现在已是旧城区）的街道边，或是唯一一家肯德基的门店前，常常能遇到这样的卖艺人。他们的技巧非常粗糙，甚至可以说是刚刚能把音发出来，有人的琴不知是不是自己做的，弦还打着结，一个非常简陋的，送别人都没人要的琴。然而就是这样的琴，拉出的二泉（也许还是和同行学的），却最能撬动人心设防的深处。因为那些演奏会上的二泉，太过从容，太过华丽，太过完美，也太过奢侈了。而这些街头的人，才构成了我们这个社会最真实的图景。</p><p>这种感情是人类共通的，德富芦花曾写道：</p><blockquote><p>呜呼，我本东西南北人。我曾经夜泊于赤马关外，和着潮声而慷慨悲歌；我曾经客旅于北越，夜闻离别之曲而悲泣。我曾经于月明风清之夜，耳听着中国海上的欸乃之声；又曾经在一个雪天的清晨，行进于南萨的道上，听赶马人的歌唱。这些都打动了我的心扉。而那街头的一片市声，却不能使我肝肠寸断。</p></blockquote><p>中国宣布全面脱贫的夏天，我在上海见过皮肤黝黑、赤裸着上身流浪乞讨的男人。蜗居北京的日子里，也遇到不少在北京西站负一层躺下休息的男女、孩子，也许我的境遇也只比他们好一点。</p><p>德富芦花在听 <i>Still sad music of humanity</i> 时，感受到无数不可名状的苦恼，无数的鲜血，无数的眼泪。</p><p>这固然是深刻的体会。而我在《二泉》中感受到的意趣，则与这两句诗大抵相同：</p><blockquote><p>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南苑多秋草，落叶满阶红不扫。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://tse2-mm.cn.bing.net/th/id/OIP-C.4JgaeLzyr2oAt-IPnCV-fAHaE8&quot; alt=&quot;48-1&quot; title=&quot;来自网络&quot;&gt;&lt;/p&gt;
&lt;p&gt;无锡某处的阿炳雕像曾给我留下深刻的印象。乍看上去，他好</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="音乐" scheme="https://loveofpeach.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>算法题集子</title>
    <link href="https://loveofpeach.github.io/posts/53401ab0.html"/>
    <id>https://loveofpeach.github.io/posts/53401ab0.html</id>
    <published>2023-07-12T15:15:24.000Z</published>
    <updated>2023-12-25T06:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一道题开一篇文章实在浪费，于是决定以后零零散散做的题就放在这个集子里了。如果数量过多会考虑再开。</p><h2 id="JSOI2004-平衡点（模拟退火）"><a href="#JSOI2004-平衡点（模拟退火）" class="headerlink" title="JSOI2004 平衡点（模拟退火）"></a>JSOI2004 平衡点（模拟退火）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P1337">https://www.luogu.com.cn/problem/P1337</a></p><p><strong>题目描述</strong></p><p>如图，有 $n$ 个重物，每个重物系在一条足够长的绳子上。</p><p>每条绳子自上而下穿过桌面上的洞，然后系在一起。图中 $x$ 处就是公共的绳结。假设绳子是完全弹性的（即不会造成能量损失），桌子足够高（重物不会垂到地上），且忽略所有的摩擦，求绳结 $x$ 最终平衡于何处。</p><p><strong>注意</strong>：桌面上的洞都比绳结 $x$ 小得多，所以即使某个重物特别重，绳结 $x$ 也不可能穿过桌面上的洞掉下来，最多是卡在某个洞口处。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/148.png" alt="47-1"></p><p><strong>输入格式</strong></p><p>文件的第一行为一个正整数 $n$（$1\le n\le 1000$），表示重物和洞的数目。</p><p>接下来的 $n$ 行，每行是 $3$ 个整数 $x_i, y_i, w_i$，分别表示第 $i$ 个洞的坐标以及第 $i$ 个重物的重量。（$-10000\le x_i,y_i\le10000, 0&lt;w_i\le1000$）</p><p><strong>输出格式</strong></p><p>你的程序必须输出两个浮点数（保留小数点后三位），分别表示处于最终平衡状态时绳结 $x$ 的横坐标和纵坐标。两个数以一个空格隔开。</p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 0 1</span><br><span class="line">0 2 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.577 1.000</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><p>待续。先贴代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN =<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,g[MAXN];</span><br><span class="line"><span class="type">double</span> minlen=DBL_MAX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> a=<span class="number">0.0</span>, <span class="type">double</span> b=<span class="number">0.0</span>):<span class="built_in">x</span>(a),<span class="built_in">y</span>(b)&#123;&#125;</span><br><span class="line">&#125;P[MAXN];</span><br><span class="line">Point ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Sqr</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">double</span>(<span class="built_in">rand</span>())/<span class="built_in">double</span>(RAND_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Sqr</span>(a.x-b.x)+<span class="built_in">Sqr</span>(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">accept</span><span class="params">(<span class="type">double</span> delta,<span class="type">double</span> temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> delta&lt;<span class="number">0</span>||<span class="built_in">Rand</span>()&lt;<span class="built_in">exp</span>(-delta/temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(Point origin)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        len+=<span class="built_in">dis</span>(origin,P[i])*g[i];</span><br><span class="line">    <span class="keyword">if</span>(len&lt;minlen)&#123;</span><br><span class="line">        ans=origin;</span><br><span class="line">        minlen=len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SA</span><span class="params">(Point ans0,<span class="type">double</span> T0,<span class="type">double</span> dec,<span class="type">double</span> end)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=T0;</span><br><span class="line">    Point nowpos=ans0;</span><br><span class="line">    <span class="type">double</span> nowlen=<span class="built_in">calc</span>(nowpos);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp&gt;end)&#123;</span><br><span class="line">        Point nextpos=<span class="built_in">Point</span>(nowpos.x+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>),nowpos.y+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">        <span class="type">double</span> nlen=<span class="built_in">calc</span>(nextpos);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">accept</span>(nlen-nowlen,temp))&#123;</span><br><span class="line">            nowpos=nextpos;</span><br><span class="line">            nowlen=nlen;</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=dec;   <span class="comment">//dec为退火系数 </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123; <span class="comment">//精度维护</span></span><br><span class="line">        Point rnd=<span class="built_in">Point</span>(ans.x+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>),ans.y+temp*(<span class="built_in">Rand</span>()*<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">calc</span>(rnd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    Point init;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%d&quot;</span>,&amp;P[i].x,&amp;P[i].y,&amp;g[i]);</span><br><span class="line">        init.x+=P[i].x;</span><br><span class="line">        init.y+=P[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    init.x/=n;</span><br><span class="line">    init.y/=n;</span><br><span class="line">    <span class="built_in">SA</span>(init,<span class="number">1e5</span>,<span class="number">1</span><span class="number">-1e-2</span>,<span class="number">1e-3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3f %.3f\n&quot;</span>,ans.x,ans.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有机化学之神偶尔会做作弊（tarjan-lca）"><a href="#有机化学之神偶尔会做作弊（tarjan-lca）" class="headerlink" title="有机化学之神偶尔会做作弊（tarjan, lca）"></a>有机化学之神偶尔会做作弊（tarjan, lca）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P2783">https://www.luogu.com.cn/problem/P2783</a></p><p><strong>题意简述</strong></p><p>给你一个 $n$ 个点，$m$ 条边的无向图。把图中所有的环变为一个点，求变化后某两个点之间有多少个点。</p><p><strong>输入格式</strong></p><p>第一行两个整数 $n$，$m$。表示有 $n$ 个点，$m$ 根键。</p><p>接下来 $m$ 行每行两个整数 $u$，$v$ 表示 $u$ 号碳和 $v$ 号碳有一根键。</p><p>接下来一个整数 $tot$ 表示询问次数。</p><p>接下来 $tot$ 行每行两个整数，$a$，$b$ 表示询问的两个碳的编号。</p><p><strong>输出格式</strong></p><p>共 $tot$ 行，每行一个二进制数，表示答案。</p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p>两个碳不成环。</p><p><strong>数据范围及约定</strong></p><p>对于 $100\%$ 的数据，$1&lt;n\le10 ^ 4$，$1&lt;m\le5\times 10 ^ 4$。</p><p><strong>分析</strong></p><p>先给出一份超时代码，82 pts.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e4</span>+<span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"><span class="comment">// Edge_number in a general graph is twice that of a one-way graph</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,next;&#125;;</span><br><span class="line">Edge edge[maxm],edge2[maxm];</span><br><span class="line"><span class="type">int</span> head[maxn],dfn[maxn],low[maxn],stac[maxn],color[maxn];</span><br><span class="line"><span class="type">int</span> n,m,tot,num,top,cnt,tot_in_txt,lcafa[maxn][<span class="number">25</span>];</span><br><span class="line"><span class="type">int</span> head2[maxn],tot2,dep[maxn],max0;</span><br><span class="line"><span class="type">bool</span> ins[maxn];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> topow[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>,<span class="number">1024</span>,<span class="number">2048</span>,<span class="number">4096</span>,<span class="number">8192</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rd</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch) w|=(ch==<span class="string">&#x27;-&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="string">&#x27;0&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    x=w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    edge2[++tot2].v=y;</span><br><span class="line">    edge2[tot2].next=head2[x];</span><br><span class="line">    head2[x]=tot2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> from)</span></span>&#123;</span><br><span class="line">    low[x]=dfn[x]=++num;</span><br><span class="line">    stac[++top]=x; ins[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y==from)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y, x);</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],low[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[y])&#123;</span><br><span class="line">            low[x]=<span class="built_in">MIN</span>(low[x],dfn[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        ++cnt; <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stac[top--]; ins[y]=<span class="literal">false</span>;</span><br><span class="line">            color[y]=cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(x!=y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcainit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=max0;i++)</span><br><span class="line">        <span class="keyword">if</span>(lcafa[x][i<span class="number">-1</span>])lcafa[x][i]=lcafa[lcafa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head2[x];i;i=edge2[i].next)&#123;</span><br><span class="line">        <span class="type">int</span> y=edge2[i].v;</span><br><span class="line">        <span class="keyword">if</span>(y!=lcafa[x][<span class="number">0</span>])&#123;</span><br><span class="line">            lcafa[y][<span class="number">0</span>]=x;</span><br><span class="line">            dep[y]=dep[x]+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">lcainit</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="type">int</span> delta=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;=max0; x++)</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)&amp;delta)u=lcafa[u][x];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=max0; ~x; x--)</span><br><span class="line">        <span class="keyword">if</span>(lcafa[u][x]!=lcafa[v][x])&#123;</span><br><span class="line">            u=lcafa[u][x];</span><br><span class="line">            v=lcafa[v][x];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> lcafa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rd</span>(n); <span class="built_in">rd</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">rd</span>(x); <span class="built_in">rd</span>(y);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y);</span><br><span class="line">        <span class="built_in">addedge</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rd</span>(tot_in_txt);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(color[x]!=color[y])&#123;</span><br><span class="line">                <span class="built_in">addedge2</span>(color[x], color[y]);</span><br><span class="line">                <span class="built_in">addedge2</span>(color[y], color[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    max0=(<span class="type">int</span>)(<span class="built_in">log</span>(cnt)/<span class="built_in">log</span>(<span class="number">2</span>))+<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">lcainit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tot_in_txt--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">rd</span>(a); <span class="built_in">rd</span>(b);</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">lca</span>(color[a], color[b]);</span><br><span class="line">        <span class="type">int</span> temp = dep[color[a]] + dep[color[b]] - (dep[k]&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> ans[<span class="number">15</span>] = <span class="string">&quot;00000000000000&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">13</span>; ~i; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;=topow[i])&#123;</span><br><span class="line">                ans[<span class="number">13</span>-i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                temp -= topow[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans[i]==<span class="string">&#x27;0&#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">for</span>(; i&lt;=<span class="number">13</span>; i++)<span class="built_in">putchar</span>(ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yLOI2022-枕万梦（排序）"><a href="#yLOI2022-枕万梦（排序）" class="headerlink" title="yLOI2022 枕万梦（排序）"></a>yLOI2022 枕万梦（排序）</h2><p><strong>提交入口</strong></p><p><a href="https://www.luogu.com.cn/problem/P9472">https://www.luogu.com.cn/problem/P9472</a></p><p><strong>题目描述</strong></p><p>天亮了，扶苏不敌困意，早早地进入了梦乡。在失去引力的梦里，扶苏遇到了好多串漂浮着的数列，它们的长度都相等，而且都是美妙的等比数列！出于本能，扶苏想要把这些数列按照字典序排序，可是在梦里扶苏失去了思考的能力，请你来帮帮她！</p><p>具体地，有 $n$ 个编号从 $1$ 到 $n$ 的数列 $a_1, a_2, \dots a_n$，每个数列的长度均为 $m + 1$。第 $i$ 个数列 $a_i$ 满足递推式 $a_{i,j} = a_{i,j - 1} \times i$，其中 $1 \leq j \leq m$。而扶苏会告诉你每个序列的首项 $a_{i,0}$，你需要帮助她把这些数列按字典序排序。</p><p><strong>输入格式</strong></p><p>输入的第一行是两个整数，依次表示 $n$ 和 $m$。<br>接下来 $n$ 行，每行一个整数，第 $i$ 行的整数表示数列 $a_i$ 的首项 $a_{i,0}$。</p><p><strong>输出格式</strong></p><p>输出一行 $n$ 个整数，第 $i$ 个整数表示字典序第 $i$ 小的数列的<strong>编号</strong>。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>样例 #2</strong></p><p><strong>样例输入 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br></pre></td></tr></table></figure><p><strong>样例 #3</strong></p><p><strong>样例输入 #3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>样例输出 #3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>样例 #4</strong></p><p><strong>样例输入 #4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见附加文件中的 B4.in</span><br></pre></td></tr></table></figure><p><strong>样例输出 #4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见附加文件中的 B4.ans</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p><strong>样例 1 解释</strong></p><p>共有两个数列，每个数列的长度均为 $2+1=3$。</p><p>对第一个数列 $a_1$：</p><ul><li>已知其首项 $a_{1,0} = 1$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=1,j = 1$ 可以得到 $a_{1,1} = a_{1,0} \times 1 = 1$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=1,j = 2$ 可以得到 $a_{1,2} = a_{1,1} \times 1= 1$。</li></ul><p>所以数列 $a_1$ 是 $1,1,1$。</p><p>对第二个数列 $a_2$：</p><ul><li>已知其首项 $a_{2,0} = 2$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=2,j = 1$ 可以得到 $a_{2,1} = a_{2,0} \times 2 = 2 \times 2 = 4$。</li><li>根据 $a_{i,j} = a_{i,j - 1} \times i$，取 $i=2,j = 2$ 可以得到 $a_{2,2} = a_{2,1} \times 2= 4 \times 2 = 8$。</li></ul><p>所以数列 $a_2$ 是 $2,4,8$。</p><p>比较字典序可得数列 $a_1$ 是字典序最小的数列。所以输出 $1$。</p><p><strong>样例 2 解释</strong></p><p>数列 $a_1$ 为 $1,1,1,1$，数列 $a_2$ 为 $-1, -2,-4,-8$。</p><p><strong>数据规模与约定</strong><br>本题共 $10$ 个测试点，各测试点信息如下表：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/08wnuome.png" alt="47-2"></p><p>特殊约定 A：保证 $a_{i,0}$ 均相等。<br>特殊约定 B：保证 $a_{i,0}$ 互不相等。</p><p>对全部的测试点，保证 $1 \leq n \leq 10^5$，$1 \leq m \leq 10^9$，$1 \leq |a_{i,0}| \leq 10^9$。</p><p><strong>提示</strong></p><p>对两个数列 $a_i, a_j$，按如下方式比较其字典序：</p><p>找到<strong>最小的</strong>满足 $a_{i,p} \neq a_{j, p}$ 的下标 $p$，比较 $a_{i, p}$ 和 $a_{j, p}$ 的大小：</p><ul><li>如果 $a_{i,p} &lt; a_{j, p}$，则称 $a_i$ 的字典序比 $a_j$ 的小。</li><li>如果 $a_{i,p} &gt; a_{j, p}$，则称 $a_i$ 的字典序比 $a_j$ 的大。</li></ul><p>可以证明，在本题的限制下，这样的 $p$ 一定存在。</p><p><strong>分析</strong></p><p>要求根据字典序排序。若两个数列第一个元素就不等，便可比较大小；若两个数列第一个元素相等，由数列定义，第二个元素必然不等，于是可比较大小。对于首元素为零的数列，整个数列都是零。由此得到下述做法：</p><p>对于两个不等的 $a_{i,0}$ , 升序排序。对于两个相等的 $a_{i,0}$ , 分正负两种情况：若 $a_{i,0}&gt;0$ , 则行数越大，位序靠后；若 $a_{i,0}&lt;0$ , 则行数越大，位序靠前。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mnode</span>&#123;</span><br><span class="line">    LL mcontent;</span><br><span class="line">    LL mindex;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> mnode&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mcontent != v.mcontent)</span><br><span class="line">            <span class="keyword">return</span> mcontent &lt; v.mcontent;</span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            <span class="keyword">if</span>(mcontent &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> mindex &lt; v.mindex;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> mindex &gt; v.mindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;marray[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        LL x; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x);</span><br><span class="line">        marray[i].mcontent = x;</span><br><span class="line">        marray[i].mindex = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(marray+<span class="number">1</span>, marray+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,marray[i].mindex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>最近考研应试之余，尝试着用王道的思路手写了平衡二叉树的代码，但是没有完成，只是个半成品。如果之后还记得的话，也许我会完成它？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">rd</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||<span class="string">&#x27;9&#x27;</span>&lt;ch) w|=(ch==<span class="string">&#x27;-&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="string">&#x27;0&#x27;</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    x=w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">avlNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="type">int</span> lsub_h;   <span class="comment">//left sub_tree&#x27;s height</span></span><br><span class="line">    <span class="type">int</span> rsub_h;</span><br><span class="line">    <span class="type">int</span> lsub_num; <span class="comment">//size of leftSubtree, excluding itself</span></span><br><span class="line">    <span class="type">int</span> rsub_num;</span><br><span class="line">    avlNode *lchild, *rchild, *fa;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">avlTree</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">avlTree</span>()&#123; T = <span class="literal">nullptr</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">getRoot</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> T; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertX</span><span class="params">(avlNode*&amp; K, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        avlNode* p = <span class="built_in">bstInsert</span>(K, x, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="built_in">maintain_balance_insert</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteX</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;  <span class="comment">// assume there is x</span></span><br><span class="line">        avlNode* p = <span class="built_in">find_X_delete</span>(T, x);</span><br><span class="line">        p-&gt;cnt--;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;cnt&gt;=<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">nullptr</span>&amp;&amp;p-&gt;rchild==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                p-&gt;fa-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">nullptr</span>&amp;&amp;p-&gt;rchild==<span class="literal">nullptr</span>)&#123; <span class="comment">// !</span></span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = p-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p-&gt;fa-&gt;rchild = p-&gt;lchild;</span><br><span class="line">            p-&gt;lchild-&gt;fa = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">nullptr</span>&amp;&amp;p-&gt;rchild!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = p-&gt;rchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p-&gt;fa-&gt;rchild = p-&gt;rchild;</span><br><span class="line">            p-&gt;rchild-&gt;fa = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            avlNode* qwq = <span class="built_in">maxValue_in_lsubtree</span>(p);</span><br><span class="line">            p-&gt;value = qwq-&gt;value;</span><br><span class="line">            p-&gt;cnt = qwq-&gt;cnt;</span><br><span class="line">            p = qwq;</span><br><span class="line">            <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)</span><br><span class="line">                p-&gt;fa-&gt;lchild = p-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p-&gt;fa-&gt;rchild = p-&gt;lchild;</span><br><span class="line">            p-&gt;lchild-&gt;fa = p-&gt;fa;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">maintain_balance_delete</span>(p);</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">index_X</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="comment">//find an avlNode whose value is x，return its index</span></span><br><span class="line">        <span class="comment">//at this point, the binary-tree is balanced</span></span><br><span class="line">        avlNode* p = <span class="built_in">find_X</span>(T, x);   <span class="comment">// O(logN)</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p==p-&gt;fa-&gt;rchild)&#123;</span><br><span class="line">            avlNode* G = <span class="built_in">find_left_daddy</span>(p);</span><br><span class="line">            ans = G-&gt;lsub_num + G-&gt;rsub_num + G-&gt;cnt</span><br><span class="line">                  - p-&gt;rsub_num - p-&gt;cnt + <span class="number">1</span>;</span><br><span class="line">                  <span class="comment">//+1: the value-x avlNode goes the end</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p==p-&gt;fa-&gt;lchild)&#123;</span><br><span class="line">            avlNode* G = <span class="built_in">find_right_daddy</span>(p);</span><br><span class="line">            ans = G-&gt;fa-&gt;lsub_num + G-&gt;fa-&gt;cnt</span><br><span class="line">                  + p-&gt;lsub_num + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;No such avlNode.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findIndex_X</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Query the avlNode whose index is x, return its value</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">preX</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">afterX</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">avlNode* <span class="title">find_X</span><span class="params">(avlNode* K, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(K!=<span class="literal">nullptr</span> &amp;&amp; x!=K-&gt;value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;K-&gt;value) K=K-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span> K=K-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;function find_X() failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> K;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_X_delete</span><span class="params">(avlNode* K, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(K!=<span class="literal">nullptr</span> &amp;&amp; x!=K-&gt;value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;K-&gt;value)&#123;</span><br><span class="line">                K-&gt;lsub_num--;</span><br><span class="line">                K=K-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                K-&gt;rsub_num--;</span><br><span class="line">                K=K-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;function find_X() failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> K;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_left_daddy</span><span class="params">(avlNode* p)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_right_daddy</span><span class="params">(avlNode* p)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lsubtree_height</span><span class="params">(avlNode* x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;lsub_h) <span class="keyword">return</span> x-&gt;lsub_h;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;lchild==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            x-&gt;lsub_h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> x-&gt;lsub_h;</span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;lsub_h = <span class="built_in">MAX</span>(<span class="built_in">lsubtree_height</span>(x-&gt;lchild), </span><br><span class="line">                        <span class="built_in">rsubtree_height</span>(x-&gt;lchild))+ <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;lsub_h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rsubtree_height</span><span class="params">(avlNode* x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;rsub_h) <span class="keyword">return</span> x-&gt;rsub_h;</span><br><span class="line">        <span class="keyword">if</span>(x-&gt;rchild==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            x-&gt;rsub_h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> x-&gt;rsub_h;</span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;rsub_h = <span class="built_in">MAX</span>(<span class="built_in">lsubtree_height</span>(x-&gt;rchild), </span><br><span class="line">                        <span class="built_in">rsubtree_height</span>(x-&gt;rchild))+ <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;rsub_h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">find_Unbalanced_Node</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sub_balance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sub_balance&gt;=<span class="number">-1</span>&amp;&amp;sub_balance&lt;=<span class="number">1</span>)&#123; <span class="comment">//sub_balance = 0,1,-1</span></span><br><span class="line">            p = p-&gt;fa;</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="literal">nullptr</span>) <span class="keyword">return</span> p;</span><br><span class="line">            p-&gt;lsub_h = p-&gt;rsub_h = <span class="number">0</span>; <span class="comment">// erase old data</span></span><br><span class="line">            <span class="type">int</span> lch = <span class="built_in">lsubtree_height</span>(p);</span><br><span class="line">            <span class="type">int</span> rch = <span class="built_in">rsubtree_height</span>(p);</span><br><span class="line">            sub_balance = lch-rch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">bstInsert</span><span class="params">(avlNode* K, <span class="type">int</span> x, avlNode* myfa)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            K = <span class="keyword">new</span> avlNode;</span><br><span class="line">            K-&gt;value = x;</span><br><span class="line">            K-&gt;fa = myfa;</span><br><span class="line">            K-&gt;lchild = K-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> K;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==K-&gt;value)&#123;</span><br><span class="line">            K-&gt;cnt++;</span><br><span class="line">            <span class="keyword">return</span> K;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; K-&gt;value)&#123;</span><br><span class="line">            K-&gt;lsub_num++;     <span class="comment">// nice code &lt;(ˉ^ˉ)&gt;</span></span><br><span class="line">            <span class="built_in">bstInsert</span>(K-&gt;lchild, x, K);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            K-&gt;rsub_num++;</span><br><span class="line">            <span class="built_in">bstInsert</span>(K-&gt;rchild, x, K);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain_balance_insert</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        avlNode* subroot = <span class="built_in">find_Unbalanced_Node</span>(p);</span><br><span class="line">        <span class="comment">// after find_Unbalanced_Node, lsub_h &amp; rsub_h is updated</span></span><br><span class="line">        <span class="keyword">if</span>(subroot-&gt;lchild-&gt;lsub_h==subroot-&gt;lchild-&gt;rsub_h+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">rightRotation</span>(subroot-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(subroot-&gt;rchild-&gt;lsub_h+<span class="number">1</span>==subroot-&gt;rchild-&gt;rsub_h)&#123;</span><br><span class="line">            <span class="built_in">leftRotation</span>(subroot-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(subroot-&gt;lchild-&gt;lsub_h+<span class="number">1</span>==subroot-&gt;lchild-&gt;rsub_h)&#123;</span><br><span class="line">            <span class="built_in">leftRotation</span>(subroot-&gt;lchild-&gt;rchild);</span><br><span class="line">            <span class="built_in">rightRotation</span>(subroot-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(subroot-&gt;rchild-&gt;lsub_h==subroot-&gt;rchild-&gt;rsub_h+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">rightRotation</span>(subroot-&gt;rchild-&gt;lchild);</span><br><span class="line">            <span class="built_in">leftRotation</span>(subroot-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain_balance_delete</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 删除的节点向上计算 balance</span></span><br><span class="line">        avlNode* subroot = <span class="built_in">find_Unbalanced_Node</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(subroot==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// to do </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">leftRotation</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        avlNode *f = p-&gt;fa, *gf = f-&gt;fa;</span><br><span class="line">        f-&gt;rchild = p-&gt;lchild;</span><br><span class="line">        f-&gt;rsub_num = p-&gt; lsub_num;</span><br><span class="line">        f-&gt;rchild-&gt;fa = f;</span><br><span class="line">        p-&gt;lchild = f;</span><br><span class="line">        p-&gt;lsub_num = f-&gt;lsub_num + f-&gt;rsub_num + <span class="number">1</span>;</span><br><span class="line">        f-&gt;fa = p;</span><br><span class="line">        <span class="keyword">if</span>(gf-&gt;lchild==f)&#123;</span><br><span class="line">            gf-&gt;lchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gf-&gt;rchild==f)&#123;</span><br><span class="line">            gf-&gt;rchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;fa = gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rightRotation</span><span class="params">(avlNode* p)</span></span>&#123;</span><br><span class="line">        avlNode *f = p-&gt;fa, *gf = f-&gt;fa;</span><br><span class="line">        f-&gt;lchild = p-&gt;rchild;</span><br><span class="line">        f-&gt;lsub_num = p-&gt; rsub_num;</span><br><span class="line">        f-&gt;lchild-&gt;fa = f;</span><br><span class="line">        p-&gt;rchild = f;</span><br><span class="line">        p-&gt;rsub_num = f-&gt;lsub_num + f-&gt;rsub_num + <span class="number">1</span>;</span><br><span class="line">        f-&gt;fa = p;</span><br><span class="line">        <span class="keyword">if</span>(gf-&gt;lchild==f)&#123;</span><br><span class="line">            gf-&gt;lchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(gf-&gt;rchild==f)&#123;</span><br><span class="line">            gf-&gt;rchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;fa = gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">avlNode* <span class="title">maxValue_in_lsubtree</span><span class="params">(avlNode* p)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    avlNode* T;  <span class="comment">// root</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">avlTree P3369;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">rd</span>(n);</span><br><span class="line">    avlNode* rooT = P3369.<span class="built_in">getRoot</span>();</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> opt, x;</span><br><span class="line">        <span class="built_in">rd</span>(opt); <span class="built_in">rd</span>(x);</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: P3369.<span class="built_in">insertX</span>(rooT, x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: P3369.<span class="built_in">deleteX</span>(x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">index_X</span>(x)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">findIndex_X</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">preX</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P3369.<span class="built_in">afterX</span>()); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-倍经验日（背包）"><a href="#5-倍经验日（背包）" class="headerlink" title="5 倍经验日（背包）"></a>5 倍经验日（背包）</h2><p><strong>题目背景</strong></p><p>现在乐斗有活动了！每打一个人可以获得 5 倍经验！absi2011 却无奈的看着那一些比他等级高的好友，想着能否把他们干掉。干掉能拿不少经验的。</p><p><strong>题目描述</strong></p><p>现在 absi2011 拿出了 $x$ 个迷你装药物（嗑药打人可耻…），准备开始与那些人打了。</p><p>由于迷你装药物每个只能用一次，所以 absi2011 要谨慎的使用这些药。悲剧的是，用药量没达到最少打败该人所需的属性药药量，则打这个人必输。例如他用 $2$ 个药去打别人，别人却表明 $3$ 个药才能打过，那么相当于你输了并且这两个属性药浪费了。</p><p>现在有 $n$ 个好友，给定失败时可获得的经验、胜利时可获得的经验，打败他至少需要的药量。</p><p>要求求出最大经验 $s$，输出 $5s$。</p><p><strong>输入格式</strong></p><p>第一行两个数，$n$ 和 $x$。</p><p>后面 $n$ 行每行三个数，分别表示失败时获得的经验 $\mathit{lose}_i$，胜利时获得的经验 $\mathit{win}_i$ 和打过要至少使用的药数量 $\mathit{use}_i$。</p><p><strong>输出格式</strong></p><p>一个整数，最多获得的经验的五倍。</p><p><strong>样例 #1</strong></p><p><strong>样例输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 8</span><br><span class="line">21 52 1</span><br><span class="line">21 70 5</span><br><span class="line">21 48 2</span><br><span class="line">14 38 3</span><br><span class="line">14 36 1</span><br><span class="line">14 36 2</span><br></pre></td></tr></table></figure><p><strong>样例输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1060</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p><strong>【Hint】</strong></p><p>五倍经验活动的时候，absi2011 总是吃体力药水而不是这种属性药。</p><p><strong>【数据范围】</strong></p><ul><li>对于 $10\%$ 的数据，保证 $x=0$。</li><li>对于 $30\%$ 的数据，保证 $0\le n\le 10$，$0\le x\le 20$。</li><li>对于 $60\%$ 的数据，保证 $0\le n,x\le 100$， $10&lt;lose_i,win_i\le 100$，$0\le use_i\le 5$。</li><li>对于 $100\%$ 的数据，保证 $0\le n,x\le 10^3$，$0&lt;lose_i\le win_i\le 10^6$，$0\le use_i\le 10^3$。</li></ul><p><strong>【题目来源】</strong></p><p>fight.pet.qq.com</p><p>absi2011 授权题目</p><p><strong>分析</strong></p><p>为防止学校自命题出 dp 埋伏一手，还是练两道为妙。</p><p>整体思路看起来比较显然，但是特判会有点麻烦。大佬们都是用数组的，我还是老老实实用记忆化搜索。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN],lose[MAXN],win[MAXN],use[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(f[n][w]) <span class="keyword">return</span> f[n][w];</span><br><span class="line">    <span class="keyword">if</span>(!use[n])&#123;</span><br><span class="line">        f[n][w] = <span class="built_in">dp</span>(n<span class="number">-1</span>,w) + win[n];</span><br><span class="line">        <span class="keyword">return</span> f[n][w];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!w)&#123;</span><br><span class="line">        f[n][w] = <span class="built_in">dp</span>(n<span class="number">-1</span>,<span class="number">0</span>) + lose[n];</span><br><span class="line">        <span class="keyword">return</span> f[n][w];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp1 = <span class="built_in">dp</span>(n<span class="number">-1</span>,w) + lose[n];</span><br><span class="line">    <span class="type">int</span> temp2 = (w-use[n]&gt;=<span class="number">0</span>)?(<span class="built_in">dp</span>(n<span class="number">-1</span>,w-use[n]) + win[n]):<span class="number">0</span>;</span><br><span class="line">    f[n][w] = <span class="built_in">MAX</span>(temp1, temp2);</span><br><span class="line">    <span class="keyword">return</span> f[n][w];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;lose[i],&amp;win[i],&amp;use[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="number">5ll</span>*<span class="built_in">dp</span>(n,x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一道题开一篇文章实在浪费，于是决定以后零零散散做的题就放在这个集子里了。如果数量过多会考虑再开。&lt;/p&gt;
&lt;h2 id=&quot;JSOI2004-平衡点（模拟退火）&quot;&gt;&lt;a href=&quot;#JSOI2004-平衡点（模拟退火）&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="tarjan" scheme="https://loveofpeach.github.io/tags/tarjan/"/>
    
    <category term="lca" scheme="https://loveofpeach.github.io/tags/lca/"/>
    
    <category term="模拟退火" scheme="https://loveofpeach.github.io/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构应试笔记</title>
    <link href="https://loveofpeach.github.io/posts/7ccfe718.html"/>
    <id>https://loveofpeach.github.io/posts/7ccfe718.html</id>
    <published>2023-07-05T04:39:12.000Z</published>
    <updated>2023-10-22T03:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>应试向的数据结构考试和实际写起代码来有很大区别。重复造轮子就不说了，更可怕的是，有时还需要应试者人脑模拟算法的执行过程。相对来说，对针对具体问题设计算法的考察较浅。</p><p>另外，有时王道书的代码风格奇特，我尽量改为了自己习惯的写法，这点需要特别注意。</p><p>本文中所有代码除非注明，均不保证能运行。</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表：</p><ul><li>顺序存储<ul><li>顺序表</li></ul></li><li>链式存储<ul><li>单链表（指针实现）</li><li>双链表（指针实现）</li><li>循环链表（指针实现）</li><li>静态链表（借助数组实现）</li></ul></li></ul><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序存储类型描述为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SqList</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动态分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> InitSize = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SeqList</span>&#123;</span><br><span class="line">  ElemType* data;</span><br><span class="line">  <span class="type">int</span> MaxSize, length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>C++ 的初始动态分配语句为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = <span class="keyword">new</span> ElemType[InitSize];</span><br></pre></td></tr></table></figure><p><strong>注意：动态分配并不是链式存储，它同样属于顺序存储结构，物理结构没有变化，依然是随机存取方式，只是分配的空间大小可以在运行时动态决定。</strong></p><blockquote><p>例：17 页第 11 题。<br>顺序表的插入算法中，当 n 个空间已满时，可再申请增加分配 m 个空间，若申请失败，则说明系统没有（<strong>n + m 个连续</strong>）可分配的存储空间。</p></blockquote><p>顺序表的操作：插入、删除、按值查找。这部分的代码自己实现就行。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表的描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动态分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode* p = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br></pre></td></tr></table></figure><p>要表示一个单链表时，需要一个头指针<code>L</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode* L;</span><br></pre></td></tr></table></figure><p>带头节点的单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;             <span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LNode* L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序插入（带头节点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头节点编号为0，有数据的节点编号从1开始</span></span><br><span class="line"><span class="comment">//插入完成后新元素的位置为 i</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，若<code>i=1</code>，即是插在表头。</p><p>指定节点的后插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，发现<strong>按位序插入（带头节点）</strong>的代码可以通过复用<strong>指定节点的后插操作</strong>的代码来简化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定节点的前插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：使用后插，然后交换数据成员的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPreNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="comment">//内存分配失败，考试可以不写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按位序删除（带头节点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123; <span class="comment">//循环找到第 i-1 个节点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)  <span class="comment">// i 值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="comment">//第i-1个节点之后已无其他节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next; <span class="comment">//令q指向被删除节点</span></span><br><span class="line">  e = q-&gt;data; <span class="comment">//用e返回元素的值</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/10/64abd587e3be8.png" alt="46-1.png" title="上面代码的图示"></p><p>指定节点的删除：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定节点 p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/10/64abdaced677a.png" alt="46-2.png"></p><p>注意上图中的代码有一个 bug，在边界情况（p 节点刚好是最后一个节点）下会产生错误。但是只是应试的话无所谓了，扣也最多一两分，甚至不扣。</p><p>单链表按位查找：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找，返回第i个元素的指针</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按值查找：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LNode*&amp; L, ElemType e)</span></span>&#123;</span><br><span class="line">  LNode* p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：如果<code>ElemType</code>是一个<code>struct</code>，需要自己定义比较运算符。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> b; <span class="comment">//仅作举例 int</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> ElemType&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> ElemType::<span class="keyword">operator</span> != (<span class="type">const</span> ElemType&amp; rhs)&#123;</span><br><span class="line">  <span class="built_in">return</span> (a!=rhs.a || b!=rhs.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求表的长度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode* p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插法建立单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">List_TailInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r=L;  <span class="comment">// r 指向最后一个元素</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">// 9999是退出值</span></span><br><span class="line">    s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头插法建立单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//王道书的代码无法忍受，我自己写了。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">List_HeadInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">//9999 为退出值，当然也可以while(scanf(&quot;%d&quot;,&amp;x))&#123;&#125; ，看具体情况</span></span><br><span class="line">    <span class="built_in">InsertNextNode</span>(L, x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：单链表的全部操作"><a href="#总结：单链表的全部操作" class="headerlink" title="总结：单链表的全部操作"></a>总结：单链表的全部操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;             <span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;  <span class="comment">//或者认为是 main() 函数也勉强可以</span></span><br><span class="line">  LNode* L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123; <span class="comment">//指定节点的后插操作</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路：使用后插，然后交换数据成员的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPreNode</span><span class="params">(LNode* p, ElemType e)</span></span>&#123;  <span class="comment">//指定节点的前插操作</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>) <span class="comment">//内存分配失败，考试可以不写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按位查找，返回第i个元素的指针</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  LNode* p;  <span class="comment">//指向当前扫描到的节点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>; <span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">  p = L;  <span class="comment">//指向头节点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LNode*&amp; L, ElemType e)</span></span>&#123; <span class="comment">//按值查找</span></span><br><span class="line">  LNode* p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)  <span class="comment">//注意细节，往上翻</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入完成后新元素的位置为 i</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType e)</span></span>&#123; <span class="comment">//按位序插入</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LNode*&amp; L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123; <span class="comment">//按位序删除</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)  <span class="comment">// i 值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="comment">//第i-1个节点之后已无其他节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next; <span class="comment">//令q指向被删除节点</span></span><br><span class="line">  e = q-&gt;data; <span class="comment">//用e返回元素的值</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定节点 p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode* q = p-&gt;next;</span><br><span class="line">  p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//求表的长度</span></span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode* p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">List_TailInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//尾插法建立单链表</span></span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r=L;  <span class="comment">// r 指向最后一个元素</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">// 9999是退出值</span></span><br><span class="line">    s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">List_HeadInsert</span><span class="params">(LNode*&amp; L)</span></span>&#123; <span class="comment">//头插法建立单链表</span></span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123; <span class="comment">//9999 为退出值，当然也可以while(scanf(&quot;%d&quot;,&amp;x))&#123;&#125; ，看具体情况</span></span><br><span class="line">    <span class="built_in">InsertNextNode</span>(L, x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>双链表的描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  DNode *pre, *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (DNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;pre = <span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DNode* L;</span><br><span class="line">  <span class="built_in">InitDList</span>(L);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的插入：</p><p><img src="https://bu.dusays.com/2023/07/13/64af6d656cba5.png" alt="46-3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 p 节点之后插入 s 节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertAfter</span><span class="params">(DNode* p, DNode* s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span> || s==<span class="literal">NULL</span>) <span class="comment">//非法参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    p-&gt;next-&gt;pre = s;</span><br><span class="line">  s-&gt;pre = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的删除和销毁：</p><p><img src="https://bu.dusays.com/2023/07/14/64b0ae3aa83d5.png" alt="46-4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 p 节点的后继节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteAfter</span><span class="params">(DNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  DNode* q = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    q-&gt;next-&gt;pre = p;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestoryList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">DeleteAfter</span>(L);</span><br><span class="line">  <span class="built_in">free</span>(L);</span><br><span class="line">  L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表的遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后向遍历</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历（不处理头节点）</span></span><br><span class="line"><span class="keyword">while</span>(p-&gt;pre!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="comment">//do something on p</span></span><br><span class="line">  p = p-&gt;pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));  <span class="comment">//分配一个头节点</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(LNode* L, LNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/15/64b1f2544dc77.png" alt="46-5.png"></p><p>具体代码可以自己实现，不再赘述。</p><p>循环双链表：</p><p><img src="https://bu.dusays.com/2023/07/15/64b1f39faa21e.png" alt="46-6.png"></p><p><img src="https://bu.dusays.com/2023/07/15/64b1f5e3b81a1.png" alt="46-7.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  DNode *pre, *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDList</span><span class="params">(DNode*&amp; L)</span></span>&#123;</span><br><span class="line">  L = (DNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;pre = L;</span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DNode* L;</span><br><span class="line">  <span class="built_in">InitDList</span>(L);</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DNode* L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(DNode* L, DNode* p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后插操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 p 节点之后插入 s 节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertAfter</span><span class="params">(DNode* p, DNode* s)</span></span>&#123;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next-&gt;pre = s;</span><br><span class="line">  s-&gt;pre = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除操作：</p><p><img src="https://bu.dusays.com/2023/07/15/64b1fbbd14de0.png" alt="46-8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除 p 的后继节点 q</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;pre = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p><img src="https://bu.dusays.com/2023/07/15/64b205c5c3f47.png" alt="46-9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> Maxsize = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="type">int</span> next;  <span class="comment">//下一个元素的数组下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Node a[Maxsize];</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/15/64b20bb881ba7.png" alt="46-10.png"></p><h2 id="栈、队列、数组"><a href="#栈、队列、数组" class="headerlink" title="栈、队列、数组"></a>栈、队列、数组</h2><p><del>这 tm 还要学？</del></p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>顺序栈：代码自己实现。</p><p>共享栈：</p><p><img src="https://bu.dusays.com/2023/07/25/64bfeeb95d52e.jpg" alt="46-11.jpg"></p><p>链栈：通常采用<strong>不带头节点</strong>的单链表实现，所有操作在表头进行。</p><p><img src="https://bu.dusays.com/2023/07/25/64bff090644c8.png" alt="46-12.png" title="链栈"></p><p>队列：</p><p><img src="https://bu.dusays.com/2023/07/26/64bff2bc63399.jpg" alt="46-13.jpg"></p><p>循环队列：</p><p><img src="https://bu.dusays.com/2023/07/26/64c07a2fe98e8.jpg" alt="46-14.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">myQueue</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> front, rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(myQueue&amp; qwq)</span></span>&#123; <span class="comment">//初始化</span></span><br><span class="line">  qwq.rear = qwq.front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(myQueue qwq)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==qwq.front) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(myQueue&amp; qwq, ElemType x)</span></span>&#123; <span class="comment">//入队</span></span><br><span class="line">  <span class="keyword">if</span>((qwq.rear+<span class="number">1</span>)%MaxSize==qwq.front)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//队满则报错</span></span><br><span class="line">  qwq.data[qwq.rear] = x;</span><br><span class="line">  qwq.rear = (qwq.rear+<span class="number">1</span>) % MaxSize;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(myQueue&amp; qwq, ElemType&amp; x)</span></span>&#123;  <span class="comment">//出队</span></span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==qwq.front) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//队空则报错</span></span><br><span class="line">  x = qwq.data[qwq.front];</span><br><span class="line">  qwq.front = (qwq.front+<span class="number">1</span>) % MaxSize;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列的链式存储（左开右闭？）：</p><p>通常采用<strong>带头节点</strong>的单链表。</p><p><img src="https://bu.dusays.com/2023/07/26/64c083cc0a7ad.png" alt="46-15.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkQueue</span>&#123;</span><br><span class="line">  LNode* front;</span><br><span class="line">  LNode* rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue&amp; qwq)</span></span>&#123;</span><br><span class="line">  qwq.front = qwq.rear = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode)); <span class="comment">//建立头节点</span></span><br><span class="line">  qwq.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LinkQueue qwq;  <span class="comment">//声明一个队列</span></span><br><span class="line">  <span class="built_in">InitQueue</span>(qwq);</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue qwq)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(qwq.front==qwq.rear) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; qwq, ElemType x)</span></span>&#123;  <span class="comment">//入队</span></span><br><span class="line">  LNode* s = (LNode*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNdoe));</span><br><span class="line">  s-&gt;data = x;</span><br><span class="line">  s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  qwq.rear-&gt;next = s;</span><br><span class="line">  qwq.rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; qwq, ElemType&amp; x)</span></span>&#123; <span class="comment">//出队</span></span><br><span class="line">  <span class="keyword">if</span>(qwq.front==qwq.rear) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//空队，失败</span></span><br><span class="line">  LNode* p = qwq.front-&gt;next;</span><br><span class="line">  x = p-&gt;data;</span><br><span class="line">  qwq.front-&gt;next = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(qwq.rear==p) qwq.rear = qwq.front;</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><strong>栈在括号匹配中的应用：</strong></p><p><img src="https://bu.dusays.com/2023/07/26/64c093105a785.png" alt="46-16.png"></p><p><strong>栈在表达式求值中的应用：</strong></p><p>Reverse Polish notation（逆波兰表达式 = 后缀表达式）</p><p>Polish notation（波兰表达式 = 前缀表达式）</p><p><img src="https://bu.dusays.com/2023/07/27/64c1d1a988b93.png" alt="46-17.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d4b2c6635.png" alt="46-18.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d98cf28ec.png" alt="46-18dot5.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1d68c05225.png" alt="46-19.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1daafecb11.png" alt="46-20.png"></p><p><img src="https://bu.dusays.com/2023/07/27/64c1de0b5e5cd.png" alt="46-21.png"></p><p>将<strong>中缀转后缀</strong>和<strong>后缀表达式求值</strong>两个算法结合起来：</p><p><img src="https://bu.dusays.com/2023/07/27/64c1e7130be48.png" alt="46-22.png"></p><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>有序树和无序树：</p><p><img src="https://bu.dusays.com/2023/07/30/64c5cea0b77e0.png" alt="46-23.png"></p><p><strong>注意：此课程中<code>度</code>的概念和离散数学中不同。</strong>（万恶的图论名词差异）</p><p><img src="https://bu.dusays.com/2023/07/30/64c5da5e65dc1.png" alt="46-24.png"></p><p>树的一些性质：（注意这里的“度数”是歧义概念）</p><ol><li>树中的节点数等于所有节点的度数之和加 1 </li><li>度为 m 的树中第 i 层上至多有 $m^{i-1}$ 个节点（$i\geqslant 1$）</li><li>高度为 h 的 m 叉树至多有 $\frac{m^h-1}{m-1}$ 个节点</li><li>具有 n 个节点的 m 叉树最小高度为 $\left \lceil \log_m(n(m-1)+1) \right \rceil$</li></ol><p>结论 4 的推导：</p><p>假设高度为 $h$ , 由结论3 ：</p><script type="math/tex; mode=display">\frac{m^{h-1}-1}{m-1}< n \leqslant \frac{m^h-1}{m-1}</script><script type="math/tex; mode=display">m^{h-1}<n(m-1)+1\leqslant m^h</script><script type="math/tex; mode=display">h-1<\log_m(n(m-1)+1)\leqslant h</script><script type="math/tex; mode=display">h_{\min}=\left \lceil \log_m(n(m-1)+1) \right \rceil</script><p>满二叉树、完全二叉树的性质：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca86a48e788.png" alt="46-25.png"></p><p>二叉排序树：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca884b17442.png" alt="46-26.png"></p><p>平衡二叉树：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca899918de1.png" alt="46-27.png"></p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>设非空二叉树中<code>度</code>（歧义概念）为 0、1、2 的节点个数分别为 n0、n1、n2 , 则 $n_0=n_2+1$ （叶子节点比二分枝节点多一个）。推导如下：</p><p>假设树中节点总数为 n , 则：</p><ul><li>$n = n_0 + n_1 + n_2$</li><li>$n = n_1 + 2n_2 + 1$</li></ul><p>具有 n 个（n&gt;0）节点的完全二叉树的高度 h 为 $\left \lceil \log_2(n+1) \right \rceil$ 或 $\left \lfloor \log_2n \right \rfloor +1$. （推导不难）</p><p>某个性质：</p><p><img src="https://bu.dusays.com/2023/08/03/64ca8fc557c02.png" alt="46-28.png"></p><h3 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h3><p>顺序存储（<strong>绝大多数情况下不会使用</strong>）：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1cbbed56f.png" alt="46-29.png"></p><p>完全二叉树的此种存储结构的操作：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1dc4cced1.png" alt="46-30.png"></p><p>对于非完全二叉树：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd1f309b356.png" alt="46-31.png" title="丑陋的做法"></p><p>链式存储：</p><p><img src="https://bu.dusays.com/2023/08/04/64cd206123c45.png" alt="46-32.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span>&#123;</span><br><span class="line">  <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BinoTree</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  BinoTree* lchild;</span><br><span class="line">  BinoTree* rchild;</span><br><span class="line">  <span class="comment">//可以根据需要加上指向父节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一棵空树</span></span><br><span class="line">BinoTree* root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入根节点</span></span><br><span class="line">root = (BinoTree*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BinoTree));</span><br><span class="line">root-&gt;data = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新节点（例子）</span></span><br><span class="line">BinoTree* p = (BinoTree*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BinoTree));</span><br><span class="line">p-&gt;data = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild = p;</span><br></pre></td></tr></table></figure><p>上面代码对应的图：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd2344bffb8.png" alt="46-33.png"></p><h3 id="先、中、后序遍历"><a href="#先、中、后序遍历" class="headerlink" title="先、中、后序遍历"></a>先、中、后序遍历</h3><ul><li><strong>先</strong>序遍历：<strong>根</strong>、左、右（<strong>N</strong>LR）</li><li><strong>中</strong>序遍历：左、<strong>根</strong>、右（L<strong>N</strong>R）</li><li><strong>后</strong>序遍历：左、右、<strong>根</strong>（LR<strong>N</strong>）</li></ul><p>例子：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd286999c76.png" alt="46-34.png"></p><p>和表达式的联系：</p><p><img src="https://bu.dusays.com/2023/08/05/64cd298d710cc.png" alt="46-35.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">visit</span>(T);             <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">preOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">preOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);            <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">inOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(BinoTree* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">postOrder</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">postOrder</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);              <span class="comment">//访问根节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>其实就是 BFS 。</p><p><img src="https://bu.dusays.com/2023/08/07/64cff1caf36aa.png" alt="46-36.png"></p><p>执行算法：</p><ol><li>初始化一个辅助队列</li><li>根节点入队</li><li>若队列非空，弹队首，访问弹出的节点，并将其孩子（若有）入队</li><li>重复 3 直至队列为空</li></ol><p>伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：我使用了自己习惯的写法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">  queue&lt;node&gt; qwq;</span><br><span class="line">  node temp;</span><br><span class="line">  <span class="comment">//do something...</span></span><br><span class="line">  qwq.<span class="built_in">push</span>(temp);</span><br><span class="line">  <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    node head = qwq.<span class="built_in">front</span>(); <span class="comment">//取队首</span></span><br><span class="line">    qwq.<span class="built_in">pop</span>();               <span class="comment">//弹队首</span></span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 BFS 剪枝的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://www.luogu.com.cn/problem/P1126 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,sx,sy,ex,ey;</span><br><span class="line"><span class="type">char</span> face; <span class="type">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">53</span>][<span class="number">53</span>],ans;</span><br><span class="line"><span class="type">int</span> fx[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">53</span>][<span class="number">53</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">int</span> dir,step;</span><br><span class="line">    <span class="type">bool</span> chan;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">changedir</span><span class="params">(<span class="type">int</span> dirt,<span class="type">int</span> xia)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xia==<span class="number">0</span>)<span class="keyword">return</span> (dirt+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(xia==<span class="number">233</span>)<span class="built_in">return</span> (dirt+<span class="number">2</span>)%<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">return</span> (dirt<span class="number">-1</span>+<span class="number">4</span>)%<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;=n||y&lt;<span class="number">1</span>||y&gt;=m)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y]||a[x+<span class="number">1</span>][y])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[x][y+<span class="number">1</span>]||a[x+<span class="number">1</span>][y+<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; qwq;</span><br><span class="line">    node temp;</span><br><span class="line">    temp.x=sx;temp.y=sy;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;E&#x27;</span>)temp.dir=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;S&#x27;</span>)temp.dir=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;W&#x27;</span>)temp.dir=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(face==<span class="string">&#x27;N&#x27;</span>)temp.dir=<span class="number">3</span>;</span><br><span class="line">    temp.step=<span class="number">0</span>; temp.chan=<span class="literal">false</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>(temp);</span><br><span class="line">    vis[temp.x][temp.y]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node head=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx=head.x+fx[head.dir][<span class="number">0</span>]*i;</span><br><span class="line">            <span class="type">int</span> ny=head.y+fx[head.dir][<span class="number">1</span>]*i;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">check</span>(nx,ny))<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(nx==ex&amp;&amp;ny==ey)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=head.step+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            qwq.<span class="built_in">push</span>((node)&#123;nx,ny,head.dir,head.step+<span class="number">1</span>,<span class="literal">false</span>&#125;);</span><br><span class="line">            vis[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.chan)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> dirti=<span class="built_in">changedir</span>(head.dir,<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> dirti2=<span class="built_in">changedir</span>(head.dir,<span class="number">1</span>);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti,head.step+<span class="number">1</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti2,head.step+<span class="number">1</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(ok)</span><br><span class="line">        &#123;</span><br><span class="line">            ok=<span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> dirti3=<span class="built_in">changedir</span>(head.dir,<span class="number">233</span>);</span><br><span class="line">            qwq.<span class="built_in">push</span>((node)&#123;head.x,head.y,dirti3,head.step+<span class="number">2</span>,<span class="literal">true</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">    cin&gt;&gt;a[i][j];</span><br><span class="line">    cin&gt;&gt;sx&gt;&gt;sy&gt;&gt;ex&gt;&gt;ey&gt;&gt;face;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(sx==ex&amp;&amp;sy==ey)cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">bfs</span>())cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在树或者图中需要在具体的数据结构上实现 BFS ，例如链式前向星。</p><p>有必要给出应试代码，以下代码只适合二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64cffa921914e.png" alt="46-37.png"></p><h3 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h3><p><strong>若只给出一棵二叉树的 前/中/后/层 序遍历序列中的一种，不能唯一确定一棵二叉树。</strong></p><p>由二叉树的遍历序列构造二叉树，需已知以下三种信息中的任一种：</p><ul><li>前序+中序 遍历序列</li><li>后序+中序 遍历序列</li><li>层序+中序 遍历序列</li></ul><p>由前序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d06d5f516a2.png" alt="46-38.png"></p><p>由后序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d06f71eb257.png" alt="46-39.png"></p><p>由层序+中序遍历序列确定二叉树：</p><p><img src="https://bu.dusays.com/2023/08/07/64d07112e74a7.png" alt="46-40.png"></p><p>补充说明：</p><p><img src="https://bu.dusays.com/2023/08/07/64d072c56670f.png" alt="46-41.png"></p><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>问题的引入：</p><p><img src="https://bu.dusays.com/2023/08/08/64d2555c0a6a8.png" alt="46-42.png"></p><p>线索二叉树的概念：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25759b60ca.png" alt="46-43.png"></p><p>线索二叉树的存储结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// tag==0 , 表示指针指向孩子</span></span><br><span class="line"><span class="comment">// tag==1 , 表示指针是“线索”</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/08/64d259e53306c.png" alt="46-44.png"></p><p>先序线索二叉树：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25b0b5f446.png" alt="46-45.png"></p><p>后序线索二叉树：</p><p><img src="https://bu.dusays.com/2023/08/08/64d25c19b03fd.png" alt="46-46.png"></p><p>中序线索化代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">inThread</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);             <span class="comment">//访问根节点</span></span><br><span class="line">    <span class="built_in">inThread</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//最后调用这个函数即可</span></span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123; <span class="comment">//二叉树非空</span></span><br><span class="line">    <span class="built_in">inThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>; <span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preThread</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">visit</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;ltag==<span class="number">0</span>)   <span class="comment">//防止原地转圈</span></span><br><span class="line">      <span class="built_in">preThread</span>(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">preThread</span>(T-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePreThread</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">preThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序线索化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  TreadNode* lchild;</span><br><span class="line">  TreadNode* rchild;</span><br><span class="line">  <span class="type">bool</span> ltag, rtag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123; <span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">    q-&gt;lchild = pre;</span><br><span class="line">    q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    pre-&gt;rchild = q;</span><br><span class="line">    pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//中序遍历二叉树，一边遍历一边线索化</span></span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">postThread</span>(T-&gt;lchild);  <span class="comment">//访问左孩子</span></span><br><span class="line">    <span class="built_in">postThread</span>(T-&gt;rchild);  <span class="comment">//访问右孩子</span></span><br><span class="line">    <span class="built_in">visit</span>(T);               <span class="comment">//访问根节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePostThread</span><span class="params">(ThreadNode* T)</span></span>&#123; <span class="comment">//最后调用这个函数即可</span></span><br><span class="line">  pre = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123; <span class="comment">//二叉树非空</span></span><br><span class="line">    <span class="built_in">postThread</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>; <span class="comment">//处理遍历的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树找中序后继：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadNode* <span class="title">firstNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找到以p为根的子树中，第一个被中序遍历的节点</span></span><br><span class="line">  <span class="comment">//循环找到最左下节点（不一定是叶子节点）</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>) p = p-&gt;lchild;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode* <span class="title">nextNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//在中序线索二叉树中找到节点p的后继节点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">firstNode</span>(p-&gt;rchild);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrderScan</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="comment">//对中序线索二叉树进行中序遍历</span></span><br><span class="line">  <span class="keyword">for</span>(ThreadNode* p=<span class="built_in">firstNode</span>(T); p!=<span class="literal">NULL</span>; p=<span class="built_in">nextNode</span>(p))&#123;</span><br><span class="line">    <span class="built_in">visit</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树找中序前驱思路（上面找后继的思路类似，不回头补了）：</p><p><img src="https://bu.dusays.com/2023/08/11/64d5c35930c85.png" alt="46-47.png"></p><p>中序线索二叉树找中序前驱代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadNode* <span class="title">lastNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找到以p为根的子树中，最后一个被中序遍历的节点</span></span><br><span class="line">  <span class="comment">//循环找到最右下节点（不一定是叶子节点）</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;rtag==<span class="number">0</span>) p = p-&gt;rchild;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode* <span class="title">preNode</span><span class="params">(ThreadNode* p)</span></span>&#123;</span><br><span class="line">  <span class="comment">//在中序线索二叉树中找到节点p的前驱节点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">lastNode</span>(p-&gt;lchild);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">revInOrderScan</span><span class="params">(ThreadNode* T)</span></span>&#123;</span><br><span class="line">  <span class="comment">//对中序线索二叉树进行逆向中序遍历</span></span><br><span class="line">  <span class="keyword">for</span>(ThreadNode* p=<span class="built_in">lastNode</span>(T); p!=<span class="literal">NULL</span>; p=<span class="built_in">preNode</span>(p))&#123;</span><br><span class="line">    <span class="built_in">visit</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先序线索二叉树找先序后继：</p><p><img src="https://bu.dusays.com/2023/08/12/64d77c960c0db.png" alt="46-48.png"></p><p>先序线索二叉树找先序前驱：</p><p><img src="https://bu.dusays.com/2023/08/12/64d77e38e02e9.png" alt="46-49.png"></p><p>可以发现，按照之前的思路无法实现。但是，<strong>如果每个节点增加指向其父节点的指针</strong>，则可以有如下思路：</p><p><img src="https://bu.dusays.com/2023/08/12/64d7814d613db.png" alt="46-50.png"></p><p>后序线索二叉树找后序前驱：</p><p><img src="https://bu.dusays.com/2023/08/12/64d7851a3c4b8.png" alt="46-51.png"></p><p>后序线索二叉树找后序后继：</p><p><img src="https://bu.dusays.com/2023/08/12/64d786f38d68b.png" alt="46-52.png"></p><p>可以发现，按照之前的思路无法实现。但是，<strong>如果每个节点增加指向其父节点的指针</strong>，则可以有如下思路：</p><p><img src="https://bu.dusays.com/2023/08/12/64d78920217db.png" alt="46-53.png"></p><p>总结：</p><p><img src="https://bu.dusays.com/2023/08/12/64d78b5668b06.png" alt="46-54.png"></p><h3 id="树、森林"><a href="#树、森林" class="headerlink" title="树、森林"></a>树、森林</h3><p>孩子兄弟表示法（很怪，感觉不实用）：</p><p><img src="https://bu.dusays.com/2023/08/17/64de166bd22ae.png" alt="46-55.png"></p><p>树和二叉树的转化：</p><p><img src="https://bu.dusays.com/2023/08/17/64de166bec18b.png" alt="46-56.png"></p><p>森林和二叉树的转换：</p><p><img src="https://bu.dusays.com/2023/08/17/64de192903f92.png" alt="46-57.png"></p><p>树的遍历：先根遍历、后根遍历、层序遍历。</p><p><img src="https://bu.dusays.com/2023/08/17/64de23c944173.png" alt="46-58.png"></p><p>森林的遍历：先序遍历、中序遍历。</p><p><img src="https://bu.dusays.com/2023/08/17/64de2c050f3ac.png" alt="46-59.png"></p><p><strong>特别提醒：</strong> 以上只是一个应试的可选补充，熟悉 OI 代码直接在纸上写 OI 代码即可。例如树的遍历，采用链式前向星：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问所有与 x 相接的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">    <span class="type">int</span> y=edge[i].v;</span><br><span class="line">    <span class="comment">//do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树与二叉树的应用"><a href="#树与二叉树的应用" class="headerlink" title="树与二叉树的应用"></a>树与二叉树的应用</h3><p>Huffman树：<a href="https://loveofpeach.github.io/posts/9e22caea.html#Huffman%E6%A0%91">https://loveofpeach.github.io/posts/9e22caea.html#Huffman%E6%A0%91</a></p><p>性质：n 个叶子节点最终构成的 Huffman 树节点总数为 2n-1 .</p><p>Huffman 编码：</p><p><img src="https://bu.dusays.com/2023/08/22/64e418f094b72.png" alt="46-60.png"></p><p>并查集：<a href="https://loveofpeach.github.io/posts/9e22caea.html#%E5%B9%B6%E6%9F%A5%E9%9B%86">https://loveofpeach.github.io/posts/9e22caea.html#%E5%B9%B6%E6%9F%A5%E9%9B%86</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> uset[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">makeset</span><span class="params">(<span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)uset[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=uset[x])uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m; cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">makeset</span>(n+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> z,x,y;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;z,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">1</span>)<span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(z==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Y\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;N\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>邻接矩阵的某个性质（建议配合离散数学食用）：</p><p><img src="https://bu.dusays.com/2023/08/22/64e421f6699fc.png" alt="46-61.png"></p><p>类似地，有：</p><p><img src="https://bu.dusays.com/2023/08/22/64e42bcc38418.png" alt="46-62.png"></p><p>邻接表法：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6396f9356b.png" alt="46-63.png" title="丑陋的做法"></p><p>十字链表存储有向图，空间复杂度 $O(|V|+|E|)$</p><ul><li>只用于存储有向图</li><li>找到指定顶点的所有出边：顺着绿色线路找</li><li>找到指定顶点的所有入边：顺着橙色线路找</li></ul><p><img src="https://bu.dusays.com/2023/08/24/64e63bac84460.png" alt="46-64.png" title="非常丑陋的做法"></p><p>邻接多重表存储无向图，空间复杂度 $O(|V|+|E|)$</p><ul><li>只能用于存储无向图</li><li>删除边、删除节点等操作“很方便”</li></ul><p><img src="https://bu.dusays.com/2023/08/24/64e63eebc0175.png" alt="46-65.png" title="让人怀疑这个世界其实不算糟"></p><p><strong>我选择，链式前向星。希望阅卷老师能看懂。</strong></p><h3 id="图的基本操作"><a href="#图的基本操作" class="headerlink" title="图的基本操作"></a>图的基本操作</h3><p><code>Adjacent(G, x, y)</code> ：判断图 G 是否存在边<code>&lt;x,y&gt;</code>或<code>(x,y)</code></p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)\rightarrow O(|V|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)\rightarrow O(|V|)$</li></ul></li></ul><p><code>Neighbors(G, x)</code> ：列出图 G 中与节点 x 邻接的边</p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度 $O(1) \rightarrow O(|V|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度<ul><li>出边 $O(1) \rightarrow O(|V|)$</li><li>入边 $O(|E|)$</li></ul></li></ul></li></ul><p><code>InsertVertex(G, x)</code> ：在图 G 中插入顶点 x</p><ul><li>无向图和有向图时间复杂度相同<ul><li>邻接矩阵时间复杂度 $O(1)$</li><li>邻接表时间复杂度 $O(1)$</li></ul></li></ul><p><code>DeleteVertex(G, x)</code> ：从图 G 中删除顶点 x</p><ul><li>无向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度 $O(1) \rightarrow O(|E|)$</li></ul></li><li>有向图<ul><li>邻接矩阵时间复杂度 $O(|V|)$</li><li>邻接表时间复杂度<ul><li>删出边 $O(1) \rightarrow O(|V|)$</li><li>删入边 $O(|E|)$</li></ul></li></ul></li></ul><p><code>AddEdge(G, x, y)</code> ：加边</p><ul><li>无向图和有向图类似<ul><li>邻接矩阵 $O(1)$</li><li>邻接表 $O(1)$ （头插法）</li></ul></li></ul><p><code>FirstNeighbor(G, x)</code> ：求图 G 中顶点 x 的第一个邻接点，若有返回顶点号；若没有或者根本不存在 x ，返回 -1</p><ul><li>无向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表 $O(1)$</li></ul></li><li>有向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表<ul><li>找出边邻接点 $O(1)$</li><li>找入边邻接点 $O(1) \rightarrow O(|E|)$</li></ul></li></ul></li></ul><p><code>NextNeighbor(G, x, y)</code> ：假设图 G 中顶点 y 是顶点 x 的一个邻接点，返回除 y 外顶点 x 的下一个邻接点的顶点号，若 y 是 x 的最后一个邻接点，返回 -1</p><ul><li>无向图<ul><li>邻接矩阵 $O(1) \rightarrow O(|V|)$</li><li>邻接表 $O(1)$</li></ul></li><li>有向图类似</li></ul><p><code>Get_edge_value(G, x, y)</code> ：获取图 G 中边对应的权值。 $\quad$ <code>Set_edge_value(G, x, y, v)</code> ：设置图 G 中边对应的权值为 v</p><ul><li>与<code>Adjacent(G, x, y)</code>（判断是否存在边）雷同，核心在于找到边。因此时间复杂度为：<ul><li>邻接矩阵 $O(1)$</li><li>邻接表 $O(1) \rightarrow O(|V|)$</li></ul></li></ul><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>一、BFS</p><p>对教科书代码留个印象：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6d8e84767d.png" alt="46-66.png"></p><p>同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一。同一个图的邻接表表示方式不唯一，因此广度优先遍历序列不唯一。</p><p>复杂度分析：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6daaae2057.png" alt="46-67.png"></p><p>广度优先生成树：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6dc2968673.png" alt="46-68.png"></p><p>广度优先生成森林：</p><p><img src="https://bu.dusays.com/2023/08/24/64e6dd5f89412.png" alt="46-69.png"></p><p>二、DFS</p><p>对教科书代码留个印象：</p><p><img src="https://bu.dusays.com/2023/08/26/64e8d5b469269.png" alt="46-70.png"></p><p>复杂度分析：</p><p><img src="https://bu.dusays.com/2023/08/26/64e8d5b438391.png" alt="46-71.png"></p><p>同一个图的邻接矩阵表示方式唯一，因此深度优先遍历序列唯一。同一个图的邻接表表示方式不唯一，因此深度优先遍历序列不唯一。</p><p>深度优先生成树、深度优先生成森林，与之前提到的类似，不再赘述。</p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>一睹芳容：</p><p><img src="https://bu.dusays.com/2023/08/26/64e967557ab2a.png" alt="46-72.png"></p><p>Prim 算法的实现思想：</p><p><img src="https://bu.dusays.com/2023/08/26/64e96a53a97ec.png" alt="46-73.png"></p><p>下面给出 kruscal 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kruscal</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> uset[MAXN],n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(uset[x]!=x)uset[x]=<span class="built_in">find</span>(uset[x]);</span><br><span class="line">    <span class="keyword">return</span> uset[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionset</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x);</span><br><span class="line">    y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)<span class="keyword">return</span>;</span><br><span class="line">    uset[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge x,Edge y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        edge[i].u=x;</span><br><span class="line">        edge[i].v=y;</span><br><span class="line">        edge[i].w=z;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)uset[i]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)<span class="keyword">continue</span>;</span><br><span class="line">        ans+=edge[i].w;</span><br><span class="line">        <span class="built_in">unionset</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><p>SPFA 算法（用于求单源最短路径）：</p><ul><li>AKA, 队列优化的 Bellman-Ford 算法</li><li><strong>允许图中存在负权边</strong></li><li><strong>不可求负环</strong>，可判断负环</li><li>在稀疏图上效率较高，时间复杂度 $O(km)$ , k 为较小的常数</li><li>在稠密图或<strong>特殊构造的</strong>网格图上，算法可能退化为 $O(nm)$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPFA</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> inq[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    </span><br><span class="line">    qwq.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>(); inq[x]=<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(dis[y]&gt;dis[x]+edge[i].w)&#123;</span><br><span class="line">                dis[y]=dis[x]+edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[y])&#123;qwq.<span class="built_in">push</span>(y);inq[y]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">     <span class="keyword">if</span>(s==i)<span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">     <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra 算法（用于求单源最短路径）：</p><ul><li><strong>要求图的边权为正</strong></li><li>可以求环</li><li>时间复杂度：<ul><li>考试中可认为（也就是未优化的算法版本）复杂度是 $O(n^2)$</li><li>若用二叉堆（C++ STL <code>priority_queue</code>）维护 dist 数组，最终可以得到 $O((m+n)\log n)$ 的复杂度</li></ul></li></ul><p><img src="https://bu.dusays.com/2023/08/26/64e9769b23a1f.png" alt="46-74.png" title="Dijkstra算法执行流程"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 200010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF =<span class="number">2147483647</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,dis[MAXN];</span><br><span class="line"><span class="type">bool</span> done[MAXN];</span><br><span class="line"><span class="type">int</span> tot,head[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> v,w,next;&#125;edge[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v=y;</span><br><span class="line">    edge[tot].w=z;</span><br><span class="line">    edge[tot].next=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,dist;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; v)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist&gt;v.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; qwq;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    qwq.<span class="built_in">push</span>((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node front=qwq.<span class="built_in">top</span>(); qwq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> u=front.u,dist=front.dist;</span><br><span class="line">        <span class="keyword">if</span>(done[u])<span class="keyword">continue</span>;</span><br><span class="line">        done[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y=edge[i].v,z=edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+z&lt;dis[y])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y]=dis[u]+z;</span><br><span class="line">                qwq.<span class="built_in">push</span>((node)&#123;y,dis[y]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        <span class="built_in">addedge</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra 输出路径：</p><p><img src="https://bu.dusays.com/2023/08/26/64e9827b0392a.png" alt="46-75.png"></p><p>Floyd 算法：</p><ul><li><strong>允许图中存在负权边，不可求负环</strong></li><li>算法模板的提交入口：<a href="https://www.luogu.com.cn/problem/B3647">B3647 【模板】Floyd 算法</a></li><li>关于该算法及其相对深入点的情况，请参见：<a href="https://loveofpeach.github.io/posts/a050ca88.html">https://loveofpeach.github.io/posts/a050ca88.html</a></li></ul><p>喜闻乐见的人脑模拟算法执行：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0ac5517cd.png" alt="46-76.png"></p><p>找路径：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0abf6f76c.png" alt="46-77.png"></p><p>Floyd 代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">103</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM = <span class="number">4503</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = (<span class="number">0x7fffffff</span>&gt;&gt;<span class="number">1</span>)<span class="number">-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dis[MAXN][MAXN],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j)dis[i][j] = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x, &amp;y, &amp;z);</span><br><span class="line">        dis[x][y] = dis[y][x] = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                dis[i][j]=dis[j][i]=<span class="built_in">MIN</span>(dis[i][j], dis[i][k]+dis[k][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee0d8965a41.png" alt="46-78.png"></p><h3 id="有向无环图描述表达式"><a href="#有向无环图描述表达式" class="headerlink" title="有向无环图描述表达式"></a>有向无环图描述表达式</h3><p>知识里的你，再弱小也是真的：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee14e239368.png" alt="46-79.png"></p><p>看一眼真题：</p><p><img src="https://bu.dusays.com/2023/08/29/64ee14e2520f4.png" alt="46-80.png"></p><p>此类题目的解题方法：</p><p><img src="https://bu.dusays.com/2023/08/30/64ee196c42ca2.png" alt="46-81.png"></p><p>最后看一个特例：</p><p><img src="https://bu.dusays.com/2023/08/30/64ee1b3603714.png" alt="46-82.png"></p><p>从上面的特例（左）可以发现，允许重边；另外，可以画出的图不唯一。</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>一个概念，AOV 网：</p><p><img src="https://bu.dusays.com/2023/08/31/64eff6c053039.png" alt="46-83.png"></p><p>拓扑排序是对有向无环图的所有顶点，生成一个线性的序列，来表达这个图的顶点之间的先后关系：</p><p><img src="https://bu.dusays.com/2023/08/31/64eff9c8520d5.png" alt="46-84.png"></p><p>通常使用 BFS 实现拓扑排序，流程如下：</p><ul><li>首先建立空队列，把所有入度为 0 的节点加入队列</li><li>从队列中取出一个节点，将从其出发的所有边删除。在编程上，即将边所连到的点入度减一，判断该边通向的节点是否入度变为 0 ，若是，则加入队列</li><li>重复以上步骤，直至队列中不剩下任何节点为止</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topoSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) qwq.<span class="built_in">push</span>(i);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(!qwq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> v = qwq.<span class="built_in">front</span>();</span><br><span class="line">        qwq.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(list&lt;<span class="type">int</span>&gt;::iterator it = edge[v].<span class="built_in">begin</span>(); it != edges[v].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            inDegree[*it]--;</span><br><span class="line">            <span class="keyword">if</span>(!inDegree[*it]) qwq.<span class="built_in">push</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于稍复杂的情况或使用链式前向星数据结构的代码，请参考：<a href="https://loveofpeach.github.io/posts/9e22caea.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">https://loveofpeach.github.io/posts/9e22caea.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F</a></p><p>拓扑排序是对有向无环图而言的。如果需要判断图中是否存在环，则可以统计是否所有的顶点都入过队列，若存在未入过队的节点，代表图中存在环。</p><p>如果你愿意看王道的代码的话也不是不行：</p><p><img src="https://bu.dusays.com/2023/08/31/64f003a8de3c0.png" alt="46-85.png"></p><p>以上代码的时间复杂度为 $O(|V|+|E|)$ ，若采用邻接矩阵，则为 $O(|V|^2)$ .</p><p>逆拓扑排序：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0067dc0b0c.png" alt="46-86.png"></p><p>逆拓扑排序代码实现：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0089789bb4.png" alt="46-87.png"></p><p>以上代码中，无论从哪一个顶点出发进行 DFS 都可以得到正确输出。</p><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p>概念，AOE 网：</p><p><img src="https://bu.dusays.com/2023/08/31/64f051252b951.png" alt="46-88.png"></p><p>AOE 网两个简单的性质：</p><ul><li>仅有一个入度为 0 的顶点，称为“开始顶点（源点）”，它表示整个工程的开始</li><li>仅有一个出度为 0 的顶点，称为“结束顶点（汇点）”，它表示整个工程的结束</li></ul><p>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为<strong>关键路径</strong>，而把关键路径上的活动称为<strong>关键活动</strong>。完成整个工程的最短时间就是关键路径的长度，若关键活动不能按时完成，则整个工程的完成时间就会延长。</p><p>算法思路：</p><p><img src="https://bu.dusays.com/2023/08/31/64f058e7418bf.png" alt="46-89.png"></p><p>大致实现思路：</p><p><img src="https://bu.dusays.com/2023/08/31/64f060147a4b7.png" alt="46-90.png"></p><p><strong>若缩短关键活动的时间，可以缩短工期。但当缩短到一定程度时，关键活动可能会变成非关键活动。</strong></p><p><strong>可能有多条关键路径，只提高一条关键路径上的关键活动速度并不一定能缩短整个工程的工期。</strong> 只有加快那些包括在所有关键路径上的关键活动才能缩短工期。</p><p>最后，贴一个看起来像关键路径、但其实可以用拓扑排序的题目：<a href="https://www.luogu.com.cn/problem/P1113">P1113 杂务</a></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>查找长度：在查找运算中，需要对比关键字的次数称为查找长度。</p><p>平均查找长度（ASL, Average Search Length）：所有查找过程中，进行关键字的比较次数的平均值。</p><script type="math/tex; mode=display">ASL=\sum_{i=1}^nP_iC_i</script><p>上式中，n 为数据元素个数；$P_i$ 为查找第 i 个元素的概率；$C_i$ 为查找第 i 个元素的查找长度。</p><p>一般来说，题目中若无特别说明，<strong>默认查找任何一个元素的概率都相同</strong>。</p><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>某个小技巧：</p><p><img src="https://bu.dusays.com/2023/08/31/64f09b159e8c4.png" alt="46-91.png"></p><p>查找判定树：</p><p><img src="https://bu.dusays.com/2023/08/31/64f09db162fef.png" alt="46-92.png"></p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><p>二分查找的实现细节需要特别注意，在某些特殊的情况下，不正确的写法会导致死循环或是其他的错误。王道的代码就是错误的。</p><p>我们直接来看正确的做法：总是将查找区间设为左闭右开的。以题目<a href="https://www.luogu.com.cn/problem/P1824">P1824 进击的奶牛</a>为例，该题的做法是二分答案，给出代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,p[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>,pre=<span class="number">-1500000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]-pre&gt;=x)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            pre=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=b)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=a;i++)cin&gt;&gt;p[i];</span><br><span class="line">    <span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+a);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">while</span>(right!=left+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))left=mid;</span><br><span class="line">        <span class="keyword">else</span> right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;left;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找效率分析：</p><p><img src="https://bu.dusays.com/2023/08/31/64f0ad4be6007.png" alt="46-93.png"></p><p>关于折半查找判定树：</p><ul><li>判定树节点关键字：左&lt;中&lt;右，满足二叉排序树的定义</li><li>失败节点：n+1 个（等于成功节点的空链域数量）</li></ul><p><img src="https://bu.dusays.com/2023/08/31/64f0b08c48a29.png" alt="46-94.png"></p><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>特点：块内无序，块间有序。</p><p><img src="https://bu.dusays.com/2023/09/03/64f46e4111f9e.png" alt="46-95.png"></p><p><strong>分块查找</strong>，又称<strong>索引顺序查找</strong>，算法过程如下：</p><ul><li>在索引表中确定待查记录所属的分块（可顺序、可折半）</li><li>在块内顺序查找</li></ul><p>折半查找索引表的例子：</p><p><img src="https://bu.dusays.com/2023/09/03/64f473c641697.png" alt="46-96.png"></p><p><strong>以上是王道书的讲解，是丑陋并且有可能出错的。</strong> 但是为了应试，应当了解。如果采用我上面提到的折半查找的方式，查找索引表的方式会完全不同。</p><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/03/64f479a1f0cc3.png" alt="46-97.png"></p><p>拓展思考：</p><p><img src="https://bu.dusays.com/2023/09/03/64f47c5b3d576.png" alt="46-98.png"></p><h3 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h3><p>定义：</p><p><img src="https://bu.dusays.com/2023/09/04/64f592d5bb9b2.png" alt="46-99.png"></p><p>查找：</p><p><img src="https://bu.dusays.com/2023/09/04/64f594ef62965.png" alt="46-100.png"></p><p>上面是非递归的实现，下面给出递归版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 王道的代码</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BSTsearch</span><span class="params">(BSTree T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;   <span class="comment">//查找失败</span></span><br><span class="line">  <span class="keyword">if</span>(key==T-&gt;key)</span><br><span class="line">    <span class="keyword">return</span> T;      <span class="comment">//查找成功</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">BSTsearch</span>(T-&gt;lchild, key);  <span class="comment">//在左子树中查找</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">BSTsearch</span>(T-&gt;rchild, key);  <span class="comment">//在右子树中查找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最坏空间复杂度为 O(h) ，h 为树的高度</span></span><br></pre></td></tr></table></figure><p>插入新节点：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5982c1e89f.png" alt="46-101.png"></p><p>构造：</p><p><img src="https://bu.dusays.com/2023/09/04/64f59a1b2d239.png" alt="46-102.png"></p><p>删除某一个节点：</p><ol><li>先找到目标节点</li><li>若被删除节点是叶子节点，则直接删除。不会破坏二叉排序树的性质。</li><li>若被删除节点只有一棵左子树或右子树，则让其子树替代之。依然可以保证二叉排序树的性质。</li><li>若被删除节点既有左子树，又有右子树。有两种方法：<ul><li>找到右子树中值最小的节点 p（即右子树中最左下的节点，该节点一定没有左子树），替代将被删除的节点。然后删除原来的节点 p（情况同第 3 步）.</li><li>找到左子树中值最大的节点 p（即左子树中最右下的节点，该节点一定没有右子树），替代将被删除的节点。然后删除原来的节点 p（情况同第 3 步）.</li></ul></li></ol><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a1523998f.png" alt="46-103.png"></p><h3 id="平衡二叉树（AVL）"><a href="#平衡二叉树（AVL）" class="headerlink" title="平衡二叉树（AVL）"></a>平衡二叉树（AVL）</h3><p>一些概念：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a87785768.png" alt="46-104.png"></p><p>二叉排序树中插入新节点时如何保持平衡：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5a9b8ae563.png" alt="46-105.png"></p><p>调整最小不平衡子树：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5c7a563248.png" alt="46-106.png"></p><p>续图：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5cbee45a87.png" alt="46-107.png"></p><p><strong>总结：</strong></p><p><img src="https://bu.dusays.com/2023/09/04/64f5cd6a39610.png" alt="46-108.png"></p><p>一个小坑：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5cfd3759d3.png" alt="46-109.png"></p><p>练习题：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5d5ea4fd27.png" alt="46-110.png"></p><p>查找效率分析：</p><p><img src="https://bu.dusays.com/2023/09/04/64f5db0f505d4.png" alt="46-111.png"></p><h3 id="平衡二叉树的删除"><a href="#平衡二叉树的删除" class="headerlink" title="平衡二叉树的删除"></a>平衡二叉树的删除</h3><p>平衡二叉树的删除操作：</p><ul><li>删除节点后，要保持二叉排序树的性质不变（左 &lt; 中 &lt; 右）</li><li>若删除节点导致不平衡，则需要调整平衡</li></ul><p>平衡二叉树的删除操作的具体步骤：</p><ol><li>删除节点（方法同“二叉排序树”）</li><li>一路向上找到最小不平衡子树，若找不到则结束算法</li><li>找最小不平衡子树下，“个头”最高的儿子、孙子</li><li>根据孙子的位置，调整平衡（LL / RR / LR / RL）<ul><li>孙子在 LL: 儿子右单旋</li><li>孙子在 RR: 儿子左单旋</li><li>孙子在 LR: 孙子先左旋，再右旋</li><li>孙子再 RL: 孙子先右旋，再左旋</li></ul></li><li>如果不平衡向上传导，转到 2<ul><li>解释：对最小不平衡子树的旋转可能导致树变矮，从而导致上层祖先不平衡（不平衡向上传导）</li></ul></li></ol><p>在步骤 2 即结束算法的例子：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7eaa8d47e6.png" alt="46-112.png"></p><p>执行到第 4 步算法结束的例子：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7f6094573b.png" alt="46-113.png"></p><p>不平衡向上传导一次的例子：</p><p><img src="https://bu.dusays.com/2023/09/06/64f7f93443c2e.png" alt="46-114.png"></p><p>两种选择的例子，可以看到，无论挑选哪个作为“个头”最高的孙子，都可以达到目的：</p><p><img src="https://bu.dusays.com/2023/09/06/64f89b8abedab.png" alt="46-115.png"></p><p><strong>平衡二叉树的删除操作的时间复杂度是 $O(log_2n)$</strong> .</p><h3 id="红黑树的定义和性质"><a href="#红黑树的定义和性质" class="headerlink" title="红黑树的定义和性质"></a><font color="red">红</font>黑树的定义和性质</h3><table>  <tbody>    <tr>      <td></td>      <td>BST</td>      <td>AVL Tree</td>      <td><font color="red">Red</font>-Black Tree</td>    </tr>    <tr>      <td>生日</td>      <td>1960</td>      <td>1962</td>      <td>1972</td>    </tr>    <tr>      <td>查</td>      <td>O(n)</td>      <td>O(log_2^n)</td>      <td>O(log_2^n)</td>    </tr>    <tr>      <td>插</td>      <td>O(n)</td>      <td>O(log_2^n)</td>      <td>O(log_2^n)</td>    </tr>    <tr>      <td>删</td>      <td>O(n)</td>      <td>O(log_2^n)</td>      <td>O(log_2^n)</td>    </tr>  </tbody></table><p><font color="red">红</font>黑树的优势？</p><ul><li>平衡二叉树（AVL）的劣势：插入/删除 操作很容易破坏“平衡”特性，需要频繁调整树的形态。如：插入操作导致不平衡，则需要先计算平衡因子，找到最小不平衡子树（时间开销大），再进行 LL/RR/LR/RL 调整。</li><li>相比之下，<font color="red">红</font>黑树的优势：插入/删除 操作很多时候不会破坏“<font color="red">红</font>黑”特性，无须频繁调整树的形态。即便需要调整，一般都可以在常数时间内完成。</li><li>平衡二叉树，适用于以查找为主，很少插入、删除的场景（实际也很少使用了）。</li><li><font color="red">红</font>黑树，适用于频繁插入、删除的场景，实用性更强。</li></ul><p><font color="red">红</font>黑树的定义：</p><ul><li><font color="red">红</font>黑树是二叉排序树</li><li>每个节点或是<font color="red">红</font>色，或是黑色</li><li>根节点是黑色的</li><li>叶节点（外部节点、NULL节点、失败节点）都是黑色的<ul><li>在<font color="red">红</font>黑树中，当我们提到叶子节点的时候，通常是指失败节点（又称“NULL节点”、“外部节点”）</li></ul></li><li>不存在两个相邻的<font color="red">红</font>节点（即红节点的父节点和孩子节点都是黑色的）</li><li>对每个节点，从该节点到任一叶子节点的简单路径上，所含黑节点的数目相同</li></ul><p><img src="https://bu.dusays.com/2023/09/08/64fa9d6a20ba0.png" alt="46-116.png"></p><p>粗略地用一个结构体定义一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RBnode</span> &#123;</span><br><span class="line">  <span class="type">int</span> key;</span><br><span class="line">  RBnode* parent;</span><br><span class="line">  RBnode* lchild;</span><br><span class="line">  RBnode* rchild;</span><br><span class="line">  <span class="type">int</span> color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>补充概念，“黑高”：</p><p><img src="https://bu.dusays.com/2023/09/08/64faa1e3b4e1c.png" alt="46-117.png"></p><p><font color="red">红</font>黑树的性质：</p><ol><li>从根节点到叶子节点的最长路径不大于最短路径的 2 倍</li><li>有 n 个内部节点（n 个关键字）的<font color="red">红</font>黑树高度 $h\leqslant 2 \log _2(n+1)$<ul><li>由此得到<font color="red">红</font>黑树的查找操作的时间复杂度为 $O(\log _2n)$</li></ul></li></ol><p><font color="red">红</font>黑树的查找：与 BST、AVL 相同，从根出发，左小右大，若查找到一个空叶子节点，则查找失败。</p><p>关于<font color="red">红</font>黑树的更多内容，由于考纲不考，时间有限，我就放过自己了，下面只给出一些链接：</p><ul><li><a href="https://www.bilibili.com/video/BV1b7411N798/?p=77">https://www.bilibili.com/video/BV1b7411N798/?p=77</a></li><li><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li><li><a href="https://www.luogu.com.cn/problem/P5566">https://www.luogu.com.cn/problem/P5566</a></li></ul><h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><p>一、引入</p><p>能否将二叉查找树（BST）拓展为 m 叉查找树？</p><p><img src="https://bu.dusays.com/2023/09/08/64fb1bbd14081.png" alt="46-118.png"></p><p>如何保证查找效率：</p><p><img src="https://bu.dusays.com/2023/09/08/64fb1fe250168.png" alt="46-119.png"></p><p>二、定义</p><p><img src="https://bu.dusays.com/2023/09/08/64fb272227905.png" alt="46-120.png"></p><p>三、高度</p><p><img src="https://bu.dusays.com/2023/09/08/64fb2b2fdd8ac.png" alt="46-121.png"></p><h3 id="B-树的插入、删除"><a href="#B-树的插入、删除" class="headerlink" title="B 树的插入、删除"></a>B 树的插入、删除</h3><p>一、插入</p><p><img src="https://bu.dusays.com/2023/09/08/64fb37fa3d255.png" alt="46-122.png"></p><p>二、删除</p><p><img src="https://bu.dusays.com/2023/09/08/64fb3ca165dba.png" alt="46-123.png"></p><p>续图：</p><p><img src="https://bu.dusays.com/2023/09/08/64fb418d540a0.png" alt="46-124.png"></p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h3><p>定义：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb46bb53acd.png" alt="46-125.png"></p><p>查找：略。</p><p>注意点：在 B+ 树中，叶节点包含信息，所有非叶子节点仅起索引作用。</p><p>B+树 和 B树 的一点区别：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb4b662421b.png" alt="46-126.png"></p><p>B+树的优点和应用场景：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb4f85ec422.png" alt="46-127.png"></p><p>总结：</p><p><img src="https://bu.dusays.com/2023/09/09/64fb4f85eed0a.png" alt="46-128.png"></p><h3 id="散列查找"><a href="#散列查找" class="headerlink" title="散列查找"></a>散列查找</h3><p>一睹芳容：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffce0ce084e.png" alt="46-129.png"></p><p>查找操作：略。</p><p>ASL 分析、装填因子：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffd1b2d99a4.png" alt="46-130.png"></p><p>设计散列函数的方法（模质数）：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffd935e65fe.png" alt="46-131.png"></p><p>其他方法：</p><p><img src="https://bu.dusays.com/2023/09/12/64ffdcf762208.png" alt="46-132.png"></p><p>处理冲突的另一种方法，开放定址法：</p><p><img src="https://bu.dusays.com/2023/09/13/65009ac99f4ff.png" alt="46-133.png"></p><p>线性探测法（实际没用，考试爱考）：</p><p><img src="https://bu.dusays.com/2023/09/13/65009acc50d1a.png" alt="46-134.png"></p><p>平方探测法：</p><p><img src="https://bu.dusays.com/2023/09/13/65009fe1e24b8.png" alt="46-135.png"></p><p>伪随机序列法：</p><p><img src="https://bu.dusays.com/2023/09/13/6500a1717e654.png" alt="46-136.png"></p><p>处理冲突的另另一种方法，再散列法（再哈希法）：<br>除了原始的散列函数 H(key) 之外，多准备几个散列函数。当散列函数冲突时，用下一个散列函数计算一个新地址，直到不冲突为止：</p><script type="math/tex; mode=display">H_i=RH_i(Key) \quad i=1,2,3, \cdots k</script><p>以上总结：</p><p><img src="https://bu.dusays.com/2023/09/13/6500a45c68c95.png" alt="46-137.png"></p><p>小优化：</p><p><img src="https://bu.dusays.com/2023/09/13/6500a51f7de37.png" alt="46-138.png"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://bu.dusays.com/2023/09/13/65011e94778b2.png" alt="46-139.png"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>算法思想：每次将一个待排序的记录按其关键字大小插入到前面已排好序的子序列中，直到全部记录插入完成。</p><p><img src="https://bu.dusays.com/2023/09/13/65012177a2b76.png" alt="46-140.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j, temp;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">      temp = A[i];</span><br><span class="line">      <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;temp; j--)&#123;</span><br><span class="line">        A[j+<span class="number">1</span>] = A[j];</span><br><span class="line">      &#125;</span><br><span class="line">      A[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现（带哨兵）：</p><p><img src="https://bu.dusays.com/2023/09/13/650124921eccf.png" alt="46-141.png"></p><p>最好时间复杂度：$O(n)$<br>最坏时间复杂度：$O(n^2)$<br>平均时间复杂度：$O(n^2)$<br><strong>算法稳定性（这里指，排序稳定性）：稳定</strong></p><p>一个小优化：</p><p><img src="https://bu.dusays.com/2023/09/13/65012ed84c0ae.png" alt="46-142.png"></p><p><strong>注意：</strong> 上图中王道的代码是有 bug 的，实际中不能这么写。</p><p>补充——对链表进行插入排序：<br>移动元素的次数变少了，但是关键字对比的次数依然是 $O(n^2)$ 数量级，整体来看时间复杂度依然是 $O(n^2)$ .</p><h3 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h3><p>算法思想来源：</p><p><img src="https://bu.dusays.com/2023/09/13/6501ba2a79974.png" alt="46-143.png"></p><p>图示：</p><p><img src="https://bu.dusays.com/2023/09/13/6501c1bb306e9.png" alt="46-144.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> d, i, j;</span><br><span class="line">  <span class="comment">// A[0] 只是暂存单元，不是哨兵。当 j&lt;=0 时，插入位置已到</span></span><br><span class="line">  <span class="keyword">for</span>(d=n/<span class="number">2</span>; d&gt;=<span class="number">1</span>; d=d/<span class="number">2</span>)  <span class="comment">// 步长变化</span></span><br><span class="line">    <span class="keyword">for</span>(i=d+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">      <span class="keyword">if</span>(A[i]&lt;A[i-d])&#123;</span><br><span class="line">        A[<span class="number">0</span>] = A[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i-d; j&gt;<span class="number">0</span> &amp;&amp; A[<span class="number">0</span>]&lt;A[j]; j-=d)</span><br><span class="line">          A[j+d] = A[j];</span><br><span class="line">        A[j+d] = A[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面代码中，每次让<code>i++</code>，也就是轮流地切换着来处理不同的几个子表。下图选取几个关键时刻展示：</p><p><img src="https://bu.dusays.com/2023/09/13/6501c510583c6.png" alt="46-145.png"></p><p>空间复杂度：$O(1)$ .</p><p>时间复杂度：</p><ul><li>和增量序列 $d_1,d_2,d_3,\cdots $ 的选择有关</li><li><strong>目前</strong>无法用数学手段证明确切的时间复杂度</li><li>最坏时间复杂度为 $O(n^2)$ ，如该算法退化为插入排序时</li><li>当 n 在某个范围时，可达到 $O(n^{1.3})$ .</li></ul><p><strong>希尔排序仅适用于顺序表，不适用于链表。</strong></p><p>稳定性：</p><p><img src="https://bu.dusays.com/2023/09/13/6501cb74ec12c.png" alt="46-146.png"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>若某一趟排序没有发生“交换”，说明此时已经整体有序。</p><p><img src="https://bu.dusays.com/2023/09/13/6501d1cb49713.png" alt="46-147.png"></p><p><strong>冒泡排序适用于链表。</strong></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>算法思想：</p><p><img src="https://bu.dusays.com/2023/09/15/6503c6cdde4ea.png" alt="46-148.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">    <span class="type">int</span> pivotPos = <span class="built_in">Partition</span>(A, low, high); <span class="comment">// 划分</span></span><br><span class="line">    <span class="built_in">quickSort</span>(A, low, pivotPos<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(A, pivotPos+<span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> pivot = A[low];  <span class="comment">// 第一个元素作为枢轴</span></span><br><span class="line">  <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high &amp;&amp; A[high]&gt;=pivot) high--;</span><br><span class="line">    A[low] = A[high];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high &amp;&amp; A[low]&lt;=pivot) low++;</span><br><span class="line">    A[high] = A[low];</span><br><span class="line">  &#125;</span><br><span class="line">  A[low] = pivot;  <span class="comment">// 枢轴元素放到最终位置</span></span><br><span class="line">  <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能分析：</p><p><img src="https://bu.dusays.com/2023/09/15/6503d075b50fc.png" alt="46-149.png"></p><p><strong>快速排序不稳定。</strong></p><p>一个应试的小疑惑：</p><p><img src="https://bu.dusays.com/2023/09/15/6503d349c304a.png" alt="46-150.png"></p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p><img src="https://bu.dusays.com/2023/09/15/650469589d376.png" alt="46-151.png"></p><p><strong>简单选择排序既可以用于顺序表，也可以用于链表。</strong></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>前置知识：</p><p><img src="https://bu.dusays.com/2023/09/15/650472146278d.png" alt="46-152.png"></p><p>大根堆的建立：</p><p><img src="https://bu.dusays.com/2023/09/15/65047b7abdde6.png" alt="46-153.png"></p><p>建立大根堆的代码：<br>（此处代码的动画演示参见<a href="https://www.bilibili.com/video/BV1b7411N798?p=92">王道视频_大根堆的建立</a>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_maxHeap</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">    <span class="built_in">headAdjust</span>(A, i, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将以 k 为根的子树调整为大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">headAdjust</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> k, <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  A[<span class="number">0</span>] = A[k]; <span class="comment">// A[0] 暂存子树的根节点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>*k; i&lt;=len; i*=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;len &amp;&amp; A[i]&lt;A[i+<span class="number">1</span>]) i++; <span class="comment">// 选取 key 较大的子节点的下标</span></span><br><span class="line">    <span class="keyword">if</span>(A[<span class="number">0</span>]&gt;=A[i]) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      A[k] = A[i];</span><br><span class="line">      k = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  A[k] = A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于大根堆进行排序：</p><p><img src="https://bu.dusays.com/2023/09/16/6504856460bda.png" alt="46-154.png"></p><p>基于大根堆进行排序（代码）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_maxHeap</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">headAdjust</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> k, <span class="type">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="built_in">build_maxHeap</span>(A, len);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=len; i&gt;<span class="number">1</span>; i--)&#123;</span><br><span class="line">    <span class="built_in">swap</span>(A[i], A[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">headAdjust</span>(A, <span class="number">1</span>, i<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/16/65048fc666dd0.png" alt="46-155.png"></p><h3 id="堆的插入、删除"><a href="#堆的插入、删除" class="headerlink" title="堆的插入、删除"></a>堆的插入、删除</h3><p><img src="https://bu.dusays.com/2023/09/18/6507b9a8cfd7c.png" alt="46-156.png"></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><img src="https://bu.dusays.com/2023/09/18/6507bd80c6e3e.png" alt="46-157.png"></p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *B = (<span class="type">int</span>*) <span class="built_in">malloc</span>(n*<span class="built_in">sizeof</span>(<span class="type">int</span>)); <span class="comment">// 辅助数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A[low...mid] 和 A[mid+1...high] 各自有序，将两个部分归并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j, k;</span><br><span class="line">  <span class="keyword">for</span>(k=low; k&lt;=high; k++)</span><br><span class="line">    B[k] = A[k];</span><br><span class="line">  <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i; i&lt;=mid&amp;&amp;j&lt;=high; k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(B[i]&lt;=B[j])  <span class="comment">// 保证了稳定性</span></span><br><span class="line">      A[k] = B[i++];</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      A[k] = B[j++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid) A[k++] = B[i++];</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=high) A[k++] = B[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(A, low, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(A, mid+<span class="number">1</span>, high);</span><br><span class="line">    <span class="built_in">merge</span>(A, low, mid, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能分析：</p><p><img src="https://bu.dusays.com/2023/09/18/6507c7ef4fe66.png" alt="46-158.png"></p><h3 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h3><p><img src="https://bu.dusays.com/2023/09/18/6507ce15b9025.png" alt="46-159.png"></p><p>效率分析：</p><p><img src="https://bu.dusays.com/2023/09/18/6507d11389b6f.png" alt="46-160.png"></p><p>应用：</p><p><img src="https://bu.dusays.com/2023/09/18/6507d3e0a43fc.png" alt="46-161.png"></p><h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2><p>外部排序考试不要求掌握，前面的区域，以后再来探索吧：</p><p><a href="https://www.bilibili.com/video/BV1b7411N798/?p=96">https://www.bilibili.com/video/BV1b7411N798/?p=96</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;应试向的数据结构考试和实际写起代码来有很大区别。重复造轮子就不说了，更可怕的是，有时还需要应试者人脑模拟算法的执行过程。相对来说，对针对具体问题设计算法的考察较浅。&lt;/p&gt;
&lt;p&gt;另外，有时王道书的代码风格奇特，我尽量改为了自己习惯的写法，这点需要特别注意。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统笔记</title>
    <link href="https://loveofpeach.github.io/posts/8ce3e425.html"/>
    <id>https://loveofpeach.github.io/posts/8ce3e425.html</id>
    <published>2023-07-04T11:20:21.000Z</published>
    <updated>2023-10-22T03:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：</p><p>虽然本笔记的大多数内容是王道的 PPT ，但也是有我的注释的！王道的课程真的很好，咸鱼学长讲课生动又仔细。每年的课件和视频都是有变化的，我这里把 PPT 贴出来只是自用，本文章禁止转载。最后附上王道的网站：<code>cskaoyan.com</code>。</p><p>pdf 链接：<a href="https://drive.google.com/file/d/1Bo1Rd_m9uh4PnPLIIrZvo1Qe8-ZKcONl/view?usp=drive_link">GoogleDrive</a></p><h2 id="操作系统的概念、功能"><a href="#操作系统的概念、功能" class="headerlink" title="操作系统的概念、功能"></a>操作系统的概念、功能</h2><p><img src="https://bu.dusays.com/2023/07/05/64a44324547e0.jpg" alt="1.1_1_操作系统的概念、功能-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a4432483eb0.jpg" alt="1.1_1_操作系统的概念、功能-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324547e0.jpg" alt="1.1_1_操作系统的概念、功能-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d01bd.jpg" alt="1.1_1_操作系统的概念、功能-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d08ac.jpg" alt="1.1_1_操作系统的概念、功能-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d8b36.jpg" alt="1.1_1_操作系统的概念、功能-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324b551f.jpg" alt="1.1_1_操作系统的概念、功能-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324b9a2a.jpg" alt="1.1_1_操作系统的概念、功能-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/05/64a44324d0322.jpg" alt="1.1_1_操作系统的概念、功能-9.jpg"></p><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><p><img src="https://bu.dusays.com/2023/07/07/64a82fe52d101.jpg" alt="1.1_2_操作系统的特征-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b5750.jpg" alt="1.1_2_操作系统的特征-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b9d78.jpg" alt="1.1_2_操作系统的特征-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5bcbde.jpg" alt="1.1_2_操作系统的特征-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe5b4c6d.jpg" alt="1.1_2_操作系统的特征-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a82fe578274.jpg" alt="1.1_2_操作系统的特征-6.jpg"></p><h2 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h2><p><img src="https://bu.dusays.com/2023/07/07/64a830c2a4ed2.jpg" alt="1.2_操作系统的发展与分类-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a830c2bfdf5.jpg" alt="1.2_操作系统的发展与分类-2.jpg"></p><p><img src="https://sway.office.com/s/Q7Yjq9XbLLQkbe4W/images/k9EbJY8-FjaT7k" alt="1.2_操作系统的发展与分类-3.jpg"></p><p><img src="https://sway.office.com/s/Q7Yjq9XbLLQkbe4W/images/gD1KB3tYw7ZAjj" alt="1.2_操作系统的发展与分类-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a830c2eccd2.jpg" alt="1.2_操作系统的发展与分类-5.jpg"></p><h2 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h2><p><img src="https://bu.dusays.com/2023/07/07/64a8333cd4ec7.jpg" alt="1.3_1_操作系统的运行机制-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dbcf99.jpg" alt="1.3_1_操作系统的运行机制-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dcc842.jpg" alt="1.3_1_操作系统的运行机制-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dd9b65.jpg" alt="1.3_1_操作系统的运行机制-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dd455c.jpg" alt="1.3_1_操作系统的运行机制-5.jpg"></p><p><img src="https://sway.office.com/s/Jl1DxGDSA3bPbLZV/images/SIGaZtzUVdPs2w" alt="1.3_1_操作系统的运行机制-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333d862fa.jpg" alt="1.3_1_操作系统的运行机制-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333d95a31.jpg" alt="1.3_1_操作系统的运行机制-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8333dc241d.jpg" alt="1.3_1_操作系统的运行机制-9.jpg"></p><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p><img src="https://bu.dusays.com/2023/07/07/64a8352ec78c6.jpg" alt="1.3_2_中断和异常-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f028a8.jpg" alt="1.3_2_中断和异常-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f187ac.jpg" alt="1.3_2_中断和异常-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f1cffa.jpg" alt="1.3_2_中断和异常-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/07/64a8352f18690.jpg" alt="1.3_2_中断和异常-5.jpg"></p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img src="https://bu.dusays.com/2023/07/09/64aa454c522ae.jpg" alt="1.3_3_系统调用-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d2d05d.jpg" alt="1.3_3_系统调用-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d776c2.jpg" alt="1.3_3_系统调用-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d743d2.jpg" alt="1.3_3_系统调用-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa454d2e520.jpg" alt="1.3_3_系统调用-5.jpg"></p><h2 id="操作系统体系结构（上）"><a href="#操作系统体系结构（上）" class="headerlink" title="操作系统体系结构（上）"></a>操作系统体系结构（上）</h2><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6d6edc2.jpg" alt="1.4_1_操作系统体系结构（上）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eee344.jpg" alt="1.4_1_操作系统体系结构（上）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eeadbe.jpg" alt="1.4_1_操作系统体系结构（上）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8a6eebc62.jpg" alt="1.4_1_操作系统体系结构（上）-4.jpg"></p><h2 id="操作系统体系结构（下）"><a href="#操作系统体系结构（下）" class="headerlink" title="操作系统体系结构（下）"></a>操作系统体系结构（下）</h2><p><img src="https://bu.dusays.com/2023/07/10/64ab8adb83bf9.jpg" alt="1.4_2_操作系统体系结构（下）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc45f08.jpg" alt="1.4_2_操作系统体系结构（下）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc55cfb.jpg" alt="1.4_2_操作系统体系结构（下）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/10/64ab8adc641f6.jpg" alt="1.4_2_操作系统体系结构（下）-4.jpg"></p><h2 id="操作系统引导"><a href="#操作系统引导" class="headerlink" title="操作系统引导"></a>操作系统引导</h2><p><img src="https://bu.dusays.com/2023/07/11/64ad7796c9121.jpg" alt="1.5_操作系统引导-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad779710c14.jpg" alt="1.5_操作系统引导-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad779738205.jpg" alt="1.5_操作系统引导-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7798080f7.jpg" alt="1.5_操作系统引导-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7798a8964.jpg" alt="1.5_操作系统引导-5.jpg"></p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p><img src="https://bu.dusays.com/2023/07/11/64ad7824ba99e.jpg" alt="1.6_虚拟机-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad782a26cb9.jpg" alt="1.6_虚拟机-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/11/64ad7829c55a8.jpg" alt="1.6_虚拟机-3.jpg"></p><h2 id="进程的概念、组成、特征"><a href="#进程的概念、组成、特征" class="headerlink" title="进程的概念、组成、特征"></a>进程的概念、组成、特征</h2><p><img src="https://bu.dusays.com/2023/07/14/64b16d42df6f6.jpg" alt="2.1_1_进程的概念、组成、特征-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d4420d43.jpg" alt="2.1_1_进程的概念、组成、特征-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d445f1e2.jpg" alt="2.1_1_进程的概念、组成、特征-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d43d64b5.jpg" alt="2.1_1_进程的概念、组成、特征-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d445f1d5.jpg" alt="2.1_1_进程的概念、组成、特征-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/14/64b16d4455550.jpg" alt="2.1_1_进程的概念、组成、特征-6.jpg"></p><h2 id="进程的状态与转换、进程的组织"><a href="#进程的状态与转换、进程的组织" class="headerlink" title="进程的状态与转换、进程的组织"></a>进程的状态与转换、进程的组织</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b0377f45e.jpg" alt="2.1_2_进程的状态与转换、进程的组织-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03d185f3.jpg" alt="2.1_2_进程的状态与转换、进程的组织-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03d446a8.jpg" alt="2.1_2_进程的状态与转换、进程的组织-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03e36aca.jpg" alt="2.1_2_进程的状态与转换、进程的组织-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03ba9bf6.jpg" alt="2.1_2_进程的状态与转换、进程的组织-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03a7f52a.jpg" alt="2.1_2_进程的状态与转换、进程的组织-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b03daf20c.jpg" alt="2.1_2_进程的状态与转换、进程的组织-7.jpg"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b1091302c.jpg" alt="2.1_3_进程控制-01.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b1101a8ea.jpg" alt="2.1_3_进程控制-02.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11abdc1e.jpg" alt="2.1_3_进程控制-03.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11984d63.jpg" alt="2.1_3_进程控制-04.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11c1b6dc.jpg" alt="2.1_3_进程控制-05.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b118bfd43.jpg" alt="2.1_3_进程控制-06.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11aed02f.jpg" alt="2.1_3_进程控制-07.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11b8e7af.jpg" alt="2.1_3_进程控制-08.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11af32b5.jpg" alt="2.1_3_进程控制-09.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b11c1d5a9.jpg" alt="2.1_3_进程控制-10.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a2fbaf.jpg" alt="2.1_3_进程控制-11.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a23499.jpg" alt="2.1_3_进程控制-12.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23840709.jpg" alt="2.1_3_进程控制-13.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b23a4f16f.jpg" alt="2.1_3_进程控制-14.jpg"></p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p><img src="https://bu.dusays.com/2023/07/18/64b6b2a505bc1.jpg" alt="2.1_4_进程通信-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b215bce.jpg" alt="2.1_4_进程通信-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b6115a9.jpg" alt="2.1_4_进程通信-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b43bae7.jpg" alt="2.1_4_进程通信-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b4a14ec.jpg" alt="2.1_4_进程通信-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b2326ba.jpg" alt="2.1_4_进程通信-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b73a4a3.jpg" alt="2.1_4_进程通信-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/18/64b6b2b771bbb.jpg" alt="2.1_4_进程通信-8.jpg"></p><h2 id="线程的概念与特点"><a href="#线程的概念与特点" class="headerlink" title="线程的概念与特点"></a>线程的概念与特点</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab2eaed5d6.jpg" alt="2.1_5_线程的概念与特点-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ed33304.jpg" alt="2.1_5_线程的概念与特点-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ee33afa.jpg" alt="2.1_5_线程的概念与特点-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab2ee0ffa0.jpg" alt="2.1_5_线程的概念与特点-4.jpg"></p><h2 id="线程的实现方式和多线程模型"><a href="#线程的实现方式和多线程模型" class="headerlink" title="线程的实现方式和多线程模型"></a>线程的实现方式和多线程模型</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab3653e2ef.jpg" alt="2.1_6_线程的实现方式和多线程模型-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36933bac.jpg" alt="2.1_6_线程的实现方式和多线程模型-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab369b5907.jpg" alt="2.1_6_线程的实现方式和多线程模型-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36aee6df.jpg" alt="2.1_6_线程的实现方式和多线程模型-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36b5eb73.jpg" alt="2.1_6_线程的实现方式和多线程模型-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab36ba01d8.jpg" alt="2.1_6_线程的实现方式和多线程模型-6.jpg"></p><h2 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab3e9a8eea.jpg" alt="2.1_7_线程的状态与转换-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab3e9ade73.jpg" alt="2.1_7_线程的状态与转换-2.jpg"></p><h2 id="调度的概念、层次"><a href="#调度的概念、层次" class="headerlink" title="调度的概念、层次"></a>调度的概念、层次</h2><p><img src="https://bu.dusays.com/2023/07/22/64bab47d1ba2e.jpg" alt="2.2_1_调度的概念、层次-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab47fe687c.jpg" alt="2.2_1_调度的概念、层次-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab480233a3.jpg" alt="2.2_1_调度的概念、层次-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab48179fd1.jpg" alt="2.2_1_调度的概念、层次-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/22/64bab4817afa2.jpg" alt="2.2_1_调度的概念、层次-5.jpg"></p><h2 id="进程调度的时机、切换与过程、方式"><a href="#进程调度的时机、切换与过程、方式" class="headerlink" title="进程调度的时机、切换与过程、方式"></a>进程调度的时机、切换与过程、方式</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9174853e.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe919e0cfb.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9199e4ce.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe919379a5.jpg" alt="2.2_2_进程调度的时机、切换与过程、方式-4.jpg"></p><h2 id="调度器和闲逛进程"><a href="#调度器和闲逛进程" class="headerlink" title="调度器和闲逛进程"></a>调度器和闲逛进程</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9a6d7493.jpg" alt="2.2_3_调度器和闲逛进程-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9a6eecd9.jpg" alt="2.2_3_调度器和闲逛进程-2.jpg"></p><h2 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h2><p><img src="https://bu.dusays.com/2023/07/25/64bfe9f8e91ee.jpg" alt="2.2_4_调度算法的评价指标-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fab2ab2.jpg" alt="2.2_4_调度算法的评价指标-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb803f9.jpg" alt="2.2_4_调度算法的评价指标-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb6f622.jpg" alt="2.2_4_调度算法的评价指标-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/25/64bfe9fb13ab9.jpg" alt="2.2_4_调度算法的评价指标-5.jpg"></p><h2 id="调度算法-先来先服务、最短作业优先、最高响应比优先"><a href="#调度算法-先来先服务、最短作业优先、最高响应比优先" class="headerlink" title="调度算法_先来先服务、最短作业优先、最高响应比优先"></a>调度算法_先来先服务、最短作业优先、最高响应比优先</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d15e01779.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d165532df.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1668c844.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1680415a.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d162a5970.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d16340dbb.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d1691b775.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d16d93124.jpg" alt="2.2_5_调度算法_先来先服务、最短作业优先、最高响应比优先-8.jpg"></p><h2 id="调度算法-时间片轮转、优先级、多级反馈队列"><a href="#调度算法-时间片轮转、优先级、多级反馈队列" class="headerlink" title="调度算法_时间片轮转、优先级、多级反馈队列"></a>调度算法_时间片轮转、优先级、多级反馈队列</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d366ccb64.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-1.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d3708cbe7.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-2.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d374b4d0e.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-3.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d374b4d22.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-4.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37096c0c.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-5.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d36ed0237.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-6.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d3796adc7.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-7.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37f4e581.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-8.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d38061328.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-9.jpg"></p><p><img src="https://bu.dusays.com/2023/07/31/64c7d37f4d362.jpg" alt="2.2_6_调度算法_时间片轮转、优先级、多级反馈队列-10.jpg"></p><h2 id="调度算法-多级队列调度算法"><a href="#调度算法-多级队列调度算法" class="headerlink" title="调度算法_多级队列调度算法"></a>调度算法_多级队列调度算法</h2><p><img src="https://bu.dusays.com/2023/07/31/64c7d4a1ed339.jpg" alt="2.2_7_调度算法_多级队列调度算法-1.jpg"></p><h2 id="什么是进程同步、进程互斥"><a href="#什么是进程同步、进程互斥" class="headerlink" title="什么是进程同步、进程互斥"></a>什么是进程同步、进程互斥</h2><p><img src="https://bu.dusays.com/2023/08/03/64cb840b0c8ec.jpg" alt="2.3_1_什么是进程同步、进程互斥-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb840bbff0a.jpg" alt="2.3_1_什么是进程同步、进程互斥-2.jpg"></p><p><img src="https://s2.loli.net/2023/08/03/oigBhYQNt3K1aP8.jpg" alt="2.3_1_什么是进程同步、进程互斥-3.jpg"></p><p><img src="https://s2.loli.net/2023/08/03/MFfPRIKi9DzphNA.jpg" alt="2.3_1_什么是进程同步、进程互斥-4.jpg"></p><h2 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h2><p><img src="https://bu.dusays.com/2023/08/03/64cb86a5ce910.jpg" alt="2.3_2_进程互斥的软件实现方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a682577.jpg" alt="2.3_2_进程互斥的软件实现方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a787234.jpg" alt="2.3_2_进程互斥的软件实现方法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a79dc41.jpg" alt="2.3_2_进程互斥的软件实现方法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a7afb85.jpg" alt="2.3_2_进程互斥的软件实现方法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a7889f6.jpg" alt="2.3_2_进程互斥的软件实现方法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb86a82dd8c.jpg" alt="2.3_2_进程互斥的软件实现方法-7.jpg"></p><h2 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce452b3244f.jpg" alt="2.3_3_进程互斥的硬件实现方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce452bab5cb.jpg" alt="2.3_3_进程互斥的硬件实现方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce452c0f608.jpg" alt="2.3_3_进程互斥的硬件实现方法-3.jpg"></p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce45b92703d.jpg" alt="2.3_4_互斥锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce45b94c7a2.jpg" alt="2.3_4_互斥锁-2.jpg"></p><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce471801e44.jpg" alt="2.3_5_信号量机制-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471c405d6.jpg" alt="2.3_5_信号量机制-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471b1d05a.jpg" alt="2.3_5_信号量机制-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce471d6043c.jpg" alt="2.3_5_信号量机制-4.jpg"></p><h2 id="用信号量实现进程互斥、同步、前驱关系"><a href="#用信号量实现进程互斥、同步、前驱关系" class="headerlink" title="用信号量实现进程互斥、同步、前驱关系"></a>用信号量实现进程互斥、同步、前驱关系</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce4784a009c.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47828f434.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47840190d.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce4782ccad9.jpg" alt="2.3_6_用信号量实现进程互斥、同步、前驱关系-4.jpg"></p><h2 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h2><p><img src="https://bu.dusays.com/2023/08/05/64ce47f62aede.jpg" alt="2.3_7_生产者-消费者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f1782a6.jpg" alt="2.3_7_生产者-消费者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f6a1ee2.jpg" alt="2.3_7_生产者-消费者问题-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f9527d0.jpg" alt="2.3_7_生产者-消费者问题-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/05/64ce47f582432.jpg" alt="2.3_7_生产者-消费者问题-5.jpg"></p><h2 id="多生产者-多消费者"><a href="#多生产者-多消费者" class="headerlink" title="多生产者-多消费者"></a>多生产者-多消费者</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf23bf03ac7.jpg" alt="2.3_8_多生产者-多消费者-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c356499.jpg" alt="2.3_8_多生产者-多消费者-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c38200e.jpg" alt="2.3_8_多生产者-多消费者-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c391d95.jpg" alt="2.3_8_多生产者-多消费者-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c3a7524.jpg" alt="2.3_8_多生产者-多消费者-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf23c304cdc.jpg" alt="2.3_8_多生产者-多消费者-6.jpg"></p><h2 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf248663d78.jpg" alt="2.3_9_吸烟者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24891c382.jpg" alt="2.3_9_吸烟者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24883df3d.jpg" alt="2.3_9_吸烟者问题-3.jpg"></p><h2 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h2><p><img src="https://bu.dusays.com/2023/08/06/64cf24edc1293.jpg" alt="2.3_10_读者-写者问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24eeae144.jpg" alt="2.3_10_读者-写者问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/06/64cf24eed1cae.jpg" alt="2.3_10_读者-写者问题-3.jpg"></p><h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p><img src="https://bu.dusays.com/2023/08/08/64d249dbbe37c.jpg" alt="2.3_11_哲学家进餐问题-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc76e0b.jpg" alt="2.3_11_哲学家进餐问题-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc93cea.jpg" alt="2.3_11_哲学家进餐问题-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc6c15f.jpg" alt="2.3_11_哲学家进餐问题-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d249dc03a7f.jpg" alt="2.3_11_哲学家进餐问题-5.jpg"></p><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p><img src="https://bu.dusays.com/2023/08/08/64d24a7d2edf4.jpg" alt="2.3_12_管程-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7df1bc3.jpg" alt="2.3_12_管程-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7e6ab87.jpg" alt="2.3_12_管程-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24a7e380db.jpg" alt="2.3_12_管程-4.jpg"></p><h2 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h2><p><img src="https://bu.dusays.com/2023/08/08/64d24ae81102b.jpg" alt="2.4_1_死锁的概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae92546a.jpg" alt="2.4_1_死锁的概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae9c15b3.jpg" alt="2.4_1_死锁的概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae94f046.jpg" alt="2.4_1_死锁的概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/08/64d24ae981209.jpg" alt="2.4_1_死锁的概念-5.jpg"></p><h2 id="死锁的处理策略—预防死锁"><a href="#死锁的处理策略—预防死锁" class="headerlink" title="死锁的处理策略—预防死锁"></a>死锁的处理策略—预防死锁</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b02ad4359.jpg" alt="2.4_2_死锁的处理策略—预防死锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b029d5054.jpg" alt="2.4_2_死锁的处理策略—预防死锁-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b02bb5e72.jpg" alt="2.4_2_死锁的处理策略—预防死锁-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0297fa0f.jpg" alt="2.4_2_死锁的处理策略—预防死锁-4.jpg"></p><h2 id="死锁的处理策略—避免死锁"><a href="#死锁的处理策略—避免死锁" class="headerlink" title="死锁的处理策略—避免死锁"></a>死锁的处理策略—避免死锁</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b0bebbfe6.jpg" alt="2.4_3_死锁的处理策略—避免死锁-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ce223ff.jpg" alt="2.4_3_死锁的处理策略—避免死锁-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ce6fefc.jpg" alt="2.4_3_死锁的处理策略—避免死锁-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0c7b9ce6.jpg" alt="2.4_3_死锁的处理策略—避免死锁-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0cfcdbd9.jpg" alt="2.4_3_死锁的处理策略—避免死锁-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0cc12e75.jpg" alt="2.4_3_死锁的处理策略—避免死锁-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b0ca53c97.jpg" alt="2.4_3_死锁的处理策略—避免死锁-7.jpg"></p><h2 id="死锁的处理策略—死锁的检测与解除"><a href="#死锁的处理策略—死锁的检测与解除" class="headerlink" title="死锁的处理策略—死锁的检测与解除"></a>死锁的处理策略—死锁的检测与解除</h2><p><img src="https://bu.dusays.com/2023/08/09/64d3b1723982e.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b172bb8da.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b17663b79.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/09/64d3b174f15ca.jpg" alt="2.4_4_死锁的处理策略—死锁的检测与解除-4.jpg"></p><h2 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h2><p><img src="https://bu.dusays.com/2023/08/12/64d65e8385f35.jpg" alt="3.1_1_内存的基础知识-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e84a6968.jpg" alt="3.1_1_内存的基础知识-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e8435dff.jpg" alt="3.1_1_内存的基础知识-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e850eb5a.jpg" alt="3.1_1_内存的基础知识-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e867ce09.jpg" alt="3.1_1_内存的基础知识-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e866c713.jpg" alt="3.1_1_内存的基础知识-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e869fb04.jpg" alt="3.1_1_内存的基础知识-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d65e86d4373.jpg" alt="3.1_1_内存的基础知识-8.jpg"></p><p><img src="https://sway.office.com/s/kdoI85z1GGRvyVRu/images/5ud4zKm_7dpNZv" alt="3.1_1_内存的基础知识-9.jpg"></p><p><img src="https://sway.office.com/s/SGpu2MefI7MK1uBT/images/Efe_qAu19S1_D9" alt="3.1_1_内存的基础知识-10.jpg"></p><h2 id="内存管理的概念"><a href="#内存管理的概念" class="headerlink" title="内存管理的概念"></a>内存管理的概念</h2><p><img src="https://bu.dusays.com/2023/08/12/64d66038a65ef.jpg" alt="3.1_2_内存管理的概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660397b64f.jpg" alt="3.1_2_内存管理的概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6603a29c6a.jpg" alt="3.1_2_内存管理的概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66039b54b7.jpg" alt="3.1_2_内存管理的概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66039ea938.jpg" alt="3.1_2_内存管理的概念-5.jpg"></p><h2 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h2><p><img src="https://bu.dusays.com/2023/08/12/64d660cf6bbad.jpg" alt="3.1_3_覆盖与交换-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660cfcc5d5.jpg" alt="3.1_3_覆盖与交换-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660d0041c7.jpg" alt="3.1_3_覆盖与交换-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d660d067625.jpg" alt="3.1_3_覆盖与交换-4.jpg"></p><h2 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h2><p><img src="https://bu.dusays.com/2023/08/12/64d66181e5f32.jpg" alt="3.1_4_连续分配管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66183a405c.jpg" alt="3.1_4_连续分配管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d661840c2b1.jpg" alt="3.1_4_连续分配管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6618247e57.jpg" alt="3.1_4_连续分配管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66182ca850.jpg" alt="3.1_4_连续分配管理方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66183cdd31.jpg" alt="3.1_4_连续分配管理方式-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d661842f69b.jpg" alt="3.1_4_连续分配管理方式-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d66184a0d6b.jpg" alt="3.1_4_连续分配管理方式-8.jpg"></p><h2 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h2><p><img src="https://bu.dusays.com/2023/08/12/64d6622c0540e.jpg" alt="3.1_5_动态分区分配算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622ce8562.jpg" alt="3.1_5_动态分区分配算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622d31cd2.jpg" alt="3.1_5_动态分区分配算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/12/64d6622d6b860.jpg" alt="3.1_5_动态分区分配算法-4.jpg"></p><h2 id="基本分页存储管理的基本概念"><a href="#基本分页存储管理的基本概念" class="headerlink" title="基本分页存储管理的基本概念"></a>基本分页存储管理的基本概念</h2><p><img src="https://bu.dusays.com/2023/08/15/64da53960da97.jpg" alt="3.1_6_基本分页存储管理的基本概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da539d27213.jpg" alt="3.1_6_基本分页存储管理的基本概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5393141ff.jpg" alt="3.1_6_基本分页存储管理的基本概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5393804c3.jpg" alt="3.1_6_基本分页存储管理的基本概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5394d3d19.jpg" alt="3.1_6_基本分页存储管理的基本概念-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da53a0953cb.jpg" alt="3.1_6_基本分页存储管理的基本概念-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da5398eb74c.jpg" alt="3.1_6_基本分页存储管理的基本概念-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da539b3874c.jpg" alt="3.1_6_基本分页存储管理的基本概念-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/15/64da53a0da25f.jpg" alt="3.1_6_基本分页存储管理的基本概念-9.jpg"></p><h2 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h2><p><img src="https://bu.dusays.com/2023/08/16/64dc9f505e783.jpg" alt="3.1_7_基本地址变换机构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f50ab4cb.jpg" alt="3.1_7_基本地址变换机构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dced6dd9028.jpg" alt="3.1_7_基本地址变换机构-2dot5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f572d936.jpg" alt="3.1_7_基本地址变换机构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f56b2981.jpg" alt="3.1_7_基本地址变换机构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dc9f565baea.jpg" alt="3.1_7_基本地址变换机构-5.jpg"></p><h2 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h2><p><img src="https://bu.dusays.com/2023/08/16/64dcedf3bffbf.jpg" alt="3.1_8_具有快表的地址变换机构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf9cc451.jpg" alt="3.1_8_具有快表的地址变换机构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf8ebb7d.jpg" alt="3.1_8_具有快表的地址变换机构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf7336da.jpg" alt="3.1_8_具有快表的地址变换机构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcedf843c72.jpg" alt="3.1_8_具有快表的地址变换机构-5.jpg"></p><h2 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h2><p><img src="https://bu.dusays.com/2023/08/16/64dcee8858dca.jpg" alt="3.1_9_两级页表-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8ca1c81.jpg" alt="3.1_9_两级页表-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8e83aaa.jpg" alt="3.1_9_两级页表-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee8c5d2b0.jpg" alt="3.1_9_两级页表-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee915f724.jpg" alt="3.1_9_两级页表-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/16/64dcee911b17f.jpg" alt="3.1_9_两级页表-6.jpg"></p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p><img src="https://bu.dusays.com/2023/08/17/64dcfd619260d.jpg" alt="3.1_9dot5_补充说明-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/17/64dcfd6264a46.jpg" alt="3.1_9dot5_补充说明-2.jpg"></p><p><img src="https://sway.office.com/s/p4xi5cps3gCH9kEW/images/iG-XI8DPI9lOPn" alt="3.1_9dot5_补充说明-3.jpg"></p><h2 id="基本分段存储管理方式"><a href="#基本分段存储管理方式" class="headerlink" title="基本分段存储管理方式"></a>基本分段存储管理方式</h2><p><img src="https://bu.dusays.com/2023/08/18/64df5a1545b43.jpg" alt="3.1_10_基本分段存储管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a1632743.jpg" alt="3.1_10_基本分段存储管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a164e980.jpg" alt="3.1_10_基本分段存储管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a157f3f3.jpg" alt="3.1_10_基本分段存储管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a15d80da.jpg" alt="3.1_10_基本分段存储管理方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a164dae6.jpg" alt="3.1_10_基本分段存储管理方式-6.jpg"></p><h2 id="段页式管理方式"><a href="#段页式管理方式" class="headerlink" title="段页式管理方式"></a>段页式管理方式</h2><p><img src="https://bu.dusays.com/2023/08/18/64df5a907fdea.jpg" alt="3.1_11_段页式管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a9203158.jpg" alt="3.1_11_段页式管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a92ebc08.jpg" alt="3.1_11_段页式管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/18/64df5a9321f46.jpg" alt="3.1_11_段页式管理方式-4.jpg"></p><h2 id="虚拟内存的基本概念"><a href="#虚拟内存的基本概念" class="headerlink" title="虚拟内存的基本概念"></a>虚拟内存的基本概念</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e433a20e1.jpg" alt="3.2_1_虚拟内存的基本概念-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e433e4788.jpg" alt="3.2_1_虚拟内存的基本概念-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e43502a6d.jpg" alt="3.2_1_虚拟内存的基本概念-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e434e4752.jpg" alt="3.2_1_虚拟内存的基本概念-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e434d469f.jpg" alt="3.2_1_虚拟内存的基本概念-5.jpg"></p><h2 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c016cfe.jpg" alt="3.2_2_请求分页管理方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c0b4422.jpg" alt="3.2_2_请求分页管理方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c03fb17.jpg" alt="3.2_2_请求分页管理方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c073d5f.jpg" alt="3.2_2_请求分页管理方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e4c11c53d.jpg" alt="3.2_2_请求分页管理方式-5.jpg"></p><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p><img src="https://bu.dusays.com/2023/08/19/64e0e5436e969.jpg" alt="3.2_3_页面置换算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e5451fde9.jpg" alt="3.2_3_页面置换算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e543e1c93.jpg" alt="3.2_3_页面置换算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e545976a1.jpg" alt="3.2_3_页面置换算法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e544878dd.jpg" alt="3.2_3_页面置换算法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e544ecf67.jpg" alt="3.2_3_页面置换算法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/19/64e0e54742487.jpg" alt="3.2_3_页面置换算法-7.jpg"></p><h2 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h2><p><img src="https://bu.dusays.com/2023/08/22/64e4aae87bae7.jpg" alt="3.2_4_页面分配策略-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeb38aae.jpg" alt="3.2_4_页面分配策略-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aae9ae077.jpg" alt="3.2_4_页面分配策略-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeb0133b.jpg" alt="3.2_4_页面分配策略-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaea237cf.jpg" alt="3.2_4_页面分配策略-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4aaeab9843.jpg" alt="3.2_4_页面分配策略-6.jpg"></p><h2 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h2><p><img src="https://bu.dusays.com/2023/08/22/64e4ab6fa2ee9.jpg" alt="3.2_5_内存映射文件-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4ab70c3a04.jpg" alt="3.2_5_内存映射文件-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4ab71c09a8.jpg" alt="3.2_5_内存映射文件-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/22/64e4abe8c607d.jpg" alt="3.2_5_内存映射文件-4.jpg"></p><p><img src="https://sway.office.com/s/R1C5hAP7XVmGDbXk/images/2oFQvoo6_hxYKj" alt="3.2_5_内存映射文件-5.jpg"></p><h2 id="初识文件管理"><a href="#初识文件管理" class="headerlink" title="初识文件管理"></a>初识文件管理</h2><p><img src="https://bu.dusays.com/2023/08/24/64e73eff69f7f.jpg" alt="4.1_1_初识文件管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f0281dd6.jpg" alt="4.1_1_初识文件管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f01bcc53.jpg" alt="4.1_1_初识文件管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f00db021.jpg" alt="4.1_1_初识文件管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f028bde8.jpg" alt="4.1_1_初识文件管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f0272c82.jpg" alt="4.1_1_初识文件管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f00800d5.jpg" alt="4.1_1_初识文件管理-7.jpg"></p><h2 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h2><p><img src="https://bu.dusays.com/2023/08/24/64e73f8f7b012.jpg" alt="4.1_2_文件的逻辑结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f9184a65.jpg" alt="4.1_2_文件的逻辑结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f942c537.jpg" alt="4.1_2_文件的逻辑结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f92e3f79.jpg" alt="4.1_2_文件的逻辑结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8cde028e5b.jpg" alt="4.1_2_文件的逻辑结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f947e93e.jpg" alt="4.1_2_文件的逻辑结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f9296c7f.jpg" alt="4.1_2_文件的逻辑结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e73f93b3d23.jpg" alt="4.1_2_文件的逻辑结构-8.jpg"></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="https://bu.dusays.com/2023/08/24/64e7400fd1015.jpg" alt="4.1_3_文件目录-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e74010abb34.jpg" alt="4.1_3_文件目录-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e740155713b.jpg" alt="4.1_3_文件目录-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401450ebf.jpg" alt="4.1_3_文件目录-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e740169dd3b.jpg" alt="4.1_3_文件目录-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401605584.jpg" alt="4.1_3_文件目录-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e74016c24f1.jpg" alt="4.1_3_文件目录-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/24/64e7401593030.jpg" alt="4.1_3_文件目录-8.jpg"></p><h2 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h2><p><img src="https://bu.dusays.com/2023/08/25/64e78860cfbc7.jpg" alt="4.1_4_文件的物理结构-01.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788614896d.jpg" alt="4.1_4_文件的物理结构-02.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788643d929.jpg" alt="4.1_4_文件的物理结构-03.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788624532c.jpg" alt="4.1_4_文件的物理结构-04.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788618a519.jpg" alt="4.1_4_文件的物理结构-05.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7886312261.jpg" alt="4.1_4_文件的物理结构-06.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78862bc759.jpg" alt="4.1_4_文件的物理结构-07.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7886383cd4.jpg" alt="4.1_4_文件的物理结构-08.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78862b94a4.jpg" alt="4.1_4_文件的物理结构-09.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e788640a530.jpg" alt="4.1_4_文件的物理结构-10.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78922f15e4.jpg" alt="4.1_4_文件的物理结构-11.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789269e35a.jpg" alt="4.1_4_文件的物理结构-12.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7892709dd5.jpg" alt="4.1_4_文件的物理结构-13.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789260d4f0.jpg" alt="4.1_4_文件的物理结构-14.jpg"></p><h2 id="逻辑结构-VS-物理结构"><a href="#逻辑结构-VS-物理结构" class="headerlink" title="逻辑结构 VS 物理结构"></a>逻辑结构 VS 物理结构</h2><p><img src="https://bu.dusays.com/2023/08/25/64e7896c10770.jpg" alt="4.1_5_逻辑结构VS物理结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78972b5bc6.jpg" alt="4.1_5_逻辑结构VS物理结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897445790.jpg" alt="4.1_5_逻辑结构VS物理结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897420172.jpg" alt="4.1_5_逻辑结构VS物理结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78970057e2.jpg" alt="4.1_5_逻辑结构VS物理结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e78971d73b2.jpg" alt="4.1_5_逻辑结构VS物理结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e7897423162.jpg" alt="4.1_5_逻辑结构VS物理结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789728b6d4.jpg" alt="4.1_5_逻辑结构VS物理结构-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e789741efe4.jpg" alt="4.1_5_逻辑结构VS物理结构-9.jpg"></p><h2 id="文件存储空间管理"><a href="#文件存储空间管理" class="headerlink" title="文件存储空间管理"></a>文件存储空间管理</h2><p><img src="https://bu.dusays.com/2023/08/25/64e827716cc03.jpg" alt="4.1_6_文件存储空间管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82772ced19.jpg" alt="4.1_6_文件存储空间管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827763690e.jpg" alt="4.1_6_文件存储空间管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82776339f4.jpg" alt="4.1_6_文件存储空间管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8277647989.jpg" alt="4.1_6_文件存储空间管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827762bdac.jpg" alt="4.1_6_文件存储空间管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82774756b8.jpg" alt="4.1_6_文件存储空间管理-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e827762a5a0.jpg" alt="4.1_6_文件存储空间管理-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8277636ff1.jpg" alt="4.1_6_文件存储空间管理-9.jpg"></p><h2 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h2><p><img src="https://bu.dusays.com/2023/08/25/64e82842c99e1.jpg" alt="4.1_7_文件的基本操作-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8284455e08.jpg" alt="4.1_7_文件的基本操作-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82844c4f32.jpg" alt="4.1_7_文件的基本操作-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82843c70bd.jpg" alt="4.1_7_文件的基本操作-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e82844c951f.jpg" alt="4.1_7_文件的基本操作-5.jpg"></p><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><p><img src="https://bu.dusays.com/2023/08/25/64e828c0481da.jpg" alt="4.1_8_文件共享-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c1163fb.jpg" alt="4.1_8_文件共享-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c206e3a.jpg" alt="4.1_8_文件共享-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c18d1e2.jpg" alt="4.1_8_文件共享-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e828c1cee68.jpg" alt="4.1_8_文件共享-5.jpg"></p><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><p><img src="https://bu.dusays.com/2023/08/25/64e8294942a88.jpg" alt="4.1_9_文件保护-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294aa151d.jpg" alt="4.1_9_文件保护-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c74160.jpg" alt="4.1_9_文件保护-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294ae92b3.jpg" alt="4.1_9_文件保护-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c475c5.jpg" alt="4.1_9_文件保护-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c618be.jpg" alt="4.1_9_文件保护-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/25/64e8294c6a60e.jpg" alt="4.1_9_文件保护-7.jpg"></p><h2 id="补充说明-2"><a href="#补充说明-2" class="headerlink" title="补充说明 2"></a>补充说明 2</h2><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/WUQwvOYCHgI3af" alt="4.2_1_没有这节-1.jpg"></p><p>对上面容易混淆的一部分内容粗略整理：</p><p>文件的逻辑结构：</p><ul><li>无结构文件</li><li>有结构文件<ul><li>顺序文件</li><li>索引文件</li><li>索引顺序文件、（进一步地，有）多级索引顺序文件</li></ul></li></ul><p>文件的物理结构（对<strong>非空闲磁盘块</strong>的管理）：</p><ul><li>连续分配</li><li>链接分配<ul><li>隐式链接</li><li>显式链接</li></ul></li><li>索引分配<ul><li>若索引表太大，则：<ul><li>链接方案</li><li>多层索引</li><li>混合索引</li></ul></li></ul></li></ul><p>文件存储空间管理（对<strong>空闲磁盘块</strong>的管理）：</p><ul><li>空闲表法</li><li>空闲链表法<ul><li>空闲盘块链</li><li>空闲盘区链</li></ul></li><li>位示图法</li><li>成组链接法</li></ul><p>具体细节可根据本文章目录快速查找。</p><h2 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec273619b30.jpg" alt="4.3_1_文件系统的层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27376ed52.jpg" alt="4.3_1_文件系统的层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27373281b.jpg" alt="4.3_1_文件系统的层次结构-3.jpg"></p><h2 id="文件系统的全局结构（布局）"><a href="#文件系统的全局结构（布局）" class="headerlink" title="文件系统的全局结构（布局）"></a>文件系统的全局结构（布局）</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec27daac758.jpg" alt="4.3_2_文件系统的全局结构（布局）-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db12e81.jpg" alt="4.3_2_文件系统的全局结构（布局）-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db4fe42.jpg" alt="4.3_2_文件系统的全局结构（布局）-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec27db87e10.jpg" alt="4.3_2_文件系统的全局结构（布局）-4.jpg"></p><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p><img src="https://bu.dusays.com/2023/08/28/64ec28447a569.jpg" alt="4.3_3_虚拟文件系统-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845791c9.jpg" alt="4.3_3_虚拟文件系统-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845e0e90.jpg" alt="4.3_3_虚拟文件系统-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2846b5c31.jpg" alt="4.3_3_虚拟文件系统-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ec2845c8cad.jpg" alt="4.3_3_虚拟文件系统-5.jpg"></p><h2 id="IO设备的基本概念和分类"><a href="#IO设备的基本概念和分类" class="headerlink" title="IO设备的基本概念和分类"></a>IO设备的基本概念和分类</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8984d96.jpg" alt="5.1_1_IO设备的基本概念和分类-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8a86b5f.jpg" alt="5.1_1_IO设备的基本概念和分类-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8b201dd.jpg" alt="5.1_1_IO设备的基本概念和分类-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbd8ae989d.jpg" alt="5.1_1_IO设备的基本概念和分类-4.jpg"></p><h2 id="IO控制器"><a href="#IO控制器" class="headerlink" title="IO控制器"></a>IO控制器</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbe1f1b07e.jpg" alt="5.1_2_IO控制器-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe21e2578.jpg" alt="5.1_2_IO控制器-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe236d4b3.jpg" alt="5.1_2_IO控制器-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe2074ea4.jpg" alt="5.1_2_IO控制器-4.jpg"></p><h2 id="IO控制方式"><a href="#IO控制方式" class="headerlink" title="IO控制方式"></a>IO控制方式</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbe889d639.jpg" alt="5.1_3_IO控制方式-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8c9564e.jpg" alt="5.1_3_IO控制方式-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8ee3f9f.jpg" alt="5.1_3_IO控制方式-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8b999a6.jpg" alt="5.1_3_IO控制方式-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8d826dc.jpg" alt="5.1_3_IO控制方式-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8dbb194.jpg" alt="5.1_3_IO控制方式-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbe8cb1255.jpg" alt="5.1_3_IO控制方式-7.jpg"></p><h2 id="IO软件层次结构"><a href="#IO软件层次结构" class="headerlink" title="IO软件层次结构"></a>IO软件层次结构</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbf04043e9.jpg" alt="5.1_4_IO软件层次结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0906aae.jpg" alt="5.1_4_IO软件层次结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf05aa4e6.jpg" alt="5.1_4_IO软件层次结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf04d519e.jpg" alt="5.1_4_IO软件层次结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0621015.jpg" alt="5.1_4_IO软件层次结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf07b76d2.jpg" alt="5.1_4_IO软件层次结构-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf05d6cad.jpg" alt="5.1_4_IO软件层次结构-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf08ceddc.jpg" alt="5.1_4_IO软件层次结构-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0a35723.jpg" alt="5.1_4_IO软件层次结构-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbf0542a65.jpg" alt="5.1_4_IO软件层次结构-10.jpg"></p><h2 id="输入输出应用程序接口和驱动程序接口"><a href="#输入输出应用程序接口和驱动程序接口" class="headerlink" title="输入输出应用程序接口和驱动程序接口"></a>输入输出应用程序接口和驱动程序接口</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecbfde74e9e.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe097285.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdee8b91.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe0a0176.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe00de44.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe07be21.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdf69c02.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfdf389e6.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecbfe0afaf5.jpg" alt="5.1_5_输入输出应用程序接口和驱动程序接口-9.jpg"></p><h2 id="IO核心子系统"><a href="#IO核心子系统" class="headerlink" title="IO核心子系统"></a>IO核心子系统</h2><p><img src="https://bu.dusays.com/2023/08/28/64ecc07ba02ec.jpg" alt="5.2_1_IO核心子系统-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecc07be2202.jpg" alt="5.2_1_IO核心子系统-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/28/64ecc07c2295e.jpg" alt="5.2_1_IO核心子系统-3.jpg"></p><h2 id="假脱机技术"><a href="#假脱机技术" class="headerlink" title="假脱机技术"></a>假脱机技术</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede22d799ea.jpg" alt="5.2_2_假脱机技术-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede22f974d4.jpg" alt="5.2_2_假脱机技术-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede230d2bf1.jpg" alt="5.2_2_假脱机技术-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede22f5128a.jpg" alt="5.2_2_假脱机技术-4.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/9XGWMTqZ_M13vT" alt="5.2_2_假脱机技术-5.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/vgbtxoYOINMfHY" alt="5.2_2_假脱机技术-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede231292a8.jpg" alt="5.2_2_假脱机技术-7.jpg"></p><h2 id="设备的分配与回收"><a href="#设备的分配与回收" class="headerlink" title="设备的分配与回收"></a>设备的分配与回收</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede3859b08f.jpg" alt="5.2_3_设备的分配与回收-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede38779e54.jpg" alt="5.2_3_设备的分配与回收-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3875bebb.jpg" alt="5.2_3_设备的分配与回收-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede388a96d1.jpg" alt="5.2_3_设备的分配与回收-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede387259c6.jpg" alt="5.2_3_设备的分配与回收-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3867bf75.jpg" alt="5.2_3_设备的分配与回收-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede38852f47.jpg" alt="5.2_3_设备的分配与回收-7.jpg"></p><p><img src="https://sway.office.com/s/spYzd7vE8sSW2u50/images/bQaqiGl08kdRUZ" alt="5.2_3_设备的分配与回收-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3890070f.jpg" alt="5.2_3_设备的分配与回收-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede3890a03c.jpg" alt="5.2_3_设备的分配与回收-10.jpg"></p><h2 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h2><p><img src="https://bu.dusays.com/2023/08/29/64ede5ab5b649.jpg" alt="5.2_4_缓冲区管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5af1163d.jpg" alt="5.2_4_缓冲区管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5af1a04b.jpg" alt="5.2_4_缓冲区管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5afe4bd0.jpg" alt="5.2_4_缓冲区管理-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5acb8adf.jpg" alt="5.2_4_缓冲区管理-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5afa7d4f.jpg" alt="5.2_4_缓冲区管理-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5ab8ba7d.jpg" alt="5.2_4_缓冲区管理-7.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5adc1f77.jpg" alt="5.2_4_缓冲区管理-8.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5aff1ffc.jpg" alt="5.2_4_缓冲区管理-9.jpg"></p><p><img src="https://bu.dusays.com/2023/08/29/64ede5ad7e6b0.jpg" alt="5.2_4_缓冲区管理-10.jpg"></p><h2 id="磁盘的结构"><a href="#磁盘的结构" class="headerlink" title="磁盘的结构"></a>磁盘的结构</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeeed613925.jpg" alt="5.3_1_磁盘的结构-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed7707fd.jpg" alt="5.3_1_磁盘的结构-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed7c2642.jpg" alt="5.3_1_磁盘的结构-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed8c65c6.jpg" alt="5.3_1_磁盘的结构-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed895fb9.jpg" alt="5.3_1_磁盘的结构-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeeed8171e3.jpg" alt="5.3_1_磁盘的结构-6.jpg"></p><h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeef46df3f4.jpg" alt="5.3_2_磁盘调度算法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef48eb4cd.jpg" alt="5.3_2_磁盘调度算法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4ab6363.jpg" alt="5.3_2_磁盘调度算法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a6b52a.jpg" alt="5.3_2_磁盘调度算法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a8978d.jpg" alt="5.3_2_磁盘调度算法-5.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef4a8e0a9.jpg" alt="5.3_2_磁盘调度算法-6.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeef48b6be9.jpg" alt="5.3_2_磁盘调度算法-7.jpg"></p><h2 id="减少磁盘延迟时间的方法"><a href="#减少磁盘延迟时间的方法" class="headerlink" title="减少磁盘延迟时间的方法"></a>减少磁盘延迟时间的方法</h2><p><img src="https://bu.dusays.com/2023/08/30/64eeefd73b683.jpg" alt="5.3_3_减少磁盘延迟时间的方法-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd730e5d.jpg" alt="5.3_3_减少磁盘延迟时间的方法-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd801a74.jpg" alt="5.3_3_减少磁盘延迟时间的方法-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd7a1548.jpg" alt="5.3_3_减少磁盘延迟时间的方法-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eeefd6bfcc7.jpg" alt="5.3_3_减少磁盘延迟时间的方法-5.jpg"></p><h2 id="磁盘的管理"><a href="#磁盘的管理" class="headerlink" title="磁盘的管理"></a>磁盘的管理</h2><p><img src="https://bu.dusays.com/2023/08/30/64eef07bb971c.jpg" alt="5.3_4_磁盘的管理-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef07e336dc.jpg" alt="5.3_4_磁盘的管理-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef080c4891.jpg" alt="5.3_4_磁盘的管理-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef07f8b560.jpg" alt="5.3_4_磁盘的管理-4.jpg"></p><h2 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h2><p><img src="https://bu.dusays.com/2023/08/30/64eef0e8c4c50.jpg" alt="5.3_5_固态硬盘SSD-1.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0ea2b7f3.jpg" alt="5.3_5_固态硬盘SSD-2.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0e958845.jpg" alt="5.3_5_固态硬盘SSD-3.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0e9b8e6b.jpg" alt="5.3_5_固态硬盘SSD-4.jpg"></p><p><img src="https://bu.dusays.com/2023/08/30/64eef0ea13539.jpg" alt="5.3_5_固态硬盘SSD-5.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写在前面：&lt;/p&gt;
&lt;p&gt;虽然本笔记的大多数内容是王道的 PPT ，但也是有我的注释的！王道的课程真的很好，咸鱼学长讲课生动又仔细。每年的课件和视频都是有变化的，我这里把 PPT 贴出来只是自用，本文章禁止转载。最后附上王道的网站：&lt;code&gt;cskaoyan.com&lt;/c</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="OS" scheme="https://loveofpeach.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Graduation</title>
    <link href="https://loveofpeach.github.io/posts/368869f3.html"/>
    <id>https://loveofpeach.github.io/posts/368869f3.html</id>
    <published>2023-06-30T17:32:43.000Z</published>
    <updated>2024-01-05T06:49:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>毕业了，很难受。</p><p>我惊讶于这份难受。在相当的一段时间里，我以为自己已经枯死，再难有感情上的波动。</p><p>大家陆陆续续的离开宿舍，奔赴各自的前程，我们还会笑嘻嘻在先走的室友留下的东西里淘金。</p><p>“哟，这还有个去年顺的大白 cos 服呢。”</p><p>“继承！”</p><p>我本是倒数第二个离开的，可是最后一位室友还是和我一起离开了，说自己一个人多待几个小时也是难受，不如一起走。</p><p>拍照，拉闸，断电。</p><p>以前我总是调侃『仰天大笑出门去，我辈岂是 XX（校名）人』，路上却无言。</p><p>今天在某人的空间里看到毕业留念的照片，心里一咯噔，才后知后觉地发现，好像错过了重要的人。</p><p>挺可爱的女孩子。交集不多，大一的时候接触过几次，后来逐渐沦为点赞之交。似乎在某节人满为患专业课上，她坐在我的右边，但除此之外没有别的相关记忆。</p><p>某次补考的考场上，监考报到她名字时，才发现她就坐在我后面（补考考场见？.jpg），竟一时分辨不出样貌。这倒也不奇怪，本来也没常照面，忘了长相也很正常。或许是我自己在心里勾勒出了一个可能陪伴我的人，我为自己强加于人的期待感到惭愧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;毕业了，很难受。&lt;/p&gt;
&lt;p&gt;我惊讶于这份难受。在相当的一段时间里，我以为自己已经枯死，再难有感情上的波动。&lt;/p&gt;
&lt;p&gt;大家陆陆续续的离开宿舍，奔赴各自的前程，我们还会笑嘻嘻在先走的室友留下的东西里淘金。&lt;/p&gt;
&lt;p&gt;“哟，这还有个去年顺的大白 cos 服呢。”&lt;/</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>负荷预测笔记</title>
    <link href="https://loveofpeach.github.io/posts/420347ac.html"/>
    <id>https://loveofpeach.github.io/posts/420347ac.html</id>
    <published>2023-06-29T05:10:16.000Z</published>
    <updated>2023-10-22T03:15:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>并非我的笔记，以前问人要的。</p><p><img src="https://bu.dusays.com/2023/06/29/649d157187de7.jpg" alt="电力负荷预测笔记-01.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157250197.jpg" alt="电力负荷预测笔记-02.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157263621.jpg" alt="电力负荷预测笔记-03.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728c7b8.jpg" alt="电力负荷预测笔记-04.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15727b4e2.jpg" alt="电力负荷预测笔记-05.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157250edb.jpg" alt="电力负荷预测笔记-06.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728b623.jpg" alt="电力负荷预测笔记-07.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15727a742.jpg" alt="电力负荷预测笔记-08.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d15728b49b.jpg" alt="电力负荷预测笔记-09.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d157283a09.jpg" alt="电力负荷预测笔记-10.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa1eea.jpg" alt="电力负荷预测笔记-11.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa0863.jpg" alt="电力负荷预测笔记-12.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa49ad.jpg" alt="电力负荷预测笔记-13.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aab3e1.jpg" alt="电力负荷预测笔记-14.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aa106e.jpg" alt="电力负荷预测笔记-15.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160aad5e7.jpg" alt="电力负荷预测笔记-16.jpg"></p><p><img src="https://bu.dusays.com/2023/06/29/649d160ab41f8.jpg" alt="电力负荷预测笔记-17.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;并非我的笔记，以前问人要的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2023/06/29/649d157187de7.jpg&quot; alt=&quot;电力负荷预测笔记-01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.du</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="负荷预测" scheme="https://loveofpeach.github.io/tags/%E8%B4%9F%E8%8D%B7%E9%A2%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>生活在树上</title>
    <link href="https://loveofpeach.github.io/posts/67769661.html"/>
    <id>https://loveofpeach.github.io/posts/67769661.html</id>
    <published>2023-06-16T01:58:44.000Z</published>
    <updated>2023-12-30T12:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上又睡到了十点，为了不被朝阳拥抱，我特意选了一处荫凉的枝桠。</p><p>树友已经有起枝的了，抖着腿在打地下城。我不明白地下城有什么好玩的，我只是望文生义地觉得，他只要纵身一跃，就能跳到地下。但那可不是什么好主意——地下有可怖的鸟雀。</p><p>这些鸟雀虽不如外面的鸟雀那么有攻击性，却也不是好惹的：它们在读大学，等它们念完了大学，又是鸟界社会的生力军。我看着蹦蹦跳跳、鸟头攒动的赶第二节课的鸟流，如是想。</p><p>我拆开铜锣烧的包装，就着农夫山泉对付下去。这些都是昨天晚饭后去树超买的，为的是午饭前不至于饿着肚子，也不至于太饱吃不下午饭。我曾听人言，此树百货大树有一位职员，每天在林间飞跃通勤两个半小时——就像东瀛鸟洲的忍鸟那样，以致天天早上不吃东西，得了胃癌，年纪轻轻就去世了，坠到地面去，被大学鸟——大概是医学鸟捡了去，“树人虽蠢五脏俱全”，从此不知所踪。</p><p>历史学者会告诉我们，遥远的过去，人们在大地上行走。但一场变故之后，千山鸟飞绝，万径人踪灭，我们生活在了树上。倘若说更古的时候，猿猴从树上下到地面是生存的选择，那么我们再回到树上也没什么可耻的吧，都是为了生存。</p><p>鸟生们终于上完了第二节课，熙熙攘攘蹦回宿舍。这是一个人和鸟都会担心蛋的炎热天气，不过树上的生活总还有些荫蔽，不似蒸腾着暑气的地面。我饶有兴致地看着这些鸟雀，在蹦进宿舍阴影边缘的时候，它们就像是果冻一样被吸了进去，并发出短促的“嗖”的音效。说是宿舍，也就是鸽子笼般似的，这帮大学鸟们过的也不滋润。宿舍前的台阶上陈列着一些外卖，这些鸟生们就用喙叼着塑料袋的提嘴，扑棱着翅膀一摇一晃地回各自的鸽子笼。</p><p>“傻逼xx，食堂吔排骨去，晚了就只能喝树上贵粥了。”树友发话。</p><p>据说，人类曾培育过一种叫做“羊猪熊”的树上动物，作为肉料来源。但羊猪熊自诞生起就散发出令人肃然起敬的气场，最后成为一种宗教式的神秘动物，受很多人的膜拜。因此人类至今花费相当成本在树上养殖着传统动物。</p><p>树上贵粥的前身叫“爱唠嗑地”，一家很受欢迎的连锁餐饮，尤以好喝的粥闻名树界，原本不在此树集团旗下。后来此树集团认为非我树类其心必异，接管了爱唠嗑地在此树治下的业务，并抬高了粥的售价，于是收获恶名“树上贵粥”。</p><p>“树上贵粥，狗都不吃。走吧。”</p><p>我还是因午觉错过了这些鸟生们下午上课的光景，难以想象它们顶着毒辣太阳出笼的心情。</p><p>很好的月亮，很好的夜。</p><p>鸟生们一丝不挂、成群结队地踱去洗浴场，用我的八倍镜可以看清它们的每一根初级飞羽。泥浴是这些鸟生们一天中最闲适的时候，洗完澡就该上笼休息，明天继续奋斗了。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?aid=811838805&bvid=BV1f34y1E7UP&cid=727854836&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>临近鸟生宿舍关门的时候，一只可爱的雀儿衔着张纸，左瞧右瞧，把纸放在了我们树的树洞里。看来是把这个树洞当作它的树洞了，看看上面写了啥：喳喳喳喳叽叽叽，叽叽叽叽喳喳喳，看不懂，算了，还是放回去吧。</p><p>我爬回自己的枝桠，摸出手机，往树干上一靠，这可是老祖宗留下的宝贝。那些鸟雀最近都不怎么出去，它们的消遣会不会是叫翅机呢？或者叫喙机？不能吧，我笑了，那眼睛要瞎的。</p><p>不早了，该睡了。</p><p>“降维打击！”，啪，血绒花于手心绽放，生活在树上，是要处理好蚊子问题的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天早上又睡到了十点，为了不被朝阳拥抱，我特意选了一处荫凉的枝桠。&lt;/p&gt;
&lt;p&gt;树友已经有起枝的了，抖着腿在打地下城。我不明白地下城有什么好玩的，我只是望文生义地觉得，他只要纵身一跃，就能跳到地下。但那可不是什么好主意——地下有可怖的鸟雀。&lt;/p&gt;
&lt;p&gt;这些鸟雀虽不如外</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="谵妄" scheme="https://loveofpeach.github.io/tags/%E8%B0%B5%E5%A6%84/"/>
    
  </entry>
  
</feed>
