<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>loveofpeach&#39;s</title>
  
  <subtitle>tree hole</subtitle>
  <link href="https://loveofpeach.github.io/atom.xml" rel="self"/>
  
  <link href="https://loveofpeach.github.io/"/>
  <updated>2024-08-21T07:38:51.575Z</updated>
  <id>https://loveofpeach.github.io/</id>
  
  <author>
    <name>love of peach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>差分隐私</title>
    <link href="https://loveofpeach.github.io/posts/b192ad14.html"/>
    <id>https://loveofpeach.github.io/posts/b192ad14.html</id>
    <published>2024-08-21T07:18:00.000Z</published>
    <updated>2024-08-21T07:38:51.575Z</updated>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://programming-dp.com/cn/cover.html">https://programming-dp.com/cn/cover.html</a></p><p>下面的 pdf 只是该链接内容的备份。</p><div class="row"><iframe src="https://drive.google.com/file/d/1P8igo5soJ2e0rkt8RTkpfvZQE9_RxDC3/preview" style="width:100%; height:550px"></iframe></div><p>下面给出我的总结：</p><div class="row"><iframe src="https://drive.google.com/file/d/1x2oFa-AhAugSnRbmYkmxTVSOcXFTYrYy/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录：</strong><br>概述  1<br>去标识、k-匿名性  5<br>差分隐私  10<br>敏感度  20<br>近似差分隐私  23<br>局部敏感度  33<br>差分隐私变体  36</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考： &lt;a href=&quot;https://programming-dp.com/cn/cover.html&quot;&gt;https://programming-dp.com/cn/cover.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面的 pdf 只是该链接内容的备份。&lt;/p&gt;


	&lt;di</summary>
      
    
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="差分隐私" scheme="https://loveofpeach.github.io/tags/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>量子计算笔记</title>
    <link href="https://loveofpeach.github.io/posts/fc58f357.html"/>
    <id>https://loveofpeach.github.io/posts/fc58f357.html</id>
    <published>2024-08-13T08:07:27.000Z</published>
    <updated>2024-08-13T14:09:06.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教材-PDF"><a href="#教材-PDF" class="headerlink" title="教材 PDF"></a>教材 PDF</h1><p>使用的教材是 Quantum Computation and Quantum Information (10th Anniversary Edition) .</p><p>主要笔记都画在教材的 pdf 上了（很大），等什么时候学完了那个 pdf (?) 再把它放出来。</p><h1 id="批注"><a href="#批注" class="headerlink" title="批注"></a>批注</h1><p>下面是一些写不到 pdf 上的批注（『这里空白太小了我写不下』）。可能会比较杂乱。</p><h2 id="希尔伯特空间"><a href="#希尔伯特空间" class="headerlink" title="希尔伯特空间"></a>希尔伯特空间</h2><p>快速了解（若链接挂了可去 archive.ph 查找）：</p><p><a href="https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/">https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/</a></p><p>在此感谢作者。</p><h2 id="“伴随”概念澄清"><a href="#“伴随”概念澄清" class="headerlink" title="“伴随”概念澄清"></a>“伴随”概念澄清</h2><p>在本科教授的线性代数、量子计算涉及的数学这两者中，都有“伴随”的概念，但它们实际上是不同的数学概念。</p><p>1） <strong>矩阵的代数余子式和转置定义的“伴随矩阵”</strong></p><p>在经典线性代数中，<a href="https://zh.wikipedia.org/wiki/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5">伴随矩阵（adjugate matrix 或 classical adjoint）</a>指的是矩阵的代数余子式矩阵的转置。</p><p>伴随矩阵在计算矩阵的逆时起到重要作用：</p><script type="math/tex; mode=display">A^{-1} = \frac{1}{\det(A)} \text{adj}(A)</script><p>2） <strong>在量子力学或泛函分析中的“伴随”或“厄米共轭”</strong></p><p>在量子力学和泛函分析中，<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E5%B0%94%E7%B1%B3%E7%89%B9%E4%BC%B4%E9%9A%8F">“伴随”（adjoint）</a>通常指的是算子 $ A $ 的 Hermitian adjoint，记作 $ A^\dagger $。</p><p>另外：经典线性代数中的“伴随”，并非是泛函分析中的“伴随”在实数空间上的特殊情况。</p><h2 id="adjoint-和共轭转置"><a href="#adjoint-和共轭转置" class="headerlink" title="adjoint 和共轭转置"></a>adjoint 和共轭转置</h2><p>adjoint 的定义在 pdf 第 69 页。</p><p>下面推导它们等价。</p><p>由对偶向量的计算方法：</p><script type="math/tex; mode=display">\langle v | A | w \rangle = (\overline{v})^T A w</script><p>由 adjoint 的定义，将 2.32 式子中的 $A^\dagger |v \rangle$ 整体视作一个向量：</p><script type="math/tex; mode=display">\langle v | A | w \rangle = \langle A^\dagger v | w \rangle</script><p>右边的内积可以表示为：</p><script type="math/tex; mode=display">\langle A^\dagger v | w \rangle = (\overline{A^\dagger v})^T w</script><p>等式要求两边相等，所以：</p><script type="math/tex; mode=display">(\overline{v})^T A w = (\overline{A^\dagger v})^T w</script><p>由于这对任意的 $ w $ 都成立，必然有：</p><script type="math/tex; mode=display">(\overline{v})^T A = (\overline{A^\dagger v})^T</script><p>将其进一步展开，我们有（不难验证 $\overline{A\alpha}=\overline{A}\overline{\alpha}$ ，其中 A 是矩阵，$\alpha$ 是向量）：</p><script type="math/tex; mode=display">(\overline{v})^T A = (\overline{v})^T (\overline{A^\dagger})^T</script><p>因此：</p><script type="math/tex; mode=display">A = (\overline{A^\dagger})^T</script><p>即：</p><script type="math/tex; mode=display">A^\dagger = (\overline{A})^T</script><h2 id="酉矩阵是方阵"><a href="#酉矩阵是方阵" class="headerlink" title="酉矩阵是方阵"></a>酉矩阵是方阵</h2><p>酉矩阵一定是方阵。</p><p>酉矩阵 $ U $ 满足 $ U^\dagger U = U U^\dagger = I $，其中 $ U^\dagger $ 是 $ U $ 的共轭转置矩阵，$ I $ 是单位矩阵。</p><p>如果 $ U $ 是 $ m \times n $ 的矩阵，则 $ U^\dagger $ 是 $ n \times m $ 的矩阵。那么，$ U^\dagger U $ 是一个 $ n \times n $ 的方阵，而 $ UU^\dagger $ 是一个 $ m \times m $ 的方阵。不满足酉矩阵的定义。</p><h2 id="对标准正交基进行酉变换"><a href="#对标准正交基进行酉变换" class="headerlink" title="对标准正交基进行酉变换"></a>对标准正交基进行酉变换</h2><p>对一组标准正交基进行酉变换，得到的新基仍然是标准正交基。</p><p>在一个希尔伯特空间中，$\{ |e_i\rangle \}$ 是标准正交基，意味着对于任意的 $i$ 和 $j$，有：</p><script type="math/tex; mode=display">\langle e_i | e_j \rangle = \delta_{ij}</script><p>设 $\{ |e_i\rangle \}$ 是原来的标准正交基，在经过酉变换 $U$ 后，得到的新基为 $\{ |e’_i\rangle \}$，其中 $ |e’_i\rangle = U |e_i\rangle $。我们需要证明这组新基依然是标准正交基。</p><p>酉变换保持内积（pdf 71页）：</p><script type="math/tex; mode=display">\langle e'_i | e'_j \rangle = \langle U e_i | U e_j \rangle = \langle e_i | e_j \rangle</script><p>所以：</p><script type="math/tex; mode=display">\langle e'_i | e'_j \rangle = \delta_{ij}</script><p>因此新基 $\{ |e’_i\rangle \}$ 也是一组标准正交基。</p><h2 id="酉阵的外积表示"><a href="#酉阵的外积表示" class="headerlink" title="酉阵的外积表示"></a>酉阵的外积表示</h2><p>pdf 第 71 页上方。</p><script type="math/tex; mode=display">\begin{aligned}U & = \sum_{ij} \langle w_j|U|v_i \rangle|w_j\rangle \langle v_i| \\  & = \sum_{ij} \langle w_j|w_i \rangle|w_j\rangle \langle v_i| \\  & = \sum_{ij} \delta_{ij} |w_j \rangle \langle v_i| \\  & = \sum_{i} |w_j \rangle \langle v_i| \\\end{aligned}</script><p>注意，用到了 pdf 上的一个条件，翻到对应的页数即可找到。</p><h2 id="谱分解"><a href="#谱分解" class="headerlink" title="谱分解"></a>谱分解</h2><p><strong>相似对角化</strong>是指，对于一个方阵 $ A $，如果存在一个可逆矩阵 $ P $ 和一个对角矩阵 $ D $，使得 $ A = PDP^{-1} $，那么矩阵 $ A $ 就是可相似对角化的。这里的对角矩阵 $ D $ 的对角元素就是 $ A $ 的特征值。</p><p><strong>特征分解（Eigendecomposition）</strong>，又称<strong>谱分解（Spectral decomposition）</strong> 是将矩阵分解为由其特征值和特征向量表示的矩阵之积的方法。</p><p>谱分解用于描述正交对角化。在谱分解中，特别是在对称矩阵（实数域上）或酉矩阵（复数域上）的情况下，一个矩阵 $ A $ 可以被分解为 $ A = U \Lambda U^ \dagger $，其中 $ U $ 是一个正交矩阵或酉矩阵，$ \Lambda $ 是一个对角矩阵，且对角元素是 $ A $ 的特征值。</p><p><strong>谱分解是一种特定的相似对角化，适用于特定类型的矩阵。</strong></p><p>正交阵是酉阵的特殊情况。</p><p>谱分解通常表示为矩阵的乘法形式，如 $ M = U \Lambda U^\dagger $。然而，<strong>谱分解可以进一步表达为每个特征值与其对应的特征向量的外积之和。</strong></p><p>具体来说，对于一个 $ n \times n $ 的 Normal 矩阵 $ M $，它的谱分解可以写成：</p><script type="math/tex; mode=display">M = \sum_{i=1}^n \lambda_i \mathbf{v}_i \mathbf{v}_i^\dagger</script><p>这里：</p><ul><li>$ \lambda_i $ 是 $ M $ 的第 $ i $ 个特征值。</li><li>$ \mathbf{v}_i $ 是与特征值 $ \lambda_i $ 对应的特征向量。</li><li>$ \mathbf{v}_i^\dagger $ 是 $ \mathbf{v}_i $ 的共轭转置。</li></ul><p>以 $ M = \begin{pmatrix} 2 &amp; 1 \\ 1 &amp; 2 \end{pmatrix} $ 为例，其特征值和特征向量如下：</p><ul><li>$ \lambda_1 = 3 $， $ \mathbf{v}_1 = \frac{1}{\sqrt{2}} \begin{pmatrix} 1 \\ 1 \end{pmatrix} $</li><li>$ \lambda_2 = 1 $， $ \mathbf{v}_2 = \frac{1}{\sqrt{2}} \begin{pmatrix} 1 \\ -1 \end{pmatrix} $</li></ul><p>它的谱分解可以写成：</p><script type="math/tex; mode=display">M = 3 \cdot \mathbf{v}_1 \mathbf{v}_1^\dagger + 1 \cdot \mathbf{v}_2 \mathbf{v}_2^\dagger</script><p>这种和式形式有助于理解矩阵在特征向量空间中的作用。</p><p><strong>为什么之前的乘积形式可以改写为和的形式？</strong></p><p>将 $ U $ 和 $ U^\dagger $ 分块：</p><script type="math/tex; mode=display">U = \begin{pmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{pmatrix}</script><script type="math/tex; mode=display">U^\dagger = \begin{pmatrix} \mathbf{v}_1^\dagger \\ \mathbf{v}_2^\dagger \\ \vdots \\ \mathbf{v}_n^\dagger \end{pmatrix}</script><p>其中，$ U $ 的列向量 $ \mathbf{v}_i $ 形成一个标准正交基。</p><p>于是：</p><script type="math/tex; mode=display">M = \begin{pmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{pmatrix} \begin{pmatrix} \lambda_1 & 0 & \cdots & 0 \\ 0 & \lambda_2 & \cdots & 0 \\ \vdots & \vdots & \ddots & \vdots \\ 0 & 0 & \cdots & \lambda_n \end{pmatrix} \begin{pmatrix} \mathbf{v}_1^\dagger \\ \mathbf{v}_2^\dagger \\ \vdots \\ \mathbf{v}_n^\dagger \end{pmatrix}</script><p>由矩阵乘法：</p><script type="math/tex; mode=display">M = \lambda_1 \mathbf{v}_1 \mathbf{v}_1^\dagger + \lambda_2 \mathbf{v}_2 \mathbf{v}_2^\dagger + \cdots + \lambda_n \mathbf{v}_n \mathbf{v}_n^\dagger</script><p>简写为：</p><script type="math/tex; mode=display">M = \sum_{i=1}^n \lambda_i \mathbf{v}_i \mathbf{v}_i^\dagger</script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;教材-PDF&quot;&gt;&lt;a href=&quot;#教材-PDF&quot; class=&quot;headerlink&quot; title=&quot;教材 PDF&quot;&gt;&lt;/a&gt;教材 PDF&lt;/h1&gt;&lt;p&gt;使用的教材是 Quantum Computation and Quantum Information (10</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://loveofpeach.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="量子计算" scheme="https://loveofpeach.github.io/tags/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计笔记</title>
    <link href="https://loveofpeach.github.io/posts/9e907e48.html"/>
    <id>https://loveofpeach.github.io/posts/9e907e48.html</id>
    <published>2024-07-29T16:37:26.000Z</published>
    <updated>2024-07-30T03:19:48.626Z</updated>
    
    <content type="html"><![CDATA[<p>欠的债，迟早是要还的。</p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><div class="row"><iframe src="https://drive.google.com/file/d/1AEBHpJU_MAPPvbQ-g--lK0Q5CrzoxBvd/preview" style="width:100%; height:550px"></iframe></div><blockquote><p>目录：</p><p>1 概率论的基本概念<br>3 概率的概念、古典概型和几何概型<br>6 条件概率、乘法定理、全概率公式、贝叶斯公式、事件的独立性<br>12 离散型随机变量及其分布律<br>15 随机变量的分布函数<br>16 连续型随机变量及概率密度<br>22 一维随机变量函数的分布<br>25 二维随机变量的相关概念<br>28 边缘分布和条件分布<br>31 相互独立的随机变量<br>34 多维随机变量函数的分布<br>41 数学期望、方差<br>52 协方差、相关系数<br>54 二维正态分布的性质<br>56 大数定律、中心极限定理<br>59 统计量的数字特征<br>62 抽样分布<br>68 点估计的方法<br>74 估计量的评选标准</p></blockquote><h1 id="区间估计和假设检验"><a href="#区间估计和假设检验" class="headerlink" title="区间估计和假设检验"></a>区间估计和假设检验</h1><p>未完待续。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欠的债，迟早是要还的。&lt;/p&gt;
&lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h1&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;https://dr</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="概率论" scheme="https://loveofpeach.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    <category term="数理统计" scheme="https://loveofpeach.github.io/tags/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>人工智能导论</title>
    <link href="https://loveofpeach.github.io/posts/6f3f8819.html"/>
    <id>https://loveofpeach.github.io/posts/6f3f8819.html</id>
    <published>2024-07-03T13:16:36.000Z</published>
    <updated>2024-08-21T11:05:00.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><div class="table-container"><table><thead><tr><th style="text-align:left">人工智能程序</th><th style="text-align:left">通常计算机程序</th></tr></thead><tbody><tr><td style="text-align:left">主要是<strong>符号</strong>处理</td><td style="text-align:left">主要是<strong>数字</strong>处理</td></tr><tr><td style="text-align:left"><strong>启发式搜索</strong></td><td style="text-align:left">依靠<strong>算法</strong></td></tr><tr><td style="text-align:left">控制结构和知识域<strong>相分</strong></td><td style="text-align:left">信息和控制联结在<strong>一起</strong></td></tr><tr><td style="text-align:left">易于修改、更新和改变</td><td style="text-align:left">难以修改</td></tr><tr><td style="text-align:left"><strong>允许不正确</strong>的答案</td><td style="text-align:left">要求<strong>正确的</strong>回答</td></tr><tr><td style="text-align:left">AI程序：<strong>干什么</strong></td><td style="text-align:left">传统程序：<strong>干些什么及如何干</strong></td></tr></tbody></table></div><p>AI 概览：</p><p><img src="https://s2.loli.net/2024/07/03/bV5jKDqWYnBHiZS.png" alt="80-1.png"></p><p>AI、机器学习、深度学习的关系：</p><p><img src="https://bu.dusays.com/2024/07/03/668542c0e08db.png" alt="80-2.png"></p><p><img src="https://s2.loli.net/2024/07/03/y4JTQjUlhdPKftY.png" alt="80-3.png"></p><p>三大学派：符号主义、连接主义、行为主义。</p><p><strong>符号主义（逻辑主义、心理学派、计算机学派）</strong></p><ul><li>原理：物理符号系统假设和有限合理性假设</li><li>起源：源于数理逻辑</li><li>基本思想<ul><li>人的认知基元是符号，智能和知识可用符号表示，认知过程即符号操作过程，擅长抽象思维。</li><li>人是一个物理符号系统，计算机也是一个物理符号系统，因此，能用计算机来模拟人的智能行为。</li><li>知识是信息的一种形式，是构成智能的基础。人工智能的核心问题是知识表示、知识推理。</li><li><img src="https://s2.loli.net/2024/07/03/g6Jr8otqR4DnTiE.png" alt="80-4.png"></li><li>启发式程序、专家系统、知识工程</li></ul></li></ul><p><strong>连接主义（生理学派）</strong></p><ul><li>原理：神经网络及神经网络间的连接机制和学习算法</li><li>起源：源于仿生学，特别是人脑模型的研究</li><li>基本思想<ul><li>认识的基本元素是神经元，认识过程是大量神经元的并行活动，擅长形象思维。</li><li>人脑不同于电脑，并提出连接主义的大脑工作模式，用于取代符号操作的电脑工作模式。</li><li><img src="https://s2.loli.net/2024/07/03/ZuGbtIgvWSicOxP.png" alt="80-5.png"></li></ul></li></ul><p><strong>行为主义（进化主义、控制论学派）</strong></p><ul><li>原理：控制论及感知-动作型控制系统</li><li>起源：源于控制论</li><li>基本思想<ul><li>智能取决于感知和行动，提出智能行为的“感知-动作”模式。</li><li>智能不需要知识、表示和推理；人工智能可以像人类智能一样逐步进化；智能行为只能在现实世界中与周围环境进行交互作用而表现出来。</li><li><img src="https://s2.loli.net/2024/07/03/Tmw8Loh2BAtVkRx.png" alt="80-6.png"></li></ul></li></ul><p><strong>三大学派比较</strong>：</p><p><img src="https://s2.loli.net/2024/07/03/ZOA5g7RtHN6QEM4.png" alt="80-7.png"></p><h1 id="搜索技术"><a href="#搜索技术" class="headerlink" title="搜索技术"></a>搜索技术</h1><h2 id="搜索问题"><a href="#搜索问题" class="headerlink" title="搜索问题"></a>搜索问题</h2><p>搜索方式的分类：</p><ul><li>回溯搜索</li><li>盲目搜索（深度优先、宽度优先）</li><li>启发式搜索（<code>A</code>算法→<code>A*</code>算法→<code>A*</code>算法的改进）</li></ul><p>传教士和野人问题：<br>问题可以转化为<strong>状态空间的搜索问题</strong>：</p><ul><li>用在河的左岸的传教士人数、野人人数和船的情况表示问题</li><li>初始状态用三元组表示为（3，3，1）</li><li>结束状态为（0，0，0）</li><li>中间状态为（2，2，0）、（3，2，1）、（3，0，0）…… 等，每个三元组对应了三维空间上的一个点</li></ul><p><strong>表示方法 — 状态空间表示法</strong></p><ul><li><strong>状态</strong>用来表示系统状态,事实等叙述型知识的一组变量或数组<br>$Q = [q_1, q_2, …, q_n]^t$</li><li><strong>操作</strong>是用来表示引起状态变化的过程型知识的一组关系或函数<br>$F:\{f_1, f_2, …, f_m\}$</li><li><strong>状态空间(State Space)</strong> 是利用状态变量和操作符号，表示系统或问题的有关知识的符号体系<br>四元组 $(S, O, S_0, G):$<br>$S$ 状态集合<br>$O$ 操作算子集合<br>$S_0$ 初始状态，$S_0 \subset S$<br>$G$ 目的状态，$G \subset S$，（可是若干具体状态，也可是满足某些性质的路径信息描述）<br><strong>从S0结点到G结点的路径被称为求解路径。</strong></li><li><strong>状态空间的一个解</strong>是一有限操作算子序列，它使初始状态转为目标状态<br>$S_0 \xrightarrow{O_1} S_1 \xrightarrow{O_2} S_2 \xrightarrow{O_3} \cdots \xrightarrow{O_k} G$<br>其中 O1，…，Ok 即为状态空间的一个解（解往往不是唯一的）</li></ul><p>如何在一个较大的问题空间中，只搜索较小的范围，就找到问题的解呢？</p><p>对于大空间问题，搜索策略要考虑组合爆炸的问题。</p><p><strong>盲目搜索</strong>，未利用问题的知识，采用固定的方式生成状态的方法。</p><p><strong>启发式搜索</strong>，利用问题的知识，缩小问题的搜索范围，选择那些最有可能在（最优）解路径上的状态优先搜索，以尽快地找到问题的（最优）解。</p><h2 id="回溯策略"><a href="#回溯策略" class="headerlink" title="回溯策略"></a>回溯策略</h2><p><strong>考虑一个经典问题：N 皇后。</strong></p><p>我们可以用 dfs 的方法寻找解，但是效率不高。有什么改进的思路吗？</p><ul><li>回溯有时不是上一步造成的，有可能是更早的那一步造成的——多步回溯</li><li>找到回溯的原因，在开始就避免回溯——需要引入一些相关信息</li><li>当然相关信息的引入不应造成搜索负担的巨大加重，否则得不偿失</li></ul><p><img src="https://s2.loli.net/2024/07/04/oNBmg2RPncKG9Xz.png" alt="80-8.png"></p><p>如此一来，相比于固定排序的搜索树（没有引入知识），动态排序的搜索树（引入知识）的回溯次数大大减少。</p><p>回溯搜索算法改进（？）：</p><ul><li>推广的回溯算法可应用于一般问题的求解，但这两个算法只描述了回溯一层的情况，即第 n 层递归调用失败，则控制退回到（n－1）层</li><li>深层搜索失败往往在于浅层原因，因此也可以利用启发信息，分析失败的原因，再回溯到合适的层次上，即<strong>多层回溯策略</strong>，目前已有一些系统使用了这种策略</li></ul><h2 id="图搜索策略"><a href="#图搜索策略" class="headerlink" title="图搜索策略"></a>图搜索策略</h2><p>问题的引出：</p><ul><li>回溯搜索：只保留从初始状态到当前状态的一条路径<ul><li>节省空间，但已搜索部分不能被以后使用</li></ul></li><li>图搜索：保留所有已经搜索过的路径<ul><li>搜索过的路径被保留</li><li>利用相关知识，可以进行启发式搜索</li></ul></li><li>图搜索策略是实现从一个隐含图中生成出一部分确实含有一个目标节点的显式表示子图的搜索过程</li></ul><p>略：一般的图搜索算法、dfs、bfs</p><h3 id="启发式图搜索"><a href="#启发式图搜索" class="headerlink" title="启发式图搜索"></a>启发式图搜索</h3><p>利用知识来引导搜索，减少搜索范围，降低问题复杂度。</p><p>启发信息的强度</p><ul><li>强：降低搜索量，但可能找不到最优解</li><li>弱：工作量较大，可能退化为盲目搜索，但找到最优解的概率相对较大</li></ul><h3 id="A-算法"><a href="#A-算法" class="headerlink" title="A* 算法"></a>A* 算法</h3><p>算法流程（如果链接挂了可在 archive.ph 中查看）：</p><p><a href="https://paul.pub/a-star-algorithm/">https://paul.pub/a-star-algorithm/</a></p><p>很多介绍 A* 的文章只是讲了 how ，而没有讲 why ，少数讲 why 的博主恐怕在一些细节上也和自己和解了。为此，找一下原始的论文是必要的：</p><div class="row"><iframe src="https://drive.google.com/file/d/1aRpKPbJ1qMwoRRWjSso47WKvTp5PKScE/preview" style="width:100%; height:550px"></iframe></div><p>很好论文，解决了我多年的疑惑：</p><ul><li>如果 h(n) 始终小于等于节点 n 到终点的代价，则 A* 算法保证一定能够找到最短路径。为什么？</li><li>另外一个小细节：f(n) 是单调不减的，这意味着一旦节点从优先队列中被移出并处理，它的最优路径已经被找到，因为任何从此节点出发的新路径不会比已经找到的路径更优。</li></ul><p>练习：</p><ul><li><a href="https://www.luogu.com.cn/problem/P5507">P5507 机关</a>：A*</li><li><a href="https://www.luogu.com.cn/problem/P2324">SCOI2005 骑士精神</a>：IDA*</li></ul><h2 id="与或图搜索问题"><a href="#与或图搜索问题" class="headerlink" title="与或图搜索问题"></a>与或图搜索问题</h2><div class="row"><iframe src="https://drive.google.com/file/d/1ZC5ytKk3EpBHKfzWS6vl2-mvyWvtw1pZ/preview" style="width:100%; height:550px"></iframe></div><blockquote><p>目录：<br>与或图搜索  2<br>博弈树搜索（MINI-MAX、α-β剪枝）  10<br>蒙特卡洛树搜索  25</p></blockquote><p>一些视频资料：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1AK411M7BB&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV14Z4y1A7J3&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1JD4y1Q7mV&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h1 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>选取知识表示的方法的因素</strong>：</p><ul><li>表示范围是否广泛<ul><li>要求表示内容范围广泛<ul><li>数理逻辑表示是一种广泛的知识表示办法，如果单纯用数字表示，则范围就有限</li></ul></li></ul></li><li>是否适于推理<ul><li>人工智能只能处理适合推理的知识表示<ul><li>数学模型适合推理，普通的数据库只能供浏览检索，但不适合推理</li></ul></li></ul></li><li>是否适于计算机处理<ul><li>计算机只能处理离散的、量化的字节流。用文字表述的知识和连续形式表示的知识（如微分方程）不适合计算机处理</li></ul></li><li>是否有高效的算法<ul><li>考虑到实用的性能，必须有高效的求解算法，知识表示才有意义</li></ul></li><li>能否表示不精确知识<ul><li>自然界的信息具有先天的模糊性和不精确性，能否表示不精确知识也是考虑的重要因素</li><li>许多知识表示方法往往要经过改造，如确定性方法、主观贝叶斯方法等对证据和规则引入了不确定性度量，就是为了表达不精确的知识</li></ul></li><li>能否模块化</li><li>知识和元知识能否用统一的形式表示<ul><li>知识和元知识是属于不同层次的知识，使用统一的表示方法可以使知识处理简单</li></ul></li><li><p>是否加入启发信息</p><ul><li>在已知的前提下，如何最快的推得所需的结论，以及如何才能推得最佳的结论，我们的认识往往是不精确的。因此，往往需要在元知识（控制知识）加入一些控制信息，也就是通常所说的启发信息</li></ul></li><li><p>过程性表示还是说明性表示</p><ul><li>说明性知识表示涉及细节少，抽象程度高，因此可靠性好，修改方便，但执行效率低</li><li>过程性知识表示的优缺点与说明性知识表示相反</li></ul></li><li>表示方法是否自然<ul><li>一般要尽量在表示方法的自然和使用效率之间取得平衡。例如，对于推理来说，PROLOG 比高级语言如 Visual C++ 自然，但显然牺牲了效率</li></ul></li></ul><p>同构与同态：</p><p><img src="https://bu.dusays.com/2024/07/17/6697d113cd9f8.png" alt="80-9.png"></p><p><strong>表示观</strong>是对于“什么是表示”这一基本问题的不同理解和采用的方法论，即指导知识表示的思想观点称为表示观。</p><p>人工智能领域关于知识表示的观点的<strong>争论焦点</strong>是常识的处理、表示与推理的关系等问题。</p><p><strong>认识论表示观</strong>：认为表示是对自然世界的表述，表示自身不显示任何智能行为。其唯一的作用就是携带知识。这意味着表示可以独立于启发式来研究。</p><p><strong>本体论（D.Lenta提出）</strong>：认为表示是对自然世界的一种近似，它规定了看待自然世界的方式。即一个约定的集合。表示只是描述了关心的一部分，逼真是不可能的。本体论主要解决的问题是：</p><ul><li>表示需对世界的某个部分给与特别的注意（聚集），而对世界的另外部分衰减，以求达到有效求解。</li><li>对世界可以采用不同的方式来记述。注重的不是“其语言形式，而是其内容”。此内容不是某些特定领域的特殊的专家知识，而是自然世界中那些具有普通意义的一般知识。</li><li>计算效率无疑是表示的核心问题之一。即有效地知识组织及与领域有关的启发式知识是其提高计算效率的手段。</li><li>推理是表示观中不可缺少的一部分。表示研究应与启发式搜索联系起来。认为不考虑推理的纯粹表示是不存在的。</li></ul><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><h3 id="逻辑表示法"><a href="#逻辑表示法" class="headerlink" title="逻辑表示法"></a>逻辑表示法</h3><p>逻辑表示法的例子：</p><p><img src="https://bu.dusays.com/2024/07/21/669cc5b6232ef.png" alt="80-10.png"></p><p>图片示例：</p><p><img src="https://s2.loli.net/2024/07/21/KNMO48VQH3RLUqp.png" alt="80-11.png"></p><h3 id="产生式规则表示法"><a href="#产生式规则表示法" class="headerlink" title="产生式规则表示法"></a>产生式规则表示法</h3><div class="row"><iframe src="https://drive.google.com/file/d/1RgISIhsiBYFPGJIB6gGe1riGEGX0BV5W/preview" style="width:100%; height:550px"></iframe></div><h3 id="语义网络表示法"><a href="#语义网络表示法" class="headerlink" title="语义网络表示法"></a>语义网络表示法</h3><p>语义网络表示法和产生式表示法及谓词逻辑表示法之间有着对应的表示能力。</p><p>表示形式：</p><ul><li>谓词逻辑表示法，Relation（Object1，Object2）</li><li>语义网络表示法为（Object1，Relation，Object2）</li><li>语义网络中连接弧上的语义关系对应于逻辑表示法中的谓词关系</li></ul><p>一些例子：</p><p><img src="https://s2.loli.net/2024/07/21/g8rQ3GCadWH7xj4.png" alt="80-12.png"></p><p>语义网络推理，<strong>相应的推理方法还不完善。</strong> 语义网络的推理过程主要有两种：</p><ul><li>继承</li><li>匹配</li></ul><h3 id="框架表示法"><a href="#框架表示法" class="headerlink" title="框架表示法"></a>框架表示法</h3><p>省流：刻板印象、模板、…</p><p><img src="https://s2.loli.net/2024/07/21/lIEq4viYLdzSuHJ.png" alt="80-13.png"></p><h3 id="脚本表示法"><a href="#脚本表示法" class="headerlink" title="脚本表示法"></a>脚本表示法</h3><p>脚本表示法是框架的特殊形式。</p><p>例子，医院的脚本：</p><blockquote><p><strong>开场条件：</strong></p><ol><li>病人有病。</li><li>病人的病需要找医生诊治。</li><li>病人有钱。</li><li>病人能够去医院。</li></ol><p><strong>角色：</strong> 病人、医生、护士。</p><p><strong>道具：</strong> 医院、挂号室、椅子、桌子、药方、药房、钱、药。</p><p><strong>场景：</strong><br>场景1 进入医院<br>（1）  人走进医院<br>（2）  病人挂号<br>（3）  病人在椅子上坐下等待看病<br>场景2  看病<br>（1）  病人进入医生的办公室<br>（2）  病人向医生所说病状<br>（3）  医生向病人解释病情<br>（4）  医生给病人开药方<br>场景3  交费<br>（1）  病人到交费处<br>（2）  病人递交药方<br>（3）  病人交钱<br>（4）  病人取回药方及收据<br>场景4  取药<br>（1）  病人到药房<br>（2）  病人递交药方<br>（3）  病人取药<br>场景5 离开<br>（1）  病人离开医院</p><p><strong>结果：</strong><br>1．病人看病了，明白了自己的病是怎么回事<br>2．病人花了钱，买了药<br>3．医生付出了劳动<br>4．医院的药品少了</p></blockquote><p>特点：</p><ul><li>比语义网络、框架等呆板</li><li>知识表达范围很窄</li><li>不适用于表达各种知识，但对实现构思好的特定知识非常有效</li></ul><h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p>什么是知识图谱？</p><ul><li>知识图谱是 Google 用于增强其搜索引擎功能的知识库（Google 知识图谱，5 亿对象，35 亿事实关系）。</li><li>从学术的角度，<strong>“知识图谱本质上是语义网络（Semantic Network）的知识库”</strong>。</li><li>从实际应用的角度出发，可以简单地把知识图谱理解成<strong>多关系图（Multi-relational Graph）</strong>。<ul><li>多关系图一般包含多种类型的节点和多种类型的边</li><li>节点：概念、实体</li><li>边：关系</li></ul></li></ul><p>知识图谱旨在以结构化的形式描述客观世界中存在的概念、实体及其间的复杂关系。</p><ul><li>概念：对客观事物的概念化表示，如人、动物、组织机构</li><li>实体：客观世界中的具体事务，画家达芬奇、作品蒙娜丽莎</li><li>关系：描述概念、实体之间客观存在的关联</li></ul><p>一些具体表现：</p><ul><li>传统搜索引擎会返回包含用户搜索关键词的页面</li><li>知识图谱会返回<strong>知识卡片（Knowledge card）</strong>，为用户查询或返回答案中所包含的概念或实体提供详细的结构化摘要<br><img src="https://s2.loli.net/2024/07/22/Mo3g2fP75uBQYZy.png" alt="80-14.png"></li></ul><p>知识图谱经历了由人工和群体智慧构建，到面向互联网利用机器学习和信息抽取技术自动获取的过程。</p><p>维基百科是利用群体智能建立的互联网上至今最大的知识资源。</p><p>知识图谱的应用：</p><p><img src="https://s2.loli.net/2024/07/22/QHdFvaNWloMiDT1.png" alt="80-15.png"></p><h1 id="逻辑推理"><a href="#逻辑推理" class="headerlink" title="逻辑推理"></a>逻辑推理</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><strong>演绎推理：</strong></p><ul><li>从全称判断推出特称判断或单称判断的过程，即从一般到个别的推理</li><li>演绎推理中最常用的形式是<strong>三段论</strong>法（大前提、小前提、结论）</li><li>例如：<ul><li>所有的推理系统都是智能系统——一般的知识</li><li>专家系统是推理系统——个体的判断</li><li>所以，专家系统是智能系统——新判断    </li></ul></li><li>演绎推理没有增加新的知识</li></ul><p><strong>归纳推理：</strong></p><ul><li>从足够多的事例中归纳出一般性结论的推理过程，是一种<strong>从个别到一般的推理过程</strong></li><li>常用的归纳推理有<strong>简单枚举法</strong>和<strong>类比法</strong><ul><li><strong>枚举法归纳推理</strong>是由已观察到的事物都有某属性，而没有观察到相反的事例，从而推出某类事物都有某属性，推理过程为：<ul><li>S1 是 P，S2 是 P，…，Sn 是 P，<br>（S1,S2, …,Sn 是 S 类中的个别事物，在枚举中兼容）<br>  推出 S 都是  P </li></ul></li><li>枚举法归纳推理分<strong>完全归纳推理</strong>与<strong>不完全归纳推理</strong>。完全归纳推理是必然性推理，不完全推理得出的结论不具有必然性。</li><li>在两个或两类事物在许多属性上都相同的基础上，推出它们在其它属性上也相同，是<strong>类比法归纳推理</strong>。</li><li>类比法归纳可形式化地表示为：<br>A 具有属性a,b,c,d,e；B 具有属性a,b,c,d；推出 B 也具有属性e 。</li><li>类比法的可靠程度决定于两个或两类事物的相同属性与推出的那个属性之间的相关程度，相关程度越高，则类比法的可靠性就越高</li></ul></li><li>归纳推理增加了知识（在机器学习部分称为归纳学习）</li></ul><p><strong>默认推理</strong></p><ul><li>又称<strong>缺省推理</strong>，是在知识不完全的情况下假设某些条件已经具备，所进行的推理。</li><li>如：在条件A已成立的情况下，如果没有足够的证据能证明条件B不成立，则就默认B是成立的，并在此默认的前提下进行推理，推导出某个结论。</li><li>如果到某一时刻发现原先所作的默认不正确，则要撤消所作的默认以及由此默认推出的所有结论，重新按新情况进行推理。</li></ul><h2 id="归结原理"><a href="#归结原理" class="headerlink" title="归结原理"></a>归结原理</h2><p>Robinson 的归结原理使得自动定理证明得以实现。归结推理方法是机器定理证明的主要方法。</p><div class="row"><iframe src="https://drive.google.com/file/d/1VsMFwZ5a0ZdOAVsMRdMRaB0GNQqeVdRM/preview" style="width:100%; height:550px"></iframe></div><blockquote><p><strong>目录</strong><br>1 命题逻辑的归结法<br>10 谓词逻辑归结基础（SKolem标准型、子句集）<br>30 归结原理（置换、归结式、“快乐学生”问题）<br>50 归结过程的控制策略（删除、支撑集、语义、线性、单元、输入）</p></blockquote><h1 id="不确定性推理"><a href="#不确定性推理" class="headerlink" title="不确定性推理"></a>不确定性推理</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>不确定性包括<strong>证据</strong>的不确定性和<strong>知识</strong>的不确定性。</p><p>证据通常有两类：<strong>初始事实</strong>、推理过程中产生的<strong>中间结果</strong>。</p><p>证据的不确定性用 C(E) 表示。</p><p>在规则中，E 是规则的前提即证据，H 是该规则的结论，也可以是其它规则的证据。</p><ul><li>规则的不确定性：用一个数值 f(E，H) 表示，称为<strong>规则强度</strong>。</li></ul><p>在不精确推理中，由于知识和证据都具有不确定性，而且知识所要求的不确定性程度与证据实际具有的不确定性程度不一定相同，因而就出现了“怎样才算匹配成功？”的问题。</p><p>可以设计一个算法用来计算匹配双方<strong>相似的程度</strong>，另外再指定一个<strong>相似的限度</strong>，用来衡量匹配双方相似的程度是否落在指定的限度内。</p><p><strong>不确定性的更新和传播：</strong><br>在推理过程中如何考虑知识不确定性的动态积累和传递？</p><p>推理树：</p><p><img src="https://s2.loli.net/2024/07/23/wHcWI12nh9aN3gR.png" alt="80-16.png"></p><h2 id="确定性方法（可信度方法）"><a href="#确定性方法（可信度方法）" class="headerlink" title="确定性方法（可信度方法）"></a>确定性方法（可信度方法）</h2><p>MYCIN 系统研制过程中产生的不确定推理方法（然而这个名字有点误导性）。</p><p>规则 A→B，其可信度 CF(B,A)，有 -1 ≤ CF(B, A) ≤ 1</p><script type="math/tex; mode=display">CF(B,A)=\begin{cases} \frac{P(B|A)-P(B)}{1-P(B)},  & \text{if }P(B|A) \ge P(B) \\\frac{P(B|A)-P(B)}{P(B)}, & \text{if } P(B|A) \lt P(B)\end{cases}</script><p>CF(B, A)表示的意义：证据为真时</p><ul><li>相对于 P(～B) = 1 - P(B) 来说，A 对 B 为真的支持程度。即 A 发生更支持 B 发生，此时 CF(B, A) ≥ 0</li><li>相对于 P(B) 来说，A 对 B 为真的不支持程度。即 A 发生不支持 B 发生，此时 CF(B, A) &lt; 0 </li></ul><p>CF(B, A)的特殊值：</p><ul><li>CF(B, A) = 1，前提真，结论必真</li><li>CF(B, A) = -1，前提真，结论必假</li><li>CF(B, A) = 0 ，前提真假与结论无关</li></ul><p><strong>实际应用中 CF(B, A) 的值由专家确定，并不是由P(B|A), P(B)计算得到的。</strong></p><p>证据 A 的可信度表示为 CF(A)，-1 ≤ CF( A) ≤ 1 .</p><p>特殊值：</p><ul><li>CF(A) = 1，    前提肯定真</li><li>CF(A) = -1，   前提肯定假</li><li>CF(A) = 0，       对前提一无所知</li><li>CF(A) ＞ 0， 表示A以CF(A)程度为真</li><li>CF(A) ＜ 0， 表示A以CF(A)程度为假</li></ul><p>实际使用时：</p><ul><li><strong>初始证据</strong>的 CF 值由专家根据经验提供</li><li><strong>其它证据</strong>的 CF 通过规则进行推理计算得到</li></ul><p><strong>“与”的计算</strong>：     A1 ∧ A2 →B<br>CF(A1 ∧ A2) = min { CF(A1), CF(A2) }</p><p><strong>“或”的计算</strong>：    A1 ∨ A2 →B<br>CF(A1 ∨ A2) = max { CF(A1), CF(A2) } </p><p><strong>“非”的计算：</strong><br>CF(～A) = -CF(A) </p><p><strong>由 A，A →B，求 B</strong>：<br>CF(B) = max{ 0, CF(A) } · CF(B,A)<br>（ CF(A) ＜ 0 时可以不算，即为“0”）</p><p><strong>合成</strong>：由 $CF_1(B)$、$CF_2(B)$，求 CF(B) </p><script type="math/tex; mode=display">CF(B) = \begin{cases} CF_1(B)+CF_2(B)-CF_1(B)CF_2(B),  & CF_1(B) \ge 0, CF_2(B) \ge 0\\CF_1(B)+CF_2(B)+CF_1(B)CF_2(B), & CF_1(B) \lt 0, CF_2(B) \lt 0\\CF_1(B)+CF_2(B), & CF_1(B)CF_2(B) \lt 0\end{cases}</script><p>注意：以上公式<strong>不满足组合交换性</strong>，即：计算结果与各条规则采用的先后顺序有关。</p><p>MYCIN 规定证据的<strong>可信度 CF(A)&lt;0.2 时，就认为该证据引入的规则不可使用。</strong></p><p>EMYCIN 系统（MYCIN 发展而成）对 CF1(B) 和 CF2(B) 符号不同时，进行了修正： </p><script type="math/tex; mode=display">CF(B) = \begin{cases} CF_1(B)+CF_2(B)-CF_1(B)CF_2(B),  & CF_1(B) \ge 0, CF_2(B) \ge 0\\CF_1(B)+CF_2(B)+CF_1(B)CF_2(B), & CF_1(B) \lt 0, CF_2(B) \lt 0\\\frac{CF_1(B)+CF_2(B)}{1-\text{min}\{|CF_1(B)|, |CF_2(B)| \}} , & CF_1(B)CF_2(B) \lt 0\end{cases}</script><p><strong>结论更新：</strong><br>已经有一个先验的结论可信度，如何由规则更新这个可信度？</p><p>结论更新的三种情况：<br><img src="https://s2.loli.net/2024/07/31/kzcJFGyiX87eAs2.png" alt="80-17.png"></p><h2 id="主观-Bayes"><a href="#主观-Bayes" class="headerlink" title="主观 Bayes"></a>主观 Bayes</h2><p>该方法首先应用于地矿勘探系统 PROSPECTOR 中。</p><p>在这种方法中，引入了两个数值 <strong>（LS,LN）</strong> ：</p><ul><li>前者体现规则成立的充分性，后者则表现了规则成立的必要性</li><li>LS 表征的是 A 的发生对 B 发生的影响程度</li><li>LN 表征的是 A 的不发生对 B 发生的影响程度</li><li><strong>实际应用中，采用专家给定的 LS, LN 值</strong></li></ul><h3 id="证据的不确定性"><a href="#证据的不确定性" class="headerlink" title="证据的不确定性"></a>证据的不确定性</h3><p>几率函数 O(A) 表示证据 A 的不确定性：</p><script type="math/tex; mode=display">O(A) = \frac{P(A)}{1-P(A)} = \begin{cases} 0  & \text{A is false} \\\infty  & \text{A is true} \\(0,\infty) & \text{uncertain}\end{cases}</script><p>几率函数与概率函数形式不同，但是变化相同：<strong>当A为真的程度越大（P(A)越大），几率函数的值也越大。</strong></p><p>在推理过程中需要概率函数值时，可用等式：</p><script type="math/tex; mode=display">P(A) = \frac{O(A)}{1+O(A)}</script><p>特殊值：</p><ul><li>P(X) = 0, O(X) = 0</li><li>P(X) = 0.5, O(X) = 1</li><li>P(X) = 1, O(X) = inf</li></ul><h3 id="规则的不确定性"><a href="#规则的不确定性" class="headerlink" title="规则的不确定性"></a>规则的不确定性</h3><p>规则：A→B</p><script type="math/tex; mode=display">P(B|A) = \frac{P(A|B)P(B)}{P(A)}</script><script type="math/tex; mode=display">P(\lnot B|A) = \frac{P(A|\lnot B)P(\lnot B)}{P(A)}</script><p>两式相除：</p><script type="math/tex; mode=display">\frac{P(B|A)}{P(\lnot B|A)} = \frac{P(A|B)P(B)}{P(A|\lnot B)P(\lnot B)}</script><p>记：</p><script type="math/tex; mode=display">\frac{P(A|B)}{P(A|\lnot B)} = LS</script><p>又因为：</p><script type="math/tex; mode=display">O(B) = \frac{P(B)}{P(\lnot B)} \qquad O(B|A) = \frac{P(B|A)}{P(\lnot B|A)}</script><p>整理得：</p><script type="math/tex; mode=display">O(B|A) = LS \cdot O(B)</script><p><strong>LS 的含义</strong>：</p><ul><li>LS 表示 A 真对 B 的影响程度</li><li>LS = ∞ 时，P(~B|A)=0，P(B|A)=1</li><li>说明 A 对于 B 是逻辑充分的，即规则成立是充分的</li><li>LS 称作<strong>充分似然率因子</strong></li></ul><script type="math/tex; mode=display">LS = \frac{O(B|A)}{O(B)} = \frac{P(B|A)/P(\lnot B|A)}{P(B)/P(\lnot B)}</script><p>LS 表示 A 存在对 B 发生的影响度：</p><ul><li>LS = 1，O(B|A) = O(B)，A 对 B 无影响</li><li>LS &gt; 1，O(B|A) &gt; O(B)，A 支持 B</li><li>LS &lt; 1，O(B|A) &lt; O(B)，A 不支持 B</li></ul><p>由类似的推导过程：</p><script type="math/tex; mode=display">P(B|\lnot A) = \frac{P(\lnot A|B)P(B)}{P(\lnot A)}</script><script type="math/tex; mode=display">P(\lnot B|\lnot A) = \frac{P(\lnot A|\lnot B)P(\lnot B)}{P(\lnot A)}</script><p>两式相除：</p><script type="math/tex; mode=display">\frac{P(B|\lnot A)}{P(\lnot B| \lnot A)} = \frac{P(\lnot A|B)P(B)}{P(\lnot A| \lnot B)P(\lnot B)}</script><p>记：</p><script type="math/tex; mode=display">\frac{P(\lnot A|B)}{P(\lnot A| \lnot B)} = LN</script><p>又因为：</p><script type="math/tex; mode=display">O(B) = \frac{P(B)}{P(\lnot B)} \qquad O(B|\lnot A) = \frac{P(B|\lnot A)}{P(\lnot B|\lnot A)}</script><p>整理得：</p><script type="math/tex; mode=display">O(B|\lnot A) = LN \cdot O(B)</script><p>LN 的含义：</p><ul><li>LN 表示 A 假(即不存在)对 B 的影响程度</li><li>LN = 0 时，P(B|~A)=0</li><li>说明 A 对于 B 是逻辑必要的，即规则成立是必要性</li><li>LN 称作<strong>必要似然率因子</strong></li></ul><script type="math/tex; mode=display">LN = \frac{O(B|\lnot A)}{O(B)} = \frac{P(B|\lnot A)/P(\lnot B|\lnot A)}{P(B)/P(\lnot B)}</script><p>LN 表示 A 不存在对 B 发生的影响度：</p><ul><li>LN = 1，O(B|~A) = O(B)，~A对B无影响</li><li>LN &gt; 1，O(B|~A) &gt; O(B)，~A支持B</li><li>LN &lt; 1，O(B|~A) &lt; O(B)，~A不支持B</li></ul><p>LS、LN 的关系：<br><strong>LN≥0，LS≥0，且 LN 和 LS 彼此不独立。</strong></p><p>简单的验证：</p><script type="math/tex; mode=display">LS = \frac{P(A|B)}{P(A|\lnot B)}\qquad LN = \frac{P(\lnot A|B)}{P(\lnot A| \lnot B)}</script><p>当 LS &gt; 1 时：</p><script type="math/tex; mode=display">P(A|B)>P(A|\lnot B)</script><p>故有：</p><script type="math/tex; mode=display">LN = \frac{1-P(A|B)}{1-P(A|\lnot B)}<1</script><p>事实上，LS 和 LN 必处于下面三种情况之一：</p><ul><li>LS &gt; 1, LN &lt; 1</li><li>LS &lt; 1, LN &gt; 1</li><li>LS = LN = 1</li></ul><p><img src="https://s2.loli.net/2024/07/31/RVHhLNKy2jWSnsB.png" alt="80-18.png"></p><p>LS、LN 的示例：</p><blockquote><p>“如果有石英矿，则必有钾矿带”。<br>LS=300, LN=0.2</p><p>这意味着：<br>发现石英矿，对判断发现钾矿带非常有利。而没有发现石英矿，并不暗示一定没有钾矿带。如果 LN &lt;&lt; 1，则没有发现石英矿时，强烈暗示钾矿带不存在。</p></blockquote><h3 id="推理计算"><a href="#推理计算" class="headerlink" title="推理计算"></a>推理计算</h3><p>给定先验几率、规则 LS 和 LN，怎样计算后验几率呢？</p><p><strong>1）</strong> A 必出现或必不出现时，即 P(A)=1 或 P(A)=0 时</p><script type="math/tex; mode=display">O(B|A) = LS \cdot O(B)</script><script type="math/tex; mode=display">O(B|\lnot A) = LN \cdot O(B)</script><p><strong>2）</strong> A 不是必出现或必不出现时，即 P(A)≠1 且 P(A)≠0 时</p><p><img src="https://s2.loli.net/2024/08/01/wxhtucPaoHR8ZJG.png" alt="80-19.png"></p><p>由全概率公式推得：</p><script type="math/tex; mode=display">P(B|A') = P(B|A)P(A|A')+P(B|\lnot A)P(\lnot A|A')</script><p>对于上面的式子，先考虑三种特殊情况：</p><p><strong>『1』</strong> P(A|A’) = 1 时（证据 A’ 出现，证据 A 必然出现）</p><script type="math/tex; mode=display">\begin{aligned}P(B|A') & = P(B|A) \\        & = \frac{P(B|A)}{P(B|A)+P(\lnot B|A)} \\        & = \frac{P(B|A)P(A)}{P(B|A)P(A)+P(\lnot B|A)P(A)} \\        & = \frac{P(AB)}{P(AB)+P(\lnot BA)} \\        & = \frac{P(AB)}{P(AB)+P(A|\lnot B)(1-P(B))} \\        & = \frac{P(A|B)P(B)/P(A|\lnot B)}{P(A|B)P(B)/P(A|\lnot B)+1-P(B)} \\        & = \frac{LS \cdot P(B)}{(LS-1) \cdot P(B)+1}\end{aligned}</script><p><strong>『2』</strong> P(A|A’) = 0 时（证据 A’ 出现，证据 A 必然不出现）</p><p>类似地可以得到：</p><script type="math/tex; mode=display">P(B|A') = P(B|\lnot A) = \frac{LN \cdot P(B)}{(LN-1) \cdot P(B)+1}</script><p><strong>『3』</strong> P(A|A’) = P(A) 时</p><p>显然有：</p><script type="math/tex; mode=display">P(B| A') = P(B)</script><p><strong>综上『』</strong>，得到以下特殊值：</p><script type="math/tex; mode=display">P(B| A') = \begin{cases}\frac{LS \cdot P(B)}{(LS-1) \cdot P(B)+1}, & \text {P(A|A')=1} \\\frac{LN \cdot P(B)}{(LN-1) \cdot P(B)+1}, &\text{P(A|A')=0} \\P(B), &\text{P(A|A')=P(A)}\end{cases}</script><p>在其他位置，使用插值计算：</p><p><img src="https://s2.loli.net/2024/08/01/mIjMNJxkBdnXUEq.png" alt="80-20.png"></p><p>证据的组合、结论的合成：</p><p><img src="https://s2.loli.net/2024/08/01/m4RlxZNfeK8BwhA.png" alt="80-21.png"></p><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>机器学习就是让机器（计算机）来模拟和实现人类的学习功能。</p><p>基本术语和概念：</p><ul><li><strong>数据集、训练集、测试集</strong><br><img src="https://s2.loli.net/2024/08/05/5o1MeumFAfdh7W4.png" alt="80-22.png"></li><li><strong>泛化能力、误差（训练误差、泛化误差）、欠拟合、过拟合</strong><ul><li>泛化能力好：对于新的未知数据，也能很好地预测结果。</li><li>过拟合：模型可以非常完美地拟合现有数据，但是对于新的数据，拟合效果不好。</li></ul></li><li>常见的机器学习任务<ul><li>分类</li><li>回归：线性回归、逻辑回归</li></ul></li><li>混淆矩阵<br><img src="https://s2.loli.net/2024/08/05/seyDVPGltc83pFg.png" alt="80-23.png"></li></ul><p>机器学习按<strong>是否有指导</strong>进行分类：</p><ul><li>监督学习</li><li>无监督学习</li><li>半监督学习</li><li>强化学习</li></ul><p><img src="https://s2.loli.net/2024/08/06/l2sJZhnWqjzkQVE.png" alt="80-24.png"></p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>长这样：</p><p><img src="https://s2.loli.net/2024/08/06/jGxvRt9JeYuNOHb.png" alt="80-25.png"></p><p>决策树学习的过程实际上是在构造决策树。<br>学习前提是必须有一组训练实例。<br>学习结果是根据训练实例构造的决策树。<br>学习完成后，就可以利用这棵决策树对未知事物进行分类。</p><p>可以利用多种算法构造决策树：</p><ul><li><code>ID 3</code></li><li><code>C4.5</code></li><li><code>CART</code></li><li><code>CHAID</code> </li></ul><p>ID3 算法是昆兰（J.R.Quinlan）于 1979 年提出的一种以<strong>信息熵的下降速度</strong>作为属性选择标准的一种学习算法。其输入是一个用来描述各种已知类别的例子集，学习结果是一棵用于进行分类的决策树。</p><p><strong>信息熵（information entropy）</strong>，是对信息源整体不确定性的度量。</p><p>The core idea of information theory is that the “informational value” of a communicated message depends on the degree to which the content of the message is surprising. If a highly likely event occurs, the message carries very little information. On the other hand, if a highly unlikely event occurs, the message is much more informative. For instance, the knowledge that some particular number will not be the winning number of a lottery provides very little information, because any particular chosen number will almost certainly not win. However, knowledge that a particular number will win a lottery has high informational value because it communicates the occurrence of a very low probability event.</p><p>The information content, also called the <i>surprisal</i> or <i>self-information</i>, of an event $E$ is a function which increases as the probability $p(E)$ of an event decreases. When $p(E)$ is close to 1, the surprisal of the event is low, but if $p(E)$ is close to 0, the surprisal of the event is high. This relationship is described by the function :</p><script type="math/tex; mode=display">\log (\frac{1}{P(E)})</script><p>Hence, we can define the information, or surprisal, of an event $E$ by :</p><script type="math/tex; mode=display">I(E)=−\log _2(p(E))</script><p>依据 Boltzmann’s H-theorem，香农把随机变量 X 的熵值 $\text{H}$（希腊字母Eta）定义如下：</p><script type="math/tex; mode=display">\text{H} (X) = E[I(X)] = E[-\log p(X)]</script><p>其中 E 为期望函数。</p><p>当取自有限的样本时，熵的公式可以表示为：</p><script type="math/tex; mode=display">\text{H} (X) = - \sum_{i} P(x_i)\log _b P(x_i)</script><p>当 b = 2 时，熵的单位是 bit .</p><p><strong>加权信息熵</strong>：<br>根据某种方法对样本 S 作一个划分：</p><script type="math/tex; mode=display">S_1, S_2, \cdots , S_r</script><p>则划分后的加权信息熵为：</p><script type="math/tex; mode=display">\sum _{t=1}^r \frac{|S_t|}{|S|} \text{H} (S_t)</script><p>假设 S 中的样本有 m 个属性，其属性集为 X={x1, x2,…,xm}，每个属性 xi 都有不同的取值（xi 取值的个数有 ri 种），根据这个 xi 的取值对样本 S 作划分，则可以记为：</p><script type="math/tex; mode=display">\text{H} (S, x_i) = \sum _{t=1}^{r_i} \frac{|S_t|}{|S|} \text{H} (S_t)</script><p>其中 $S_t$ 为 $x_i = t$ 时的样本子集。</p><p>选取不同的属性进行划分，$\text{H} (S, x_i)$ 的值可能不同。记</p><script type="math/tex; mode=display">G(S, x_i) = \text{H} (S) - \text{H} (S, x_i)</script><p>称为<strong>信息增益（information gain）</strong>。</p><p>ID3 算法的学习过程，实际上是一个以整个样本集为根节点，以信息增益最大为原则，选择条件属性进行扩展，逐步构造出决策树的过程。</p><p>一个粗略但简单的理解：寻找一个最优的划分。</p><p>例子：</p><p><img src="https://s2.loli.net/2024/08/10/8GUDRfLJKbsIn2e.png" alt="80-26.png"></p><h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><p>遗传算法（GA）模拟自然界优胜劣汰的进化现象，把搜索空间映射为遗传空间，把可能的解编码成一个向量——染色体，向量的每个元素称为基因。 通过不断计算各染色体的适应值，选择最好的染色体，获得最优解。</p><p><img src="https://s2.loli.net/2024/08/21/ewz1HWJra4huK8f.png" alt="80-27.png"></p><p>例子：</p><p><img src="https://bu.dusays.com/2024/08/21/66c5b6262dd53.png" alt="80-28.png"></p><p>交叉、变异：</p><p><img src="https://s2.loli.net/2024/08/21/bNopUsOPtXEhrRn.png" alt="80-29.png"></p><p>遗传算法可用于 TSP 问题，具体细节略。</p><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><p>支持向量机（support vector machine，SVM）是一个二分类模型，它的基本模型是定义在特征空间上的间隔最大的线性分类器。SVM还包括核技巧，这使它成为本质上的非线性分类器。支持向量机的学习算法是求解凸二次优化的最优化算法。</p><p><img src="https://s2.loli.net/2024/08/21/Rf18v9mY4leLoit.png" alt="80-30.png"></p><p>K 最近邻（K-Nearest Neighbor，KNN）分类算法的思路是：如果一个样本在特征空间中的 K 个最相似（即特征空间中最邻近）的样本中的大多数属于某一个类别，则该样本也属于这个类别。</p><p><img src="https://s2.loli.net/2024/08/21/9yFbAOjewurDEzp.webp" alt="80-31.png"></p><h2 id="超参数、验证集"><a href="#超参数、验证集" class="headerlink" title="超参数、验证集"></a>超参数、验证集</h2><p>学习模型中一般有两种参数，一种参数是可以从学习中得到，还有一种无法数据里面得到，只能靠人的经验来设定，这类参数就叫做<strong>超参数</strong>。</p><p>模型超参数举例：</p><ul><li>神经网络的学习速率、迭代次数、批次大小、激活函数、神经元的数量</li><li>支持向量机的 C 和 σ</li><li>K 近邻中的 K</li></ul><p>超参数搜索的一般过程：</p><ul><li>将数据集分成训练集、验证集、测试集。</li><li>在训练集上根据模型的性能指标对模型参数进行优化。</li><li>在验证集上根据模型的性能指标对模型超参数进行搜索。</li><li>在步骤2和步骤3交替迭代进行，最终确定模型的参数和超参数，并在测试集中评价模型的优劣。</li></ul><p>超参数搜索算法：网格搜索、随机搜素、智能搜素、…</p><p>交叉验证：用来验证分类器的性能的一种统计分析方法，基本思想是把在某种意义下将原始数据进行分组，一部分作为训练集，另一部分作为验证集，首先用训练集对分类器进行训练，再利用验证集来测试训练得到的模型，以此作为评价分类器的性能指标。</p><p>k-折交叉验证（K-CV）：</p><ul><li>将原始数据分成k组（一般是均分）。</li><li>将每个子集数据分别做一次验证集，其余的k-1组子集数据作为训练集，这样会得到k个模型。</li><li>用这k个模型最终的验证集的分类准确率的平均数作为此K-CV下分类器的性能指标。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:</summary>
      
    
    
    
    <category term="算法" scheme="https://loveofpeach.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AI" scheme="https://loveofpeach.github.io/tags/AI/"/>
    
    <category term="A*" scheme="https://loveofpeach.github.io/tags/A/"/>
    
    <category term="蒙特卡洛树" scheme="https://loveofpeach.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91/"/>
    
    <category term="α-β剪枝" scheme="https://loveofpeach.github.io/tags/%CE%B1-%CE%B2%E5%89%AA%E6%9E%9D/"/>
    
    <category term="主观贝叶斯" scheme="https://loveofpeach.github.io/tags/%E4%B8%BB%E8%A7%82%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
    <category term="机器学习" scheme="https://loveofpeach.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="决策树" scheme="https://loveofpeach.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
    <category term="信息论" scheme="https://loveofpeach.github.io/tags/%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
    <category term="遗传算法" scheme="https://loveofpeach.github.io/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term="SVM" scheme="https://loveofpeach.github.io/tags/SVM/"/>
    
    <category term="KNN" scheme="https://loveofpeach.github.io/tags/KNN/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 23</title>
    <link href="https://loveofpeach.github.io/posts/7d04e5a3.html"/>
    <id>https://loveofpeach.github.io/posts/7d04e5a3.html</id>
    <published>2024-07-01T09:42:28.000Z</published>
    <updated>2024-08-13T08:48:58.856Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个拖了很久的读书笔记，简记一下 23 年的读过的两本书。</p><p>感谢 OCR 技术。</p><p>一本是《都柏林人》，另一本是《小径分岔的花园》。</p><h2 id="都柏林人"><a href="#都柏林人" class="headerlink" title="都柏林人"></a>都柏林人</h2><p>有印象的就只有几篇而已。</p><h3 id="阿拉比"><a href="#阿拉比" class="headerlink" title="阿拉比"></a>阿拉比</h3><p>这篇文章写了一个小男孩的初恋，但是没几天他就大失所望，然后觉得非常可耻。</p><blockquote><p>甚至在最不适宜浪漫的地方，她的形象也陪伴着我。星期六晚上，我姑妈到市场去的时候，我不得不替她去拿些东西。我们走过灯光闪耀的大街，被醉汉和讨价还价的妇女们挤来挤去，街上熙熙攘攘，劳工们咒骂，守立在猪头肉桶旁边的店伙计尖声吆喝，街头卖唱的人用带鼻音的腔调唱着关于奥多诺万·罗萨的《大家一起来》之歌，或者唱着关于我们祖国动乱的民谣。这些声音在我心里汇成一种独特的生活感受：<strong>我想象自己捧着圣杯，在一群敌人中安然通过。</strong>在我进行自己并不理解的祈祷和赞美时，她的名字时不时地从我的嘴里脱口而出。我眼里常常充满泪水（我也说不出为什么），有时一股热流似乎从心里涌上胸膛。</p></blockquote><p>两人的第一次谈话：</p><blockquote><p>她终于和我说话了。她说第一句话的时候，我榄乱不安，不知该如何回答。她问我去不去阿拉比。我记不清回答的是去还是不去。那是一个非常壮观的市场，她说她非常想去。</p></blockquote><p>去了阿拉比之后，无论什么都糟透了，小男孩觉得自己像个小丑：</p><blockquote><p>抬头向黑暗中凝视，我看见自己成了一个被虛荣心驱使和嘲弄的动物，于是我的双眼燃烧起痛苦和愤怒</p></blockquote><h3 id="伊芙琳"><a href="#伊芙琳" class="headerlink" title="伊芙琳"></a>伊芙琳</h3><p>生活中确实有很多伊芙琳这样的人呢。</p><blockquote><p>在她沉思冥想之际，她母亲一生可怜的景象如同符咒似的压在了她的心头——平平凡凡耗尽了生命，临终都操碎了心。她浑身颤抖，仿佛又听见母亲的声音愚顽不停地说着：</p><p>“我亲爱的孩子！我亲爱的孩子1”</p><p>她蓦然惊恐地站了起来。逃！她必须逃走！弗兰克会救她。他会给她新的生活，也许还会给她爱情。而她需要生活。为什么她不应该幸福？她有权利获得幸福。弗兰克会拥抱她，把她抱在怀里。他会救她的。</p></blockquote><p>但是最后关头她还是怂了：</p><blockquote><p>在诺斯华尔码头，她站在挤来挤去的人群当中。他拉着她的手，她知道他在对她说话，一遍通谈着航行的事儿。码头上挤满了带着棕色行李的士兵。透过候船室宽大的门口，她瞥见了巨大的黑色船体，停泊在码头的墙边，舷窗里亮着灯。她没有说话。她觉得脸色苍白发冷，由于莫明其妙的悲伤，她祈求上帝指点迷津，告诉她该做什么。大船在雾里鸣响悠长而哀婉的汽笛声。如果她走的话，翌日就会和弗兰克一起在海上，向布宜诺斯艾利斯驶去。他们的船位已经订好。在他为她做了这一切之后，她还能后退么？她的悲伤使她真觉得想吐，于是便不停地翕动嘴唇，虔诚地默默祈祷。</p><p>一阵叮当的铃声敲响了她的心房。她觉得他抓紧了自己的手：</p><p>“来呀！”</p><p>全世界的海洋在她的心中翻腾激荡。他把她拖进了汪洋之中：他会把她淹死的。她用双手紧紧地抓住了铁栏。</p><p>“来呀！”</p><p>不！不！不！这不可能。她双手疯狂地抓着铁栏。在汪洋之中，她发出一阵痛苦的叫喊。</p><p>“伊芙琳！爱薇！”</p><p>他冲过栅栏，喊叫她跟上。有人喊他往前走，他却仍在喊她。她迫不得己地向他拾起巷白的面孔，像是一只孤独无助的动物。她双眼望着他，没有显示出爱意，也没有显示出惜别之情，仿佛是路人似的。</p></blockquote><h3 id="一小片阴云"><a href="#一小片阴云" class="headerlink" title="一小片阴云"></a>一小片阴云</h3><p>小钱德勒太像 F 了，真的越看越绝望。</p><h3 id="委员会办公室里的长青节"><a href="#委员会办公室里的长青节" class="headerlink" title="委员会办公室里的长青节"></a>委员会办公室里的长青节</h3><p>其实我看着并没有什么体会，只是感叹一下，一百多年前的爱尔兰人讨论政治的时候，遥远的东方现在还没有选举呢。</p><h3 id="母亲"><a href="#母亲" class="headerlink" title="母亲"></a>母亲</h3><p>还是很倾佩这位母亲的。</p><p>下面的这段描写还是很细致的：</p><blockquote><p>郝勒汉先生绝望地指指大厅，那里的听众正在鼓掌和跺脚。他向基尔尼先生求助，又向凯瑟琳求助。但基尔尼先生继续捋着他的胡子，<strong>凯瑟琳则低头望着地下，移动着她新鞋的鞋尖：意思是这并非她的过错。</strong></p></blockquote><h3 id="死者"><a href="#死者" class="headerlink" title="死者"></a>死者</h3><p>印象最深的一篇。</p><p>某次新年舞会散场后，加布里埃尔忽然念起妻子的好来。</p><blockquote><p>加布里埃尔没有与其他人一起到门口。他待在前厅的暗处，拾头凝视着楼梯。一个女人站在第一段楼梯的上部，也在阴影里。他看不见她的脸，但能看见她裙子上赤褐色和橙红色的图案，它们在阴影里呈现出黑色和白色。那是他的妻子。她正倚着栏杆聆听什么。加布里埃尔见她一动不动大感惊讶，也竖起耳朵细听。但他却听不见什么，除了门口台阶上的笑声和争论，只依稀听见钢琴上弹出一些和音和一个男声唱歌的片断。</p><p>他静静地站在昏暗的前厅里，试图捕捉那声音唱的曲调，并仰头注视着他的妻子。她的神态显得优雅而神秘，仿佛她是某种东西的一个象征。他自己问自己，一个女人站在楼梯上的阴影里，倾听远处的音乐，是什么东西的象征呢？如果他是个面家，他会画下她那种神态。她的蓝色毡帽配以黑暗的背景会突出她那古铜色的头发，而她裙子上的深色图案也会突出浅色的图案。假如他是画家，他会把这幅画称作《远方的音乐》。<br>…<br>她正站在满是灰尘的楣窗下面，煤气灯的光焰照亮了她那丰润的古铜色头发，几天前他曾 见她在火边把头发烤千。她神态如前，似乎没有意识到她周围的谈话。终于她转向他们，加布里埃尔发现她双颊泛红，眼睛闪闪发光。</p></blockquote><p>他想起与妻子的点点滴滴。</p><blockquote><p>凌展，天仍然很暗。阴沉昏黄的展光笼罩着房子和河面，天像要垂下来似的。脚下到处是融了的雪水；只有房顶上、码头的栏杆上和空地的围栏上，留着一缕缕、一片片白雪。<br>…<br>她的鞋用一款棕色的包袱包着夹在胳膊下面，双手提着裙子唯恐溅上了雪水。她已不再有什么高雅的神态，但加布里埃尔的眼睛仍然幸福得发亮<br>…<br>她走在他前面，那么轻盈，那么挺直，他极想悄悄地追上去，抓住她的双肩，在她耳边说些可笑而深情的话儿。他觉得她那么娇弱，他渴望着保护她不受伤害，渴望着与她单独待在一起。一些他俩秘密生活的时刻突然像星星一样在他的记忆中闪现。一个淡紫色的信封放在他早餐的杯子旁边，他用手轻轻地抚弄着它。鸟儿在常春藤上唧唧喳喳，窗帘上网状的阳光在地板上闪烁：他幸福得吃不下东西。他们俩站在拥挤的站台上，他把一张车票塞进她戴着手套的温暖的手心。他和她一起在寒冷里站着，透过花格窗向里观望，看一个男人在烈焰熊熊的火炉边制作瓶子。天气很冷。她的脸在寒冷的空气里散发着芬芳，与他的脸离得很近，突然他朝炉边那个男人喊道：</p><p>“火旺不旺，先生？</p><p>那人因为炉子的响声没能听见。这倒也好。否则他可能粗暴地回答。</p></blockquote><p>这可能是个很普遍的经验，不知道大家有没有幻想过与心爱的另一半在末世中生存。</p><blockquote><p>他渴望与她单独在一起，当其他人都已离去。</p></blockquote><p>加布里埃尔因为这些种种美妙的情感体验，来到一处宾馆，想要和妻子做爱。</p><p>但是他的妻子其实因为舞会终了的歌声想起了一位故人（双重意义上的“故人”），她向加布里埃尔坦白了自己初恋（？）的事。</p><p>概括来说，这位初恋先生因为她死了，至少她是这么认为的。</p><p>加布里埃尔感到“某个无形的、蓄意报复的幽灵跟他作对，在它那个朦胧的世界里正纠集力量与他对抗”。</p><blockquote><p>加布里埃尔感到受了羞辱，因为讥讽落了空，也因为从死者引出这么一个人——一个在煤气厂工作的男孩。就在他全心回忆他们在一起的私生活，心里充满柔情、欢乐和欲望时，她却一直在心里把他和另一人比较。一种对自我人格的羞辱意识袭上了他的心头。他发现自己成了个滑稽的人物，扮演一个为姨妈跑腿挣小钱的人，一个神经质的、自作多情的感伤主义者，一个对一群庸俗的人大事演讲并把自己小丑般的欲望理想化，一个他在镜子里警见的那种可怜而愚蠢的家伙。他本能地转身背向光线。以免她会看见他额上燃烧着羞辱。</p></blockquote><p>加布里埃尔勉强听完了妻子的往事，妻子也伤心地睡了。</p><blockquote><p>加布里埃尔斜倚着臂肘，心平气和地看了一会她那蓬乱的头发和半启的嘴唇，听着她深沉的呼吸。原来她生活中有过那么一段浪漫故事：一个男人因为她而死去。现在想到他这个丈大在她生活里扮演了多么可怜的角色，他几乎不再感到痛苦。他注视着正在熟睡的她，仿佛他和她从未像夫妻一样在一起生活过似的。他好奇的眼睛久久地望着她的脸庞和她的头发：当他想着她蓓蕾初绽之际该是什么样子时，一种奇怪的对她友善的怜悯在他的心灵里升起。他甚至不愿对自己说她的脸庞己不再漂亮，但他知道那不再是迈克尔·福瑞为之慨然殉情的脸庞。<br>…<br>房间的空气使他的肩膀觉得寒冷。他小心地钻进被子里，在他妻子的身边躺下。一个接一个，他们全都要变成幽灵。<strong>最好在某种激情全盛时期勇敢地进人那另一个世界，切莫随着年龄增长而凄凉地衰败枯萎。</strong> 他想到躺在他身边的妻子，想到她多年来如何在心里深锁着她的情人告诉她不想活下去时的眼神。</p></blockquote><p>文章的最后：</p><blockquote><p>几声轻轻拍打玻璃的声音使他转过身面向窗户。又开始下雪了。他睡意蒙眬地望着雪花，银白和灰暗的雪花在灯光的衬托下斜斜地飘落。时间己到他出发西行的时候。是的，报纸是对的：<strong>整个爱尔兰都在下雪</strong>。雪落在阴晦的中部平原的每一片土地上，落在没有树木的山丘上，轻轻地落在艾伦沼地上，再往西，轻轻地落进山农河面汹涌澎海的黑浪之中。它也落在山丘上孤零零的教堂墓地的每一个角落，迈克尔·福瑞就埋葬在那里。它飘落下来，厚厚地堆积在歪斜的十字架和墓碑上，堆积在一根根栅栏的尖项上，堆积在光秀秃的荆辣丛上。他听着雪花隐隐约约地飘落，慢慢地睡着了，雪花穿过宇宙轻轻地落下，就像他们的结局似的，落到所有生者和死者身上。</p></blockquote><h2 id="小径分岔的花园"><a href="#小径分岔的花园" class="headerlink" title="小径分岔的花园"></a>小径分岔的花园</h2><p>能稍微看懂的就是《环形废墟》《通天塔图书馆》。</p><p>有一说一，《环形废墟》我甚至猜到了结局，不过还算一个结构精妙的故事。</p><p>《通天塔图书馆》确实令人印象深刻，感觉是做梦会梦的那种类型。最后似乎沾了点永恒轮回的意味。</p><p>其他的一概不懂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个拖了很久的读书笔记，简记一下 23 年的读过的两本书。&lt;/p&gt;
&lt;p&gt;感谢 OCR 技术。&lt;/p&gt;
&lt;p&gt;一本是《都柏林人》，另一本是《小径分岔的花园》。&lt;/p&gt;
&lt;h2 id=&quot;都柏林人&quot;&gt;&lt;a href=&quot;#都柏林人&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
    <category term="书评" scheme="https://loveofpeach.github.io/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>苏州园林</title>
    <link href="https://loveofpeach.github.io/posts/167f15dc.html"/>
    <id>https://loveofpeach.github.io/posts/167f15dc.html</id>
    <published>2024-06-13T09:32:24.000Z</published>
    <updated>2024-06-13T10:12:18.902Z</updated>
    
    <content type="html"><![CDATA[<p>我已经完全懂了（叉腰.jpg）！</p><p>这些小园林，就是主打一个欲遮半掩。</p><p>雕一个镂空的花纹窗户，外面要么是假山要么是湖。</p><p>一面墙空出一大块，外面一株精甚细腻的小植物得把枝条探进来。</p><p>靠着墙的走廊，不能紧挨着墙，要适时地折一下，和墙空出的部分又是一个赏心悦目的绿植。</p><p>园里还要有假山，假山最好簇着一块怪石，像点什么最好。</p><p>这假山的周围还要有水，水里可以有点鱼，尽量是黑的，红的多了就俗了，可以放两只伸着脑袋的乌龟。</p><p>假山可以探洞，也可以爬，若是要爬，每到一个视野开阔处就是园子的另一个角度。</p><p>假山要是想跨过水面，必须是只通一人的看着不小心就能掉下去的石板小桥。</p><p>水里还须竖着若干小石头磊起来的莫名其妙的小柱子。</p><p>要是园子再大点，还能再弄一片湖，湖里面还有个亭子，去亭子的小桥也是弯弯曲曲的。</p><p>园子里的门，尤其是那种圆门，最好是每换个角度看都不一样，或是藏着点惊喜。看上去就是一副圆形边框的画。</p><p>房子之间还是要有假山的（永远都不嫌多），山上是有亭子的，周围还得用树挡着。</p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7c0783.jpg" alt="78-1.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4be93cff.jpg" alt="78-2.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4bda5651.jpg" alt="78-3.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4be6d3c0.jpg" alt="78-4.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4bec340f.jpg" alt="78-5.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7dbe7f.jpg" alt="78-6.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b2094dc.jpg" alt="78-7.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4aa245d6.jpg" alt="78-8.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b9e7f2a.jpg" alt="78-9.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac4b7c5875.jpg" alt="78-10.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac5265c87f.jpg" alt="78-11.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac526611ce.jpg" alt="78-12.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac525569e2.jpg" alt="78-13.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac51d82ff9.jpg" alt="78-14.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac519ad577.jpg" alt="78-15.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac526b2adb.jpg" alt="78-16.jpg"></p><p><img src="https://bu.dusays.com/2024/06/13/666ac516bfc76.jpg" alt="78-17.jpg"></p><p>其实还是拿着手机随手拍啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我已经完全懂了（叉腰.jpg）！&lt;/p&gt;
&lt;p&gt;这些小园林，就是主打一个欲遮半掩。&lt;/p&gt;
&lt;p&gt;雕一个镂空的花纹窗户，外面要么是假山要么是湖。&lt;/p&gt;
&lt;p&gt;一面墙空出一大块，外面一株精甚细腻的小植物得把枝条探进来。&lt;/p&gt;
&lt;p&gt;靠着墙的走廊，不能紧挨着墙，要适时地折一</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://loveofpeach.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="园林" scheme="https://loveofpeach.github.io/tags/%E5%9B%AD%E6%9E%97/"/>
    
  </entry>
  
  <entry>
    <title>sonny boy</title>
    <link href="https://loveofpeach.github.io/posts/1b848c05.html"/>
    <id>https://loveofpeach.github.io/posts/1b848c05.html</id>
    <published>2024-06-03T19:23:56.000Z</published>
    <updated>2024-06-08T17:49:14.090Z</updated>
    
    <content type="html"><![CDATA[<center><i><b>An die Nachgeborenen  致后代</b></i></center><center>Bertholt Brecht</center><center>译：黄灿然</center><p><br></p><center>I</center><p><br></p><center>确实，我生活在黑暗的时代！</center><center>不狡猾的话是愚蠢的。光滑的前额</center><center>暗示感觉迟钝。欢笑的人</center><center>无非是还没有接到</center><center>可怕的消息。</center><p><br></p><center>这是什么时代，当</center><center>一次关于树的谈话也几乎是一种犯罪</center><center>因为它暗示对许多恐怖保持沉默？</center><center>那个安详地过马路的人</center><center>是不是已经越出了他那些</center><center>有需要的朋友的范围？</center><p><br></p><center>没错，我依然能谋生</center><center>但请相信，这纯属偶然。</center><center>我做的任何事情</center><center>都不足以使我有权利吃饱。</center><center>我完全是侥幸。</center><center>如果运气没了，我也就消失。</center><p><br></p><center>他们对我说：吃吧喝吧！你应该为此感到高兴！</center><center>但我怎样又吃又喝，如果我吃的</center><center>是从挨饿者那里夺来的，</center><center>而我这杯水属于一个就快渴死的人？</center><center>然而我又吃又喝。</center><p><br></p><center>我也很想有智慧。</center><center>在古书里，他们说到智慧：</center><center>远离世间的纷争，没有恐惧地</center><center>过完你短暂的一生，</center><center>还有要避免暴力，</center><center>以善报恶，</center><center>不满足你的私欲而是把它们忘了，</center><center>这就是智慧。</center><center>这些我都做不到：</center><center>确实，我生活在黑暗的时代。</center><p><br></p><center>II</center><p><br></p><center>我在混乱时期来到城市，</center><center>正当饥饿在那里蔓延。</center><center>我在反抗时期跻身于人群之中</center><center>也跟他们一起反抗。</center><center>我的时光就这样流逝，</center><center>那是我在尘世上被赐予的时光。</center><p><br></p><center>我在战斗的间歇吃饭，</center><center>我在杀人者当中睡觉，</center><center>我粗心大意地爱，</center><center>我不耐烦地看大自然。</center><center>我的时光就这样流逝，</center><center>那是我在尘世上被赐予的时光。</center><p><br></p><center>我年轻时所有道路都通往泥沼。</center><center>我的舌头把我露暴给屠夫。</center><center>我几乎什么也做不了。但那些有权势者</center><center>没有我就会坐得更安稳：这是我的希望。</center><center>我的时光就这样流逝，</center><center>那是我在尘世上被赐予的时光。</center><p><br></p><center>我们力量单薄。我们的目标</center><center>远远地竖立在前方，</center><center>它清晰可见，尽管我自己</center><center>不大可能抵达它。</center><center>我的时光就这样流逝，</center><center>那是我在尘世上被赐予的时光。</center><p><br></p><center>III</center><p><br></p><center>你们这些在我们被洪水淹没的地方</center><center>浮现出来的人啊，</center><center>当你们说起我们的弱点</center><center>请你们也记得</center><center>你们逃脱的</center><center>这黑暗的时代。</center><p><br></p><center>因为我们换国家比换鞋还快，</center><center>经历一场又一场阶级战争，在只有不公正</center><center>而且没有反抗时陷入绝望。</center><p><br></p><center>然而我们知道：</center><center>仇恨，即便是对卑鄙者的仇恨，</center><center>也会扭曲外貌。</center><center>愤怒，即便是对不公正的愤怒</center><center>也会使声音粗哑。啊，我们</center><center>这些想为友善铺设基础的人</center><center>自己却不能友善。</center><p><br></p><center>但你们，当人终于可以</center><center>帮助人的时代来临，</center><center>请带着宽容</center><center>想起我们。</center><p><br></p><p><br></p><p>之前，在某人的博客里看到这样一个观点：应当停止自我审查，防止博客变成一个技术文章的集合。深以为然的同时，也发现自己的博客正朝着这个方向大踏步地前进。</p><p>是的，我们应当停止自我审查，停止表现乖巧的一面。</p><p>博客本就是个人的自留地，可以为了管理知识把文章做成方便翻阅的电子笔记，可以记录生活的琐碎，当然也可以表达自己的观点。</p><blockquote><p>只要你自信，怎么表达都可以！</p></blockquote><p>若真要在网上作出一个赛博之茧自缚起来，屈服于不可具名的恐怖，未免可悲了些。</p><p>对社会事件毫不关心也没关系，一个充满生活气息的博客同样是一个好的博客。但是我常常提醒自己：无论一个人是否关心政治，政治总会细致入微地关照到每一个人。</p><p>距离上一次在博客里出点怨言已经很久，很难说这么长的时间里我就一切满意。出于一些功利的目的，这阵子里我折腾了一些隐藏文章，或是加密文章的插件，企图使我的博客“更便于展示”，进而可以将我的博客写在简历上、或是其他用途。虽然作为一个跨考生，我尚无任何拿得出手的项目，但检查一番，似乎我的博客也不算水文章泛滥，终归是想让它给我带来一些实际的帮助。</p><p>后来想想还是算了，这个博客说到底是写给我自己看的（也许以后会推给信任的人），隐藏或是删除一篇文章是完整性的缺憾。至于功利一点的目的，也许可以另开一个 github 账号。</p><p>这段时间里，有很多值得关注的社会事件，是个人都难免会有些自己的想法。可惜这种零星的想法若当时不把它们写下来、形成语言文字，就会化作混乱的东西，最后完全扭曲、消失。</p><p>风声雨声读书声，声声入耳。家事国事天下事，事事关心。</p><p>这段小学语文书上的教诲，能做到的又有几个呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;
&lt;i&gt;
&lt;b&gt;
An die Nachgeborenen  致后代
&lt;/b&gt;
&lt;/i&gt;
&lt;/center&gt;

&lt;center&gt;
Bertholt Brecht
&lt;/center&gt;

&lt;center&gt;
译：黄灿然
&lt;/center&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;c</summary>
      
    
    
    
    <category term="闲文" scheme="https://loveofpeach.github.io/categories/%E9%97%B2%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>搜索引擎项目</title>
    <link href="https://loveofpeach.github.io/posts/c434ad22.html"/>
    <id>https://loveofpeach.github.io/posts/c434ad22.html</id>
    <published>2024-05-31T17:57:56.000Z</published>
    <updated>2024-07-01T09:40:31.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发服务器方案"><a href="#并发服务器方案" class="headerlink" title="并发服务器方案"></a>并发服务器方案</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Nf7GqoqVR2mKDuE2_mepxiPF9bkm5JSY/preview" style="width:100%; height:550px"></iframe></div><h2 id="Reactor模型（V1）"><a href="#Reactor模型（V1）" class="headerlink" title="Reactor模型（V1）"></a>Reactor模型（V1）</h2><p>Socket类：所有与套接字相关的操作都在 Socket 类中，负责套接字的创建与关闭，以及获取套接字。</p><p>InetAddress类：所有与地址相关的操作都在 InetAddress 类中，包括 ip 的获取、port 的获取，以及 struct sockadd_in 结构体的操作。</p><p>Acceptor类：所有连接相关的操作全部都封装在 Acceptor 中，包括：端口复用、地址复用、bind、listen、accept 操作。</p><p>TcpConnection类：只要 accept 函数有正确的返回值，那么就表明三次握手已经建立成功了，那么这条连接就是正常的，就可以创建这条连接。那么数据的收发都可以靠 TcpConnection 这条连接，封装收发数据的函数 send 与 receive 函数。</p><p>SocketIO类：是真正底层进行数据收发的类，该类进行执行系统调用 recv/send 操作，进行真正数据的收发。</p><p>类图：</p><p><img src="https://s2.loli.net/2024/05/29/isDFSjx51to7wXH.png" alt="76-1.png"></p><p>代码实现：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v1">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v1</a></p><p>V1 主要是完成了面向对象的封装。</p><h2 id="Reactor模型（V2）"><a href="#Reactor模型（V2）" class="headerlink" title="Reactor模型（V2）"></a>Reactor模型（V2）</h2><p>V1 只实现了非常基础的功能，一个 server 只能服务一个 client. 现在我们尝试加入 epoll.</p><p>类图（初版，之后还会有变动）：</p><p><img src="https://s2.loli.net/2024/05/29/EjXDziNAaknh6HL.png" alt="76-2.png"></p><p>对应上面的类图写出伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _isLooping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(_isLooping)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">waitEpollFd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unloop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _isLooping = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">waitEpollFd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nready = <span class="built_in">epoll_wait</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == nready &amp;&amp; errno == EINTR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">-1</span> == nready)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;epoll_wait&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == nready)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&gt;&gt;epoll_wait timeout&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; nready; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(有新的连接请求进来，并且是读事件)<span class="comment">//fd == listenfd</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">handleNewConnection</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fd = _evtList[idx].data.fd;</span><br><span class="line">                <span class="comment">//老的连接上有读事件</span></span><br><span class="line">                <span class="built_in">handleMessage</span>(fd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleNewConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    connfd = _acceptor.<span class="built_in">accept</span>();</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//处理connfd的异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TcpConnection <span class="title">con</span><span class="params">(connfd)</span></span>;</span><br><span class="line">    _conns.<span class="built_in">insert</span>(connd, con);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">addEpollReadFd</span>(connfd);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleMessage</span><span class="params">(<span class="type">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    it = _conns.<span class="built_in">find</span>(fd);</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        it-&gt;<span class="built_in">send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在面向对象的代码之前，我们先看看<strong>面向过程的逻辑</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建监听服务器的套接字</span></span><br><span class="line">    <span class="type">int</span> listenfd = ::<span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listenfd &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//地址复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">setsockopt</span>(listenfd,  SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;setsockopt ip error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//端口重用</span></span><br><span class="line">    ret = <span class="built_in">setsockopt</span>(listenfd, SOL_SOCKET, SO_REUSEPORT, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;setsockopt port error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//网络地址需要采用网络字节序存储(大端模式)</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serveraddr;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;serveraddr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serveraddr));</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    serveraddr.sin_port = <span class="built_in">htons</span>(<span class="number">8888</span>);</span><br><span class="line">    serveraddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    <span class="type">socklen_t</span> length = <span class="built_in">sizeof</span>(serveraddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 绑定服务器的网络地址</span></span><br><span class="line">    <span class="keyword">if</span>(::<span class="built_in">bind</span>(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;serveraddr, length) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="comment">//文件描述符是比较稀缺的，所以不用的时候要回收</span></span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 让服务器开始监听</span></span><br><span class="line">    <span class="comment">// listenfd跟所有的新连接打交道</span></span><br><span class="line">    <span class="keyword">if</span>(::<span class="built_in">listen</span>(listenfd, <span class="number">128</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;server is listening...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建epoll实例</span></span><br><span class="line">    <span class="type">int</span> efd = ::<span class="built_in">epoll_create1</span>(<span class="number">0</span>);<span class="comment">// 红黑树 + 就绪链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">    ev.events = EPOLLIN | EPOLLOUT;</span><br><span class="line">    ev.data.fd = listenfd;</span><br><span class="line">    <span class="comment">//epoll要进行监听操作: 对listenfd的读事件进行监听</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//Reactor: 注册读就绪事件</span></span><br><span class="line">    ret = ::<span class="built_in">epoll_ctl</span>(efd, EPOLL_CTL_ADD, listenfd, &amp;ev);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="built_in">close</span>(efd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> *evtList = </span><br><span class="line">        (<span class="keyword">struct</span> epoll_event *)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="built_in">sizeof</span>(<span class="keyword">struct</span> epoll_event));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事件循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Reactor: 事件分离器</span></span><br><span class="line">        <span class="type">int</span> nready = ::<span class="built_in">epoll_wait</span>(efd, evtList, <span class="number">1024</span>, <span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == nready &amp;&amp; errno == EINTR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">-1</span> == nready) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;epoll_wait&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == nready) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt; epoll_wait timeout!\n&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历struct epoll_event数组, 去check</span></span><br><span class="line">            <span class="comment">//每一个epoll_event到底发生了什么事件</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx &lt; nready; ++idx)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 必须要使用按位&amp;操作来判断事件，不能使用==,&amp;&amp;</span></span><br><span class="line">                <span class="keyword">if</span>((evtList[idx].data.fd == listenfd)  &amp;&amp;</span><br><span class="line">                   (evtList[idx].events &amp; EPOLLIN)) </span><br><span class="line">                &#123;   </span><br><span class="line">                    <span class="comment">//意味着有新连接来了,所以要调用accept函数,获取新连接</span></span><br><span class="line">                    <span class="comment">//写事件什么情况会触发? 只要内核发送缓冲区还有空间，就可以触发写事件</span></span><br><span class="line">                    <span class="type">int</span> peerfd = ::<span class="built_in">accept</span>(listenfd, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">                    <span class="comment">/* TcpConnection conn(peerfd); */</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//将新连接添加到epoll的监听实例中去</span></span><br><span class="line">                    <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">                    ev.events = EPOLLIN | EPOLLOUT | EPOLLERR;</span><br><span class="line">                    ev.data.fd = peerfd;</span><br><span class="line">                    ret = ::<span class="built_in">epoll_ctl</span>(efd, EPOLL_CTL_ADD, peerfd, &amp;ev);</span><br><span class="line">                    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//新连接到来之后的处理</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt; conn has connected, fd: %d\n&quot;</span>, peerfd);</span><br><span class="line">                    <span class="comment">//记录日志, 使用Log4cpp完成</span></span><br><span class="line">                    <span class="comment">//个性定制化 ==&gt; 事件处理器</span></span><br><span class="line">                    <span class="comment">/* onConnection();//考虑扩展性，挖一个坑 */</span></span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 已经建立好的连接发送数据过来了</span></span><br><span class="line">                    <span class="comment">// 如果发生了读事件</span></span><br><span class="line">                    <span class="type">char</span> buff[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(evtList[idx].events &amp; EPOLLIN)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">int</span> fd = evtList[idx].data.fd;</span><br><span class="line">                        ret = ::<span class="built_in">recv</span>(fd, buff, <span class="built_in">sizeof</span>(buff), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) </span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; recv msg %d bytes,content:%s\n&quot;</span>,</span><br><span class="line">                                    ret, buff);</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">//1. 对应用层数据进行解析</span></span><br><span class="line">                            <span class="comment">//2. 拿到最终要处理的数据之后，进行业务逻辑处理</span></span><br><span class="line">                            <span class="comment">//(假设第2步执行的时间很长1S, 是否合适)</span></span><br><span class="line">                            <span class="comment">//3. 得到要返回给客户端的数据之后，进行发送操作</span></span><br><span class="line">                            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                            ret = <span class="built_in">send</span>(fd, buff, <span class="built_in">strlen</span>(buff), <span class="number">0</span>);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;&gt; send %d bytes\n&quot;</span>, ret);</span><br><span class="line">                            <span class="comment">/* onMessage();//, 考虑扩展性，挖一个坑 */</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;conn has closed!\n&quot;</span>);</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">//需要从epoll的监听实例删除掉, 因为连接断开，不需要再监听了</span></span><br><span class="line">                            <span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">                            ev.data.fd = fd;</span><br><span class="line">                            ret = ::<span class="built_in">epoll_ctl</span>(efd, EPOLL_CTL_DEL, fd, &amp;ev);</span><br><span class="line">                            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) </span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">perror</span>(<span class="string">&quot;epoll_ctl&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//记录日志, log4cpp</span></span><br><span class="line">                            <span class="comment">/* onClose();//考虑扩展性，挖一个坑 */</span></span><br><span class="line">                        &#125;<span class="comment">// end of ret if</span></span><br><span class="line">                    &#125;<span class="comment">//end of event if</span></span><br><span class="line">                    <span class="comment">//else if()  //处理其他事件的</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">close</span>(listenfd);<span class="comment">// 关闭连接</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP 网络编程最本质的是处理<strong>三个半事件</strong>：</p><ol><li><strong>连接建立</strong>：包括服务器端被动接受连接（accept）和客户端主动发起连接（connect）。TCP 连接一旦建立，客户端和服务端就是平等的，可以各自收发数据。</li><li><strong>连接断开</strong>：包括主动断开（close、shutdown）和被动断开（read()返回 0）。</li><li><strong>消息到达</strong>：文件描述符可读。这是最为重要的一个事件，对它的处理方式决定了网络编程的风格（阻塞还是非阻塞，如何处理分包，应用层的缓冲如何设计等等）。</li><li><strong>消息发送完毕</strong>：这算半个。对于低流量的服务，可不必关心这个事件；另外，这里的“发送完毕”是指数据写入操作系统缓冲区（内核缓冲区），将由 TCP 协议栈负责数据的发送与重传，不代表对方已经接收到数据。</li></ol><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v2">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v2</a></p><p>重新考虑细节之后，类图如下：</p><p><img src="https://s2.loli.net/2024/05/31/AbECe43dchnG8aR.png" alt="76-3.png"></p><h2 id="Reactor模型（V3）"><a href="#Reactor模型（V3）" class="headerlink" title="Reactor模型（V3）"></a>Reactor模型（V3）</h2><p>为使 V2 代码的 main 函数更加简洁，我们进一步封装：</p><p><img src="https://s2.loli.net/2024/06/04/HA8eiGFRnmjVIcN.png" alt="76-4.png"></p><p>代码（较 V2 版本改动较小）：</p><p><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v3">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v3</a></p><p><strong>V2 和 V3 版本其实就是实现了 Basic Reactor Design .</strong></p><h2 id="进程、线程通信"><a href="#进程、线程通信" class="headerlink" title="进程、线程通信"></a>进程、线程通信</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>我们尝试开发 Reactor 的 V4 版本，即 Reactor with ThreadPool. 要义是将 IO 和计算任务分开。</p><p>将 IO 和计算任务分开的必要性：它们的速度不匹配。</p><p>我们改进 V3 版本的 <code>TestTcpServer.cc</code> 文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpConnection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTask</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyTask</span>(<span class="type">const</span> string &amp;msg, <span class="type">const</span> TcpConnectionPtr &amp;con)</span><br><span class="line">    : _msg(msg)</span><br><span class="line">    , _con(con)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//所有的业务逻辑的处理，decode、compute、encode</span></span><br><span class="line">        <span class="comment">//在此处理msg1</span></span><br><span class="line">        _msg;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程池处理完毕业务逻辑之后，需要告诉Reactor/EventLoop去进行发送</span></span><br><span class="line">        <span class="comment">//数据，因为数据的收发不是线程池的功能，为了将职责分清楚，所以</span></span><br><span class="line">        <span class="comment">//Reactor/EventLoop进行IO操作，而线程池主要处理业务逻辑，也就是</span></span><br><span class="line">        <span class="comment">//进行计算操作，所以我们将IO操作的线程，称为IO线程，将计算操作的</span></span><br><span class="line">        <span class="comment">//线程，称为计算线程。</span></span><br><span class="line">        <span class="comment">//那么就会涉及到计算线程要通知IO线程进行数据的发送</span></span><br><span class="line">        <span class="comment">//那么就会涉及到线程之间的通信？</span></span><br><span class="line">        <span class="comment">//eventfd解决线程或者进程之间的通信。。。</span></span><br><span class="line">        <span class="comment">//将msg1发送数据给客户端</span></span><br><span class="line">        _con-&gt;<span class="built_in">sendInLoop</span>(_msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string _msg;</span><br><span class="line">    TcpConnectionPtr _con;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; con-&gt;<span class="built_in">toString</span>() &lt;&lt; <span class="string">&quot; has connected!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//接收客户端的数据</span></span><br><span class="line">    <span class="comment">//接收数据，也就是read数据，也就是读数据，是EventLoop线程</span></span><br><span class="line">    <span class="comment">//也就是Reactor线程，并且数据的发送也是属于EventLoop线程</span></span><br><span class="line">    <span class="comment">//或者Reactor线程</span></span><br><span class="line">    string msg = con-&gt;<span class="built_in">receive</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&gt;&gt;recv msg from client: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将接收的msg，业务逻辑进行decode compute encode操作</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function">MyTask <span class="title">task</span><span class="params">(msg, con)</span></span>;</span><br><span class="line">    pool.<span class="built_in">addTask</span>(std::<span class="built_in">bind</span>(&amp;MyTask::process, task));<span class="comment">//bind的地址传递与值传递</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//msg1</span></span><br><span class="line">    <span class="comment">//将msg1发送数据给客户端</span></span><br><span class="line">    <span class="comment">/* con-&gt;send(msg); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onClose</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; con-&gt;<span class="built_in">toString</span>() &lt;&lt; <span class="string">&quot; has closed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TcpServer <span class="title">server</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span></span>;</span><br><span class="line">    server.<span class="built_in">setAllCallback</span>(std::<span class="built_in">move</span>(onConnection)</span><br><span class="line">                          , std::<span class="built_in">move</span>(onMessage)</span><br><span class="line">                          , std::<span class="built_in">move</span>(onClose));</span><br><span class="line">    server.<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们发现有必要了解进程、线程间的通信。</p><h3 id="eventfd-系统调用"><a href="#eventfd-系统调用" class="headerlink" title="eventfd 系统调用"></a>eventfd 系统调用</h3><p>从 Linux 2.6.27 版本开始，新增了不少系统调用，其中包括 eventfd，它主要用于进程或线程间通信（如通知/等待机制的实现）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/eventfd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eventfd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> initval, <span class="type">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">//initval:64位的计数器，并且由内核维护。</span></span><br><span class="line"><span class="comment">//flags:可以设置为0.</span></span><br><span class="line"><span class="comment">//返回值：返回的是一个 eventfd 对象（可以理解为文件描述符）。</span></span><br></pre></td></tr></table></figure><p>eventfd 支持的操作：</p><ul><li>read</li><li>write</li><li>select / poll / epoll</li></ul><p>eventfd 是专门用于事件通知的文件描述符（fd）。它创建一个 eventfd 对象，eventfd 对象不仅可以用于进程间的通信，还能用于用户态和内核态的通信。<strong>eventfd 对象在内核中包含了一个计数器，该计数器是 64 位的无符号整数（uint64_t），计数不为零是有可读事件发生，read 之后计数会清零，write 则会递增计数器。</strong></p><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/eventfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>             <span class="comment">/* Definition of uint64_t */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> handle_error(msg) \</span></span><br><span class="line"><span class="meta">    do &#123; perror(msg); exit(EXIT_FAILURE); &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> efd, j;</span><br><span class="line">    <span class="type">uint64_t</span> u;</span><br><span class="line">    <span class="type">ssize_t</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Usage: %s &lt;num&gt;...\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    efd = <span class="built_in">eventfd</span>(<span class="number">10</span>, <span class="number">0</span>);<span class="comment">//eventfd的第一个参数代表的是内核上的计数器</span></span><br><span class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">handle_error</span>(<span class="string">&quot;eventfd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (fork()) </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">//case 0部分是子线程的执行流</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; argc; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child writing %s to efd\n&quot;</span>, argv[j]);</span><br><span class="line">            u = <span class="built_in">strtoull</span>(argv[j], <span class="literal">NULL</span>, <span class="number">0</span>);<span class="comment">/* strtoull() allows various bases */</span></span><br><span class="line">            s = <span class="built_in">write</span>(efd, &amp;u, <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>));<span class="comment">//write可以写多次, 每执行一次，就会执行一次加法</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>))</span><br><span class="line">                <span class="built_in">handle_error</span>(<span class="string">&quot;write&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child completed write loop\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//父线程的一个执行流</span></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">2</span>; idx &lt; argc; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Parent about to read\n&quot;</span>);</span><br><span class="line">            s = <span class="built_in">read</span>(efd, &amp;u, <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>));<span class="comment">// read操作会将计数器的值清0</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="built_in">sizeof</span>(<span class="type">uint64_t</span>))</span><br><span class="line">                <span class="built_in">handle_error</span>(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Parent read %llu (0x%llx) from efd\n&quot;</span>,</span><br><span class="line">                    (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) u, (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) u);</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        <span class="built_in">handle_error</span>(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">./a.out  1 2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Child writing 1 to efd</span></span><br><span class="line"><span class="comment">Child writing 2 to efd</span></span><br><span class="line"><span class="comment">Parent about to read</span></span><br><span class="line"><span class="comment">Parent read 13 (0xd) from efd</span></span><br><span class="line"><span class="comment">Child writing 3 to efd</span></span><br><span class="line"><span class="comment">Parent about to read</span></span><br><span class="line"><span class="comment">Parent read 3 (0x3) from efd</span></span><br><span class="line"><span class="comment">Child completed write loop</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="eventfd-的封装"><a href="#eventfd-的封装" class="headerlink" title="eventfd 的封装"></a>eventfd 的封装</h3><p>类图（这个 MyTask 就是 <a href="https://loveofpeach.github.io/posts/cb3a6d2b.html">CppNote4</a> 里面的）：</p><p><img src="https://bu.dusays.com/2024/06/02/665c7953f0a53.png" alt="76-5.png"></p><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/EventFd">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/EventFd</a></p><h2 id="Reactor模型（V4）"><a href="#Reactor模型（V4）" class="headerlink" title="Reactor模型（V4）"></a>Reactor模型（V4）</h2><p>注意，这里我们将上一张图片里的 EventFd 类揉碎了放进 EventLoop 类中：</p><p><img src="https://s2.loli.net/2024/06/04/JtPQSOFhEKc6yzk.jpg" alt="76-6.jpg"></p><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v4">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v4</a></p><p>很多注释都在代码里面。</p><p>注意：在 Reactor_v4 的 <code>TestTcpServer.cc</code> 代码中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gPool-&gt;<span class="built_in">addTask</span>(std::<span class="built_in">bind</span>(&amp;MyTask::process, task));</span><br></pre></td></tr></table></figure><p>并没有传递 task 的地址，这与之前的介绍不一样，这是为什么呢？</p><p>我们实验一下，发现如果用 <code>&amp;</code> 取地址，运行时会报 core dumped. </p><p>这是因为 task 对象的生命周期已经结束（而且它们会分属不同的线程）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//接收客户端的数据</span></span><br><span class="line">    <span class="comment">//接收数据，也就是read数据，也就是读数据，是EventLoop线程</span></span><br><span class="line">    <span class="comment">//也就是Reactor线程，并且数据的发送也是属于EventLoop线程</span></span><br><span class="line">    <span class="comment">//或者Reactor线程</span></span><br><span class="line">    string msg = con-&gt;<span class="built_in">receive</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&gt;&gt;recv msg from client: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将接收的msg，业务逻辑进行decode compute encode操作</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function">MyTask <span class="title">task</span><span class="params">(msg, con)</span></span>;</span><br><span class="line">    gPool-&gt;<span class="built_in">addTask</span>(std::<span class="built_in">bind</span>(&amp;MyTask::process, task));<span class="comment">//bind的地址传递与值传递</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不取地址的时候，会做一个值传递（拷贝）。</p><p>这是 bind() 函数本身的特性，之前只是没有提：</p><p><img src="https://s2.loli.net/2024/06/04/XAaFOvniskW2qCP.png" alt="76-7.png"></p><h2 id="Reactor模型（V5）"><a href="#Reactor模型（V5）" class="headerlink" title="Reactor模型（V5）"></a>Reactor模型（V5）</h2><p>在 v4 模型中，还有一些不足：使用了全局变量。</p><p>v4 中我们之所以使用全局变量，是暂时没有什么手段处理生命周期的问题。现在我们重新考虑：</p><p><img src="https://bu.dusays.com/2024/06/05/665f3e77a1e26.jpg" alt="76-8.jpg"></p><p>代码如下：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v5">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/Reactor_v5</a></p><p>代码相较于 v4 的变动是：</p><ul><li><code>TestTcpServer.cc</code> 变为 <code>EchoServer.h</code> ，其中的封装技巧值得注意。</li><li>测试文件 <code>testFile.cc</code> 。</li></ul><h2 id="定时器-timerfd"><a href="#定时器-timerfd" class="headerlink" title="定时器 timerfd"></a>定时器 timerfd</h2><p>timerfd 是 Linux 提供的一个定时器接口。这个接口<strong>基于文件描述符</strong>，通过文件描述符的可读事件进行超时通知，所以能够被用于 select/poll/epoll 的应用场景。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/timerfd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">timerfd_create</span><span class="params">(<span class="type">int</span> clockid, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="comment">// clockid 可设置为：</span></span><br><span class="line"><span class="comment">//    1. CLOCK_REALTIME：从1970.1.1到目前的时间。更改系统时间 会更改获取的值，它以系统时间为坐标。</span></span><br><span class="line"><span class="comment">//    2. CLOCK_MONOTONIC：获取的时间为系统重启到现在的时间，更改系统时间对其没有影响。</span></span><br><span class="line"><span class="comment">// flags:直接传递为0</span></span><br><span class="line"><span class="comment">// 返回值：返回一个定时器对象，也就是一个文件描述符。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">timerfd_settime</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="keyword">struct</span> itimerspec *new_value,</span></span><br><span class="line"><span class="params">                    <span class="keyword">struct</span> itimerspec *old_value)</span>;</span><br><span class="line"><span class="comment">//fd：就是timerfd_create成功执行后的函数返回值。</span></span><br><span class="line"><span class="comment">//flags:可以传递两种值，0表示是相对定时器,TFD_TIMER_ABSTIME表示是绝对定时器</span></span><br><span class="line"><span class="comment">//new_value:设置超时时间，包括开始的时间与周期时间。如果该值是0，表明定时器取消</span></span><br><span class="line"><span class="comment">//old_value:一般设置为nullptr</span></span><br><span class="line"><span class="comment">//返回值：该函数的目的就是为了去设置或者停止定时器。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">time_t</span>  tv_sec;   <span class="comment">/* Seconds */</span></span><br><span class="line">    <span class="type">long</span>    tv_nsec;  <span class="comment">/* Nanoseconds */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerspec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">it_interval</span>;</span> <span class="comment">/* Interval for periodic timer */</span>  <span class="comment">//周期时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">it_value</span>;</span>    <span class="comment">/* Initial expiration */</span>  <span class="comment">//初始时间</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>考虑封装其功能如下：</p><p><img src="https://s2.loli.net/2024/06/04/KbONdS8yQWa6LsR.png" alt="76-9.png"></p><p>代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/TimerFd">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/TimerFd</a></p><p>TimerFd 自然也可以用在 Reactor 的代码中，只不过未必好。</p><p>eventfd 与 timerfd 都可以用于线程间通信。eventfd 是让 A 线程主动唤醒 B 线程进行操作，而 timerfd 是让 B 线程被定时唤醒。</p><h2 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>本节内容参考： <a href="https://jozeou.github.io/2019/05/09/nlp-course-notes/nlp-note3/">NLP 笔记（三）：最短编辑距离</a></p><p>首先引入提出算法的动机。</p><p>1）如何衡量两个字符串有多相似？例如，我们需要实现<strong>拼写纠正</strong>：用户键入“graffe”，以下哪个最接近？</p><ul><li>graf</li><li>graft</li><li>grail</li><li>giraffe</li></ul><p>2）计算生物学：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-1.png" alt="76-10"></p><p><strong>编辑距离（Edit Distance）</strong>：两个字符串之间的最短编辑距离是指将一个字符串变换为另一个需要的编辑操作（插入（Insertion），删除（Deletion），替换（Substitution））的最小数量。</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-2.png" alt="76-11"></p><p>注意：</p><ul><li>如果每个操作的代价值为 1，则此两个字符串之间的距离为 5</li><li>如果替换操作的代价值为 2，则距离为 8</li></ul><p>该问题可以动态规划求解。</p><p>现有长为 n 的字符串 X，长为 m 的字符串 Y .</p><p>定义： <code>D(i, j)</code> 为 <code>X[1...i]</code>（X 的前 i 个字符）和 <code>Y[1...j]</code>（Y 的前 j 个字符）的最短编辑距离。</p><p><strong>注意：这里下标是从 1 开始的。</strong></p><p>那么我们所求的就是 D(n, m) .</p><p>边界条件： <code>D(i, 0) = i</code>，<code>D(0, j) = j</code> .</p><p>对边界条件的解释：<br>若有一字符串为空串，则另一字符串编辑为空串的方法为 del / ins 其自身长度的字符，即该操作的代价为自身长度。</p><p>递推公式（替换操作代价为2）：</p><script type="math/tex; mode=display">D(i,j) = \min \begin{cases}D(i-1, j)+1 & \text {} \\D(i, j-1)+1 &\text{} \\D(i-1, j-1)+ \begin{cases}2 & X_i \neq Y_j \\0 & X_i = Y_j\end{cases} \end{cases}</script><p>递推公式（替换操作代价为1）：</p><script type="math/tex; mode=display">D(i,j) = \min \begin{cases}D(i-1, j)+1 & \text {} \\D(i, j-1)+1 &\text{} \\D(i-1, j-1)+ \begin{cases}1 & X_i \neq Y_j \\0 & X_i = Y_j\end{cases} \end{cases}</script><p>对递推公式的解释，一图胜千言：</p><p><img src="https://s2.loli.net/2024/06/08/SjGm7Bxe2ZoWIcw.jpg" alt="76-12.jpeg"></p><p>对应的 leetcode 题目： <a href="https://leetcode.com/problems/edit-distance/description/">edit-distance</a></p><p>到这里的原理已经足够我们应用了，但是我们继续拓展一下。</p><p><strong>计算对齐（Computing alignments）</strong>：我们经常需要将两个字符串的每个字符彼此对齐，这可以通过保持“回溯（backtrace）”来做到：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-6.png" alt="76-13"></p><p>根据上图回溯，得到两个字符串和它们之间的对齐，见图 76-11.</p><p>一点微小的技巧：<code>*</code>填充在 76-11 上面还是下面取决与 76-13 黑线是横着走还是竖着走。</p><p><strong>加权最短编辑距离</strong>：嗯，就是加个权。</p><p>为什么要在计算中加权？</p><ul><li>拼写纠正：有些字母比其他字母更容易输入错</li><li>生物学：某些类型的删除或插入更有可能发生</li></ul><p>算法实现：</p><p><img src="https://raw.githubusercontent.com/JozeOu/blog-images/master/nlp-course-notes/3-8.png" alt="76-14"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>作为搜索引擎功能的很小一部分，我们试图实现一个中英文混合的最小编辑距离算法。</p><p>UTF8 编码规则：</p><p><img src="https://s2.loli.net/2024/06/09/FNCdYOqDps37rwo.png" alt="76-15.png"></p><p>于是，可以写出如下函数求一个字符在 UTF-8 编码中占据的字节数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">nBytesCode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; <span class="number">7</span>))  <span class="comment">// 检查最高位是否为1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nBytes = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx != <span class="number">6</span>; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">6</span> - idx)))  <span class="comment">// 检查从第二位开始的连续1的数量</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++nBytes;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，下面这份代码不仅支持中英文混合，只要是 UTF-8 就行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//1. 求取一个字符占据的字节数</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">nBytesCode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 求取一个字符串的字符长度</span></span><br><span class="line"><span class="function">std::<span class="type">size_t</span> <span class="title">length</span><span class="params">(<span class="type">const</span> std::string &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 中英文通用的最小编辑距离算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">editDistance</span><span class="params">(<span class="type">const</span> std::string &amp; lhs, <span class="type">const</span> std::string &amp;rhs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::string本身是一个字节流的字符串</span></span><br><span class="line">    <span class="comment">// 字符流的字符串</span></span><br><span class="line">    string s1 = <span class="string">&quot;abcd&quot;</span>;<span class="comment">//4个字符的字符串</span></span><br><span class="line">    <span class="comment">//获取的是字符的长度</span></span><br><span class="line">    string s2 = <span class="string">&quot;中国&quot;</span>;<span class="comment">//2个字符的字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; ch : s2) &#123;</span><br><span class="line">        cout &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2[1]: &quot;</span> &lt;&lt; s2[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.size() : &quot;</span> &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.size() : &quot;</span> &lt;&lt; s2.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s3 = s2.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.size(): &quot;</span> &lt;&lt; s3.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3: &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s4 = s2.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4.size(): &quot;</span> &lt;&lt; s4.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4: &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符的长度</span></span><br><span class="line">    string s5 = <span class="string">&quot;abc中国&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s5.size(): &quot;</span> &lt;&lt; s5.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s5.length: &quot;</span> &lt;&lt; <span class="built_in">length</span>(s5) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2与s5的最小编辑距离: &quot;</span> &lt;&lt; <span class="built_in">editDistance</span>(s2, s5) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    string s6 = <span class="string">&quot;今夜は月が綺麗ですね&quot;</span>;</span><br><span class="line">    string s7 = <span class="string">&quot;今夜月綺麗，有道理&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6.size(): &quot;</span> &lt;&lt; s6.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6.length: &quot;</span> &lt;&lt; <span class="built_in">length</span>(s6) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s7.size(): &quot;</span> &lt;&lt; s7.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s7.length: &quot;</span> &lt;&lt; <span class="built_in">length</span>(s7) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6与s7的最小编辑距离: &quot;</span> &lt;&lt; <span class="built_in">editDistance</span>(s6, s7) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 注意替换的代价是 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test0</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">nBytesCode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; <span class="number">7</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nBytes = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> idx = <span class="number">0</span>; idx != <span class="number">6</span>; ++idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">6</span> - idx)))</span><br><span class="line">            &#123;</span><br><span class="line">                ++nBytes;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 看穿内存的操作（</span></span><br><span class="line"><span class="function">std::<span class="type">size_t</span> <span class="title">length</span><span class="params">(<span class="type">const</span> std::string &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="type">size_t</span> ilen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(std::<span class="type">size_t</span> idx = <span class="number">0</span>; idx != str.<span class="built_in">size</span>(); ++idx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nBytes = <span class="built_in">nBytesCode</span>(str[idx]);</span><br><span class="line">        <span class="comment">// 如果这个字符不止一个字节，就跳到它的最后一个字节</span></span><br><span class="line">        idx += (nBytes - <span class="number">1</span>);</span><br><span class="line">        ++ilen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ilen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">triple_min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b, <span class="type">const</span> <span class="type">int</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? (a &lt; c ? a : c) : (b &lt; c ? b : c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">editDistance</span><span class="params">(<span class="type">const</span> std::string &amp; lhs, <span class="type">const</span> std::string &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//计算最小编辑距离-包括处理中英文</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> lhs_len = <span class="built_in">length</span>(lhs);</span><br><span class="line">    <span class="type">size_t</span> rhs_len = <span class="built_in">length</span>(rhs);</span><br><span class="line">    <span class="type">int</span> editDist[lhs_len + <span class="number">1</span>][rhs_len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> idx = <span class="number">0</span>; idx &lt;= lhs_len; ++idx)</span><br><span class="line">    &#123;</span><br><span class="line">        editDist[idx][<span class="number">0</span>] = idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> idx = <span class="number">0</span>; idx &lt;= rhs_len; ++idx)</span><br><span class="line">    &#123;</span><br><span class="line">        editDist[<span class="number">0</span>][idx] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::string sublhs, subrhs;</span><br><span class="line">    <span class="keyword">for</span>(std::<span class="type">size_t</span> dist_i = <span class="number">1</span>, lhs_idx = <span class="number">0</span>; dist_i &lt;= lhs_len; ++dist_i, ++lhs_idx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// start string</span></span><br><span class="line">        <span class="type">size_t</span> nBytes = <span class="built_in">nBytesCode</span>(lhs[lhs_idx]);</span><br><span class="line">        sublhs = lhs.<span class="built_in">substr</span>(lhs_idx, nBytes);</span><br><span class="line">        lhs_idx += (nBytes - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(std::<span class="type">size_t</span> dist_j = <span class="number">1</span>, rhs_idx = <span class="number">0</span>; dist_j &lt;= rhs_len; ++dist_j, ++rhs_idx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// target string</span></span><br><span class="line">            nBytes = <span class="built_in">nBytesCode</span>(rhs[rhs_idx]);</span><br><span class="line">            subrhs = rhs.<span class="built_in">substr</span>(rhs_idx, nBytes);</span><br><span class="line">            rhs_idx += (nBytes - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sublhs == subrhs)</span><br><span class="line">            &#123;</span><br><span class="line">                editDist[dist_i][dist_j] = editDist[dist_i - <span class="number">1</span>][dist_j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                editDist[dist_i][dist_j] = <span class="built_in">triple_min</span>(</span><br><span class="line">                    editDist[dist_i][dist_j - <span class="number">1</span>] + <span class="number">1</span>,</span><br><span class="line">                    editDist[dist_i - <span class="number">1</span>][dist_j] + <span class="number">1</span>,</span><br><span class="line">                    editDist[dist_i - <span class="number">1</span>][dist_j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> editDist[lhs_len][rhs_len];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中国</span></span><br><span class="line"><span class="comment">s2[1]: �</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">s1.size() : 4</span></span><br><span class="line"><span class="comment">s2.size() : 6</span></span><br><span class="line"><span class="comment">s3.size(): 3</span></span><br><span class="line"><span class="comment">s3: 中</span></span><br><span class="line"><span class="comment">s4.size(): 3</span></span><br><span class="line"><span class="comment">s4: ���</span></span><br><span class="line"><span class="comment">s5.size(): 9</span></span><br><span class="line"><span class="comment">s5.length: 5</span></span><br><span class="line"><span class="comment">s2与s5的最小编辑距离: 3</span></span><br><span class="line"><span class="comment">s6.size(): 30</span></span><br><span class="line"><span class="comment">s6.length: 10</span></span><br><span class="line"><span class="comment">s7.size(): 27</span></span><br><span class="line"><span class="comment">s7.length: 9</span></span><br><span class="line"><span class="comment">s6与s7的最小编辑距离: 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Stop-words"><a href="#Stop-words" class="headerlink" title="Stop words"></a>Stop words</h2><p>本节内容转载自： <a href="https://kavita-ganesan.com/what-are-stop-words/">What are Stop Words?</a></p><h3 id="What-are-Stop-Words"><a href="#What-are-Stop-Words" class="headerlink" title="What are Stop Words"></a>What are Stop Words</h3><p>When working with text mining applications, we often hear of the term “stop words” or “stop word list” or even “stop list”. Stop words are basically a set of commonly used words in any language, not just English.</p><p>The reason why stop words are critical to many applications is that, if we remove the words that are very commonly used in a given language, we can focus on the important words instead. For example, in the context of a search engine, if your search query is “how to develop information retrieval applications”, If the search engine tries to find web pages that contained the terms “how”, “to” “develop”, “information”, ”retrieval”, “applications” the search engine is going to find a lot more pages that contain the terms “how”, “to” than pages that contain information about developing information retrieval applications because the terms “how” and “to” are so commonly used in the English language. If we disregard these two terms, the search engine can actually focus on retrieving pages that contain the keywords: “develop” “information” “retrieval” “applications” – which would bring up pages that are actually of interest. This is just the basic intuition for using stop words.</p><p>Stop words can be used in a whole range of tasks and here are a few:</p><ol><li>Supervised machine learning – removing stop words from the feature space</li><li>Clustering – removing stop words prior to generating clusters</li><li>Information retrieval – preventing stop words from being indexed</li><li>Text summarization- excluding stop words from contributing to summarization scores &amp; removing stop words when computing ROUGE scores</li></ol><h3 id="Types-of-Stop-Words"><a href="#Types-of-Stop-Words" class="headerlink" title="Types of Stop Words"></a>Types of Stop Words</h3><p>Stop words are generally thought to be a “single set of words”. It really can mean different things to different applications. For example, in some applications removing all stop words right from determiners (e.g. the, a, an) to prepositions (e.g. above, across, before) to some adjectives (e.g. good, nice) can be an appropriate stop word list. To some applications however, this can be detrimental. For instance, in sentiment analysis removing adjective terms such as ‘good’ and ‘nice’ as well as negations such as ‘not’ can throw algorithms off their tracks. In such cases, one can choose to use a minimal stop list consisting of just determiners or determiners with prepositions or just coordinating conjunctions depending on the needs of the application.Examples of minimal stop word lists that you can use:</p><ol><li><strong>Determiners</strong> – Determiners tend to mark nouns where a determiner usually will be followed by a noun<br>examples: the, a, an, another</li><li><strong>Coordinating conjunctions</strong> – Coordinating conjunctions connect words, phrases, and clauses<br>examples: for, an, nor, but, or, yet, so</li><li><strong>Prepositions</strong> – Prepositions express temporal or spatial relations<br>examples: in, under, towards, before</li></ol><p>In some domain specific cases, such as clinical texts, we may want a whole different set of stop words. For example, terms like “mcg” “dr” and “patient” may have less discriminating power in building intelligent applications compared to terms such as ‘heart’ ‘failure’ and ‘diabetes’. In such cases, we can also construct domain specific stop words as opposed to using a published stop word list.</p><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>对于我们的应用而言，上面的介绍已经足够了，更进一步的了解，在转载文章中查看。</p><p>这个 stop words list 可以上网找一个合适的，亦可自己制作（？）。</p><h2 id="boost-regex"><a href="#boost-regex" class="headerlink" title="boost::regex"></a>boost::regex</h2><p>项目会用到 boost::regex 库，标准库的实现有 bug (截至 12.2.0)，而 boost::regex 可以正常处理。</p><p>在 Ubuntu/Debian 上安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libboost-regex-dev</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/regex.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 示例文本</span></span><br><span class="line">    std::string text = <span class="string">&quot;&lt;description&gt;This is a description.&lt;/description&gt;\n&lt;content&gt;This is the\ncontent with new lines.&lt;/content&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义正则表达式</span></span><br><span class="line">    <span class="function">boost::regex <span class="title">re_description</span><span class="params">(<span class="string">&quot;&lt;description&gt;([\\s\\S]*?)&lt;/description&gt;&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">boost::regex <span class="title">re_content</span><span class="params">(<span class="string">&quot;&lt;content&gt;([\\s\\S]*?)&lt;/content&gt;&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义匹配结果存储对象</span></span><br><span class="line">    boost::smatch match_description;</span><br><span class="line">    boost::smatch match_content;</span><br><span class="line">    std::string description;</span><br><span class="line">    std::string content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配 &lt;description&gt; 标签的内容</span></span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_search</span>(text, match_description, re_description)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match_description.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            description = match_description[<span class="number">1</span>].<span class="built_in">str</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Description 内容: &quot;</span> &lt;&lt; description &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;没有匹配到 &lt;description&gt; 内容。&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配 &lt;content&gt; 标签的内容</span></span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_search</span>(text, match_content, re_content)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match_content.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            content = match_content[<span class="number">1</span>].<span class="built_in">str</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Content 内容: &quot;</span> &lt;&lt; content &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;没有匹配到 &lt;content&gt; 内容。&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时需要编译选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ 你的代码.cc -lboost_regex</span><br></pre></td></tr></table></figure><p>另一个使用 boost::regex 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/regex.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">findSentenceWithKeyword</span><span class="params">(<span class="type">const</span> std::string&amp; content, <span class="type">const</span> std::string&amp; keyword)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建正则表达式</span></span><br><span class="line">    std::string regexPattern = <span class="string">&quot;(.&#123;0,13&#125;)(&quot;</span> + keyword + <span class="string">&quot;)(.&#123;0,13&#125;)&quot;</span>;</span><br><span class="line">    <span class="function">boost::regex <span class="title">pattern</span><span class="params">(regexPattern)</span></span>;</span><br><span class="line"></span><br><span class="line">    boost::smatch match;</span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_search</span>(content, match, pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;...&quot;</span> + match.<span class="built_in">str</span>(<span class="number">1</span>) + match.<span class="built_in">str</span>(<span class="number">2</span>) + match.<span class="built_in">str</span>(<span class="number">3</span>) + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string content = <span class="string">&quot;这是一个简单的例子，内容中包含了一个关键字。The keyword is important. 关键字非常重要。&quot;</span>;</span><br><span class="line">    std::string keyword = <span class="string">&quot;keyword&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::string result = <span class="built_in">findSentenceWithKeyword</span>(content, keyword);</span><br><span class="line">    <span class="keyword">if</span> (!result.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Found sentence: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Keyword not found in the content.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路草图"><a href="#思路草图" class="headerlink" title="思路草图"></a>思路草图</h2><p><img src="https://s2.loli.net/2024/06/25/eopr7gisfPCuYF9.jpg" alt="76-16.jpg"></p><p><img src="https://s2.loli.net/2024/06/25/a2ICjyQnEvHs1ZJ.jpg" alt="76-17.jpg"></p><p><img src="https://s2.loli.net/2024/06/25/yT2xuPg5tkW7N4J.jpg" alt="76-18.jpg"></p><h2 id="离线部分"><a href="#离线部分" class="headerlink" title="离线部分"></a>离线部分</h2><p>词频统计、编制索引不提。值得注意的是处理中文时会需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">trim</span><span class="params">(<span class="type">const</span> string&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> first = str.<span class="built_in">find_first_not_of</span>(<span class="string">&quot; \n\r\t&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> last = str.<span class="built_in">find_last_not_of</span>(<span class="string">&quot; \n\r\t&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (first == string::npos || last == string::npos) ? <span class="string">&quot;&quot;</span> : str.<span class="built_in">substr</span>(first, last - first + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编制网页库时，需要根据不同的 xml 文件格式编写一些特别处理的代码，有点麻烦。时不时遇到 core dump ，这大概是指针空了，需要 gdb 看看哪里出了问题，有的时候还需要深入到 xml 文件里看看，这大概率是这个 xml 文件写的很飘。</p><p>另外，编制网页库时还会需要 Simhash 去重，直接使用别人的代码：<a href="https://github.com/yanyiwu/simhash">yanyiwu/simhash</a> 。关于 Simhash 的原理（若下面这个链接挂了，可以去 <a href="https://archive.ph/">https://archive.ph/</a> 查找）：</p><p><a href="https://www.cnblogs.com/maybe2030/p/5203186.html">https://www.cnblogs.com/maybe2030/p/5203186.html</a></p><p>接着是编写偏移库，会用到 <code>tellg()</code> 之类的函数。</p><p>最后编写倒排索引，使用 TF-IDF 算法。</p><p>该算法的目标是：</p><ul><li>某词在文档中的出现次数越多，权重越大</li><li>在整个网页库中的出现次数越多，权重越小</li></ul><p>定义：<br>$TF:$  Term Frequency 某个词在文章中出现的次数<br>$DF:$ Document Frequency 包含该词语的文档数量<br>$IDF:$ Inverse Document Frequency<br>$N: $ 文档的总数</p><script type="math/tex; mode=display">IDF = \log _2(N/(DF+1))</script><p>词语的权重为：</p><script type="math/tex; mode=display">w = TF \cdot IDF</script><p>一篇文档包含多个词语，其权重为 w1, w2, …, wn，对这些权重系数归一化：</p><script type="math/tex; mode=display">w^{'}_i = \frac{w_i}{\sqrt{\sum_{k=1}^{n} w^2_k}}</script><h2 id="在线部分"><a href="#在线部分" class="headerlink" title="在线部分"></a>在线部分</h2><p>首先，我们已经有了 Reactor 模型（V5）的代码，直接把它拿过来，就是一个 echo 服务器，添加业务逻辑的代码，就可以是想要的 SearchEngine server 代码了。</p><p>业务逻辑有两块，关键词推荐和网页搜索。server 要怎么知道 client 发过来的请求是关键字推荐还是网页搜索呢？可见，我们需要定义消息的格式。简单起见，消息分为如下两种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 somemsg   # 关键字推荐，somemsg 为具体内容</span><br><span class="line">2 somemsg   # 网页搜索</span><br><span class="line"># 其他格式，服务器应该返回 &quot;format error !&quot;</span><br></pre></td></tr></table></figure><h3 id="关键字推荐"><a href="#关键字推荐" class="headerlink" title="关键字推荐"></a>关键字推荐</h3><p>关键字搜索应该怎么做呢？</p><p>我们先额外考虑一下缓存的情况。如果 client 发过来的查询已经在缓存中，直接将缓存中的数据取出。若不在缓存中，走完流程后还需要将这次查询和查询的结果保存在缓存中。</p><p>纯英文的情况，比如“hello”，我们可以把字符串拆开，<code>h</code> <code>e</code> <code>l</code> <code>o</code> ，对于每一个字符，在索引库（索引是词频库的索引）里面查找其对应的集合，得到包含这个字母的单词在词频库里面的行号。对这些集合取并集。</p><p>为什么是并集呢？因为我们要求的是与 hello 相似的单词，这允许出现这四个字母以外的字母。我们可以先取并集得到一个很大的集合（里面是词频库的行号），然后根据这个行号得到具体的单词和频率。这样得到的单词至少有一个字母和 hello 相同（打倒一大片，拾取一小撮）。</p><p>我们仍然要求得到的结果和 hello 有些相似，相似程度由最短编辑距离衡量。过滤掉相似度不足的单词（不妨设编辑距离大于 3 就认为不相似），剩下的就是合法的单词和词频。我们会得到如下的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;单词, dist(编辑距离), freq(词频)&#125;</span><br></pre></td></tr></table></figure><p>这种形式的数据可能很多，而我们只需要五六个就差不多了。为此需要评价到底哪个单词更好，我们可以将这种形式的数据放在 struct 中，然后定义 <code>&lt;</code> : </p><ol><li>dist 小的更相似。这符合直觉。</li><li>dist 相同的情况下，freq 越大，就提高该单词的优先级。</li></ol><p>定义了结构体的比较方法之后，就可以把这些数据放在优先队列中，这样取数据的时候只要 pop 一定数量的元素即可。</p><p>那么，中文的情况呢？其实也是一样的做法。</p><p>中英文混合推荐呢？将中文和英文分开，分别做一遍中文和英文的关键字推荐流程即可。</p><h3 id="网页搜索"><a href="#网页搜索" class="headerlink" title="网页搜索"></a>网页搜索</h3><p>同样先考虑一下缓存的情况。</p><p>我们如法炮制，按照关键字推荐的方法做缓存，这样会有什么问题呢？</p><p>假设我们有两条查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 cat</span><br><span class="line">2 cat</span><br></pre></td></tr></table></figure><p>因为我们将数据放在缓存中的时候，是将 cat 和对应的结果放进去的，这样没法区分开。我们改变放入缓存的策略：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;useRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">findInCache</span><span class="params">(<span class="type">const</span> string&amp; A, string flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pRedis-&gt;<span class="built_in">get</span>(<span class="string">&quot;flAg&quot;</span>+flag+<span class="string">&quot;xD&quot;</span>+A);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">putInCache</span><span class="params">(<span class="type">const</span> string&amp; A, <span class="type">const</span> string&amp; B, string flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pRedis-&gt;<span class="built_in">set</span>(<span class="string">&quot;flAg&quot;</span>+flag+<span class="string">&quot;xD&quot;</span>+A, B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理查询请求时，对于 client 发来的搜索词，将它们视为一篇文档 X，计算出每个关键词的权重系数，这就要先进行 jieba 分词。</p><p>此处的权重系数，并不能完全按照 TF-IDF 算法。因为这里词语的权重仅是在该查询语句中的权重，计算词频 Wi 即可，然后归一化：</p><script type="math/tex; mode=display">W_i^{'} = \frac{W_i}{\sqrt{\sum W_k^2}}</script><p>将其组成一个向量(w1, w2, …,wn)，该向量作为基准向量 Base .</p><p>通过倒排索引表查找包含所有关键字的网页，只要其中有一个查询词不在索引表中，就认为没有找到相关的网页。在这个过程中，不仅要把一个个词语对应的 docid 放在放在 <code>vector&lt;set&lt;int&gt;&gt;</code> 中，还要将某个 docid 里某个分词的 TF-IDF 权重放在 <code>map&lt;pair&lt;int, string&gt;, double&gt;</code> 中。</p><p>将得到的 set 取交集，对于每一篇文章，计算它与 base 的余弦相似度。</p><p>将搜索结果填充标题、链接、摘要，并按余弦相似度排序。</p><p>如何生成摘要信息？见 boost::regex 部分的代码。</p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>没什么可谈的。</p><p>代码链接：□□□□□□□□（此处指向了我的入世账号）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并发服务器方案&quot;&gt;&lt;a href=&quot;#并发服务器方案&quot; class=&quot;headerlink&quot; title=&quot;并发服务器方案&quot;&gt;&lt;/a&gt;并发服务器方案&lt;/h2&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;https://drive.goo</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
    <category term="搜索引擎" scheme="https://loveofpeach.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>高中物理讲义</title>
    <link href="https://loveofpeach.github.io/posts/85db1ce6.html"/>
    <id>https://loveofpeach.github.io/posts/85db1ce6.html</id>
    <published>2024-05-11T07:54:22.000Z</published>
    <updated>2024-05-17T17:32:29.265Z</updated>
    
    <content type="html"><![CDATA[<p>非常惭愧地又带了一个高中生。</p><p>在之前的基础上重新整理了讲义，并添加了新内容。</p><p>实际上教学中会有更多例题，但这篇文章主要是给我自己串知识点的，简单的题目我应该可以推出来，因此不放了。</p><p>持续更新中…</p><h2 id="运动的描述"><a href="#运动的描述" class="headerlink" title="运动的描述"></a>运动的描述</h2><h3 id="知识点梳理"><a href="#知识点梳理" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><p><strong>质点</strong>：理想模型，忽略大小形状，具有质量。</p><ul><li>具体问题具体分析</li></ul><p>例题：</p><p><img src="https://bu.dusays.com/2024/05/09/663cc3daedf7f.jpg" alt="75-1.jpg"></p><p><strong>参考系</strong>：描述物体运动时选定的参考。</p><p><strong>位移</strong>：矢量，由起点指向终点，大小和方向。</p><p><strong>速度</strong>：位移与发生该位移的时间的比。 $v=\Delta x/\Delta t$</p><ul><li>$1m/s=3.6km/h$</li><li>$v-t$图像，与$x-t$图像的关系，几何意义</li></ul><p><img src="https://bu.dusays.com/2024/05/09/663cc5ab4fc24.jpg" alt="75-2.jpg"></p><p>v-t 图像 直线/曲线 下方面积就是位移。</p><p>例题：</p><p><img src="https://bu.dusays.com/2024/05/09/663cc878e434a.jpg" alt="75-3.jpg"></p><p><strong>平均速度</strong>：$\overline{v}=\dfrac{\Delta x}{\Delta t}$  $\quad$ <strong>瞬时速度</strong>：$v=\dfrac{\Delta x}{\Delta t}(\Delta t \to 0)$</p><p>例题：</p><p><img src="https://bu.dusays.com/2024/05/09/663cc930dd73b.jpg" alt="75-4.jpg"></p><p><strong>加速度</strong>：速度的变化率。 $a=\Delta v/\Delta t$</p><ul><li>加速度具有方向，在未声明正方向的题目中需自行声明。</li><li>$v-t$图像中的加速度。</li></ul><p><img src="https://bu.dusays.com/2024/05/09/663cc9f19db64.jpg" alt="75-5.jpg"></p><p>速度与加速度的关系：</p><p><img src="https://bu.dusays.com/2024/05/09/663ccae91ef0a.jpg" alt="75-6.jpg"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://bu.dusays.com/2024/05/09/663ccb68e9c21.jpg" alt="75-7.jpg"></p><h2 id="匀变速直线运动"><a href="#匀变速直线运动" class="headerlink" title="匀变速直线运动"></a>匀变速直线运动</h2><h3 id="知识点梳理-1"><a href="#知识点梳理-1" class="headerlink" title="知识点梳理"></a>知识点梳理</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>匀变速直线运动：<strong>加速度不变的直线运动</strong>。</p><p>在辨析题中注意区分，例如圆周运动、平抛运动可以作为很多反例。</p><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>通过 $v-t$ 图像理解 <strong>$x=\dfrac{1}{2}at^2+v_0t$</strong> 的导出：</p><p><img src="https://bu.dusays.com/2024/05/09/663ccda5bc617.jpg" alt="75-8.jpg"></p><p>并通过类似方法理解匀变速运动中中点时刻速度等于平均速度（自行完成）。</p><p>联立 $x=\dfrac{1}{2}at^2+v_0t$ 与 $v=at+v_0$ 得到：</p><p><strong><script type="math/tex">v^2-v_0^2=2ax</script></strong></p><h4 id="重要推论"><a href="#重要推论" class="headerlink" title="重要推论"></a>重要推论</h4><script type="math/tex; mode=display">\Delta x=aT^2</script><p>含义：匀变速直线运动中，任意相等的连续时间间隔 $T$ 内位移之差为定值 $aT^2$</p><p>拓展（方便理解）：对于一个符合二次函数的数列，例如：</p><script type="math/tex; mode=display">1,4,9,16,25,... \quad (1)</script><p>逐项作差：</p><script type="math/tex; mode=display">3,5,7,9,\quad ...(2)</script><p>对 $(2)$ 继续作差：</p><script type="math/tex; mode=display">2,2,2,\quad ...(3)</script><p>将得到定值。</p><p>这个规律对任一以二次函数为数列通项公式的数列都成立。</p><p>其中数列 (1) 可理解为位移，数列 (2) 理解为速度。而数列 (3) 中的数与二次函数的二次项系数有关，在匀变速直线运动中与加速度有关。</p><p><strong>推论 $\Delta x=aT^2$ 实质上与此类似，</strong> 在 $x-t$ 图像（$x=\dfrac{1}{2}at^2+v_0t$ 为二次函数）上等距取点，算出函数值作差（第一次作差）得到等间隔内的位移,将此位移继续作差（第二次作差）得到定值。</p><p><strong>拓展（小车实验的基础）</strong>：第 $m$ 个时间 $T$ 内与第 $n$ 个时间 $T$ 内的位移差：</p><script type="math/tex; mode=display">\Delta x=x_m-x_n=(m-n)aT^2</script><h4 id="重要的比例式"><a href="#重要的比例式" class="headerlink" title="重要的比例式"></a>重要的比例式</h4><p><strong>初速度为 0 的</strong>匀加速直线运动中几个重要的比例式：</p><ul><li>时间等分</li><li>位移等分<ul><li>前 nx </li><li>第 n 个 x</li></ul></li></ul><p><strong>时间等分</strong>：第一个 T 内、第二个 T 内、第三个 T 内、… 的位移之比为 1 : 3 : 5 : …</p><p><img src="https://bu.dusays.com/2024/05/09/663cd1324faf9.jpg" alt="75-9.jpg"></p><p><strong>位移等分（前 nx）</strong>：通过前$x$，前$2x$，$…$,前$nx$位移时的<strong>速度之比</strong>为：</p><script type="math/tex; mode=display">v_1:v_2:v_3:...:v_n=1:\sqrt 2:\sqrt 3:...:\sqrt n</script><p>推导方法，由 $v^2-v_0^2=2ax$ 导出：</p><script type="math/tex; mode=display">v^2-v^2_0=2ax</script><script type="math/tex; mode=display">x=\frac{1}{2a}(v^2-v_0^2)=\frac{v^2}{2a}</script><script type="math/tex; mode=display">\frac{2x}{x}=2=\frac{v_2^2}{v_1^2}</script><script type="math/tex; mode=display">\frac{v_2}{v_1}=\sqrt{2}</script><script type="math/tex; mode=display">\frac{v_3}{v_1}=\sqrt{3}</script><script type="math/tex; mode=display">\cdots</script><p><strong>位移等分（第 n 个 x）</strong>：通过第一个 $x$，第二个 $x$，$…$，第 $n$ 个 $x$ 所用<strong>时间之比</strong>：</p><script type="math/tex; mode=display">t_1:t_2:t_3:...:t_n=1:(\sqrt 2-1):(\sqrt 3-\sqrt 2):...:(\sqrt n-\sqrt{n-1})</script><p>推导方法：因为初速度为零，速度正比于时间。至此，由 <strong>位移等分（前 nx）</strong> 的公式不难得到。</p><h4 id="自由落体、竖直上抛"><a href="#自由落体、竖直上抛" class="headerlink" title="自由落体、竖直上抛"></a>自由落体、竖直上抛</h4><p><strong>自由落体运动</strong>：匀变速直线运动的一种特例，$a=g$，$v_0=0$ .</p><script type="math/tex; mode=display">v=gt,x=\dfrac{1}{2}gt^2</script><p><strong>竖直上抛运动</strong>：仍然是匀变速直线运动的一种</p><h4 id="实验-小车测加速度"><a href="#实验-小车测加速度" class="headerlink" title="实验 小车测加速度"></a>实验 小车测加速度</h4><p><strong>实验 - 小车速度随时间的变化规律</strong> 的注意点:</p><ul><li>交流电频率 $50Hz$ ，打点计时器打出的两点时间间隔为$0.02s$</li><li>小车释放位置：靠近打点计时器</li><li>先接通电源打点，后释放小车</li><li>改变钩码数量，重复实验</li><li><strong>实验方案创新</strong>，频闪照相，等效替代等，通过 $v-t$ 图像理解剪下纸带的长度</li></ul><p>一种常见的数据处理方法：</p><script type="math/tex; mode=display">a=\frac{\Delta x}{(m-n)T^2}</script><script type="math/tex; mode=display">a=\frac{x_4-x_1}{3T^2}=\frac{x_5-x_2}{3T^2}=\frac{x_6-x_3}{3T^2}</script><script type="math/tex; mode=display">a=\frac{x_6+x_5+x_4-(x_3+x_2+x_1)}{9T^2}</script><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>画图分析，列方程，解方程：</p><p><img src="https://bu.dusays.com/2024/05/09/663ce0ab4fc03.jpg" alt="75-10.jpg"></p><p><img src="https://bu.dusays.com/2024/05/09/663ce4459f9f0.jpg" alt="75-11.jpg"></p><p>活用 v-t 图像：</p><p><img src="https://bu.dusays.com/2024/05/09/663ce5e2e0e72.jpg" alt="75-12.jpg"></p><p><img src="https://bu.dusays.com/2024/05/09/663ce812931bf.jpg" alt="75-13.jpg"></p><h2 id="力"><a href="#力" class="headerlink" title="力"></a>力</h2><h3 id="重力-弹力-摩檫力"><a href="#重力-弹力-摩檫力" class="headerlink" title="重力 弹力 摩檫力"></a>重力 弹力 摩檫力</h3><h4 id="重力"><a href="#重力" class="headerlink" title="重力"></a>重力</h4><p>定义：由于地球的吸引而使物体受到的力。</p><script type="math/tex; mode=display">G=mg</script><p><strong>注意</strong>：在地球表面附近可近似认为重力等于万有引力。 严格来说，只有在两极和赤道处，重力的方向才指向地心。其余位置，万有引力会分解为两个力：使物体随着地球自转的向心力 $F_{向}$ 和 $mg$ .</p><p>方向：竖直向下。 注意：竖直向下是和水平面垂直，不一定指向地心。</p><p>重心：因为物体的各部分都受到重力作用，在研究问题是可认为重力作用集中于物体的一点，即重心。<strong>质量分布均匀、形状规则的物体的重心在其几何中心上</strong>。</p><h4 id="弹力"><a href="#弹力" class="headerlink" title="弹力"></a>弹力</h4><p>定义：形变的物体有恢复原状的趋势，对与之接触的物体产生力的作用，这种力叫做弹力。</p><p><strong>产生条件</strong>：物体相互接触且发生<strong>弹性形变</strong>。</p><p>方向：与作用在物体上使之发生形变的外力方向相反。</p><p>常见的弹力及其方向：</p><p><img src="https://bu.dusays.com/2024/05/17/664724ea8f509.jpg" alt="75-14.jpg"></p><p><strong>重要</strong>：接触面、绳、杆上的弹力可以突变。</p><h4 id="胡克定律"><a href="#胡克定律" class="headerlink" title="胡克定律"></a>胡克定律</h4><p>内容：在弹性限度内（弹簧发生弹性形变），弹力 $F$ 的大小和弹簧长度的变化量 $x$ 成正比。</p><script type="math/tex; mode=display">F=kx</script><p>其中 $k$ 称为劲度系数。</p><h4 id="滑动摩檫力"><a href="#滑动摩檫力" class="headerlink" title="滑动摩檫力"></a>滑动摩檫力</h4><p>定义：两个相互接触的物体，当它们相对滑动时，接触面上会产生阻碍这种相对运动的力，即滑动摩擦力。</p><p>产生的条件：</p><ol><li>接触面粗糙</li><li>两个物体互相接触并挤压（即接触处有弹力）</li><li>两个物体相对运动</li></ol><p>方向：沿着接触面，与相对运动的方向相反。</p><p>大小：</p><script type="math/tex; mode=display">F_f=\mu F_{压}</script><p>其中，$\mu$ 是动摩擦因数，与两个物体的材料和接触面的粗糙程度有关，与接触面的面积和运动速度无关。</p><h4 id="静摩檫力"><a href="#静摩檫力" class="headerlink" title="静摩檫力"></a>静摩檫力</h4><p>定义：相互接触的两个物体只有相对运动的趋势（并没有发生相对运动）时的摩檫力。</p><p>产生条件：</p><ol><li>接触面粗糙</li><li>接触处有弹力</li><li>两物体间有相对运动的趋势</li></ol><p>大小（介于 0 和最大静摩擦力之间）：</p><script type="math/tex; mode=display">0<F\le F_{max}</script><p>一点可有可无的细节补充：</p><ol><li>最大静摩擦力的大小和正压力近似成正比。</li><li>$F_{max}$ 略大于滑动摩檫力。在解题中，如无特别说明，可认为两者相等。</li></ol><h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><p>在两个正交（互相垂直）的方向上分解力，列出等式，联立方程：</p><p><img src="https://s2.loli.net/2024/05/17/X1DrWoFPVqZcRCi.jpg" alt="75-15.jpg"></p><p><img src="https://bu.dusays.com/2024/05/17/664735c3ee96c.jpg" alt="75-16.jpg"></p><p><img src="https://s2.loli.net/2024/05/17/5FypAxw1jz6Q2OP.jpg" alt="75-17.jpg"></p><p>考虑如下的模型：</p><center><?xml version="1.0" standalone="yes"?><svg xmlns="http://www.w3.org/2000/svg" width="795" height="411"><path style="fill:#ffffff; stroke:none;" d="M0 0L0 411L795 411L795 0L0 0z"/><path style="fill:#fcdbdd; stroke:none;" d="M365 37C368.163 38.3274 371.586 37.9996 375 38C371.837 36.6726 368.414 37.0004 365 37z"/><path style="fill:#f79396; stroke:none;" d="M365 38L365 55C366.883 50.5135 366.883 42.4865 365 38z"/><path style="fill:#f2555b; stroke:none;" d="M366 38C368.82 39.1946 371.993 39.2818 375 40C372.727 37.3988 369.306 38.0026 366 38z"/><path style="fill:#fde2e3; stroke:none;" d="M375.333 38.6667C375.278 38.7222 375.222 39.7777 375.667 39.3333C375.722 39.2779 375.778 38.2221 375.333 38.6667z"/><path style="fill:#ef343b; stroke:none;" d="M366 39L366 55C366.985 52.6685 366.981 50.5432 367 48L374 48C369.62 45.9498 367.404 45.3025 367 40L374 40C371.387 38.9023 368.836 39.0072 366 39z"/><path style="fill:#f3676c; stroke:none;" d="M367 40L367 46C367.951 43.7147 367.951 42.2852 367 40z"/><path style="fill:#fbccce; stroke:none;" d="M368 40C370.332 40.9845 372.457 40.9813 375 41C372.668 40.0155 370.543 40.0187 368 40z"/><path style="fill:#fbcfd1; stroke:none;" d="M383 42C384.248 42.6848 384.548 42.7488 386 43C384.752 42.3152 384.452 42.2512 383 42z"/><path style="fill:#fcd7d9; stroke:none;" d="M377 43L377 56C378.591 52.2087 378.591 46.7913 377 43z"/><path style="fill:#f4686d; stroke:none;" d="M378.667 43.3333C378.222 43.7777 379.278 43.7222 379.333 43.6667C379.778 43.2222 378.722 43.2778 378.667 43.3333z"/><path style="fill:#fbd2d3; stroke:none;" d="M380.667 43.3333C380.222 43.7777 381.278 43.7223 381.333 43.6667C381.778 43.2222 380.722 43.2778 380.667 43.3333z"/><path style="fill:#f03f46; stroke:none;" d="M382 43L382 45C387.465 46.6591 386.996 50.9962 387 56L389 56C389 49.5684 389.878 43.601 382 43z"/><path style="fill:#fac8ca; stroke:none;" d="M387 43L388 44L387 43z"/><path style="fill:#f03f46; stroke:none;" d="M378 44L378 56L380 56C380.011 51.9848 380.666 47.9333 380 44L378 44z"/><path style="fill:#f3676c; stroke:none;" d="M380 44C380.545 45.6352 380.365 45.455 382 46L382 44L380 44z"/><path style="fill:#f8a5a8; stroke:none;" d="M385 45L386 46L385 45z"/><path style="fill:#f3676c; stroke:none;" d="M368 46C370.052 46.8742 371.747 46.9528 374 47C371.948 46.1258 370.253 46.0472 368 46z"/><path style="fill:#f9b0b3; stroke:none;" d="M374.333 46.6667C374.278 46.7223 374.222 47.7777 374.667 47.3333C374.722 47.2779 374.778 46.2221 374.333 46.6667M386 46L386 56C387.346 52.7929 387.346 49.2071 386 46z"/><path style="fill:#fcd7d9; stroke:none;" d="M389 46L389 56C390.346 52.7929 390.346 49.207 389 46z"/><path style="fill:#f9b0b3; stroke:none;" d="M380 47L380 56C381.256 53.0058 381.256 49.9942 380 47z"/><path style="fill:#f3676c; stroke:none;" d="M367 48L367 55C368.059 52.4657 368.059 50.5343 367 48z"/><path style="fill:#fbccce; stroke:none;" d="M368 48C370.052 48.8742 371.747 48.9528 374 49C371.948 48.1258 370.253 48.0472 368 48z"/><path style="fill:#ed1c24; stroke:none;" d="M356 66C348.033 83.0358 342.214 101.403 335.576 119C330.637 132.096 324.16 145.349 321 159L270 143C271.098 142.142 279.669 136.021 274.663 134.874C272.419 134.36 269.781 136.338 268.001 137.429C260.272 142.167 260.967 146.181 263.951 153.999C264.702 155.968 265.567 159.632 268.073 160.079C273.342 161.018 267.808 149.534 267 148C279.52 150.896 291.699 155.574 304 159.28C308.954 160.773 316.144 161.648 319.397 166.133C321.651 169.243 320.843 173.409 321.09 177C321.641 185.047 322 192.907 322 201C322 229.315 325 257.685 325 286L319.975 281.694C318.985 280.845 318.04 279.903 317.001 279.113C315.256 277.787 309.298 275.121 311.176 280.059C312.999 284.853 319.206 288.846 323 292.03C324.51 293.298 326.5 295.406 328.701 295.079C330.833 294.761 332.014 291.593 333.299 290.166C335.985 287.181 340.165 285.261 342.338 281.849C346.358 275.536 336.999 279.698 335.025 281.19L330 285C330 253.012 327.012 221.019 327 189C326.996 179.594 324.72 169.824 326.033 160.424C326.898 154.232 330.378 147.827 332.576 142L345.576 108L356.576 79C358.381 74.2531 359.614 68.8374 363 65C363.081 66.7499 363.68 75.2599 367.437 72.8241C369.28 71.6291 368.42 68.7004 368.116 66.9992C367.536 63.7604 370.072 55.1302 364.941 55.7052C360.935 56.1542 352.216 60.468 349.662 63.618C345.86 68.3078 354.142 66.6575 356 66z"/><path style="fill:#fbcfd1; stroke:none;" d="M378.667 56.3333C378.222 56.7777 379.278 56.7222 379.333 56.6667C379.778 56.2222 378.722 56.2779 378.667 56.3333z"/><path style="fill:#fcd2d3; stroke:none;" d="M387.667 56.3333C387.222 56.7777 388.278 56.7222 388.333 56.6667C388.778 56.2222 387.722 56.2779 387.667 56.3333z"/><path style="fill:#000000; stroke:none;" d="M377 231C378.979 222.669 383.478 214.849 386.85 207C394.036 190.27 401.664 173.73 408.85 157C411.436 150.978 414.058 144.966 416.769 139C417.847 136.628 420.112 133.055 419.211 130.329C418.501 128.179 415.814 128.247 413.995 127.833C409.932 126.908 405.911 125.376 402 123.947C389.371 119.332 376.739 114.636 364 110.333C358.029 108.315 352.335 105.553 346 105L345 109C357.227 114.42 370.396 118.206 383 122.692C392.889 126.212 402.761 130.631 413 133C410.531 141.638 405.994 149.77 402.424 158C395.908 173.022 389.424 188.072 382.694 203C378.923 211.367 374.124 220.059 372 229C358.288 222.922 342.621 217.383 328 214C328.703 222.835 342.928 224.309 350 226.667C372.689 234.231 395.634 241.721 418 250.192C483.187 274.881 550.146 295.482 616 318.344C635.971 325.277 656.145 331.798 676 339.053C689.278 343.905 704.027 350.936 718 353C710.849 355.114 702.427 354 695 354L652 354L510 354L44 354L44 121C59.6517 127.938 76.7882 132.479 93 138.003C122.687 148.118 152.451 158.176 182 168.692C195.636 173.545 209.332 178.237 222.999 183.004C226.189 184.116 228.986 186.392 232.17 187.311C244.449 190.856 256.821 194.357 269 198.692C286.664 204.979 304.726 212.772 323 217C322.315 208.184 309.036 207.099 302 204.656C280.362 197.144 258.368 190.243 237 182C244.673 159.318 254.904 137.239 263.8 115C267.642 105.397 273.242 95.2078 275 85C297.757 88.361 318.23 103.637 341 107L342 102C324.336 97.9135 307.161 89.8497 290 83.9969C286.122 82.6745 275.463 76.5016 271.628 79.1211C269.913 80.293 270.176 83.2164 269.742 85.0008C268.577 89.7894 266.227 94.4329 264.4 99C256.792 118.018 249.35 137.113 241.424 156C239.062 161.631 236.949 167.365 234.596 172.999C233.48 175.674 232.356 178.929 228.945 178.922C223.031 178.91 215.482 174.884 210 172.808C200.104 169.06 189.914 166.131 180 162.424C149.68 151.089 118.679 140.994 88 130.667C76.308 126.732 64.7004 122.567 53 118.667C50.0512 117.684 43.5681 114.152 40.6034 116.121C37.7457 118.019 39 125.086 39 128L39 163L39 306L39 345C39 348.471 37.4933 356.515 41.3179 358.397C44.6743 360.048 50.3482 359 54 359L84 359L192 359L577 359L697 359L726 359C728.462 359 734.26 359.979 735.824 357.451C737.069 355.441 734.357 354.033 732.941 353.363C728.188 351.114 722.977 349.659 718 348C696.264 340.755 674.736 332.912 653 325.667C593.509 305.836 534.08 285.335 475 264.308C455.407 257.335 435.532 251.084 416 243.947C403.66 239.438 389.98 232.944 377 231z"/><path style="fill:#ffffff; stroke:none;" d="M275 85C272.479 94.2187 268.149 103.128 264.6 112C258.734 126.665 253.014 141.399 246.989 156C243.483 164.496 239.125 173.033 237 182C251.856 189.828 270.055 194.018 286 199.333C297.729 203.243 309.729 209.188 322 211C322 199.625 322.246 188.314 321.17 177C320.844 173.571 321.758 169.242 319.972 166.133C317.457 161.755 310.423 160.871 306 159.576C293.203 155.828 280.203 149.95 267 148C267.686 149.778 272.178 158.555 268.697 159.369C265.967 160.007 264.6 154.71 263.951 153C261.204 145.77 261.029 142.453 268.001 138.056C269.622 137.033 272.448 134.811 274.534 135.512C278.098 136.711 270.832 141.423 270 142C274.33 145.817 280.599 146.618 286 148.344C297.554 152.036 309.179 156.265 321 159C326.67 141.605 335.784 124.793 340 107C327.265 102.849 314.548 98.2666 302 93.5756C293.448 90.3783 284.137 85.7978 275 85M345 109C340.179 119.308 336.593 130.352 332.576 141C330.309 147.012 326.756 153.603 325.894 160C324.7 168.867 326.891 178.145 326.996 187C327.068 192.999 326.93 199.001 327.004 205C327.038 207.744 326.901 211.105 328.858 213.298C331.689 216.469 338.109 217.37 342 218.667C352.037 222.012 361.937 225.726 372 229C380.019 205.45 392.2 182.873 402.001 160C405.722 151.317 411.34 142.34 413 133C390.144 125.563 367.858 116.438 345 109M44 121L44 354L718 354C707.582 347.444 693.534 345.161 682 340.947C653.522 330.541 624.564 321.474 596 311.308C538.536 290.856 480.623 271.66 423 251.656C391.565 240.743 360.099 227.762 328 219C328 241.032 329.998 263.011 330 285C332.738 283.603 338.436 277.701 341.534 278.591C343.647 279.198 341.492 281.937 340.793 282.716C338.311 285.484 334.924 287.269 332.545 290.165C331.486 291.454 330.575 294.059 328.701 294.369C324.57 295.053 316.578 285.811 314.078 282.997C313.107 281.904 311.261 280.14 311.631 278.466C312.323 275.335 318.221 281.059 318.995 281.701C320.922 283.3 322.883 284.676 325 286C325 269.681 323.414 253.3 323.015 237C322.894 232.096 325.028 221.777 321.972 217.702C318.727 213.375 307.929 212.059 303 210.192C284.883 203.33 266.251 197.804 248 191.308C242.761 189.443 237.338 188.53 232.17 186.809C225.088 184.452 218.151 180.827 211 178.344C155.429 159.052 99.9382 139.202 44 121z"/><path style="fill:#fababc; stroke:none;" d="M214 143C215.506 143.683 216.315 143.826 218 144C216.494 143.317 215.685 143.174 214 143z"/><path style="fill:#f8acae; stroke:none;" d="M213 144L214 145L213 144z"/><path style="fill:#f03f46; stroke:none;" d="M210 150L210 152C212.474 155.266 212 159.01 212 163L214 163C214 157.03 212.455 149.451 217 145C213.359 144.235 212.172 147.529 210 150z"/><path style="fill:#f57d82; stroke:none;" d="M217 144L215 145C216.482 145.791 217.796 145.87 217 144z"/><path style="fill:#fabdc0; stroke:none;" d="M212 145L213 146L212 145z"/><path style="fill:#fddddf; stroke:none;" d="M211 146L211 150C211.71 148.24 211.71 147.759 211 146z"/><path style="fill:#f37277; stroke:none;" d="M214 146L215 147L214 146z"/><path style="fill:#f9b1b4; stroke:none;" d="M214 147L214 150C214.696 148.446 214.696 148.554 214 147z"/><path style="fill:#fde2e3; stroke:none;" d="M215.667 149.333C215.222 149.778 216.278 149.722 216.333 149.667C216.778 149.222 215.722 149.278 215.667 149.333z"/><path style="fill:#fbd2d3; stroke:none;" d="M209.333 150.667C209.278 150.722 209.222 151.778 209.667 151.333C209.722 151.278 209.778 150.222 209.333 150.667z"/><path style="fill:#f14b51; stroke:none;" d="M214 150L214 152L217 152L217 150L214 150z"/><path style="fill:#f9b3b6; stroke:none;" d="M217.333 150.667C217.278 150.722 217.222 151.778 217.667 151.333C217.722 151.278 217.778 150.222 217.333 150.667z"/><path style="fill:#f8a9ac; stroke:none;" d="M210.667 152.333C210.222 152.778 211.278 152.722 211.333 152.667C211.778 152.222 210.722 152.278 210.667 152.333z"/><path style="fill:#f9b1b4; stroke:none;" d="M214 152L214 163C215.44 159.569 214.67 156.075 217 153C215.752 152.315 215.452 152.251 214 152z"/><path style="fill:#fcd7d9; stroke:none;" d="M211 153L211 163C212.346 159.793 212.346 156.207 211 153z"/><path style="fill:#fbcfd0; stroke:none;" d="M212.667 163.333C212.222 163.778 213.278 163.722 213.333 163.667C213.778 163.222 212.722 163.278 212.667 163.333z"/><path style="fill:#fde2e3; stroke:none;" d="M357 308C358.248 308.685 358.548 308.749 360 309C358.752 308.315 358.452 308.251 357 308z"/><path style="fill:#fbd1d2; stroke:none;" d="M362 308C363.248 308.685 363.548 308.749 365 309C363.752 308.315 363.452 308.251 362 308z"/><path style="fill:#fbd0d1; stroke:none;" d="M370 308C371.248 308.685 371.548 308.749 373 309C371.752 308.315 371.452 308.251 370 308z"/><path style="fill:#fbcfd1; stroke:none;" d="M383 308C384.506 308.683 385.315 308.826 387 309C385.494 308.317 384.685 308.174 383 308z"/><path style="fill:#f3676c; stroke:none;" d="M357 309L357 322C358.673 318.012 357.984 313.267 359 309L357 309z"/><path style="fill:#f8a8ab; stroke:none;" d="M359 309L360 310L359 309z"/><path style="fill:#f1585e; stroke:none;" d="M359 311C361.45 311.174 362.695 310.906 365 310C362.492 309.111 361.185 309.505 359 311z"/><path style="fill:#f58185; stroke:none;" d="M365 309L366 310L365 309z"/><path style="fill:#f14f55; stroke:none;" d="M367 314C369.633 312.159 371.865 311.576 375 311C371.254 308.222 368.298 309.723 367 314z"/><path style="fill:#fac9cb; stroke:none;" d="M381 309L382 310L381 309z"/><path style="fill:#f14e54; stroke:none;" d="M382 309C384.37 310.927 385.959 311.252 389 311C386.686 309.409 384.81 309.142 382 309z"/><path style="fill:#fababc; stroke:none;" d="M387.667 309.333C387.222 309.778 388.278 309.722 388.333 309.667C388.778 309.222 387.722 309.278 387.667 309.333z"/><path style="fill:#f47075; stroke:none;" d="M389.667 309.333C389.222 309.778 390.278 309.722 390.333 309.667C390.778 309.222 389.722 309.278 389.667 309.333z"/><path style="fill:#fcd7d9; stroke:none;" d="M391 309L391 324C392.74 319.852 392.74 313.148 391 309z"/><path style="fill:#ef343b; stroke:none;" d="M358 310L358 322C359.505 318.421 360.127 313.294 358 310M364 310C365.724 314.068 365.997 317.62 366 322C367.677 318.003 367.867 312.507 364 310z"/><path style="fill:#f47479; stroke:none;" d="M366 310L367 311L366 310z"/><path style="fill:#f9b6b9; stroke:none;" d="M367 310L368 311L367 310z"/><path style="fill:#fab6b9; stroke:none;" d="M380 310L381 311L380 310z"/><path style="fill:#ef3940; stroke:none;" d="M381 310C379.311 315.716 379.111 321.207 386 322C381.431 318.081 381.27 315.607 383 310L381 310z"/><path style="fill:#ef343b; stroke:none;" d="M389 310C388.598 311.944 388.598 312.056 389 314C389.71 312.241 389.71 311.759 389 310z"/><path style="fill:#f14a51; stroke:none;" d="M390 310C389.435 314.781 389.902 319.217 390 324C391.667 320.028 391.667 313.972 390 310z"/><path style="fill:#f58186; stroke:none;" d="M364 311L365 312L364 311z"/><path style="fill:#fababc; stroke:none;" d="M369 311L370 312L369 311z"/><path style="fill:#f8a5a8; stroke:none;" d="M372 311L373 312L372 311z"/><path style="fill:#ef343b; stroke:none;" d="M374 311L374 322C375.431 318.59 375.431 314.41 374 311z"/><path style="fill:#f3676c; stroke:none;" d="M375 311L375 322C376.431 318.59 376.431 314.41 375 311z"/><path style="fill:#fabdbf; stroke:none;" d="M383 311L384 312L383 311z"/><path style="fill:#ffffff; stroke:none;" d="M384.259 311.89C380.864 313.052 381.817 320.512 385.741 319.248C389.142 318.153 388.249 310.525 384.259 311.89z"/><path style="fill:#f57d82; stroke:none;" d="M365 312L365 322C366.346 318.793 366.346 315.207 365 312z"/><path style="fill:#f9b0b3; stroke:none;" d="M368 312L369 313L368 312z"/><path style="fill:#f79396; stroke:none;" d="M373 312L373 322C374.346 318.793 374.346 315.207 373 312z"/><path style="fill:#f3676c; stroke:none;" d="M379.333 312.667C379.278 312.722 379.222 313.778 379.667 313.333C379.722 313.278 379.778 312.222 379.333 312.667z"/><path style="fill:#f79396; stroke:none;" d="M359 313L359 322C360.256 319.006 360.256 315.994 359 313z"/><path style="fill:#fbc3c6; stroke:none;" d="M381 313L381 318C381.83 315.969 381.83 315.031 381 313z"/><path style="fill:#f9aeb1; stroke:none;" d="M388 313L388 318C388.83 315.969 388.83 315.031 388 313z"/><path style="fill:#f57d82; stroke:none;" d="M367 314L367 322C368.161 319.23 368.161 316.77 367 314z"/><path style="fill:#fbc5c7; stroke:none;" d="M378 314L378 318C378.71 316.241 378.71 315.759 378 314z"/><path style="fill:#f14a50; stroke:none;" d="M379 314L379 319C379.83 316.969 379.83 316.031 379 314z"/><path style="fill:#f03c43; stroke:none;" d="M389 317C387.961 322.152 387.598 325.409 382 327C388.956 329.805 391.294 322.469 389 317z"/><path style="fill:#f47479; stroke:none;" d="M381 318L382 319L381 318z"/><path style="fill:#f79c9f; stroke:none;" d="M379 319L380 320L379 319z"/><path style="fill:#f79a9e; stroke:none;" d="M382 319L383 320L382 319z"/><path style="fill:#f1545a; stroke:none;" d="M387 319C386.014 320.479 386 320.203 386 322C387.388 321.309 387.861 321.015 389 320L387 319z"/><path style="fill:#f79396; stroke:none;" d="M383 320C384.248 320.685 384.548 320.749 386 321C384.752 320.315 384.452 320.251 383 320z"/><path style="fill:#f47378; stroke:none;" d="M381 321L382 322L381 321z"/><path style="fill:#f9aaad; stroke:none;" d="M387 321L388 324C388.685 322.752 388.749 322.452 389 321L387 321z"/><path style="fill:#fbccce; stroke:none;" d="M357 322C358.248 322.685 358.548 322.749 360 323C358.752 322.315 358.452 322.251 357 322M365 322C366.248 322.685 366.548 322.749 368 323C366.752 322.315 366.452 322.251 365 322M373 322C374.248 322.685 374.548 322.749 376 323C374.752 322.315 374.452 322.251 373 322z"/><path style="fill:#f89ca0; stroke:none;" d="M382 322C383.506 322.683 384.315 322.826 386 323C384.494 322.317 383.685 322.174 382 322z"/><path style="fill:#f8a3a6; stroke:none;" d="M390 324L391 325L390 324z"/><path style="fill:#fbccce; stroke:none;" d="M379 325L379 328C379.696 326.446 379.696 326.554 379 325z"/><path style="fill:#f69296; stroke:none;" d="M380 325L381 326L380 325z"/><path style="fill:#fac5c7; stroke:none;" d="M386 325L387 326L386 325z"/><path style="fill:#f15056; stroke:none;" d="M380 326L380 328L382 328L382 326L380 326z"/><path style="fill:#f57b80; stroke:none;" d="M382 326C383.506 326.683 384.315 326.826 386 327C384.494 326.317 383.685 326.174 382 326z"/><path style="fill:#f9b3b6; stroke:none;" d="M389 326L390 327L389 326z"/></svg></center><p>斜坡固定，物体静止在斜坡上，斜坡与物体之间有摩擦，动摩擦因数为 $\mu$, 斜坡的倾角为 $\theta$.</p><p>对物体受力分析：物体受重力、摩檫力、斜面对物体的弹力。</p><p>将重力分解为沿着斜坡向下的力和垂直指向斜坡的力，建立方程：</p><script type="math/tex; mode=display">mg\cos \theta =F_n</script><script type="math/tex; mode=display">f=mg\sin \theta =\mu F_n=\mu mg\cos \theta</script><script type="math/tex; mode=display">\sin \theta = \mu \cos \theta</script><script type="math/tex; mode=display">\mu = \tan \theta</script><p>即，在这种情况下，物体想要保持静止，斜面的动摩擦因数至少为 $\tan \theta$ ，若小于这个值，物体会因为重力沿着斜面向下的力大于摩檫阻力而向下滑落。</p><p><img src="https://bu.dusays.com/2024/05/17/664766180a881.jpg" alt="75-18.jpg"></p><p><img src="https://bu.dusays.com/2024/05/17/66476617f1cfc.jpg" alt="75-19.jpg"></p><h3 id="力的合成与分解"><a href="#力的合成与分解" class="headerlink" title="力的合成与分解"></a>力的合成与分解</h3><h4 id="知识点梳理-2"><a href="#知识点梳理-2" class="headerlink" title="知识点梳理"></a>知识点梳理</h4><p>合力：一个力可以等效替代某几个力的共同作用。</p><p>分力：合力所等效替代的那几个力。</p><p>力的合成遵循 平行四边形法则 / 三角形法则。</p><p>两个共点力的合力范围：</p><script type="math/tex; mode=display">|F_1-F_2| \le F \le F_1 + F_2</script><p>三个共点力的合力大小范围：（可以由两个点的情形推广而来）…</p><p>一些力的分解案例：</p><p><img src="https://bu.dusays.com/2024/05/17/66476a825f7bd.jpg" alt="75-20.jpg"></p><p>力的正交分解：将力分解到两个互相垂直的方向上。</p><h4 id="专题-共点力平衡"><a href="#专题-共点力平衡" class="headerlink" title="专题 共点力平衡"></a>专题 共点力平衡</h4><p>受力分析的方法：整体法（不考虑系统内部的相互作用）、隔离法。</p><p><img src="https://bu.dusays.com/2024/05/17/664774aa8d791.jpg" alt="75-21.jpg"></p><p><img src="https://s2.loli.net/2024/05/17/FXjQprS1mbzZqvi.jpg" alt="75-22.jpg"></p><p><img src="https://bu.dusays.com/2024/05/18/66478441a6755.jpg" alt="75-23.jpg"></p><p><img src="https://bu.dusays.com/2024/05/18/6647870d9ea30.jpg" alt="75-24.jpg"></p><p><img src="https://bu.dusays.com/2024/05/18/6647870dd1f55.jpg" alt="75-25.jpg"></p><p><img src="https://s2.loli.net/2024/05/18/sceMNAOjIb2Ko4Q.jpg" alt="75-26.jpg"></p><p><img src="https://s2.loli.net/2024/05/18/jgGpdTKovtk7bIy.jpg" alt="75-27.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;非常惭愧地又带了一个高中生。&lt;/p&gt;
&lt;p&gt;在之前的基础上重新整理了讲义，并添加了新内容。&lt;/p&gt;
&lt;p&gt;实际上教学中会有更多例题，但这篇文章主要是给我自己串知识点的，简单的题目我应该可以推出来，因此不放了。&lt;/p&gt;
&lt;p&gt;持续更新中…&lt;/p&gt;
&lt;h2 id=&quot;运动的描述&quot;</summary>
      
    
    
    
    <category term="杂项" scheme="https://loveofpeach.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="高中物理" scheme="https://loveofpeach.github.io/tags/%E9%AB%98%E4%B8%AD%E7%89%A9%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CppNote4</title>
    <link href="https://loveofpeach.github.io/posts/cb3a6d2b.html"/>
    <id>https://loveofpeach.github.io/posts/cb3a6d2b.html</id>
    <published>2024-05-02T16:23:19.000Z</published>
    <updated>2024-05-31T17:59:37.698Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/555ef888.html">CppNote3</a></p><h2 id="容器的选择"><a href="#容器的选择" class="headerlink" title="容器的选择"></a>容器的选择</h2><p>序列式容器：vector、deque、list、array、forward_list<br>关联式容器：set、multiset、map、multimap<br>无序关联式容器：unordered_set、unordered_multiset、unordered_map、unordered_multimap<br>容器适配器：stack、queue、priority_queue</p><p><strong>容器中元素是否有顺序？</strong></p><ul><li>如果有顺序，首选关联式容器或者优先级队列，备选序列式容器（sort），肯定不会用到无序关联式容<br>器。</li><li>如果没有顺序，首选就是无序关联式容器，备选序列式容器，不会选择关联式容器或者优先级队列。</li></ul><p><strong>容器是否具有下标？</strong><br>vector、deque、map、unordered_map</p><p><strong>迭代器的类型？</strong></p><ul><li>随机访问迭代器（LegacyRandomAccessIterator）：vector、deque</li><li>双向迭代器（LegacyBidirectionalIterator）：list、关联式容器</li><li>前向迭代器（LegacyForwardIterator）：无序关联式容器</li></ul><p><strong>容器是否具有迭代器？</strong><br>除了容器适配器之外，其他的容器都具备迭代器。</p><h2 id="迭代器概述"><a href="#迭代器概述" class="headerlink" title="迭代器概述"></a>迭代器概述</h2><p>从前面的用法看，<strong>迭代器类似于指针。</strong></p><p>模板的引入使函数和类的定义脱离了存储类型的限制，在需要时指定即可，是一种泛化的思维观念。<br><strong>迭代器是更高层次的抽象</strong>，它使<strong>算法独立于容器</strong>，<strong>算法独立于类型</strong>。</p><p>不同的算法对迭代器的要求不同，为此，STL定义了5种迭代器，分别是</p><ul><li>随机访问迭代器（RandomAccessIterator）</li><li>双向迭代器（BidirectionalIterator）</li><li>前向迭代器（ForwardIterator）</li><li>输出迭代器（OutputIterator）</li><li>输入迭代器（InputIterator）</li></ul><p>其层次结构如图所示：</p><p><img src="https://s2.loli.net/2024/05/01/Oua6i5hJAvYwdSI.png" alt="74-1.png"></p><p>为什么要定义这么多迭代器？</p><ul><li><strong>不同的算法要求的迭代器类型不同</strong>，定义 5 种迭代器，是为了使用 <strong>“最合适”</strong> 的工具，编写算法时在满足要求的基础上尽可能地使用功能少的迭代器，减少副作用。假设要编写一个查找函数<code>find()</code>，只要能读取容器中的元素即可，最理想的方案是使用<strong>输入迭代器</strong>，这样，有效防止了在<code>find()</code>函数内对元素的修改，真正“物尽其用”。打个比方，<strong>一把刀既能削铁如泥，又能砍瓜切菜，还能理发，真正用其理发是很危险的，不如剃头刀来的安全方便。</strong></li><li>对 5 种迭代器初步了解后，重看上图，实际上，依照箭头的方向，迭代器实现的功能越来越少，除了输出迭代器和输入迭代器是功能相反的并列关系外，<strong>箭头左侧的迭代器不仅都实现了右侧迭代器所有的功能</strong>，而且在其基础上增加了一些功能。所以说，<strong>箭头左侧的迭代器“适应”于箭头右侧的迭代器</strong>。因此，如果某个算法的形参为前向迭代器，则实参可以是双向迭代器和随机访问迭代器，但不能是输出迭代器或输入迭代器。</li></ul><p>迭代器操作和类别：</p><p><img src="https://s2.loli.net/2024/05/01/keH8G9d3MnotaKv.png" alt="74-2.png"></p><h2 id="流迭代器"><a href="#流迭代器" class="headerlink" title="流迭代器"></a>流迭代器</h2><p>流迭代器是特殊的迭代器，包括两种：</p><ul><li>输出流迭代器(ostream_iterator)</li><li>输入流迭代器(istream_iterator)</li></ul><p>理解的<strong>要点是将 输入/输出流 作为容器看待</strong>。因此，任何接受迭代器参数的算法都可以和流一起工作。使用流迭代器必须要包含头文件<code>&lt;iterator&gt;</code>。</p><h3 id="输出流迭代器"><a href="#输出流迭代器" class="headerlink" title="输出流迭代器"></a>输出流迭代器</h3><p>ostream_iterator 的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ostream_iterator</span>( ostream_type&amp; stream, <span class="type">const</span> CharT* delim );</span><br><span class="line"><span class="built_in">ostream_iterator</span>( ostream_type&amp; stream );</span><br></pre></td></tr></table></figure><p><code>std::copy</code>，在头文件<code>&lt;algorithm&gt;</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> InputIt, <span class="keyword">class</span> OutputIt &gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">copy</span><span class="params">( InputIt first, InputIt last,</span></span></span><br><span class="line"><span class="params"><span class="function">               OutputIt d_first )</span></span>;</span><br></pre></td></tr></table></figure><p>看一个演示例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="comment">// 流对象可以看作容器</span></span><br><span class="line">    <span class="function">ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">osi</span><span class="params">(cout, <span class="string">&quot;\n&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), osi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面我们试着从源码上看看究竟发生了什么。（为简单起见，源码作了一定修改，重要的是理解其逻辑）</p><p>ostream_iterator 的源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ostream_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//ostream_iterator&lt;int&gt; osi(cout, &quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">//__s = cout;</span></span><br><span class="line">    <span class="comment">//const _CharT* __c = &quot;\n&quot;</span></span><br><span class="line">    <span class="comment">//_M_stream = &amp;cout;</span></span><br><span class="line">    <span class="comment">//_M_string = __c;</span></span><br><span class="line">    <span class="built_in">ostream_iterator</span>(ostream_type&amp; __s, <span class="type">const</span> _CharT* __c)</span><br><span class="line">    : _M_stream(&amp;__s)</span><br><span class="line">    , _M_string(__c)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//__value = 1</span></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">int</span>&amp; __value)</span><br><span class="line">    &#123;</span><br><span class="line">        *_M_stream &lt;&lt; __value;<span class="comment">//cout &lt;&lt; 1</span></span><br><span class="line">        <span class="keyword">if</span> (_M_string)</span><br><span class="line">        *_M_stream &lt;&lt; _M_string;<span class="comment">//cout &lt;&lt; &quot;\n&quot;</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ostream_iterator&lt;_Tp&gt;&amp; <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ostream_type* _M_stream;</span><br><span class="line">    <span class="type">const</span> _CharT* _M_string;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>copy 的源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copy---&gt;__copy_aux---&gt;__copy_aux2---&gt;__copy</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> _OutputIter <span class="title">copy</span><span class="params">(_InputIter __first, _InputIter __last,</span></span></span><br><span class="line"><span class="params"><span class="function">                        _OutputIter __result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __STL_REQUIRES(_InputIter, _InputIterator);</span><br><span class="line">    __STL_REQUIRES(_OutputIter, _OutputIterator);</span><br><span class="line">    <span class="keyword">return</span> __copy_aux(__first, __last, __result, __VALUE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>, <span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> _OutputIter __copy_aux(_InputIter __first, _InputIter __last,</span><br><span class="line">                              _OutputIter __result, _Tp*) &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Tp&gt;::has_trivial_assignment_operator</span><br><span class="line">            _Trivial;</span><br><span class="line">    <span class="keyword">return</span> __copy_aux2(__first, __last, __result, _Trivial());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,</span><br><span class="line">                               _OutputIter __result, __false_type) &#123;</span><br><span class="line">    <span class="keyword">return</span> __copy(__first, __last, __result,</span><br><span class="line">                  __ITERATOR_CATEGORY(__first),</span><br><span class="line">                  __DISTANCE_TYPE(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_InputIter</span>, <span class="keyword">class</span> <span class="title class_">_OutputIter</span>, <span class="keyword">class</span> <span class="title class_">_Distance</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> _OutputIter __copy(_InputIter __first, _InputIter __last,</span><br><span class="line">                          _OutputIter __result,</span><br><span class="line">                          input_iterator_tag, _Distance*)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__result, ++__first)</span><br><span class="line">        *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector&lt;int&gt; vec = &#123;1, 3, 7, 9, 6&#125;;</span></span><br><span class="line"><span class="comment">//copy(vec.begin(), vec.end(), osi);</span></span><br><span class="line"><span class="comment">//__first = vec.begin()</span></span><br><span class="line"><span class="comment">//__last = vec.end()</span></span><br><span class="line"><span class="comment">//__result = osi</span></span><br><span class="line">                    last</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span>   <span class="number">5</span>   <span class="number">2</span>   <span class="number">4</span></span><br><span class="line">    f</span><br><span class="line"></span><br><span class="line">osi = <span class="number">1</span></span><br><span class="line">_OutputIter <span class="built_in">copy</span>(_InputIter __first, _InputIter __last, _OutputIter __result )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__result, ++__first)</span><br><span class="line">        *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入流迭代器、gdb-调试"><a href="#输入流迭代器、gdb-调试" class="headerlink" title="输入流迭代器、gdb 调试"></a>输入流迭代器、gdb 调试</h3><p>接下来，看看 istream_iterator 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::istream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">isi</span><span class="params">(cin)</span></span>;</span><br><span class="line">    <span class="built_in">copy</span>(isi, <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), vec.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>)); <span class="comment">// 右值</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这份代码<strong>出错了</strong>，我们尝试使用 gdb 调试。</p><p>使用编译选项<code>-g</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ .\tmptest.cpp -o main -g</span><br></pre></td></tr></table></figure><p>生成了 main.exe ，继续键入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb .\main.exe</span><br></pre></td></tr></table></figure><p>进入了 gdb 调试。</p><p>常用命令<code>list</code>，显示代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list</span><br><span class="line">10      using std::vector;</span><br><span class="line">11      using std::istream_iterator;</span><br><span class="line">12      using std::ostream_iterator;</span><br><span class="line">13</span><br><span class="line">14      void test() &#123;</span><br><span class="line">15          vector&lt;int&gt; vec;</span><br><span class="line">16          istream_iterator&lt;int&gt; isi(cin);</span><br><span class="line">17          copy(isi, istream_iterator&lt;int&gt;(), vec.begin());</span><br><span class="line">18          copy(vec.begin(), vec.end(),</span><br><span class="line">(gdb) list 1     ostream_iterator&lt;int&gt;(cout, &quot; &quot;)); // 鍙冲€?</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2       #include &lt;iterator&gt;</span><br><span class="line">3       #include &lt;vector&gt;</span><br><span class="line">4       #include &lt;algorithm&gt;</span><br><span class="line">5</span><br><span class="line">6       using std::cout;</span><br><span class="line">7       using std::endl;</span><br><span class="line">8       using std::cin;</span><br><span class="line">9       using std::copy;</span><br><span class="line">10      using std::vector;</span><br><span class="line">(gdb) list</span><br><span class="line">11      using std::istream_iterator;</span><br><span class="line">12      using std::ostream_iterator;</span><br><span class="line">13</span><br><span class="line">14      void test() &#123;</span><br><span class="line">15          vector&lt;int&gt; vec;</span><br><span class="line">16          istream_iterator&lt;int&gt; isi(cin);</span><br><span class="line">17          copy(isi, istream_iterator&lt;int&gt;(), vec.begin());</span><br><span class="line">18          copy(vec.begin(), vec.end(),</span><br><span class="line">20          cout &lt;&lt; endl;iterator&lt;int&gt;(cout, &quot; &quot;)); // 鍙冲€?</span><br><span class="line">(gdb) list</span><br><span class="line">21      &#125;</span><br><span class="line">22</span><br><span class="line">23      int main() &#123;</span><br><span class="line">24          test();</span><br><span class="line">25          return 0;</span><br><span class="line">26      &#125;</span><br></pre></td></tr></table></figure><p>运行程序（100是输入）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: D:\c++code\main.exe</span><br><span class="line">[New Thread 16524.0x3c68]</span><br><span class="line">[New Thread 16524.0x265c]</span><br><span class="line">[New Thread 16524.0x31a8]</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">Thread 1 received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00007ff7eeab3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">356                 *__result = *__first;</span><br></pre></td></tr></table></figure><p><code>bt</code>命令，打印堆栈信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007ff7eeab3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">#1  0x00007ff7eeab3e3b in std::__copy_move_a2&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:506</span><br><span class="line">#2  0x00007ff7eeab3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">#3  0x00007ff7eeab3cd9 in std::__copy_move_a&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:540</span><br><span class="line">#4  0x00007ff7eeab3f2b in std::copy&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:633</span><br><span class="line">#5  0x00007ff7eeab173e in test () at .\tmptest.cpp:17</span><br><span class="line">#6  0x00007ff7eeab17ea in main () at .\tmptest.cpp:24</span><br></pre></td></tr></table></figure><p>由上面的信息，我们可以定位到出错代码的行号。</p><p>我们继续看看 gdb 调试的其他命令。</p><p>打断点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 15</span><br><span class="line">Breakpoint 1 at 0x1400016e1: file .\tmptest.cpp, line 15.</span><br><span class="line">(gdb) b 24</span><br><span class="line">Breakpoint 2 at 0x1400017e5: file .\tmptest.cpp, line 24.</span><br><span class="line">(gdb) info b</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x00000001400016e1 in test() at .\tmptest.cpp:15</span><br><span class="line">2       breakpoint     keep y   0x00000001400017e5 in main() at .\tmptest.cpp:24</span><br></pre></td></tr></table></figure><p>开始运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: D:\c++code\main.exe</span><br><span class="line">[New Thread 7156.0x3b14]</span><br><span class="line">[New Thread 7156.0x4534]</span><br><span class="line">[New Thread 7156.0x179c]</span><br><span class="line"></span><br><span class="line">Thread 1 hit Breakpoint 2, main () at .\tmptest.cpp:24</span><br><span class="line">24          test();</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>单步调试<code>s</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line">Thread 1 hit Breakpoint 1, test () at .\tmptest.cpp:15</span><br><span class="line">15          vector&lt;int&gt; vec;</span><br></pre></td></tr></table></figure><p>一行一行地执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line">16          istream_iterator&lt;int&gt; isi(cin);</span><br></pre></td></tr></table></figure><p>继续（10 是输入）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line">10</span><br><span class="line">17          copy(isi, istream_iterator&lt;int&gt;(), vec.begin());</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Thread 1 received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">356                 *__result = *__first;</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">#1  0x00007ff6ef5c3e3b in std::__copy_move_a2&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:506</span><br><span class="line">#2  0x00007ff6ef5c3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=...,</span><br><span class="line">    __result=0x0) at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">#3  0x00007ff6ef5c3cd9 in std::__copy_move_a&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:540</span><br><span class="line">#4  0x00007ff6ef5c3f2b in std::copy&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:633</span><br><span class="line">#5  0x00007ff6ef5c173e in test () at .\tmptest.cpp:17</span><br><span class="line">#6  0x00007ff6ef5c17ea in main () at .\tmptest.cpp:24</span><br></pre></td></tr></table></figure><p>使某个断点失效，<code>disable 1</code>，其中 1 是断点的编号。</p><p><code>c</code>(continue)，运行到下一个断点。</p><p>栈帧的切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">PS D:\c++code&gt; gdb .\main.exe</span><br><span class="line">GNU gdb (GDB for MinGW-W64 x86_64, built by Brecht Sanders) 13.2</span><br><span class="line">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-w64-mingw32&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from .\main.exe...</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: D:\c++code\main.exe</span><br><span class="line">[New Thread 13656.0x3134]</span><br><span class="line">[New Thread 13656.0x2c08]</span><br><span class="line">[New Thread 13656.0x13cc]</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">Thread 1 received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">356                 *__result = *__first;</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007ff6ef5c3498 in std::__copy_move&lt;false, false, std::input_iterator_tag&gt;::__copy_m&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=..., __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:356</span><br><span class="line">#1  0x00007ff6ef5c3e3b in std::__copy_move_a2&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=...,</span><br><span class="line">    __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:506</span><br><span class="line">#2  0x00007ff6ef5c3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=...,</span><br><span class="line">    __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">#3  0x00007ff6ef5c3cd9 in std::__copy_move_a&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=...,</span><br><span class="line">    __last=..., __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:540</span><br><span class="line">#4  0x00007ff6ef5c3f2b in std::copy&lt;std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, __gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (__first=..., __last=...,</span><br><span class="line">    __result=non-dereferenceable iterator for std::vector)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:633</span><br><span class="line">#5  0x00007ff6ef5c173e in test () at .\tmptest.cpp:17</span><br><span class="line">#6  0x00007ff6ef5c17ea in main () at .\tmptest.cpp:24</span><br><span class="line">(gdb) f 2</span><br><span class="line">#2  0x00007ff6ef5c3d8b in std::__copy_move_a1&lt;false, std::istream_iterator&lt;int, char, std::char_traits&lt;char&gt;, long long&gt;, int*&gt; (__first=...,</span><br><span class="line">    __last=..., __result=0x0)</span><br><span class="line">    at D:/mingw64/include/c++/13.2.0/bits/stl_algobase.h:533</span><br><span class="line">533         &#123; return std::__copy_move_a2&lt;_IsMove&gt;(__first, __last, __result); &#125;</span><br></pre></td></tr></table></figure><p>现在回到本级标题下最开始遇到的问题。</p><p>解决方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::istream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">isi</span><span class="params">(cin)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(isi, <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), std::<span class="built_in">back_inserter</span>(vec));</span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>)); <span class="comment">// 右值</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">334</span></span><br><span class="line"><span class="comment">3456</span></span><br><span class="line"><span class="comment">3456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3434</span></span><br><span class="line"><span class="comment">^Z</span></span><br><span class="line"><span class="comment">1 2 3 4 6 7 334 3456 3456 3434</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此为 windows 环境</span></span><br></pre></td></tr></table></figure><p>解释，需要看源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">istream_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">istream_iterator</span>()</span><br><span class="line">    : _M_stream(<span class="number">0</span>)</span><br><span class="line">    , _M_ok(<span class="literal">false</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="comment">//istream_iterator&lt;int&gt; isi(cin);</span></span><br><span class="line">    <span class="comment">//__s = cin;</span></span><br><span class="line">    <span class="comment">//_M_stream = &amp;cin;</span></span><br><span class="line">    <span class="built_in">istream_iterator</span>(istream_type&amp; __s)</span><br><span class="line">    : _M_stream(&amp;__s)</span><br><span class="line">    &#123;</span><br><span class="line">        _M_read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> _M_read()</span><br><span class="line">    &#123;</span><br><span class="line">        _M_ok = (_M_stream &amp;&amp; *_M_stream) ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">//true</span></span><br><span class="line">        <span class="keyword">if</span> (_M_ok)</span><br><span class="line">        &#123;</span><br><span class="line">            *_M_stream &gt;&gt; _M_value; <span class="comment">// cin &gt;&gt; _M_value</span></span><br><span class="line">            _M_ok = *_M_stream ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reference <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _M_value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    istream_iterator&amp; <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        _M_read();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> _M_equal(<span class="type">const</span> istream_iterator&amp; __x) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_M_ok == __x._M_ok) &amp;&amp; (!_M_ok || _M_stream == __x._M_stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    istream_type* _M_stream;</span><br><span class="line">    _Tp _M_value;</span><br><span class="line">    <span class="type">bool</span> _M_ok;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__x = isi;</span></span><br><span class="line"><span class="comment">//__y = istream_iterator&lt;int&gt;()</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> istream_iterator&lt;_Tp, _CharT, _Traits, _Dist&gt;&amp; __x,</span><br><span class="line">                <span class="type">const</span> istream_iterator&lt;_Tp, _CharT, _Traits, _Dist&gt;&amp; __y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __x._M_equal(__y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">back_insert_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp;</span><br><span class="line">    <span class="keyword">operator</span>=(<span class="type">const</span> <span class="keyword">typename</span> _Container::value_type&amp; __value)</span><br><span class="line">    &#123;</span><br><span class="line">        container-&gt;<span class="built_in">push_back</span>(__value);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp; <span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp; <span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    back_insert_iterator&lt;_Container&gt;&amp; <span class="keyword">operator</span>++(<span class="type">int</span>) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copy(isi, istream_iterator&lt;int&gt;(), std::back_inserter(vec));</span></span><br><span class="line"><span class="comment">//__first = isi;</span></span><br><span class="line"><span class="comment">//__last = istream_iterator&lt;int&gt;()</span></span><br><span class="line"><span class="comment">//__result = std::back_inserter(vec)</span></span><br><span class="line"><span class="function">_OutputIter <span class="title">copy</span><span class="params">(_InputIter __first, _InputIter __last, _OutputIter __result )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first != __last; ++__result, ++__first)</span><br><span class="line">        *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// __result = 2</span></span><br></pre></td></tr></table></figure><h2 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h2><p>在尾部进行插入：back_inserter、back_insert_iterator<br>在头部进行插入：front_inserter、front_insert_iterator<br>在任意位置进行插入：inserter、insert_iterator</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::back_inserter;</span><br><span class="line"><span class="keyword">using</span> std::back_insert_iterator;</span><br><span class="line"><span class="keyword">using</span> std::front_inserter;</span><br><span class="line"><span class="keyword">using</span> std::front_insert_iterator;</span><br><span class="line"><span class="keyword">using</span> std::inserter;</span><br><span class="line"><span class="keyword">using</span> std::insert_iterator;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::list;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; listNum = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 vector 尾部插入</span></span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(vecNum));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 9 7 </span></span><br><span class="line"><span class="comment">1 3 5 9 7 11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; listNum = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 vector 尾部插入</span></span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(),</span><br><span class="line">         back_insert_iterator&lt;vector&lt;<span class="type">int</span>&gt;&gt;(vecNum));</span><br><span class="line">    <span class="comment">// 可以参考 cppreference</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 9 7 </span></span><br><span class="line"><span class="comment">1 3 5 9 7 11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 list 前面插入数据</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; listNum = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 vector 尾部插入</span></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">front_inserter</span>(listNum));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(listNum.<span class="built_in">begin</span>(), listNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">7 9 5 3 1 11 22 44 66 99 33 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; setNum = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(setNum.<span class="built_in">begin</span>(), setNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> sit = setNum.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(vecNum.<span class="built_in">begin</span>(), vecNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">inserter</span>(setNum, sit));</span><br><span class="line">    <span class="comment">// 可以参考 cppreference</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(setNum.<span class="built_in">begin</span>(), setNum.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 7 22 33 55 66 99 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 22 33 55 66 99 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test4</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h2><p>看例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::reverse_iterator rit = num.<span class="built_in">rbegin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; rit != num.<span class="built_in">rend</span>(); ++rit) &#123;</span><br><span class="line">        cout &lt;&lt; *rit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 5 3 1 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法库中的函数，<strong>都是非成员函数</strong>。不是针对与某一种具体的类型或容器编程，而是针对所有的类型或者容器进行编程，可以体现通用编程或者泛型编程的思想。</p><p>分类：</p><ul><li>非修改式的算法：<strong>for_each</strong>、count、find、search</li><li>修改式的算法：<strong>copy</strong>、<strong>remove_if</strong>、move、replace</li><li>排序算法：<strong>sort</strong></li><li>二分搜索：lower_bound、upper_bound、equal_range</li><li>集合操作：set_difference、<strong>set_intersection</strong>、set_union</li><li>未初始化的内存操作：<strong>uninitialized_copy</strong></li></ul><p>不是所有的算法都要一一去进行使用，需要懂得方法，然后在使用的时候，可以进行查找即可。（学方法）</p><h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryFunc &gt;</span></span><br><span class="line"><span class="function">UnaryFunc <span class="title">for_each</span><span class="params">( InputIt first, InputIt last, UnaryFunc f )</span></span>;</span><br></pre></td></tr></table></figure><p>学点单词：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unary   adj. [数] 一元的</span><br></pre></td></tr></table></figure></p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    ++ value;</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span>&amp; value)</span> </span>&#123;</span><br><span class="line">    ++ value;</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;original data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;entering func...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;data in vector:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;entering func2...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func2);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;data in vector:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">original data:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment">entering func...</span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3 </span></span><br><span class="line"><span class="comment">data in vector:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment">entering func2...</span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3 </span></span><br><span class="line"><span class="comment">data in vector:</span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于上面的例子，也有<strong>匿名函数</strong>的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;original data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名函数，lambda 表达式</span></span><br><span class="line">    <span class="comment">// [] 捕获列表</span></span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [](<span class="type">int</span>&amp; value)&#123;</span><br><span class="line">        ++ value;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">original data:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2 5 8 10 6 9 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面代码的基础上，再来看一个小特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在匿名函数中，需要捕获</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;original data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), </span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名函数，lambda 表达式</span></span><br><span class="line">    <span class="comment">// [] 捕获列表</span></span><br><span class="line">    <span class="comment">// () 参数列表</span></span><br><span class="line">    <span class="comment">// &#123;&#125; 函数体</span></span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [&amp;a](<span class="type">int</span>&amp; value)-&gt;<span class="type">void</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        ++ value;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">original data:</span></span><br><span class="line"><span class="comment">1 4 7 9 5 8 2 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a = 10</span></span><br><span class="line"><span class="comment">2 a = 10</span></span><br><span class="line"><span class="comment">5 a = 10</span></span><br><span class="line"><span class="comment">8 a = 10</span></span><br><span class="line"><span class="comment">10 a = 10</span></span><br><span class="line"><span class="comment">6 a = 10</span></span><br><span class="line"><span class="comment">9 a = 10</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="remove-if"><a href="#remove-if" class="headerlink" title="remove_if"></a>remove_if</h3><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [](<span class="type">int</span>&amp; value)&#123;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">remove_if</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 9 8 22 55 123 8 3 2 </span></span><br><span class="line"><span class="comment">1 9 8 8 3 2 8 3 2 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码输出结果似乎和我们预期不符。来看一下源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove_if(number.begin(), number.end(), func);</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; number = &#123;1, 9, 8, 22, 55, 123, 8, 3, 2&#125;;</span></span><br><span class="line"><span class="comment">//first = number.begin()</span></span><br><span class="line"><span class="comment">//last = number.end()</span></span><br><span class="line"><span class="comment">//p = func</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">remove_if</span><span class="params">(ForwardIt first, ForwardIt last, UnaryPredicate p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    first = std::<span class="built_in">find_if</span>(first, last, p);</span><br><span class="line">    <span class="keyword">if</span> (first != last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(ForwardIt i = first; ++i != last; )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">p</span>(*i))</span><br><span class="line">            &#123;</span><br><span class="line">                *first = std::<span class="built_in">move</span>(*i);</span><br><span class="line">                first++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                  f        last</span><br><span class="line"><span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span></span><br><span class="line">                           <span class="function">i</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">                                last</span><br><span class="line"><span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span></span><br><span class="line">         <span class="function">f</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> InputIt <span class="title">find_if</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">p</span>(*first)) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>人话总结：将不要的元素删除，位置由后面的合法元素填充。同时并不会删除后面的合法元素。</p><p>remove_if 是有返回值的，由此给出改进方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::for_each;</span><br><span class="line"><span class="keyword">using</span> std::ostream_iterator;</span><br><span class="line"><span class="keyword">using</span> std::copy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">func</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    for_each(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), [](<span class="type">int</span>&amp; value)&#123;</span><br><span class="line">        cout &lt;&lt; value &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove_if 返回待删除元素的首迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">remove_if</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), func);</span><br><span class="line">    num.<span class="built_in">erase</span>(it, num.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(),</span><br><span class="line">         <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 9 8 22 55 123 8 3 2 </span></span><br><span class="line"><span class="comment">1 9 8 8 3 2 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>remove_if 之所以要这样设计，是为了满足泛型编程的思想（通用编程的思想），要针对于所有的容器进行编程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector                      i</span><br><span class="line">1, 9, 8, 8,3, 2, 8, 3, 2</span><br><span class="line">                 f</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line">1, 9, 8, 22 , 55, 123, 8, 3, 2</span><br><span class="line">         f</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind1st 可以绑定二元函数对象 f 的第一个参数，第一个参数使用 x 进行替代，bind2nd 可以绑定二元函数对象 f 的第二个参数，第二个参数使用 x 进行替代。</p><p>以下代码若有不懂的可以结合 cppreference 理解：</p><p><img src="https://bu.dusays.com/2024/05/03/6634b2095ebda.png" alt="74-3.png"></p><p>bind1st 和 bind2nd 已经过时。</p><p>大伙流行用这个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int add(int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int func(int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(&amp;add, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1()&quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(&amp;func, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2()&quot;</span> &lt;&lt; <span class="built_in">f2</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1()int add(int, int)</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">f2()int func(int, int, int)</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以下写法效果相同：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int add(int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int func(int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(add, <span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 函数名是函数的入口地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1()&quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(func, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2()&quot;</span> &lt;&lt; <span class="built_in">f2</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1()int add(int, int)</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">f2()int func(int, int, int)</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>看点骚操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;嘿嘿，成员函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Example ex;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(&amp;Example::add, &amp;ex, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1() = &quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1() = 嘿嘿，成员函数</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>【杂项】关于函数指针的杂项知识点：<br>回调函数可以分为注册和执行（思想：延迟）。</p><p>继续看看 bind 的其他细节。</p><p>占位符本身代表的是函数的形参，占位符中的数字代表的是函数的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> x3, <span class="type">const</span> <span class="type">int</span>&amp; x4, <span class="type">int</span> x5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x1 = &quot;</span> &lt;&lt; x1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x2 = &quot;</span> &lt;&lt; x2 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x3 = &quot;</span> &lt;&lt; x3 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x4 = &quot;</span> &lt;&lt; x4 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x5 = &quot;</span> &lt;&lt; x5 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f1 = <span class="built_in">bind</span>(add, <span class="number">10</span>, std::placeholders::_1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1() = &quot;</span> &lt;&lt; <span class="built_in">f1</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(add, std::placeholders::_1, std::placeholders::_2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2() = &quot;</span> &lt;&lt; <span class="built_in">f2</span>(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1() = 15</span></span><br><span class="line"><span class="comment">f2() = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">bind</span>(func, <span class="number">1</span>, _3, _1, num, num);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">11</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">88</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x1 = 1</span></span><br><span class="line"><span class="comment">x2 = 22</span></span><br><span class="line"><span class="comment">x3 = 11</span></span><br><span class="line"><span class="comment">x4 = 50</span></span><br><span class="line"><span class="comment">x5 = 50</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>bind 默认情况下采用值传递</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> x3, <span class="type">const</span> <span class="type">int</span>&amp; x4, <span class="type">int</span> x5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x1 = &quot;</span> &lt;&lt; x1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x2 = &quot;</span> &lt;&lt; x2 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x3 = &quot;</span> &lt;&lt; x3 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x4 = &quot;</span> &lt;&lt; x4 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;x5 = &quot;</span> &lt;&lt; x5 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">bind</span>(func, <span class="number">1</span>, _3, _1, std::<span class="built_in">cref</span>(num), num);</span><br><span class="line">    num = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">11</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">88</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x1 = 1</span></span><br><span class="line"><span class="comment">x2 = 22</span></span><br><span class="line"><span class="comment">x3 = 11</span></span><br><span class="line"><span class="comment">x4 = 100</span></span><br><span class="line"><span class="comment">x5 = 50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于 auto 到底推导了什么类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;嘿嘿，成员函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;int func(int, int, int)&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    function&lt;<span class="type">int</span>()&gt; f1 = <span class="built_in">bind</span>(add, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1() = &quot;</span> &lt;&lt; <span class="built_in">f1</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>()&gt; f2 = <span class="built_in">bind</span>(func, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2() = &quot;</span> &lt;&lt; <span class="built_in">f2</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Example ex;</span><br><span class="line">    function&lt;<span class="type">int</span>()&gt; f3 = <span class="built_in">bind</span>(&amp;Example::add, &amp;ex, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3() = &quot;</span> &lt;&lt; <span class="built_in">f3</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; f4 = <span class="built_in">bind</span>(add, <span class="number">10</span>, std::placeholders::_1);</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;f4(30) = &quot;</span> &lt;&lt; <span class="built_in">f4</span>(<span class="number">30</span>) &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f1() = 30</span></span><br><span class="line"><span class="comment">f2() = 6</span></span><br><span class="line"><span class="comment">f3() = 嘿嘿，成员函数</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">f4(30) = 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，function 被称为函数的容器。</p><p><strong>面向过程地实现多态</strong>（std::bind + std::function）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::bind;</span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="comment">// 回调函数的设计思想</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> DisplayCallBack = function&lt;<span class="built_in">void</span>()&gt;;</span><br><span class="line">    <span class="keyword">using</span> AreaCallBack = function&lt;<span class="built_in">double</span>()&gt;;</span><br><span class="line"></span><br><span class="line">    DisplayCallBack _displayCallBack;</span><br><span class="line">    AreaCallBack _areaCallBack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数的注册</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDisplayCallBack</span><span class="params">(DisplayCallBack&amp;&amp; cb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _displayCallBack = std::<span class="built_in">move</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAreaCallBack</span><span class="params">(AreaCallBack&amp;&amp; cb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _areaCallBack = std::<span class="built_in">move</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数的执行</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleDisplayCallBack</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_displayCallBack)</span><br><span class="line">        &#123;</span><br><span class="line">            _displayCallBack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">handleAreaCallBack</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_areaCallBack) &#123;</span><br><span class="line">            <span class="keyword">return</span> _areaCallBack();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Rectangle</span>(<span class="type">double</span> length = <span class="number">0</span>, <span class="type">double</span> width = <span class="number">0</span>)</span><br><span class="line">    :_length(length), _width(width) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Rectangle(double, double)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Rectangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _length*_width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Rectangle</span>() &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;~Rectangle()&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _length;</span><br><span class="line">    <span class="type">double</span> _width;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> radius = <span class="number">0</span>):_radius(radius) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Circle(double = 0)&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * _radius * _radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Circle</span>() &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;~Circle()&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Triangle</span>(<span class="type">double</span> a = <span class="number">0</span>, <span class="type">double</span> b= <span class="number">0</span>, <span class="type">double</span> c = <span class="number">0</span>)</span><br><span class="line">    : _a(a), _b(b), _c(c) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Triangle(double = 0, double = 0, double = 0)&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> tmp = (_a + _b + _c)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(tmp*(tmp-_a)*(tmp-_b)*(tmp-_c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Triangle</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Triangle()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _a;</span><br><span class="line">    <span class="type">double</span> _b;</span><br><span class="line">    <span class="type">double</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> Figure&amp; fig)</span> </span>&#123;</span><br><span class="line">    fig.<span class="built_in">handleDisplayCallBack</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;的面积：&quot;</span> &lt;&lt; fig.<span class="built_in">handleAreaCallBack</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Rectangle <span class="title">rectangle</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Circle <span class="title">circle</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Triangle <span class="title">triangle</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Figure 是具体的类</span></span><br><span class="line">    Figure fig;</span><br><span class="line">    fig.<span class="built_in">setDisplayCallBack</span>(<span class="built_in">bind</span>(&amp;Rectangle::display, &amp;rectangle));</span><br><span class="line">    fig.<span class="built_in">setAreaCallBack</span>(<span class="built_in">bind</span>(&amp;Rectangle::area, &amp;rectangle));</span><br><span class="line">    <span class="built_in">func</span>(fig);</span><br><span class="line"></span><br><span class="line">    fig.<span class="built_in">setDisplayCallBack</span>(<span class="built_in">bind</span>(&amp;Circle::display, &amp;circle));</span><br><span class="line">    fig.<span class="built_in">setAreaCallBack</span>(<span class="built_in">bind</span>(&amp;Circle::area, &amp;circle));</span><br><span class="line">    <span class="built_in">func</span>(fig);</span><br><span class="line">    </span><br><span class="line">    fig.<span class="built_in">setDisplayCallBack</span>(<span class="built_in">bind</span>(&amp;Triangle::display, &amp;triangle));</span><br><span class="line">    fig.<span class="built_in">setAreaCallBack</span>(<span class="built_in">bind</span>(&amp;Triangle::area, &amp;triangle));</span><br><span class="line">    <span class="built_in">func</span>(fig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Rectangle(double, double)</span></span><br><span class="line"><span class="comment">Circle(double = 0)</span></span><br><span class="line"><span class="comment">Triangle(double = 0, double = 0, double = 0)</span></span><br><span class="line"><span class="comment">Rectangle的面积：200</span></span><br><span class="line"><span class="comment">Circle的面积：314</span></span><br><span class="line"><span class="comment">Triangle的面积：6</span></span><br><span class="line"><span class="comment">~Triangle()</span></span><br><span class="line"><span class="comment">~Circle()</span></span><br><span class="line"><span class="comment">~Rectangle()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码结合函数指针的思路去理解，就会方便很多。</p><h2 id="成员函数适配器"><a href="#成员函数适配器" class="headerlink" title="成员函数适配器"></a>成员函数适配器</h2><p>成员函数适配器 mem_fun_ref 的用法示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成员函数适配器mem_fun_ref的用法示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumVals</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumVals</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NumVals</span>(<span class="type">int</span> j)</span><br><span class="line">    &#123;</span><br><span class="line">        val = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>) !(val % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= (val / <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(val % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function">vector&lt;NumVals&gt; <span class="title">v1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1[i] = <span class="built_in">NumVals</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Use of mem_fun_ref calling member function through a reference</span></span><br><span class="line">    <span class="comment">// remove the primes in the vector using isPrime ( )</span></span><br><span class="line">    it1 = <span class="built_in">remove_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::isPrime));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中删除质数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), it1, <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    vector&lt;NumVals&gt;<span class="built_in">v2</span>(<span class="number">13</span>);</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">13</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2 [k] = <span class="built_in">NumVals</span> (k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Use of mem_fun_ref calling member function through a reference</span></span><br><span class="line">    <span class="comment">// remove the even numbers in the vector v2 using isEven ( )</span></span><br><span class="line">    it2 = <span class="built_in">remove_if</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;NumVals::isEven));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中删除偶数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), it2, <span class="built_in">mem_fun_ref</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v1中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v1中删除质数后剩下的值为: </span></span><br><span class="line"><span class="comment">4 6 8 9 10 12 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">v2中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v2中删除偶数后剩下的值为: </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 13 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码使用 mem_fn 可以达到同样效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumVals</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumVals</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NumVals</span>(<span class="type">int</span> j)</span><br><span class="line">    &#123;</span><br><span class="line">        val = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>) !(val % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= (val / <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(val % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function">vector&lt;NumVals&gt; <span class="title">v1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1[i] = <span class="built_in">NumVals</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    it1 = <span class="built_in">remove_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::isPrime));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中删除质数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), it1, <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    vector&lt;NumVals&gt;<span class="built_in">v2</span>(<span class="number">13</span>);</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">13</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2 [k] = <span class="built_in">NumVals</span> (k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    it2 = <span class="built_in">remove_if</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">mem_fn</span>(&amp;NumVals::isEven));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2中删除偶数后剩下的值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v2.<span class="built_in">begin</span>(), it2, <span class="built_in">mem_fn</span>(&amp;NumVals::display));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v1中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v1中删除质数后剩下的值为: </span></span><br><span class="line"><span class="comment">4 6 8 9 10 12 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">v2中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13 </span></span><br><span class="line"><span class="comment">v2中删除偶数后剩下的值为: </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 13 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>mem_fn 的另一个示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mem_fn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello, world.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_number</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;number: &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Foo f;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> greet = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_greeting);</span><br><span class="line">    <span class="built_in">greet</span>(f);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> print_num = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_number);</span><br><span class="line">    <span class="built_in">print_num</span>(f, <span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> access_data = std::<span class="built_in">mem_fn</span>(&amp;Foo::data);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;data: &quot;</span> &lt;&lt; <span class="built_in">access_data</span>(f) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello, world.</span></span><br><span class="line"><span class="comment">number: 42</span></span><br><span class="line"><span class="comment">data: 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看一种刁钻的写法，这样同样是合法的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumVals</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumVals</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NumVals</span>(<span class="type">int</span> j)</span><br><span class="line">    &#123;</span><br><span class="line">        val = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEven</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">bool</span>) !(val % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= (val / <span class="number">2</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(val % i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. </span></span><br><span class="line">    <span class="function">vector&lt;NumVals&gt; <span class="title">v1</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    vector&lt;NumVals&gt;::iterator it1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1[i] = <span class="built_in">NumVals</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1中的原始值为: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(),</span><br><span class="line">             std::<span class="built_in">bind</span>(&amp;NumVals::display, std::placeholders::_1));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v1中的原始值为: </span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10 11 12 13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码需要解释：<br>NumVals::display 是个无参函数，但隐式地有一个 this 参数，因此用 std::placeholders::_1 占位。这个参数在运行时接受 v1.begin() 至 v1.end() 传过来的迭代器（指针）。<br>std::bind(&amp;NumVals::display, std::placeholders::_1) 则返回一个类似于函数指针的东西，符合 for_each 的要求。</p><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>函数对象（仿函数）：所有可与小括号结合，并且体现函数的形式。（将函数对象的概念进行扩充）</p><ul><li>重载了函数调用运算符的类创建的对象</li><li>普通函数或者成员函数</li><li>函数指针</li></ul><h2 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h2><p>空间配置器负责空间的申请与回收。</p><p>空间配置器将空间的申请与对象的构建分开，将空间的释放与对象的销毁也分开。</p><p>STL中，元素都是<strong>批量</strong>的，所以出于效率考虑，需要将空间的申请与对象的构建分开。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span><span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">T</span> &gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">allocator</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间的申请</span></span><br><span class="line"><span class="function">pointer <span class="title">allocate</span><span class="params">( size_type n, <span class="type">const</span> <span class="type">void</span> * hint = <span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="function">T* <span class="title">allocate</span><span class="params">( std::<span class="type">size_t</span> n, <span class="type">const</span> <span class="type">void</span> * hint)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间的释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">( T* p, std::<span class="type">size_t</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的构建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">( pointer p, const_reference val )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">( pointer p )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="实现自己的-vector"><a href="#实现自己的-vector" class="headerlink" title="实现自己的 vector"></a>实现自己的 vector</h3><p>整体逻辑不算难，但是很多细节弄不出来，很麻烦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> iterator = T*;</span><br><span class="line">    <span class="built_in">Vector</span>()</span><br><span class="line">    : _start(<span class="literal">nullptr</span>)</span><br><span class="line">    , _finish(<span class="literal">nullptr</span>)</span><br><span class="line">    , _end_of_storage(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _finish;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Vector</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T&amp; value)</span></span>; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reallocate</span><span class="params">()</span></span>; <span class="comment">//重新分配内存,动态扩容要用的</span></span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> std::allocator&lt;T&gt; _alloc;</span><br><span class="line">     </span><br><span class="line">    T *_start;                 <span class="comment">//指向数组中的第一个元素</span></span><br><span class="line">    T *_finish;                <span class="comment">//指向最后一个实际元素之后的那个元素</span></span><br><span class="line">    T *_end_of_storage;        <span class="comment">//指向数组本身之后的位置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">std::allocator&lt;T&gt; Vector&lt;T&gt;::_alloc; <span class="comment">// 静态数据成员进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::~<span class="built_in">Vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_start) &#123;</span><br><span class="line">        <span class="keyword">while</span>(_finish != _start) &#123;</span><br><span class="line">            <span class="comment">// 销毁空间上的元素</span></span><br><span class="line">            _alloc.<span class="built_in">destroy</span>(--_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回收空间</span></span><br><span class="line">        _alloc.<span class="built_in">deallocate</span>(_start, <span class="built_in">capacity</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Vector&lt;T&gt;::<span class="built_in">push_back</span>(<span class="type">const</span> T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">size</span>() == <span class="built_in">capacity</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">reallocate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    _alloc.<span class="built_in">construct</span>(_finish++, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Vector&lt;T&gt;::<span class="built_in">pop_back</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">size</span>() &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    _alloc.<span class="built_in">destroy</span>(--_finish);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">int</span> Vector&lt;T&gt;::<span class="built_in">size</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _finish - _start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">int</span> Vector&lt;T&gt;::<span class="built_in">capacity</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _end_of_storage - _start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Vector&lt;T&gt;::<span class="built_in">reallocate</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> oldCapacity = <span class="built_in">capacity</span>();</span><br><span class="line">    <span class="type">int</span> newCapacity = <span class="number">2</span>*oldCapacity &gt; <span class="number">0</span> ? <span class="number">2</span>*oldCapacity : <span class="number">1</span>;</span><br><span class="line">    T* tmp = _alloc.<span class="built_in">allocate</span>(newCapacity);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_start) &#123;</span><br><span class="line">        <span class="comment">// 拷贝老空间上的元素到新空间</span></span><br><span class="line">        std::<span class="built_in">uninitialized_copy</span>(_start, _finish, tmp);</span><br><span class="line">        <span class="keyword">while</span>(_finish != _start) &#123;</span><br><span class="line">            <span class="comment">// 销毁老空间上的元素</span></span><br><span class="line">            _alloc.<span class="built_in">destroy</span>(--_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回收老的空间</span></span><br><span class="line">        _alloc.<span class="built_in">deallocate</span>(_start, <span class="built_in">capacity</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    _start = tmp;</span><br><span class="line">    _finish = _start + oldCapacity;</span><br><span class="line">    _end_of_storage = _start + newCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printinfo</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;con.size() = &quot;</span> &lt;&lt; con.<span class="built_in">size</span>() &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;con.capacity() = &quot;</span> &lt;&lt; con.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    num.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printinfo</span>(num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : num) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">con.size() = 1</span></span><br><span class="line"><span class="comment">con.capacity() = 1</span></span><br><span class="line"><span class="comment">con.size() = 2</span></span><br><span class="line"><span class="comment">con.capacity() = 2</span></span><br><span class="line"><span class="comment">con.size() = 3</span></span><br><span class="line"><span class="comment">con.capacity() = 4</span></span><br><span class="line"><span class="comment">con.size() = 4</span></span><br><span class="line"><span class="comment">con.capacity() = 4</span></span><br><span class="line"><span class="comment">con.size() = 5</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 6</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 7</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 8</span></span><br><span class="line"><span class="comment">con.capacity() = 8</span></span><br><span class="line"><span class="comment">con.size() = 9</span></span><br><span class="line"><span class="comment">con.capacity() = 16</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><p><img src="https://s2.loli.net/2024/05/06/Ca5Szj2geYxOEtc.png" alt="74-4.png"></p><p>以下代码块展开约 500+ 行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> alloc _Alloc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个分支（一级空间配置器）</span></span><br><span class="line"><span class="keyword">typedef</span> malloc_alloc alloc;</span><br><span class="line"><span class="keyword">typedef</span> __malloc_alloc_template&lt;<span class="number">0</span>&gt; malloc_alloc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> __inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__malloc_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">void</span>* __result = <span class="built_in">malloc</span>(__n);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == __result)</span><br><span class="line">            __result = _S_oom_malloc(__n);<span class="comment">//S = static, oom = out of memory</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> __result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> <span class="comment">/* __n */</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">free</span>(__p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个分支（默认分支，二级空间配置器）</span></span><br><span class="line"><span class="keyword">typedef</span> __default_alloc_template&lt;__NODE_ALLOCATOR_THREADS, <span class="number">0</span>&gt; alloc;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__default_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(__n &gt; <span class="number">128</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">malloc</span>(__n);<span class="comment">//对空间，new</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//16个自由链表_S_free_list + 内存池</span></span><br><span class="line">            _Obj** __my_free_list = _S_free_list + _S_freelist_index(__n);</span><br><span class="line"></span><br><span class="line">            _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">            <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">                __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">                __ret = __result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* __p, <span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (__n &gt; (<span class="type">size_t</span>) <span class="number">128</span>)</span><br><span class="line">            malloc_alloc::<span class="built_in">deallocate</span>(__p, __n);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 此处代码有较大改动，目的是方便理解其主要逻辑</span></span><br><span class="line">            _Obj** __my_free_list = _S_free_list + _S_freelist_index(__n);<span class="comment">//_S_free_list[3]</span></span><br><span class="line">            _Obj* __q = (_Obj*)__p;</span><br><span class="line"></span><br><span class="line">            __q -&gt; _M_free_list_link = *__my_free_list;</span><br><span class="line">            *__my_free_list = __q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">allocator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> alloc _Alloc;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//空间的申请</span></span><br><span class="line">    <span class="function">_Tp* <span class="title">allocate</span><span class="params">(size_type __n, <span class="type">const</span> <span class="type">void</span> *ptr = <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __n != <span class="number">0</span> ? <span class="built_in">static_cast</span>&lt;_Tp*&gt;(_Alloc::<span class="built_in">allocate</span>(__n * <span class="built_in">sizeof</span>(_Tp))) : <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//空间的回收</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(pointer __p, size_type __n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _Alloc::<span class="built_in">deallocate</span>(__p, __n * <span class="built_in">sizeof</span>(_Tp));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象的构建</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(pointer __p, <span class="type">const</span> _Tp&amp; __val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//int *pInt = new int(10);</span></span><br><span class="line">        <span class="keyword">new</span>(__p) _Tp(__val); <span class="comment">//定位new表达式 allocate</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象的销毁</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">(pointer __p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        __p-&gt;~_Tp(); <span class="comment">//显示调用析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//联合体</span></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">_Obj</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">_Obj</span>* _M_free_list_link;</span><br><span class="line">    <span class="type">char</span> _M_client_data[<span class="number">1</span>]; <span class="comment">/* The client sees this.*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123;_ALIGN = <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123;_MAX_BYTES = <span class="number">128</span>&#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123;_NFREELISTS = <span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typename</span> __default_alloc_template::_Obj* __default_alloc_template::_S_free_list[</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined(__SUNPRO_CC) || defined(__GNUC__) || defined(__HP_aCC)</span></span><br><span class="line">    _NFREELISTS</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">    __default_alloc_template::_NFREELISTS</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_start_free = <span class="literal">nullptr</span>;<span class="comment">//指向内存池的头</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_end_free = <span class="literal">nullptr</span>;<span class="comment">//指向内存池的尾</span></span><br><span class="line"><span class="type">size_t</span> __default_alloc_template::_S_heap_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//取自由链表的下标的函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_freelist_index(<span class="type">size_t</span> __bytes) <span class="comment">//__bytes = 32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (((__bytes) + (<span class="type">size_t</span>)_ALIGN<span class="number">-1</span>)/(<span class="type">size_t</span>)_ALIGN - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//return (32 + 8 - 1)/8 - 1 = 39/8 - 1 = 4.x - 1 = 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__bytes = <span class="number">33</span></span><br><span class="line">[<span class="number">25</span>, <span class="number">32</span>]  <span class="number">32</span>    <span class="number">3.</span>x  <span class="number">4</span></span><br><span class="line">[<span class="number">33</span>,   ]  <span class="number">40</span></span><br><span class="line">[  , <span class="number">24</span>]  <span class="number">24</span></span><br><span class="line"><span class="comment">//向上取整，得到8的整数倍</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> _S_round_up(<span class="type">size_t</span> __bytes)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> (((__bytes) + (<span class="type">size_t</span>) _ALIGN<span class="number">-1</span>) &amp; ~((<span class="type">size_t</span>) _ALIGN - <span class="number">1</span>));</span><br><span class="line">                (<span class="number">32</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">39</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">39</span> = <span class="number">32</span> + <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span>    <span class="number">0010</span> <span class="number">0111</span></span><br><span class="line">                <span class="number">7</span> = <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span>          <span class="number">0000</span> <span class="number">0111</span>   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">            </span><br><span class="line">                <span class="number">0010</span> <span class="number">0111</span></span><br><span class="line">            &amp;   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span>   = <span class="number">2</span>^<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">31</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">38</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0110</span></span><br><span class="line">                <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span> = <span class="number">2</span>^<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">33</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">40</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">40</span> = <span class="number">32</span> + <span class="number">8</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">1000</span>   <span class="number">40</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">25</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">32</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span></span><br><span class="line">            &amp;   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0010</span> <span class="number">0000</span> = <span class="number">2</span>^<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">                (<span class="number">24</span> + <span class="number">8</span> - <span class="number">1</span>) &amp; ~ (<span class="number">8</span> - <span class="number">1</span>) = <span class="number">31</span> &amp; ~<span class="number">7</span></span><br><span class="line">                <span class="number">31</span> = <span class="number">16</span> + <span class="number">8</span> + <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">                <span class="number">0001</span> <span class="number">1111</span></span><br><span class="line">            &amp;   <span class="number">1111</span> <span class="number">1000</span></span><br><span class="line">                <span class="number">0001</span> <span class="number">1000</span> = <span class="number">16</span> + <span class="number">8</span> = <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、申请32字节时候,内存（堆空间）是足够的</span></span><br><span class="line"><span class="comment">//__size = 32</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">32</span> * <span class="number">20</span> = <span class="number">640</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = <span class="number">2</span> * __total_bytes + _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2</span> * <span class="number">640</span> + _S_round_up(<span class="number">0</span> &gt;&gt; <span class="number">4</span>) = <span class="number">1280</span>;</span><br><span class="line"></span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get) = <span class="built_in">malloc</span>(<span class="number">1280</span>);</span><br><span class="line">    </span><br><span class="line">        _S_heap_size += __bytes_to_get = <span class="number">1280</span>;</span><br><span class="line">        _S_end_free = _S_start_free + __bytes_to_get;</span><br><span class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">32</span> * <span class="number">20</span> = <span class="number">640</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">1280</span>;</span><br><span class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes)</span><br><span class="line">    &#123;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>(__result);<span class="comment">//分割出来了640字节，然后将剩余的640自己交给_S_end_free与_S_start_free</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数就是在按照__n为一个等分，进行将大段空间进行切割，分成多个等分</span></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)<span class="comment">//__n = 32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    __my_free_list = _S_free_list +</span><br><span class="line">                     _S_freelist_index(__n);<span class="comment">//_S_free_list[3]</span></span><br><span class="line"></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++)</span><br><span class="line">    &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n);</span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i)</span><br><span class="line">        &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(__result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span><span class="comment">//__n = 32</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list + _S_freelist_index(__n);<span class="comment">//_S_free_list[3]</span></span><br><span class="line"></span><br><span class="line">        _Obj*  __result = *__my_free_list;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="literal">nullptr</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));<span class="comment">//32 * 20 * 2 = 1280  640/32 = 20</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、申请64字节时候,内存（堆空间）是足够的</span></span><br><span class="line"><span class="comment">//__size = 64</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">64</span> * <span class="number">20</span> = <span class="number">1280</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size)</span><br><span class="line">    &#123;</span><br><span class="line">        __nobjs = (<span class="type">int</span>)(__bytes_left/__size) = <span class="number">640</span>/<span class="number">64</span> = <span class="number">10</span>;</span><br><span class="line">        __total_bytes = __size * __nobjs = <span class="number">64</span> * <span class="number">10</span> = <span class="number">640</span>;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)<span class="comment">//__n = 64</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    __my_free_list = _S_free_list +</span><br><span class="line">                     _S_freelist_index(__n);<span class="comment">//_S_free_list[7]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build free list in chunk */</span></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++) &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n);</span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span><span class="comment">//__n = 64</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list +</span><br><span class="line">                                _S_freelist_index(__n);<span class="comment">//_S_free_list[7]</span></span><br><span class="line"></span><br><span class="line">        _Obj* __result = *__my_free_list;</span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="literal">nullptr</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、申请96字节时候,内存（堆空间）是足够的</span></span><br><span class="line"><span class="comment">//__size = 96</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">96</span> * <span class="number">20</span> = <span class="number">1920</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = <span class="number">2</span> * __total_bytes + </span><br><span class="line">                                _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2</span> * <span class="number">1920</span> + _S_round_up( <span class="number">1280</span> &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">3840</span> + <span class="number">80</span> = <span class="number">3920</span>;</span><br><span class="line">                              </span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get) = <span class="built_in">malloc</span>(<span class="number">3920</span>);</span><br><span class="line"></span><br><span class="line">        _S_heap_size += __bytes_to_get = <span class="number">1280</span> + <span class="number">3920</span> = <span class="number">5200</span>;</span><br><span class="line">        _S_end_free = _S_start_free + __bytes_to_get;</span><br><span class="line">        <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">96</span> * <span class="number">20</span> = <span class="number">1920</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">3920</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__bytes_left &gt;= __total_bytes)</span><br><span class="line">    &#123;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);<span class="comment">//3920 = 1920 + 2000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)<span class="comment">//__n = 96</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __my_free_list = _S_free_list +</span><br><span class="line">                     _S_freelist_index(__n);<span class="comment">//_S_free_list[11]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build free list in chunk */</span></span><br><span class="line">    __result = (_Obj*)__chunk;</span><br><span class="line">    *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">1</span>; ; __i++)</span><br><span class="line">    &#123;</span><br><span class="line">        __current_obj = __next_obj;</span><br><span class="line">        __next_obj = (_Obj*)((<span class="type">char</span>*)__next_obj + __n);</span><br><span class="line">        <span class="keyword">if</span> (__nobjs - <span class="number">1</span> == __i) &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __current_obj -&gt; _M_free_list_link = __next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span><span class="comment">//__n = 96</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list +</span><br><span class="line">                                _S_freelist_index(__n);<span class="comment">//_S_free_list[11]</span></span><br><span class="line"></span><br><span class="line">        _Obj* __result = *__my_free_list;</span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="literal">nullptr</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、申请72字节时候，内存池与堆空间没有连续的72字节(堆空间与内存池容量不足)</span></span><br><span class="line"><span class="comment">//表名内存池中没有连续的72字节，表明上一次96字节分割完毕之后，内存池中2000字节被使用完毕了</span></span><br><span class="line"><span class="comment">//__size = 72</span></span><br><span class="line"><span class="comment">//__nobjs = 20</span></span><br><span class="line"><span class="type">char</span>* __default_alloc_template::_S_chunk_alloc(<span class="type">size_t</span> __size, <span class="type">int</span>&amp; __nobjs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">72</span> * <span class="number">20</span> = <span class="number">1440</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> __bytes_to_get = <span class="number">2</span> * __total_bytes +</span><br><span class="line">                                _S_round_up(_S_heap_size &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2</span> * <span class="number">1440</span> + _S_round_up(<span class="number">5200</span> &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                              = <span class="number">2880</span> + <span class="number">325</span> = <span class="number">3205</span>;</span><br><span class="line">        _S_start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(__bytes_to_get) = <span class="built_in">malloc</span>(<span class="number">3205</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span> == _S_start_free)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">size_t</span> __i;</span><br><span class="line">            _Obj** __my_free_list;</span><br><span class="line">            _Obj* __p;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//__size = 72</span></span><br><span class="line">            <span class="comment">//__i = 72  80  88  96,想找连续72字节的时候，没有满足条件的，那么就只能向上“借”</span></span><br><span class="line">            <span class="keyword">for</span> (__i = __size; __i &lt;= (<span class="type">size_t</span>) <span class="number">128</span>; __i += (<span class="type">size_t</span>)<span class="number">8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//_S_free_list[8] _S_free_list[9] _S_free_list[10] _S_free_list[11]</span></span><br><span class="line">                __my_free_list = _S_free_list + _S_freelist_index(__i);</span><br><span class="line">                __p = *__my_free_list;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">nullptr</span> != __p)</span><br><span class="line">            &#123;</span><br><span class="line">                *__my_free_list = __p -&gt; _M_free_list_link;</span><br><span class="line">                _S_start_free = (<span class="type">char</span>*)__p;</span><br><span class="line">                _S_end_free = _S_start_free + __i;</span><br><span class="line">                <span class="keyword">return</span>(_S_chunk_alloc(__size, __nobjs));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">char</span>* __result;</span><br><span class="line">    <span class="type">size_t</span> __total_bytes = __size * __nobjs = <span class="number">72</span> * <span class="number">20</span> = <span class="number">1440</span>;</span><br><span class="line">    <span class="type">size_t</span> __bytes_left = _S_end_free - _S_start_free = <span class="number">96</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (__bytes_left &gt;= __size)</span><br><span class="line">    &#123;</span><br><span class="line">        __nobjs = (<span class="type">int</span>)(__bytes_left/__size) = <span class="number">96</span>/<span class="number">72</span> = <span class="number">1</span>;</span><br><span class="line">        __total_bytes = __size * __nobjs = <span class="number">72</span> * <span class="number">1</span> = <span class="number">72</span>;</span><br><span class="line">        __result = _S_start_free;</span><br><span class="line">        _S_start_free += __total_bytes;</span><br><span class="line">        <span class="keyword">return</span>(__result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//__n = 72</span></span><br><span class="line"><span class="type">void</span>* __default_alloc_template::_S_refill(<span class="type">size_t</span> __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> __nobjs = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span>* __chunk = _S_chunk_alloc(__n, __nobjs);</span><br><span class="line">    _Obj* __STL_VOLATILE* __my_free_list;</span><br><span class="line">    _Obj* __result;</span><br><span class="line">    _Obj* __current_obj;</span><br><span class="line">    _Obj* __next_obj;</span><br><span class="line">    <span class="type">int</span> __i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == __nobjs) <span class="keyword">return</span>(__chunk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__n = 72</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> __n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span>* __ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Obj** __my_free_list = _S_free_list +</span><br><span class="line">                                _S_freelist_index(__n);<span class="comment">//_S_free_list[8]</span></span><br><span class="line"></span><br><span class="line">        _Obj* __RESTRICT __result = *__my_free_list;</span><br><span class="line">        <span class="keyword">if</span> (__result == <span class="number">0</span>)</span><br><span class="line">            __ret = _S_refill(_S_round_up(__n));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            *__my_free_list = __result -&gt; _M_free_list_link;</span><br><span class="line">            __ret = __result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"><span class="number">1</span>、STL中，所有容器申请的空间在内存的那个位置？</span><br><span class="line">A:都在堆上</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、空间配置器中，代码流程是怎么样的？</span><br><span class="line">第一分支：一级空间配置器，底层调用的是malloc申请空间</span><br><span class="line">第二分支：二级空间配置器，当申请的长度大于<span class="number">128</span>字节时候，底层走的还是malloc申请堆空间；但</span><br><span class="line">是当申请的长度小于<span class="number">128</span>字节时候，会使用自由链表（数组的长度为<span class="number">16</span>，_S_free_list） + 内存</span><br><span class="line">池（使用_S_start_free与_S_end_free指向内存池的首尾）的思想。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、函数调用过程是怎么样的？</span><br><span class="line">allocate：进行申请空间，该函数会调用_S_refill</span><br><span class="line">_S_refill：会将申请的空间进行切割，分成多个等分，然后进行挂接，该函数会调用_S_chunk_alloc</span><br><span class="line">_S_chunk_alloc：是真正的申请空间的函数，该函数底层调用的是malloc，申请大片空间。该函数还有可能会进行递归调用。</span><br><span class="line">_S_round_up：向上取整，得到<span class="number">8</span>的整数倍</span><br><span class="line">_S_freelist_index：获取自由链表的下标</span><br><span class="line"></span><br><span class="line">可以多多回顾 D27<span class="number">-4</span>、D27<span class="number">-5</span>、D28<span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="作业-LRU-算法"><a href="#作业-LRU-算法" class="headerlink" title="作业 - LRU 算法"></a>作业 - LRU 算法</h2><p>题目链接： <a href="https://leetcode.com/problems/lru-cache/description/">leetcode 146. LRU Cache</a></p><p>我的做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::list&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;::iterator  listptr;</span><br><span class="line">    <span class="keyword">typedef</span> std::unordered_map&lt;<span class="type">int</span>,std::pair&lt;<span class="type">int</span>,listptr&gt;&gt;::iterator  mapptr;</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) &#123;</span><br><span class="line">        Capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        mapptr it = mmap.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mmap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*get 到的值需要更新优先级为最新*/</span></span><br><span class="line">            <span class="built_in">put</span>(key, mmap[key].first);</span><br><span class="line">            <span class="keyword">return</span> it-&gt;second.first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        mlist.<span class="built_in">insert</span>(mlist.<span class="built_in">end</span>(), &#123;key, value&#125;);</span><br><span class="line"></span><br><span class="line">        mapptr it = mmap.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(it != mmap.<span class="built_in">end</span>()) <span class="comment">// 新元素之前就有</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*在 list 中移除旧元素*/</span></span><br><span class="line">            mlist.<span class="built_in">erase</span>(it-&gt;second.second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mlist.<span class="built_in">size</span>() &gt; Capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            mmap.<span class="built_in">erase</span>(mlist.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">            <span class="comment">// 在 list 中移除队头</span></span><br><span class="line">            mlist.<span class="built_in">erase</span>(mlist.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mmap[key] = std::<span class="built_in">make_pair</span>(value, std::<span class="built_in">prev</span>(mlist.<span class="built_in">end</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unordered_map&lt;<span class="type">int</span>,std::pair&lt;<span class="type">int</span>,listptr&gt;&gt; mmap;</span><br><span class="line">    std::list&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; mlist;</span><br><span class="line">    <span class="type">int</span> Capacity;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LRUCache* obj = <span class="keyword">new</span> <span class="built_in">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 返回 1</span></span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得键 2 作废</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">2</span>) &lt;&lt; std::endl; <span class="comment">// 返回 -1（未找到）</span></span><br><span class="line">    obj-&gt;<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得键 1 作废</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 返回 -1（未找到）</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">3</span>) &lt;&lt; std::endl; <span class="comment">// 返回 3</span></span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">get</span>(<span class="number">4</span>) &lt;&lt; std::endl; <span class="comment">// 返回 4</span></span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>大体思路还算 ok ，但是不少语法上的细节是在 GPT 帮助下完成的，例如：</p><ul><li><code>it-&gt;second.second</code></li><li><code>std::prev()</code></li></ul><h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><div class="row"><iframe src="https://drive.google.com/file/d/11oK8x8NwlFcRaMH6OQhXJ3wYFwHxM1zZ/preview" style="width:100%; height:550px"></iframe></div><p>手打目录：</p><blockquote><p>0 ⾯向对象设计 1<br>1 为什么要⾯向对象设计 3<br>2 UML语言 6<br>3 类与类之间的关系 9<br>3.1 继承(泛化) 10<br>3.2 关联 12<br>3.3 聚合 14<br>3.4 组合 16<br>3.5 依赖 18<br>3.6 比较和总结 19<br>4 面向对象设计原则 20<br>4.1 单一职责原则 22<br>4.2 开放闭合原则 25<br>4.3 里氏替换原则 27<br>4.4 接口分离原则 30<br>4.5 依赖倒置原则 33<br>4.6 迪米特法则 35<br>4.7 组合复⽤原则 39</p></blockquote><h2 id="文本查询代码再再探"><a href="#文本查询代码再再探" class="headerlink" title="文本查询代码再再探"></a>文本查询代码再再探</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wordQueryTest.cpp</span></span><br><span class="line">get_file函数会传两个参数，作用是打开文件，返回一个TextQuery的对象</span><br><span class="line">get_file返回的TextQuery类型的对象，所以会调用TextQuery的构造，该函数执行了相应的读操</span><br><span class="line">作，将文件里面每一行放在file对应的shared_ptr&lt;vector&lt;string&gt;&gt;存起来；然后将每个单词与</span><br><span class="line">行号存在wm对应的map&lt;string, shared_ptr&lt;set&lt;<span class="type">size_t</span>&gt;&gt;&gt;存起来。</span><br><span class="line"></span><br><span class="line"><span class="comment">//sought是待查询的单词，可以使用&quot;hello&quot;进行替代，然后构建Query对象，调用Query的构造函数，将基类指针q指向派生类对象WordQuery，</span></span><br><span class="line"><span class="function">Query <span class="title">name</span><span class="params">(sought)</span></span>;</span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string &amp;s)</span><br><span class="line">: <span class="built_in">q</span>(<span class="keyword">new</span> <span class="built_in">WordQuery</span>(s))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Query的eval方法，在该方法中能体现多态，调用的就是派生类WordQuery的eval方法</span></span><br><span class="line"><span class="type">const</span> QueryResult results = name.<span class="built_in">eval</span>(file);</span><br><span class="line"><span class="function">QueryResult <span class="title">Query::eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t);<span class="comment">//体现多态</span></span><br><span class="line"><span class="comment">//动态多态被激活的五个条件就全部都满足</span></span><br><span class="line"><span class="comment">//eval在基类Query_base中是虚函数</span></span><br><span class="line"><span class="comment">//在派生类WordQuery也是虚函数并且实现</span></span><br><span class="line"><span class="comment">//基类的指针q指向了派生类对象new WordQuery</span></span><br><span class="line"><span class="comment">//q调用了eval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用WordQuery的eval方法，在该方法中执行TextQuery的query函数</span></span><br><span class="line"><span class="function">QueryResult <span class="title">WordQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数讲带查询的单词sought，也就是&quot;hello&quot;,单词的行号nodata/loc-&gt;second,单词对应的</span></span><br><span class="line"><span class="comment">// 一行内容file传递给QueryResult的构造函数</span></span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> string &amp;sought)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> lineType <span class="title">nodata</span><span class="params">(<span class="keyword">new</span> set&lt;line_no&gt;)</span></span>;</span><br><span class="line">    wmIter loc = wm.<span class="built_in">find</span>(<span class="built_in">cleanup_str</span>(sought));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loc == wm.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, nodata, file); <span class="comment">//待查询单词不存在</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);<span class="comment">//待查询单词存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这三个值就会分别交给sought，lines，file</span></span><br><span class="line"><span class="built_in">QueryResult</span>(std::string s,</span><br><span class="line">            std::shared_ptr&lt;std::set&lt;line_no&gt; &gt; p,</span><br><span class="line">            std::shared_ptr&lt;std::vector&lt;std::string&gt; &gt; f)</span><br><span class="line">: <span class="built_in">sought</span>(s)</span><br><span class="line">, <span class="built_in">lines</span>(p)</span><br><span class="line">, <span class="built_in">file</span>(f)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后执行print函数进行打印（实质上就是输出流运算符的重载）</span></span><br><span class="line"><span class="built_in">print</span>(cout, results) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数就将待查询单词，单词的次数，单词行号，单词对应的一行内容打出来</span></span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp; os, <span class="type">const</span> QueryResult &amp;qr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//std::ostream &amp;operator&lt;&lt;(std::ostream &amp; os, const QueryResult &amp;qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">       &lt;&lt; <span class="built_in">make_plural</span>(qr.lines-&gt;<span class="built_in">size</span>(), <span class="string">&quot;time&quot;</span>, <span class="string">&quot;s&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (lineIter num = qr.lines-&gt;<span class="built_in">begin</span>();num != qr.lines-&gt;<span class="built_in">end</span>(); ++num)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt; <span class="string">&quot;\t(line &quot;</span> &lt;&lt; *num + <span class="number">1</span> &lt;&lt; <span class="string">&quot;) &quot;</span> &lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + *num)</span><br><span class="line">           &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：一定要熟悉多态，掌握多态的五个条件</span></span><br><span class="line"><span class="comment">//抽象类，纯虚函数</span></span><br><span class="line"><span class="comment">//私有的数据成员或者成员函数不能在类外面进行访问，如果必须在类外进行使用，需要友元的支撑。</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!ifs)</span><br><span class="line">&#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;jksdjs&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifstream infile;</span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">    infile.<span class="built_in">open</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line"><span class="function">shared_ptr&lt;Query_base&gt; <span class="title">q</span><span class="params">(<span class="keyword">new</span> WordQuery(s))</span></span>;</span><br><span class="line">Query_base *q = <span class="keyword">new</span> <span class="built_in">WordQuery</span>(s);</span><br><span class="line">Computer *pc = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="string">&quot;xiaomi&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">Base *pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="number">12</span>,<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">shared_ptr&lt;Query_base&gt; q;</span><br><span class="line"></span><br><span class="line">Query::<span class="built_in">Query</span>(<span class="type">const</span> std::string &amp;s)</span><br><span class="line">: <span class="built_in">q</span>(<span class="keyword">new</span> <span class="built_in">WordQuery</span>(s))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery &amp;t)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t); <span class="comment">//eval在基类Query_base中是纯虚函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态多态被激活的五个条件就全部都满足</span></span><br><span class="line"><span class="comment">//eval在基类Query_base中是虚函数</span></span><br><span class="line"><span class="comment">//在派生类WordQuery也是虚函数并且实现</span></span><br><span class="line"><span class="comment">//基类的指针q指向了派生类对象new WordQuery</span></span><br><span class="line"><span class="comment">//q调用了eval</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//andQueryTest.cpp</span></span><br><span class="line">sought1 = <span class="string">&quot;hello&quot;</span>,sought2 = <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span>&amp;(<span class="type">const</span> Query &amp;lhs, <span class="type">const</span> Query &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Query(shared_ptr&lt;Query_base&gt; )</span></span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs, rhs));</span><br><span class="line">    <span class="comment">//shared_ptr&lt;Query_base&gt; t(new AndQuery(lhs, rhs));</span></span><br><span class="line">    <span class="comment">// return t; Query(t)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Query <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Query t;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">    shared_ptr&lt;Query_base&gt;----&gt;<span class="built_in">Query</span>(xxx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Query</span>(shared_ptr&lt;Query_base&gt; )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// NotQuery 的逻辑</span><br><span class="line">hello</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">单词有的时候：1 3 6 9 10 &quot;hello&quot;</span><br><span class="line">没有出现单词：2 4 5 7 8 ~&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>上面的代码，包括之前的一些代码阅读，都是草稿性质的，并不能实际执行。</p><p>使用 StarUML 画出的类图（这个软件出的图有点不尽人意）：</p><p><img src="https://s2.loli.net/2024/05/10/mTR5owVHZLtG2U6.png" alt="74-5.png"></p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1haYhOE1IlaOQPC_LFEJ9dNeSeOCv_B_y/preview" style="width:100%; height:550px"></iframe></div><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>我们先来看一下之前写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Figure</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123;_name = <span class="string">&quot;Cylinder&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Figure* pfig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pfig-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&#x27;s area is &quot;</span></span><br><span class="line">         &lt;&lt; pfig-&gt;<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">o1</span><span class="params">(<span class="number">1.0</span>)</span></span>;</span><br><span class="line">    o1.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;o1);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">o2</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">    o2.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;o2);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Cylinder <span class="title">cy1</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    cy1.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;cy1);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">Cylinder <span class="title">cy2</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    cy2.<span class="built_in">show</span>();</span><br><span class="line">    <span class="built_in">func</span>(&amp;cy2);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 1</span></span><br><span class="line"><span class="comment">perimeter = 6.28319</span></span><br><span class="line"><span class="comment">area = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 2</span></span><br><span class="line"><span class="comment">perimeter = 12.5664</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 1</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment">volume = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 2</span></span><br><span class="line"><span class="comment">area = 50.2655</span></span><br><span class="line"><span class="comment">volume = 25.1327</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 50.2655</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>现在，我们尝试更优雅地创建对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123; _name = <span class="string">&quot;Cylinder&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Figure* pfig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pfig-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&#x27;s area is &quot;</span></span><br><span class="line">         &lt;&lt; pfig-&gt;<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Figure* <span class="title">create</span><span class="params">(<span class="type">const</span> string&amp; name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="string">&quot;Circle&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读配置文件</span></span><br><span class="line">            <span class="comment">// 解析配置文件</span></span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Circle</span>(<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(name == <span class="string">&quot;Cylinder&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读配置文件</span></span><br><span class="line">            <span class="comment">// 解析配置文件</span></span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Cylinder</span>(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">pCir</span><span class="params">(Factory::create(<span class="string">&quot;Circle&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">pCyl</span><span class="params">(Factory::create(<span class="string">&quot;Cylinder&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(pCir.<span class="built_in">get</span>());  <span class="comment">// get() 方法得到裸指针</span></span><br><span class="line">    <span class="built_in">func</span>(pCyl.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 3.14159</span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码采用了简单工厂的思想。</p><p><strong>简单工厂</strong>模式又叫<strong>静态工厂</strong>方法模式。提供一个工厂类，在工厂类中做判断，<strong>根据传入的类型创造相应的产品</strong>。当增加新的产品时，就需要修改工厂类。简单工厂模式提供了专门的工厂类用于创建对象，将对象的创建和对象的使用分离开。</p><p><img src="https://bu.dusays.com/2024/05/10/663e40bad9ea8.png" alt="74-6.png"></p><p>应用场景：一个公司、一个工厂可以生产很多的产品（类似于富士康）。</p><p>缺点:</p><ol><li>违背了开闭原则（扩展性比较差）</li><li>违背了单一职责原则（该类可以做很多事情）</li><li>违背了依赖倒置原则，不能更好的应对变化</li></ol><p>优点:</p><ol><li>直接通过配置文件就可以获取产品信息</li><li>无需知道产品的生产过程，就可以获取产品</li></ol><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>在简单工厂上进行改进。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123; _name = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123; _name = <span class="string">&quot;Cylinder&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Figure* pfig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; pfig-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;&#x27;s area is &quot;</span></span><br><span class="line">         &lt;&lt; pfig-&gt;<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Figure* <span class="title">create</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Factory</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleFactory</span>: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Figure* <span class="title">create</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读配置文件</span></span><br><span class="line">        <span class="comment">// 解析配置文件</span></span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Circle</span>(<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CylinderFactory</span>: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Figure* <span class="title">create</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读配置文件</span></span><br><span class="line">        <span class="comment">// 解析配置文件</span></span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Cylinder</span>(<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Factory&gt; <span class="title">factoryCir</span><span class="params">(<span class="keyword">new</span> CircleFactory())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">myCir</span><span class="params">(factoryCir-&gt;create())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">unique_ptr&lt;Factory&gt; <span class="title">factoryCyl</span><span class="params">(<span class="keyword">new</span> CylinderFactory())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Figure&gt; <span class="title">myCyl</span><span class="params">(factoryCyl-&gt;create())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(myCir.<span class="built_in">get</span>());  <span class="comment">// get() 方法得到裸指针</span></span><br><span class="line">    <span class="built_in">func</span>(myCyl.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Circle&#x27;s area is 3.14159</span></span><br><span class="line"><span class="comment">Cylinder&#x27;s area is 12.5664</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/11/663f07daf0546.png" alt="74-7.png"></p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>在软件开发及运行过程中，经常面临着“一系列相互依赖的对象”的创建工作；而由于需求的变化，常常存在更多系列对象的创建问题。</p><p>做法是：提供一个接口，该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。</p><p><img src="https://s2.loli.net/2024/05/11/2d6vpxyYeOc3rUH.png" alt="74-8.png"></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A类型的抽象产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractProductA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ~<span class="built_in">AbstractProductA</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类型的抽象产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractProductB</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ~<span class="built_in">AbstractProductB</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA1</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductA1::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA2</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductA2::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB1</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductB1::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB2</span></span><br><span class="line">: <span class="keyword">public</span> AbstractProductB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void ProductB2::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractProductA *<span class="title">createProductA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractProductB *<span class="title">createProductB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ~<span class="built_in">AbstractFactory</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span></span><br><span class="line">: <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractProductA *<span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB *<span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span></span><br><span class="line">: <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractProductA *<span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB *<span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractFactory *factory1 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory1</span>();</span><br><span class="line">    AbstractProductA *productA = factory1-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    AbstractProductB *productB = factory1-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    productA-&gt;<span class="built_in">show</span>();</span><br><span class="line">    productB-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    AbstractFactory *factory2 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory2</span>();</span><br><span class="line">    productA = factory2-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    productB = factory2-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    productA-&gt;<span class="built_in">show</span>();</span><br><span class="line">    productB-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>《设计模式：可复用面向对象软件的基础》对观察者模式定义如下：</p><p>定义对象的一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 当一个对象发生了变化，关注它的对象就会得到通知。这种交互也称为<strong>发布-订阅（publish - subscribe）</strong>。</p><p><img src="https://bu.dusays.com/2024/05/11/663f1479834f1.png" alt="74--9.png"></p><p>代码示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::list;</span><br><span class="line"><span class="keyword">using</span> std::find;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">attach</span><span class="params">(Observer *pObserver)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">detach</span><span class="params">(Observer *pObserver)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">notify</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Subject</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteSubject</span></span><br><span class="line">: <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attach</span><span class="params">(Observer *pObserver)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">detach</span><span class="params">(Observer *pObserver)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setStatus</span><span class="params">(<span class="type">int</span> status)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getStatus</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    list&lt;Observer *&gt; _obList;</span><br><span class="line">    <span class="type">int</span> _status;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Observer</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver</span></span><br><span class="line">: <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteObserver</span>(<span class="type">const</span> string &amp;name)</span><br><span class="line">                    : _name(name) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ConcreteObserver &quot;</span> &lt;&lt; _name &lt;&lt; <span class="string">&quot;, value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver2</span></span><br><span class="line">: <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteObserver2</span>(<span class="type">const</span> string &amp;name)</span><br><span class="line">    : _name(name)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ConcreteObserver2 &quot;</span> &lt;&lt; _name &lt;&lt; <span class="string">&quot;, value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConcreteSubject::attach</span><span class="params">(Observer *pObserver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _obList.<span class="built_in">push_back</span>(pObserver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConcreteSubject::detach</span><span class="params">(Observer *pObserver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = _obList.<span class="built_in">begin</span>(); it != _obList.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*it == pObserver)</span><br><span class="line">        &#123;</span><br><span class="line">            _obList.<span class="built_in">remove</span>(pObserver);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConcreteSubject::notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ob : _obList)</span><br><span class="line">    &#123;</span><br><span class="line">        ob-&gt;<span class="built_in">update</span>(_status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;ConcreteSubject&gt; <span class="title">pSubject</span><span class="params">(<span class="keyword">new</span> ConcreteSubject())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Observer&gt; <span class="title">pObserver</span><span class="params">(<span class="keyword">new</span> ConcreteObserver(<span class="string">&quot;lili&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Observer&gt; <span class="title">pObserver2</span><span class="params">(<span class="keyword">new</span> ConcreteObserver2(<span class="string">&quot;lucy&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成为 ikun</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">attach</span>(pObserver.<span class="built_in">get</span>());</span><br><span class="line">    pSubject-&gt;<span class="built_in">attach</span>(pObserver2.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gege 更新状态</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">setStatus</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gege 发布动态</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 虚伪的拥护</span></span><br><span class="line">    pSubject-&gt;<span class="built_in">detach</span>(pObserver2.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    pSubject-&gt;<span class="built_in">setStatus</span>(<span class="number">3</span>);</span><br><span class="line">    pSubject-&gt;<span class="built_in">notify</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Observer2 遗憾离场</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ConcreteObserver lili, value = 2</span></span><br><span class="line"><span class="comment">ConcreteObserver2 lucy, value = 2</span></span><br><span class="line"><span class="comment">ConcreteObserver lili, value = 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h2><h3 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h3><p><strong>进程是系统中程序执行和资源分配的基本单位。</strong> 每个进程有自己的数据段、代码段和堆栈段。这就造成进程在进行切换等操作时都需要有比较多的上下文切换等动作。为了进一步减少处理器的空转时间支持多处理器和减少上下文切换开销，也就出现了线程。</p><p><strong>线程是操作系统能够进行运算调度的最小单位。</strong> 它被包含在进程之中，是进程中的实际运作单位。是进程的基本调度单元，<strong>每个进程至少都有一个 main 线程</strong>，它与同进程中的其他线程共享进程空间（堆代码、数据、文件描述符、信号等），<strong>只拥有少量的栈空间</strong>，大大减少了上下文切换的开销。</p><p>线程和进程在使用上各有优缺点：线程执行开销小，占用的 CPU 少，线程之间的切换快，但不利于资源的管理和保护；而进程正相反。</p><p>同进程一样，线程也将相关的变量值放在 <strong>线程控制表（TCB）</strong> 内。一个进程可以有多个线程，也就是有多个线程控制表及堆栈寄存器，共享一个用户地址空间。要注意的是，<strong>由于线程共享了进程的资源和地址空间，因此，任何线程对系统资源的操作都会给其他线程带来影响。</strong></p><h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><p>用户态空间（0-3G）：运行在用户态的线程称为用户级线程（用户态线程），可以使用系统调用。</p><p>内核态空间（3G-4G）：运行在内核态的线程称为内核级线程（内核态线程）。</p><h3 id="线程的-Linux-实现"><a href="#线程的-Linux-实现" class="headerlink" title="线程的 Linux 实现"></a>线程的 Linux 实现</h3><p>Linux 的线程是通过用户级的函数库实现的，一般采用 pthread 线程库实现线程的访问和控制。它用第三方 posix 标准的 pthread，具有良好的可移植性。编译时要在后面加上 <code>–lpthread</code>。</p><table>  <tbody>    <tr>      <td></td>      <td><strong>创建</strong></td>      <td><strong>退出</strong></td>      <td><strong>等待</strong></td>    </tr>    <tr>      <td><strong>进程</strong></td>      <td>fork()</td>      <td>exit()</td>      <td>wait()</td>    </tr>    <tr>      <td><strong>线程</strong></td>      <td>pthread_create()</td>      <td>pthread_exit()</td>      <td><strong>pthread_join()</strong></td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table><h3 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compile and link with -pthread.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *),</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">void</span> *arg)</span></span>;</span><br><span class="line"><span class="comment">// thread:线程id，为了与其他线程做区分。</span></span><br><span class="line"><span class="comment">// attr:线程的属性，线程的特性，可以使用默认属性，将其设置空即可。</span></span><br><span class="line"><span class="comment">// start_routine:线程入口函数，线程需要去做的任务，都写在该函数中。start_routine是一个函数指针。</span></span><br><span class="line"><span class="comment">// arg:代表的是线程的参数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的返回类型是一个int，如果线程创建成功，就会返回0，如果线程创建失败，会返回错误码。</span></span><br></pre></td></tr></table></figure><p>传多个参数的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// just an example...</span></span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">float</span> fx;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pstr = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">float</span> fx;</span><br><span class="line">    <span class="type">char</span> *pstr;</span><br><span class="line">&#125;Data_t;</span><br><span class="line"></span><br><span class="line">Data_t *p;</span><br></pre></td></tr></table></figure><p>来看一个简单的例子，它展示了线程的不确定性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create: %s\n&quot;</span>, <span class="built_in">strerror</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果是不确定的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以考虑使用 sleep 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create: %s\n&quot;</span>, <span class="built_in">strerror</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>更改 sleep 函数的位置，可以得到不一样的效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pthread_create: %s\n&quot;</span>, <span class="built_in">strerror</span>(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>用宏包装一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>向线程入口函数中传参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = (<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread. %d\n&quot;</span>, *pInt);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> aaa = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, (<span class="type">void</span>*)&amp;aaa);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread. 10</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="线程的退出"><a href="#线程的退出" class="headerlink" title="线程的退出"></a>线程的退出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span></span>;</span><br><span class="line"><span class="comment">//retVal:线程退出时候的值（状态）</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = (<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread. %d\n&quot;</span>, *pInt);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> aaa = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, (<span class="type">void</span>*)&amp;aaa);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread. 10</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>main 线程是主线程，主线程执行完毕之后，不管子线程，子线程有可能还没有来得及执行。所以一般都需要让主线程等待子线程执行完毕，再退出。</p><h3 id="线程的等待"><a href="#线程的等待" class="headerlink" title="线程的等待"></a>线程的等待</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span></span>;</span><br><span class="line"><span class="comment">//thread：传递进来的是被等待线程的id</span></span><br><span class="line"><span class="comment">//retVal：将等待线程的状态值取出来</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_join&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a child thread.</span></span><br><span class="line"><span class="comment">pthread_join: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>获取线程 id：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">pthread_t</span> <span class="title">pthread_self</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>线程的执行具有随机性。因为时序不同，所以每次运行的结果都可能不同。</p><h3 id="线程的取消"><a href="#线程的取消" class="headerlink" title="线程的取消"></a>线程的取消</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cancel</span><span class="params">(<span class="type">pthread_t</span> thread)</span></span>;</span><br><span class="line"><span class="comment">//thread:被取消的线程id</span></span><br></pre></td></tr></table></figure><p>线程也可以被其它线程杀掉，在 Linux 中的说法是一个线程被另一个线程取消（cancel）。</p><p>线程取消的方法是一个线程向目标线程发 cancel 信号， 但是如何处理 cancel 信号则由目标线程自己决定，目标线程或者忽略、或者立即终止、或者继续运行至 cancelation-point（取消点）后终止。<strong>默认的行为是运行到取消点。</strong></p><p>根据 POSIX 标准：一些会引起阻塞的系统调用都是取消点。不过经过测试一些非阻塞性函数也可以是取消点。可以通过 man 7 pthreads 查看，不过由于 Linux 线程库和 C 库结合的不是很好，有很多函数没有明确是否为取消点。</p><p>总之，线程的取消一方面是一个线程强行杀另外一个线程，从程序设计角度看并不是一种好的风格，另一方面目前 Linux 本身对这方面的支持并不完善，所以在<strong>实践中应该谨慎使用</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a child thread.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程尝试杀死子线程</span></span><br><span class="line">    ret = <span class="built_in">pthread_cancel</span>(thid);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cancel&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_join&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I&#x27;m a main thread.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">pthread_cancel: Success</span></span><br><span class="line"><span class="comment">pthread_join: Success</span></span><br><span class="line"><span class="comment">I&#x27;m a main thread.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="线程的分离"><a href="#线程的分离" class="headerlink" title="线程的分离"></a>线程的分离</h3><p>如果想让主线程不去等待或者回收子线程，那么可以将子线程设置为分离状态：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="面向对象的线程封装"><a href="#面向对象的线程封装" class="headerlink" title="面向对象的线程封装"></a>面向对象的线程封装</h2><p>整体思路：</p><p><img src="https://bu.dusays.com/2024/05/13/6641e4a61deff.png" alt="74-10.png"></p><p><code>Thread.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Thread</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span>; <span class="comment">// 线程的入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;      <span class="comment">// 线程的执行任务</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> _thid;  <span class="comment">// 线程 id</span></span><br><span class="line">    <span class="type">bool</span> _isRunning; <span class="comment">// 线程运行的标志位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Thread.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Thread::<span class="built_in">Thread</span>()</span><br><span class="line">: _thid(<span class="number">0</span>)</span><br><span class="line">, _isRunning(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread::~<span class="built_in">Thread</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 让子线程与主线程分离，主线程不管子线程的回收</span></span><br><span class="line">        <span class="built_in">pthread_detach</span>(_thid);</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程，启动！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;_thid, <span class="literal">nullptr</span>, threadFunc, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _isRunning = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_join</span>(_thid, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_join\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread::threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Thread* pth = <span class="built_in">static_cast</span>&lt;Thread*&gt;(arg);</span><br><span class="line">    <span class="keyword">if</span>(pth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// threadFunc 是 static 的，没有 this 指针</span></span><br><span class="line">        <span class="comment">// 故在 pthread_create 中将 this 传进来</span></span><br><span class="line">        pth-&gt;<span class="built_in">run</span>(); <span class="comment">// 体现多态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让子线程主动退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testThread.cc</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>: <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 具体逻辑根据需要书写</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;My Thread is Running !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;Thread&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> MyThread())</span></span>;</span><br><span class="line">    p-&gt;<span class="built_in">start</span>();</span><br><span class="line">    p-&gt;<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于对象的线程封装"><a href="#基于对象的线程封装" class="headerlink" title="基于对象的线程封装"></a>基于对象的线程封装</h2><p>思路：</p><p><img src="https://s2.loli.net/2024/05/14/NYAtgceWVFSXHMR.jpg" alt="74-11.jpg"></p><p><code>Thread.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> ThreadCallBack = function&lt;<span class="built_in">void</span>()&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>(ThreadCallBack&amp;&amp; cb); <span class="comment">// 移动语义是为了提高效率</span></span><br><span class="line">    ~<span class="built_in">Thread</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span>; <span class="comment">// 线程的入口函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> _thid;     <span class="comment">// 线程 id</span></span><br><span class="line">    <span class="type">bool</span> _isRunning;     <span class="comment">// 线程运行的标志位</span></span><br><span class="line">    ThreadCallBack _cb;  <span class="comment">// 封装的任务</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Thread.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Thread::<span class="built_in">Thread</span>(ThreadCallBack&amp;&amp; cb)</span><br><span class="line">: _thid(<span class="number">0</span>)</span><br><span class="line">, _isRunning(<span class="literal">false</span>)</span><br><span class="line">, _cb(std::<span class="built_in">move</span>(cb)) <span class="comment">// 注册回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread::~<span class="built_in">Thread</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 让子线程与主线程分离，主线程不管子线程的回收</span></span><br><span class="line">        <span class="built_in">pthread_detach</span>(_thid);</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程，启动！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;_thid, <span class="literal">nullptr</span>, threadFunc, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _isRunning = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_join</span>(_thid, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_join\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread::threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Thread* pth = <span class="built_in">static_cast</span>&lt;Thread*&gt;(arg);</span><br><span class="line">    <span class="keyword">if</span>(pth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// threadFunc 是 static 的，没有 this 指针</span></span><br><span class="line">        <span class="comment">// 故在 pthread_create 中将 this 传进来</span></span><br><span class="line">        pth-&gt;_cb();  <span class="comment">// 执行回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让子线程主动退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>testThread.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTask</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 具体逻辑根据需要书写</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;My Thread is Running !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyTask task;</span><br><span class="line">    <span class="function">Thread <span class="title">th</span><span class="params">(std::bind(&amp;MyTask::process, &amp;task))</span></span>;</span><br><span class="line"></span><br><span class="line">    th.<span class="built_in">start</span>();</span><br><span class="line">    th.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>Posix Thread 中定义了一套专门用于线程互斥的 mutex 函数。mutex 是一种简单的加锁的方法来控制对共享资源的存取，这个互斥锁只有两种状态（上锁和解锁），可以把互斥锁看作某种意义上的全局变量。</p><h3 id="互斥锁的初始化"><a href="#互斥锁的初始化" class="headerlink" title="互斥锁的初始化"></a>互斥锁的初始化</h3><p>静态初始化与动态初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="comment">//pthread_mutex_t 锁的类型</span></span><br><span class="line"><span class="comment">//mutex锁的名字</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化（常用）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *mutexattr)</span></span>;</span><br><span class="line"><span class="comment">//mutex：指向互斥锁的指针的名字</span></span><br><span class="line"><span class="comment">//mutexattr:互斥锁的属性，如果不需要设置锁的其他属性，可以设置为nullptr，用默认属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：如果锁的初始化是正常的，就会返回0；否则会返回非0的值</span></span><br></pre></td></tr></table></figure><h3 id="互斥锁的销毁"><a href="#互斥锁的销毁" class="headerlink" title="互斥锁的销毁"></a>互斥锁的销毁</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：如果锁正常销毁就会返回0；否则返回错误码</span></span><br></pre></td></tr></table></figure><h3 id="加锁与解锁"><a href="#加锁与解锁" class="headerlink" title="加锁与解锁"></a>加锁与解锁</h3><p>注意：锁只有两种状态，要么加锁，要么解锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试加锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure><p>上锁状态，资源一直被占用，不能直接回收或销毁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Device or resource busy</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>互斥锁不能多加：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">卡住</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>正确的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>尝试加锁（若已加锁，则尝试上锁失败；否则成功）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_trylock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_trylock: Device or resource busy</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>两次 trylock ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_trylock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_trylock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_trylock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_trylock: Device or resource busy</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><p>条件变量是利用线程间共享的全局变量进行同步的一种机制， 主要包括两个动作：一个线程等待条件变量上的条件成立而挂起；另一个线程使条件成立（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。</p><h3 id="条件变量的初始化"><a href="#条件变量的初始化" class="headerlink" title="条件变量的初始化"></a>条件变量的初始化</h3><p>两种初始化的方式：静态初始化与动态初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_condattr_t</span> *cond_attr)</span></span>;</span><br><span class="line"><span class="comment">//cond：条件变量的名字</span></span><br><span class="line"><span class="comment">//cond_attr:条件变量属性，默认情况可以使用nullptr传递默认值。</span></span><br><span class="line"><span class="comment">//返回值：初始化成功就返回0；否则就返回非0的错误码。</span></span><br></pre></td></tr></table></figure><h3 id="条件变量的销毁"><a href="#条件变量的销毁" class="headerlink" title="条件变量的销毁"></a>条件变量的销毁</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"><span class="comment">//返回值：销毁成功就返回0；否则就返回非0的错误码。</span></span><br></pre></td></tr></table></figure><h3 id="条件变量的等待"><a href="#条件变量的等待" class="headerlink" title="条件变量的等待"></a>条件变量的等待</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无时间的等待，一直等待</span></span><br><span class="line"><span class="comment">//该函数会分为两个部分（至关重要）</span></span><br><span class="line"><span class="comment">//1、上半部：（在条件变量上）排队；解锁；睡眠；</span></span><br><span class="line"><span class="comment">//2、下半部：(从条件变量上)被唤醒；加锁；函数返回</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有时等待，超过设定的时间之后，就不会阻塞下去，而会返回</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">pthread_mutex_t</span> *mutex,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">const</span> <span class="keyword">struct</span> timespec *abstime)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="条件变量的激发"><a href="#条件变量的激发" class="headerlink" title="条件变量的激发"></a>条件变量的激发</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// 《unix高级环境编程》</span></span><br><span class="line"><span class="comment">// 发送消息，让至少一个等待在条件变量上的线程唤醒。（唤醒的线程的个数是不一定的，但是至少有一个）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送广播消息，让所有等待在条件变量上的线程都被唤醒。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure><p>注意：POSIX 规范为了简化 pthread_cond_signal 的实现，允许它在实现的时候唤醒一个以上的线程。结果是，当一个线程调用 pthread_cond_signal 后，多个调用 pthread_cond_wait 或 pthread_cond_timedwait 的线程返回。 该现象被称为<strong>虚假唤醒</strong>。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 互斥锁初始化</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量初始化</span></span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;</span><br><span class="line">    ret = <span class="built_in">pthread_cond_init</span>(&amp;cond, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁加锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_destroy</span>(&amp;cond);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_destory&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_cond_init: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">pthread_cond_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看一段稍显迷惑的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CHECK(msg, ret) \</span></span><br><span class="line"><span class="meta">        do&#123;                   \</span></span><br><span class="line"><span class="meta">            printf(<span class="string">&quot;%s: %s\n&quot;</span>, msg, strerror(ret)); \</span></span><br><span class="line"><span class="meta">        &#125;while(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;</span><br><span class="line">&#125;Data_t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Data_t* p = (Data_t*) arg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁加锁</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_lock</span>(&amp;p-&gt;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock2&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_cond_wait</span>(&amp;p-&gt;cond, &amp;p-&gt;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_wait&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;p-&gt;mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock2&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Data_t data;</span><br><span class="line">    data.num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁初始化</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;data.mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量初始化</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_init</span>(&amp;data.cond, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_init&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子线程，让其等待在条件变量上</span></span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    ret = <span class="built_in">pthread_create</span>(&amp;thid, <span class="literal">nullptr</span>, threadFunc, &amp;data);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_create&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让子线程先执行</span></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁加锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_lock</span>(&amp;data.mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_lock1&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程唤醒子线程</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_signal</span>(&amp;data.cond);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_signal&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解锁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;data.mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_unlock1&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_join&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;data.mutex);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_mutex_destory&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件变量销毁</span></span><br><span class="line">    ret = <span class="built_in">pthread_cond_destroy</span>(&amp;data.cond);</span><br><span class="line">    <span class="built_in">ERROR_CHECK</span>(<span class="string">&quot;pthread_cond_destory&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pthread_mutex_init: Success</span></span><br><span class="line"><span class="comment">pthread_cond_init: Success</span></span><br><span class="line"><span class="comment">pthread_create: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock2: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_lock1: Success</span></span><br><span class="line"><span class="comment">pthread_cond_signal: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock1: Success</span></span><br><span class="line"><span class="comment">pthread_cond_wait: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_unlock2: Success</span></span><br><span class="line"><span class="comment">pthread_join: Success</span></span><br><span class="line"><span class="comment">pthread_mutex_destory: Success</span></span><br><span class="line"><span class="comment">pthread_cond_destory: Success</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么获得 lock2 后还能获得 lock1 ？</span></span><br><span class="line"><span class="comment">// 互斥锁不是不能多加吗？</span></span><br></pre></td></tr></table></figure><p>代码最后注释的两个疑问，和 pthread_cond_wait 函数的特性有关。该函数会分为两个部分：</p><ul><li>上半部：在条件变量上排队；解锁；睡眠</li><li>下半部：在条件变量上被唤醒；加锁；函数返回</li></ul><h2 id="生产者与消费者封装"><a href="#生产者与消费者封装" class="headerlink" title="生产者与消费者封装"></a>生产者与消费者封装</h2><h3 id="简单情形"><a href="#简单情形" class="headerlink" title="简单情形"></a>简单情形</h3><p>思路：</p><p><img src="https://s2.loli.net/2024/05/15/lQsUm8LR64NZEFP.png" alt="74-12.png"></p><p><code>MutexLock.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MUTEXLOCK_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MUTEXLOCK_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLock</span>();</span><br><span class="line">    ~<span class="built_in">MutexLock</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trylock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get_mutex_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>MutexLock.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MutexLock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MutexLock::<span class="built_in">MutexLock</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_init</span>(&amp;_mutex, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_init\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MutexLock::~<span class="built_in">MutexLock</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_destroy</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_destroy\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexLock::lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_lock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexLock::trylock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_trylock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_trylock\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MutexLock::unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_mutex_unlock</span>(&amp;_mutex);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Condition.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CONDITION_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CONDITION_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Condition</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Condition</span>(MutexLock&amp; mutex);</span><br><span class="line">    ~<span class="built_in">Condition</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MutexLock&amp; _mutex;</span><br><span class="line">    <span class="type">pthread_cond_t</span> _cond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Condition.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Condition.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MutexLock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Condition::<span class="built_in">Condition</span>(MutexLock&amp; mutex)</span><br><span class="line">: _mutex(mutex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_init</span>(&amp;_cond, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_init\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                      </span><br><span class="line">Condition::~<span class="built_in">Condition</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_destroy</span>(&amp;_cond);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_destroy\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_wait</span>(&amp;_cond, _mutex.<span class="built_in">get_mutex_ptr</span>());</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">                                      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_signal</span>(&amp;_cond);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_signal\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Condition::notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_cond_broadcast</span>(&amp;_cond);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TaskQueue.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TASKQUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TASKQUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MutexLock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Condition.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">size_t</span> queSize);</span><br><span class="line">    ~<span class="built_in">TaskQueue</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">size_t</span> _queSize;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; _que;</span><br><span class="line">    MutexLock _mutex;</span><br><span class="line">    Condition _notEmpty;</span><br><span class="line">    Condition _notFull;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>TaskQueue.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TaskQueue::<span class="built_in">TaskQueue</span>(<span class="type">size_t</span> queSize)</span><br><span class="line">: _queSize(queSize)</span><br><span class="line">, _que()</span><br><span class="line">, _mutex()</span><br><span class="line">, _notEmpty(_mutex)</span><br><span class="line">, _notFull(_mutex)  <span class="comment">// 注意要按照顺序初始化</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _queSize 和 _que 不用管</span></span><br><span class="line"><span class="comment">// _mutex, _notEmpty, _notFull 生命周期结束自动执行各自的析构函数</span></span><br><span class="line">TaskQueue::~<span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == _que.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::full</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _que.<span class="built_in">size</span>() == _queSize;</span><br><span class="line">    <span class="comment">// 这里的 _queSize 其实是指队列的最大容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskQueue::push</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _mutex.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notFull.<span class="built_in">wait</span>();</span><br><span class="line">        <span class="comment">// 这个变量命名有点奇怪，可以这样理解：</span></span><br><span class="line">        <span class="comment">// 等待不满的时候</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _que.<span class="built_in">push</span>(value);</span><br><span class="line">    _notEmpty.<span class="built_in">notify</span>(); <span class="comment">// 唤醒消费者</span></span><br><span class="line">    _mutex.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TaskQueue::pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _mutex.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notEmpty.<span class="built_in">wait</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = _que.<span class="built_in">front</span>();</span><br><span class="line">    _que.<span class="built_in">pop</span>();</span><br><span class="line">    _notFull.<span class="built_in">notify</span>(); <span class="comment">// 唤醒生产者</span></span><br><span class="line">    _mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Thread.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __THREAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THREAD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Thread</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Thread</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span>; <span class="comment">// 线程的入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;      <span class="comment">// 线程的执行任务</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> _thid;  <span class="comment">// 线程 id</span></span><br><span class="line">    <span class="type">bool</span> _isRunning; <span class="comment">// 线程运行的标志位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Thread.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Thread::<span class="built_in">Thread</span>()</span><br><span class="line">: _thid(<span class="number">0</span>)</span><br><span class="line">, _isRunning(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread::~<span class="built_in">Thread</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 让子线程与主线程分离，主线程不管子线程的回收</span></span><br><span class="line">        <span class="built_in">pthread_detach</span>(_thid);</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程，启动！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;_thid, <span class="literal">nullptr</span>, threadFunc, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;pthread_create\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _isRunning = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Thread::join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_isRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_join</span>(_thid, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_join\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Thread::threadFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Thread* pth = <span class="built_in">static_cast</span>&lt;Thread*&gt;(arg);</span><br><span class="line">    <span class="keyword">if</span>(pth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// threadFunc 是 static 的，没有 this 指针</span></span><br><span class="line">        <span class="comment">// 故在 pthread_create 中将 this 传进来</span></span><br><span class="line">        pth-&gt;<span class="built_in">run</span>(); <span class="comment">// 体现多态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让子线程主动退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Producer.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PRODUCER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PRODUCER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span></span><br><span class="line">: <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Producer</span>(TaskQueue&amp; taskQue)</span><br><span class="line">    : _taskQue(taskQue)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Producer</span>()</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ::<span class="built_in">srand</span>(::<span class="built_in">clock</span>());</span><br><span class="line">        <span class="type">size_t</span> cnt = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> number = ::<span class="built_in">rand</span>()%<span class="number">100</span>;</span><br><span class="line">            _taskQue.<span class="built_in">push</span>(number);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&gt;&gt;Producer produce: &quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaskQueue&amp; _taskQue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Consumer.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _CONSUMER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CONSUMER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span></span><br><span class="line">: <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Consumer</span>(TaskQueue&amp; taskQue)</span><br><span class="line">    : _taskQue(taskQue)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Consumer</span>()</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> cnt = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num = _taskQue.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&gt;&gt;Consumer consume: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaskQueue&amp; _taskQue;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>testFile.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Producer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Consumer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TaskQueue <span class="title">task</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Producer <span class="title">pro</span><span class="params">(task)</span></span>;</span><br><span class="line">    <span class="function">Consumer <span class="title">con</span><span class="params">(task)</span></span>;</span><br><span class="line"></span><br><span class="line">    pro.<span class="built_in">start</span>();</span><br><span class="line">    con.<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    pro.<span class="built_in">join</span>();</span><br><span class="line">    con.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TaskQueue <span class="title">task</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Thread&gt; <span class="title">pro</span><span class="params">(<span class="keyword">new</span> Producer(task))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Thread&gt; <span class="title">con</span><span class="params">(<span class="keyword">new</span> Consumer(task))</span></span>;</span><br><span class="line"></span><br><span class="line">    pro-&gt;<span class="built_in">start</span>();</span><br><span class="line">    con-&gt;<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line">    pro-&gt;<span class="built_in">join</span>();</span><br><span class="line">    con-&gt;<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某一次的运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 39</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 71</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 55</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 9</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 94</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 19</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 71</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 59</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 90</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: &gt;&gt;Producer produce: 4</span></span><br><span class="line"><span class="comment">39</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 71</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 97</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 55</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 9</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 94</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 19</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: &gt;&gt;Consumer consume: 5771</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 59</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 90</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 4</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 97</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 0</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 57</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 23</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 85</span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 95</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: &gt;&gt;Producer produce: 29</span></span><br><span class="line"><span class="comment">23&gt;&gt;Producer produce: </span></span><br><span class="line"><span class="comment">8&gt;&gt;Consumer consume: 85</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 95</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 29</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;&gt;Producer produce: 54</span></span><br><span class="line"><span class="comment">&gt;&gt;Consumer consume: 54</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以看到两线程交替运行</span></span><br><span class="line"><span class="comment">空行是之前还没来得及输出的换行</span></span><br><span class="line"><span class="comment">cout 不是原子操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类图设计的思路可以多回顾 D31_4</span></span><br></pre></td></tr></table></figure><h3 id="利用-RAII-优化"><a href="#利用-RAII-优化" class="headerlink" title="利用 RAII 优化"></a>利用 RAII 优化</h3><p>一个小改进，我们可以利用 RAII 的思想管理锁（以两个文件为例）：</p><p><code>MutexLock.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MUTEXLOCK_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MUTEXLOCK_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLock</span>();</span><br><span class="line">    ~<span class="built_in">MutexLock</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trylock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get_mutex_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 RAII 的思想</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLockGuard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLockGuard</span>(MutexLock&amp; mutex)</span><br><span class="line">    : _mutex(mutex)</span><br><span class="line">    &#123;</span><br><span class="line">        _mutex.<span class="built_in">lock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MutexLockGuard</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        _mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MutexLock&amp; _mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>TaskQueue.cc</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TaskQueue::<span class="built_in">TaskQueue</span>(<span class="type">size_t</span> queSize)</span><br><span class="line">: _queSize(queSize)</span><br><span class="line">, _que()</span><br><span class="line">, _mutex()</span><br><span class="line">, _notEmpty(_mutex)</span><br><span class="line">, _notFull(_mutex)  <span class="comment">// 注意要按照顺序初始化</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _queSize 和 _que 不用管</span></span><br><span class="line"><span class="comment">// _mutex, _notEmpty, _notFull 生命周期结束自动执行各自的析构函数</span></span><br><span class="line">TaskQueue::~<span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::empty</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> == _que.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">TaskQueue::full</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _que.<span class="built_in">size</span>() == _queSize;</span><br><span class="line">    <span class="comment">// 这里的 _queSize 其实是指队列的最大容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TaskQueue::push</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// RAII 的思想：</span></span><br><span class="line">    <span class="comment">// 在构造函数中初始化资源，析构函数中释放</span></span><br><span class="line">    <span class="comment">// 实质：用栈对象的生命周期管理资源</span></span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">autolock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notFull.<span class="built_in">wait</span>();</span><br><span class="line">        <span class="comment">// 这个变量命名有点奇怪，可以这样理解：</span></span><br><span class="line">        <span class="comment">// 等待不满的时候</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _que.<span class="built_in">push</span>(value);</span><br><span class="line">    _notEmpty.<span class="built_in">notify</span>(); <span class="comment">// 唤醒消费者</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TaskQueue::pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">autolock</span><span class="params">(_mutex)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        _notEmpty.<span class="built_in">wait</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = _que.<span class="built_in">front</span>();</span><br><span class="line">    _que.<span class="built_in">pop</span>();</span><br><span class="line">    _notFull.<span class="built_in">notify</span>(); <span class="comment">// 唤醒生产者</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h3><p>考虑这样的情况：<br>有多个生产者，生产者们的生产速度超过了消费者消费的速度，那么，仓库常常会处于满的状态，生产者线程被挂起（假设共有 3 个生产者）。现在，消费者消费了一个产品，调用 pthread_cond_signal 函数，由于 POSIX 规范允许它唤醒一个以上的线程（见之前笔记），如果此时唤醒了多个生产者线程（假设我们唤醒了 3 个线程），来看下面的代码逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line">    _notFull.<span class="built_in">wait</span>();</span><br><span class="line">    <span class="comment">// 这个变量命名有点奇怪，可以这样理解：</span></span><br><span class="line">    <span class="comment">// 等待不满的时候</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_que.<span class="built_in">push</span>(value);</span><br><span class="line">_notEmpty.<span class="built_in">notify</span>(); <span class="comment">// 唤醒消费者</span></span><br></pre></td></tr></table></figure><p>它们都会走出<code>if()&#123;&#125;</code>，并在 _que 里面塞点东西，这是我们不愿看见的。</p><p>使用<strong>虚假唤醒</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">full</span>())</span><br><span class="line">&#123;</span><br><span class="line">    _notFull.<span class="built_in">wait</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_que.<span class="built_in">push</span>(value);</span><br></pre></td></tr></table></figure><h3 id="禁止复制"><a href="#禁止复制" class="headerlink" title="禁止复制"></a>禁止复制</h3><p>这些代码仍然有问题。</p><p>锁、条件变量、线程是资源，不能进行复制或赋值，要体现对象语义。</p><p>解决方案：</p><ol><li>将拷贝构造函数和赋值运算符函数设为 private. （C++98）</li><li>将拷贝构造函数和赋值运算符函数进行<code>=delete</code> （C++11）</li></ol><p>我们沿用<code>2</code>的思路，使用一个对原有代码最少改动的方法。</p><p>编写文件<code>NonCopyable.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _NONCOPYABLE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _NONCOPYABLE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonCopyable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NonCopyable</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">NonCopyable</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NonCopyable</span>(<span class="type">const</span> NonCopyable&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    NonCopyable&amp; <span class="keyword">operator</span> = (<span class="type">const</span> NonCopyable&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后让现有的一些类继承自此类（注意需要包含头文件<code>NonCopyable.h</code>）。</p><p><code>Condition.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Condition</span></span><br><span class="line">: NonCopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Condition</span>(MutexLock&amp; mutex);</span><br><span class="line">    ~<span class="built_in">Condition</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MutexLock&amp; _mutex;</span><br><span class="line">    <span class="type">pthread_cond_t</span> _cond;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>MutexLock.h</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MutexLock</span></span><br><span class="line">: NonCopyable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MutexLock</span>();</span><br><span class="line">    ~<span class="built_in">MutexLock</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">trylock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span>* <span class="title">get_mutex_ptr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> _mutex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Thread.h</code>同理。</p><p>最终的代码：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/pc_problem">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/pc_problem</a></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>任务量（并发量）较大时，频繁地创建、销毁线程开销也较大。我们可以提前创建好线程，有任务过来的时候，先放到任务队列中，之后子线程从任务队列中获取任务并执行。这样能提高程序的执行效率。</p><h3 id="面向对象的线程池封装"><a href="#面向对象的线程池封装" class="headerlink" title="面向对象的线程池封装"></a>面向对象的线程池封装</h3><p>类图：</p><p><img src="https://bu.dusays.com/2024/05/17/664701c6f269b.jpg" alt="74-13.jpg"></p><p>我的一个通俗但未必严谨的理解：<br>ThreadPool 就是一个中介平台，本身并不做事情，它的手下有一堆干活小弟 Thread（这是一个抽象类，真正干活的是 WorkThread），中介平台会接一些外包任务 Task 分配给干活小弟干。具体来说，WorkThread 的<code>run()</code>方法去执行 ThreadPool 的任务<code>threadFunc()</code> .</p><p>代码参见： <a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/oo_threadPool">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/oo_threadPool</a></p><p>一些注意点写在了注释里。</p><p>一点调试经验：<br>如果线程池退不出来，可以使用<code>ps -elLF | grep a.out</code>查看进程状态。</p><p>时序图：</p><p><img src="https://s2.loli.net/2024/05/20/hSNiH5OQ8Wt6RJF.jpg" alt="74-14.jpg"></p><h3 id="基于对象的线程池封装"><a href="#基于对象的线程池封装" class="headerlink" title="基于对象的线程池封装"></a>基于对象的线程池封装</h3><p>类图：</p><p><img src="https://bu.dusays.com/2024/05/20/664afdeea8a6f.jpg" alt="74-15.JPG"></p><p>代码参见：<br><a href="https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/bo_threadPool">https://github.com/loveofpeach/CPP_Code_Eaxmple/tree/master/bo_threadPool</a></p><h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><p>pthread_create 的第二个参数 attr 是一个结构体指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">__pthread_attr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sched_param</span> __schedparam;</span><br><span class="line">    <span class="type">void</span> *__stackaddr;</span><br><span class="line">    <span class="type">size_t</span> __stacksize;</span><br><span class="line">    <span class="type">size_t</span> __guardsize;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">__pthread_detachstate</span> __detachstate;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">__pthread_inheritsched</span> __inheritsched;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">__pthread_contentionscope</span> __contentionscope;</span><br><span class="line">    <span class="type">int</span> __schedpolicy;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构中的元素分别指定新线程的运行属性，各成员属性为：</p><p><strong>__detachstate</strong> 表示新线程是否与进程中其他线程脱离同步，如果置该属性则新线程不能用 pthread_join() 来等待，且在退出时自行释放所占用的资源。缺省为 PTHREAD_CREATE_JOINABLE 状态。这个属性也可以在线程创建并运行以后用 pthread_detach() 来设置，而一旦设置为 PTHREAD_CREATE_DETACHED 状态（不论是创建时设置还是运行时设置）则不能再恢复到 PTHREAD_CREATE_JOINABLE 状态。</p><p><strong>__schedpolicy</strong>：表示新线程的调度策略，主要包括 SCHED_OTHER（分时调度策略）、SCHED_RR（实时、时间片轮转法）和 SCHED_FIFO（实时、 先到先服务）三种， 缺省为 SCHED_OTHER，后两种调度策略仅对超级用户有效。运行时可以用过 pthread_setschedparam() 来改变。</p><p><strong>__schedparam</strong>：一个 sched_param 结构，目前仅有一个 sched_priority 整型变量表示线程的运行优先级。这个参数仅当调度策略为实时（即 SCHED_RR 或 SCHED_FIFO）时才有效，并可以在运行时通过 pthread_setschedparam() 函数来改变，缺省为 0 .</p><p><strong>__inheritsched</strong>：有两种值可供选择：PTHREAD_EXPLICIT_SCHED 和 PTHREAD_INHERIT_SCHED，前者表示新线程使用显式指定调度策略和调度参数（即 attr 中的值），而后者表示继承调用者线程的值。缺省为 PTHREAD_INHERIT_SCHED .</p><p><strong>__contentionscope</strong>：表示线程间竞争 CPU 的范围，也就是说线程优先级的有效范围。POSIX 的标准中定义了两个值： PTHREAD_SCOPE_SYSTEM 和 PTHREAD_SCOPE_PROCESS，前者表示与系统中所有线程一起竞争 CPU 时间，后者表示仅与同进程中的线程竞争 CPU. 目前 Linux 仅实现了 PTHREAD_SCOPE_SYSTEM 一值。</p><p>属性设置是由一些函数来完成的，通常调用 pthread_attr_init 函数进行初始化。设置绑定属性的函数为 pthread_attr_setscope，设置分离属性的函数是 pthread_attr_setdetachstate，设置线程优先级的相关函数 pthread_attr_getscehdparam（获取线程优先级）和 pthread_attr_setschedparam（设置线程优先级）。再设置完成属性后，调用 pthread_creat 函数创建线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_attr_init</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span></span>; <span class="comment">//初始化线程属性</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_attr_destroy</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span></span>; <span class="comment">//销毁线程属性</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_attr_setdetachstate</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> detachstate)</span></span>; <span class="comment">//设置线程分离属性</span></span><br></pre></td></tr></table></figure><p>设置线程分离属性示例（<strong>该代码并未测试</strong>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;head.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">threadFunc</span><span class="params">(<span class="type">void</span>* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i am child thread\n&quot;</span>);</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">pthread_t</span> thid;</span><br><span class="line">    <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="built_in">pthread_attr_init</span>(&amp;attr);</span><br><span class="line">    <span class="comment">//设置线程属性为可分离状态</span></span><br><span class="line">    <span class="built_in">pthread_attr_setdetachstate</span>(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_create</span>(&amp;thid, &amp;attr, threadFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">THREAD_ERROR_CHECK</span>(ret, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i am main thread\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">pthread_join</span>(thid, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">THREAD_ERROR_CHECK</span>(ret, <span class="string">&quot;pthread_join&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h2><p>这部分内容参见 <a href="https://loveofpeach.github.io/posts/db0b4310.html">计算机网络笔记</a> 。</p><p>三次握手、四次挥手的相关知识不再赘述。</p><p><strong>SYN 攻击</strong>：<br>SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 回复确认包，并等待 Client 的确认，由于源地址是不存在的，因此，Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列（内核会为每个这样的连接分配资源的），导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪。SYN 攻击是一种典型的 DDOS 攻击，检测 SYN 攻击的方式非常简单，即当 Server 上有大量半连接状态且源 IP 地址是随机的，则可以断定遭到 SYN 攻击了。</p><p><strong>状态迁移图</strong>：</p><p><img src="https://s2.loli.net/2024/05/20/mqe4c7fAz6Fo1h3.jpg" alt="74-16.jpg"></p><p>在上图中：</p><ul><li>粗实线：主动发起连接与主动关闭连接</li><li>虚线：被动发起连接与被动关闭连接</li><li>细实线：两端同时操作的部分</li></ul><p>一个常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -apn | grep 8888</span><br><span class="line"># 8888 只是一个随便写的数字</span><br></pre></td></tr></table></figure><p>具体作用试一下就知道了。</p><h2 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>IP 地址可以在网络环境中唯一标识一台主机，端口号可以在主机中唯一标识一个进程。所以在网络环境中唯一标识一个进程可以使用 IP 地址与端口号 Port .</p><p><img src="https://s2.loli.net/2024/05/21/XebgTOENcM9WF6w.png" alt="74-17.png"></p><p>TCP/IP 协议规定，<strong>网络数据流应采用大端字节序</strong>。</p><p>大端：低地址存高位，高地址存低位。<br>小端：低地址存低位，高地址存高位（<strong>x86采用小端存储</strong>）。</p><p>网络字节序，就是在网络中进行传输的字节序列，采用的是大端法。主机字节序，就是本地计算机中存储数据采用的字节序列，采用的是小端法。</p><p>网络字节序与本机字节序的转换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="comment">//h = host n = network l = long s = short</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>网络套接字函数 <strong>socket</strong> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line"><span class="comment">//domain：协议族，常用的三个AF_INET/AF_INET6/AF_UNIX,</span></span><br><span class="line"><span class="comment">//type:协议类型，SOCK_STREAM(TCP)/SOCK_DGRAM(UDP)</span></span><br><span class="line"><span class="comment">//protocol:默认情况就传0，代表使用的是tcp或者udp的默认协议</span></span><br><span class="line"><span class="comment">//返回值，如果成功的话，会返回一个文件描述符fd,如果失败的话，那么会返回-1.</span></span><br></pre></td></tr></table></figure><p><strong>bind</strong> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定服务器的ip与端口号</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//addr:传递包含ip与端口号的结构体。（服务器的ip与端口号）</span></span><br><span class="line"><span class="comment">//socklen_t:结构体的大小</span></span><br><span class="line"><span class="comment">//返回值：如果正确的话，会返回0；否则会返回-1.</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，一些结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span>  sa_family;</span><br><span class="line">    <span class="type">char</span>         sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sin_family;  <span class="comment">/* address family: AF_INET */</span></span><br><span class="line">    <span class="type">in_port_t</span> sin_port;      <span class="comment">/* port in network byte order */</span>  <span class="comment">// port</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">/* internet address */</span>            <span class="comment">// ip</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> s_addr; <span class="comment">/* address in network byte order */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">in_addr_t</span>;</span><br></pre></td></tr></table></figure><p><strong>listen</strong> 函数（让服务器处于监听状态）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// listen - listen for connections on a socket</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//backlog：允许同时多少个客户端与服务器建立连接，默认128。</span></span><br><span class="line"><span class="comment">//返回值：如果正确的话，会返回0；否则会返回-1.</span></span><br></pre></td></tr></table></figure><p><strong>connect</strong> 函数，客户端调用该函数，连接到服务器上，主动发起连接：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//addr:该结构中包装的是服务器的ip与服务器的端口号。</span></span><br><span class="line"><span class="comment">//addrlen:结构体的长度。</span></span><br><span class="line"><span class="comment">//返回值：如果正确的话，会返回0；否则会返回-1.</span></span><br></pre></td></tr></table></figure><p><strong>accept</strong> 函数，接收连接请求的函数，阻塞等待客户端发起连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// accept, accept4 - accept a connection on a socket</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="comment">//sockfd:就是上面socket函数的返回值。</span></span><br><span class="line"><span class="comment">//addr:也是地址，但是在此处是将客户端的ip与端口号存放在这个addr中。</span></span><br><span class="line"><span class="comment">//addrlen:是addr对应的结构体的长度。</span></span><br><span class="line"><span class="comment">//返回值：成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1</span></span><br></pre></td></tr></table></figure><p><strong>read/recv</strong> 函数，从对应的文件描述符 fd 中读取数据到 buf 中，读的长度是 count :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recv</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="comment">//如果recv中的flags为0的话，那么read与recv是等价的。</span></span><br></pre></td></tr></table></figure><p><strong>write/send</strong> 函数，将 buf 中的 count 个字节写到 fd 对应的文件描述符中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="comment">//如果send中的flags为0的话，那么send与write是等价的。</span></span><br></pre></td></tr></table></figure><p><strong>close</strong> 函数，关闭文件描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="comment">//在服务器端会关闭两个文件描述符，一个是socket的返回值，一个是accept的返回值。</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>来看例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 服务器</span></span><br><span class="line">    <span class="comment">//1. 需要创建套接字，使用 socket 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listen_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 需要绑定服务器的 ip 和 port，使用 bind</span></span><br><span class="line">    <span class="comment">//   对应会有结构体 sockadd_in</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(seraddr));  <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 本机字节序转换为网络字节序</span></span><br><span class="line">    seraddr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// inet_addr 函数转换网络主机地址为网络字节序二进制值</span></span><br><span class="line">    seraddr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 传 ip</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = bind(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 使用 Listen 使服务器处于监听状态</span></span><br><span class="line">    ret = listen(listen_fd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 服务器调用 accept，阻塞等待客户端的连接</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;clientaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(clientaddr));  <span class="comment">// 初始化</span></span><br><span class="line">    clientaddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">    accept(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> connfd = accept(listen_fd, nullptr, nullptr);</span><br><span class="line">    <span class="keyword">if</span>(connfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 连接成功之后，表明三次握手成功，可以进行</span></span><br><span class="line">    <span class="comment">//   数据的收发，也就是调用read/recv, 或者write/send</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> len = recv(connfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recive failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rec msg from client: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;got some msg for the client: \n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> aa[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, aa);</span><br><span class="line">        <span class="type">int</span> len2 = send(connfd, aa, <span class="built_in">strlen</span>(aa), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len2 == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent succeeded.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 关闭对应的文件描述符</span></span><br><span class="line">    close(listen_fd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 客户端</span></span><br><span class="line">    <span class="comment">//1. 创建套接字，使用 socket 函数</span></span><br><span class="line">    <span class="type">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listen_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 使用 connect 主动发起连接请求，但是需要知道</span></span><br><span class="line">    <span class="comment">//   服务器的 ip 和 port, 使用结构体 sockadd_in</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(seraddr));  <span class="comment">// 初始化</span></span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 本机字节序转换为网络字节序</span></span><br><span class="line">    seraddr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// inet_addr 函数转换网络主机地址为网络字节序二进制值</span></span><br><span class="line">    seraddr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 传 ip</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = connect(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 如果 connect 返回值 ok，就表明三次握手成功,</span></span><br><span class="line">    <span class="comment">//   那么就可以进行数据收发，也就是 read/recv,</span></span><br><span class="line">    <span class="comment">//   或者 write/send 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;got some msg for the server: \n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> aa[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, aa);</span><br><span class="line">        <span class="type">int</span> len2 = send(listen_fd, aa, <span class="built_in">strlen</span>(aa), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len2 == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent succeeded.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> len = recv(listen_fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recive failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rec msg from server: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 关闭文件描述符</span></span><br><span class="line">    close(listen_fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来演示运行过程。</p><p>【terminal 1】启动 server： <code>./server 127.0.0.1 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server is listening...</span><br></pre></td></tr></table></figure><p>【terminal 3】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      42676/./server      </span><br><span class="line">tcp        0      0 192.168.3.10:33508      120.232.240.71:8888     TIME_WAIT   -     </span><br></pre></td></tr></table></figure><p>【terminal 2】启动 client： <code>./client 127.0.0.1 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">got some msg for the server: </span><br></pre></td></tr></table></figure><p>【terminal 3】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:8888          127.0.0.1:49390         ESTABLISHED 42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:49390         127.0.0.1:8888          ESTABLISHED 43363/./client  </span><br></pre></td></tr></table></figure><p>【进行了一段富有建设性的对话后，terminal 2 按下 ctrl+c】</p><p>【terminal 3】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:8888          127.0.0.1:49390         CLOSE_WAIT  42676/./server      </span><br><span class="line">tcp        0      0 127.0.0.1:49390         127.0.0.1:8888          FIN_WAIT2   -    </span><br></pre></td></tr></table></figure><p>【terminal 1 按下 ctrl+c，<strong>以迅雷不及掩耳之势</strong>在 terminal 3 中输入】 <code>netstat -apn |grep 8888</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        0      0 127.0.0.1:53716         127.0.0.1:8888          TIME_WAIT   -       </span><br></pre></td></tr></table></figure><p>过一段时间之后在 terminal 3 中重复该命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br></pre></td></tr></table></figure><p>有些时候图省事，也可以暂时不编写 client 程序：</p><p><img src="https://s2.loli.net/2024/05/22/9GCrY3bfHvRU5sg.png" alt="74-18.png"></p><p>一个有助于理解的视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV12A411X7gY&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h3 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h3><p>继续测试上面的程序，我们发现：<br>在运行过程中，如果我们先 ctrl+c 了 server, 再试图重新运行 server, 会提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind</span><br><span class="line">: Address already in use</span><br></pre></td></tr></table></figure><p>这是因为，server 仍处于 timewait 状态。</p><p>现在，我们试图修改代码，使服务器的 IP 和 Port 可以重复使用。</p><p>为此，需要了解以下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname,</span></span><br><span class="line"><span class="params">               <span class="type">void</span> *optval, <span class="type">socklen_t</span> *optlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname,</span></span><br><span class="line"><span class="params">               <span class="type">const</span> <span class="type">void</span> *optval, <span class="type">socklen_t</span> optlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：成功返回0，错误返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"><span class="type">int</span> opt2 = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEPORT, &amp;opt2, <span class="keyword">sizeof</span>(opt2));</span><br></pre></td></tr></table></figure><p>对 <code>server.cc</code> 作如下修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 服务器</span></span><br><span class="line">    <span class="comment">//1. 需要创建套接字，使用 socket 函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listen_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> retval = setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line">    <span class="keyword">if</span>(retval &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;setsockopt\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt2 = <span class="number">1</span>;</span><br><span class="line">    retval = setsockopt(listen_fd, SOL_SOCKET, SO_REUSEPORT, &amp;opt2, <span class="keyword">sizeof</span>(opt2));</span><br><span class="line">    <span class="keyword">if</span>(retval &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;setsockopt\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 需要绑定服务器的 ip 和 port，使用 bind</span></span><br><span class="line">    <span class="comment">//   对应会有结构体 sockadd_in</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(seraddr));  <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// 本机字节序转换为网络字节序</span></span><br><span class="line">    seraddr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// inet_addr 函数转换网络主机地址为网络字节序二进制值</span></span><br><span class="line">    seraddr.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]); <span class="comment">// 传 ip</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = bind(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 使用 Listen 使服务器处于监听状态</span></span><br><span class="line">    ret = listen(listen_fd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 服务器调用 accept，阻塞等待客户端的连接</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span>  <span class="comment">// 这是 C 的写法</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;clientaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(clientaddr));  <span class="comment">// 初始化</span></span><br><span class="line">    clientaddr.sin_family = AF_INET;</span><br><span class="line">    <span class="type">socklen_t</span> length = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">    accept(listen_fd, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr, &amp;length);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> connfd = accept(listen_fd, nullptr, nullptr);</span><br><span class="line">    <span class="keyword">if</span>(connfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept\n&quot;</span>);</span><br><span class="line">        close(listen_fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 连接成功之后，表明三次握手成功，可以进行</span></span><br><span class="line">    <span class="comment">//   数据的收发，也就是调用read/recv, 或者write/send</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">128</span>] = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> len = recv(connfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recive failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rec msg from client: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;got some msg for the client: \n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> aa[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, aa);</span><br><span class="line">        <span class="type">int</span> len2 = send(connfd, aa, <span class="built_in">strlen</span>(aa), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len2 &lt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent failed.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len2 == 0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sent succeeded.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 关闭对应的文件描述符</span></span><br><span class="line">    close(listen_fd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>client.cc</code> 保持不变。</p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>在上面的代码中，C/S 是一对一的，这不是我们想要的，我们希望一个 S 可以服务多个 C.</p><p><img src="https://s2.loli.net/2024/05/23/oHb2F6jyPpt3n15.png" alt="74-19.png"></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>文件描述符从 0 开始排，如果文件描述符使用后被释放了，那么后面需要重复使用已经释放的文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,</span></span><br><span class="line"><span class="params">           <span class="keyword">struct</span> timeval *timeout)</span>;</span><br><span class="line"><span class="comment">//nfds：最大文件描述符加1</span></span><br><span class="line"><span class="comment">//readfds,writefds,exceptfds:可读，可写，异常。fd_set,位图</span></span><br><span class="line"><span class="comment">//timeout:</span></span><br><span class="line"><span class="comment">//1、nullptr，永远等下去</span></span><br><span class="line"><span class="comment">//2、设置timeval，等待固定时间</span></span><br><span class="line"><span class="comment">//3、设置timeval里时间均为0，检查描述字后立即返回，轮询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回：满足符合条件的文件描述符的个数。包括：可读的文件描述符的个数，可写文件描述符的个数，异常的文件描述符的个数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听文件描述符的时候，往往都只是监听可读的属性。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">long</span> tv_sec;      <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="type">long</span> tv_usec;     <span class="comment">/* microseconds */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">long</span> tv_sec;      <span class="comment">/* seconds */</span></span><br><span class="line">    <span class="type">long</span> tv_nsec;     <span class="comment">/* nanoseconds */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clr = clear</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_CLR</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//将fd从set位图中删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FD_ISSET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;<span class="comment">//判断fd是否在set位图中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_SET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>; <span class="comment">//将fd加入到set位图中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span>;        <span class="comment">//将set位图进行初始化</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/23/yFv9EBxDGRV1T5t.png" alt="74-20.png"></p><p>select 函数的返回结果（例如上图返回 4）：位图中有多少个 1.</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> listenfd, connfd, sockfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> clie_addr_len;</span><br><span class="line">    <span class="type">int</span> ret, maxfd, maxi, i, j, nready, nByte;</span><br><span class="line">    fd_set rset, allset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FD_SETSIZE 定义在 /usr/include/linux/posix_types.h</span></span><br><span class="line">    <span class="comment">// 1024</span></span><br><span class="line">    <span class="comment">// select 最多监听 1024 个（设计缺陷）</span></span><br><span class="line">    <span class="type">int</span> client[FD_SETSIZE];</span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ], str[BUFSIZ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建套接字</span></span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == listenfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 地址复用</span></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 端口复用</span></span><br><span class="line">    <span class="type">int</span> opt2 = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt2, <span class="keyword">sizeof</span>(opt2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 绑定ip与端口号</span></span><br><span class="line">    bzero(&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    <span class="comment">// INADDR_ANY : 本地随机的有效数字类型的 IP</span></span><br><span class="line">    <span class="comment">// 转换过来就是 0.0.0.0 , 泛指本机的所有 IP</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       因为有些电脑不止一块网卡，如果某个应用程序只监听</span></span><br><span class="line"><span class="comment">       某个端口，那么其他端口过来的数据就接受不了。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    ret = bind(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 服务器监听</span></span><br><span class="line">    ret = listen(listenfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6. select 类型 IO 多路复用</span></span><br><span class="line">    maxfd = listenfd; <span class="comment">// select 的第一个参数设置为 listenfd</span></span><br><span class="line">    maxi = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; FD_SETSIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        client[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FD_ZERO(&amp;allset); <span class="comment">// 清空 allset</span></span><br><span class="line">    <span class="comment">// 将 listenfd 放在 allset 中进行监听</span></span><br><span class="line">    FD_SET(listenfd, &amp;allset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rset = allset; <span class="comment">// 将 allset 拷贝给 rset</span></span><br><span class="line">        <span class="comment">//6.1. 使用 select 负责监听，如果返回值大于0，表明有</span></span><br><span class="line">        <span class="comment">//     满足条件的连接被监听到</span></span><br><span class="line">        nready = select(maxfd+<span class="number">1</span>, &amp;rset, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;select error&quot;</span>);</span><br><span class="line">            close(listenfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.2. 如果 listenfd 被置位, 表示有新的请求进来</span></span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(listenfd, &amp;rset))</span><br><span class="line">        &#123;</span><br><span class="line">            clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">            <span class="comment">//7. 有新的连接，那么 accept 肯定有返回值</span></span><br><span class="line">            connfd = accept(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == connfd)</span><br><span class="line">            &#123;</span><br><span class="line">                perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">                close(listenfd);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;receive from %s from port %d\n&quot;</span>,</span><br><span class="line">                   inet_ntop(AF_INET, &amp;clie_addr.sin_addr, str, <span class="keyword">sizeof</span>(str)),</span><br><span class="line">                   ntohs(clie_addr.sin_port));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">               将新的连接加到数组 client 中，</span></span><br><span class="line"><span class="comment">               该数组就是为了存储建立连接的文件描述符</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; FD_SETSIZE; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>(client[i] &lt; <span class="number">0</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     client[i] = connfd;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// i 超过了能监听的最大的文件描述符数量</span></span><br><span class="line">            <span class="keyword">if</span>(i == FD_SETSIZE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">&quot;too many clients.\n&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将建立了三次握手的文件描述符放在 allset 集合中</span></span><br><span class="line"><span class="comment">            进行继续监听，如果该文件描述符后续继续可读，</span></span><br><span class="line"><span class="comment">            表明有数据需要读写</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            FD_SET(connfd, &amp;allset);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(connfd &gt; maxfd)</span><br><span class="line">            &#123;</span><br><span class="line">                maxfd = connfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxi)</span><br><span class="line">            &#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果 nready 等于 1，就继续 while 循环</span></span><br><span class="line"><span class="comment">            而不用走 6.3 出 for 循环，提示效率</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 6.3.</span></span><br><span class="line"><span class="comment">        遍历 client 数组，如果里面的元素为正，就表明该文件</span></span><br><span class="line"><span class="comment">        描述符被监听到，就是老的连接，可以进行数据的收发</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= maxi; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((sockfd = client[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果老的连接上有数据，表明可以进行数据的传输</span></span><br><span class="line">            <span class="comment">// 可以进行 read/write 操作</span></span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(sockfd, &amp;rset)) <span class="comment">// 老的连接</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((nByte = read(sockfd, buf, <span class="keyword">sizeof</span>(buf))) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 表明数据读完了（缓冲区已经没有数据）</span></span><br><span class="line">                    <span class="comment">// 连接即将断开</span></span><br><span class="line">                    close(sockfd);</span><br><span class="line">                    FD_CLR(sockfd, &amp;allset);</span><br><span class="line">                    client[i] = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 正常的操作</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nByte &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; nByte; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        buf[j] = <span class="built_in">toupper</span>(buf[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    write(sockfd, buf, nByte);</span><br><span class="line">                    write(STDOUT_FILENO, buf, nByte);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 若已处理完 connfd 直接退出循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(listenfd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码配合 <code>client.cc</code> 可以运行，观察到一个 S 可以服务于多个 C.</p><p>select 的特点：</p><ul><li>文件描述符上限（1024），同时监听的文件描述符 1024 个，历史原因，不好修改，除非重新编译 Linux 内核。</li><li>当监听的文件描述符个数比较稀疏的时候，循环判断比较麻烦，需要自定义数据结构，例如数组。</li><li>监听集合与满足监听条件的集合是同一个，需要将原有集合保存。</li></ul><p>youtube 视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/PbOqVvuKeBE?si=lFmOWfuxg72YGqNO" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">nfds_t</span> nfds, <span class="type">int</span> timeout)</span>;</span><br><span class="line"><span class="comment">//events/revents:POLLIN/POLLOUT/POLLERR</span></span><br><span class="line"><span class="comment">//timeout 毫秒级等待</span></span><br><span class="line"><span class="comment">//-1:阻塞等，#define INFTIM -1 Linux中没有定义此宏</span></span><br><span class="line"><span class="comment">//0:立即返回，不阻塞进程</span></span><br><span class="line"><span class="comment">//&gt;0:等待指定毫秒数，如当前系统时间精度不够毫秒，向上取值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值：满足监听条件的文件描述符的数目</span></span><br><span class="line"></span><br><span class="line">fds[<span class="number">1024</span>]   fds[<span class="number">0</span>].fd = listendfd;   fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> fd;   <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="type">short</span> events; <span class="comment">/* requested events */</span><span class="comment">//监听的事件类型，读事件，写事件，异常</span></span><br><span class="line">    <span class="type">short</span> revents;<span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码（该代码并未测试）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poll.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPEN_MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, n, maxi;</span><br><span class="line">    <span class="type">int</span> nready, ret;</span><br><span class="line">    <span class="type">int</span> listenfd, connfd, sockfd;</span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ], str[INET_ADDRSTRLEN];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr, clie_addr;</span><br><span class="line">    <span class="type">socklen_t</span> clie_addr_len;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">pollfd</span> client[OPEN_MAX];</span><br><span class="line"></span><br><span class="line">    listenfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == listenfd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="built_in">sizeof</span>(opt));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(SERV_PORT);<span class="comment">//本地字节序port与ip都要转换为网络字节序</span></span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">//因为要在网络上传输</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">bind</span>(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>(listenfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// poll 类型 IO 多路复用</span></span><br><span class="line">    <span class="comment">// 将 listenfd 放在数组中进行监听</span></span><br><span class="line">    client[<span class="number">0</span>].fd = listenfd;</span><br><span class="line">    client[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; OPEN_MAX; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        client[i].fd = <span class="number">-1</span>;<span class="comment">//将数组初始化为-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxi = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nready = <span class="built_in">poll</span>(client, maxi + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;poll error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(client[<span class="number">0</span>].revents &amp; POLLIN)</span><br><span class="line">        &#123;</span><br><span class="line">            clie_addr_len = <span class="built_in">sizeof</span>(clie_addr);</span><br><span class="line">            connfd = <span class="built_in">accept</span>(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;clie_addr, &amp;clie_addr_len);<span class="comment">//立即连接，此时不会阻塞等</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == connfd)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">perror</span>(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;received from %s at port %d\n&quot;</span>,</span><br><span class="line">                    <span class="built_in">inet_ntop</span>(AF_INET, &amp;clie_addr.sin_addr.s_addr, str,<span class="built_in">sizeof</span>(str)),</span><br><span class="line">                    <span class="built_in">ntohs</span>(clie_addr.sin_port));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; OPEN_MAX; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(client[i].fd &lt; <span class="number">0</span>)<span class="comment">//因为初始化为-1,所以在此作为判断条件</span></span><br><span class="line">                &#123;</span><br><span class="line">                    client[i].fd = connfd;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == OPEN_MAX)<span class="comment">//select监听的文件描述符有上限，最大只能监听1024个</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">&quot;too many clients\n&quot;</span>, stderr);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            client[i].events = POLLIN;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxi)</span><br><span class="line">            &#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">                <span class="comment">//因为文件描述符有新增，导致自定义数组有变化，所以需要重新修改maxi的值</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= maxi; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((sockfd = client[i].fd) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>(client[i].revents &amp; POLLIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((n = <span class="built_in">read</span>(sockfd, buf, <span class="built_in">sizeof</span>(buf))) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(errno == ECONNRESET)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;client[%d] abort connect\n&quot;</span>, i);</span><br><span class="line">                        <span class="built_in">close</span>(sockfd);</span><br><span class="line">                        client[i].fd = <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">perror</span>(<span class="string">&quot;read n = 0 error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        buf[j] = <span class="built_in">toupper</span>(buf[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">write</span>(sockfd, buf, n);</span><br><span class="line">                    <span class="built_in">write</span>(STDOUT_FILENO, buf, n);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">close</span>(sockfd);</span><br><span class="line">                    client[i].fd = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(--nready == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(listenfd);</span><br><span class="line">    <span class="built_in">close</span>(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>突破文件描述符1024的上限</li><li>监听与返回的集合分离</li><li>搜索范围变小（已经知道是那几个数组）</li></ol><p>缺点：</p><ul><li>例如：监听1000个文件描述符，但是只有3个满足条件，这样也需要全部遍历，效率依旧低。</li></ul><p>youtube 视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/57HjE5xLo5I?si=3Fbeu5qaphuE4UP-" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll 是 Linux 下 IO 多路复用接口 select/poll 的增强版本，能显著提高程序在<strong>大量并发连接中只有少量活跃</strong>的情况下的系统 CPU 利用率，因为它会复用文件描述符集合来传递结果而不是迫使开发者每次等待事件之前都必须重新准备要侦听的文件描述符集合，另一个原因是获取事件的时候，它<strong>无须遍历整个被侦听的描述符集，只要遍历哪些被内核 IO 事件唤醒而加入 Ready 队列的描述符集合</strong>就行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_create</span><span class="params">(<span class="type">int</span> size)</span>;</span><br><span class="line"><span class="comment">//size:linux内核版本2.6.8之后，size可以忽略，但是要大于0</span></span><br><span class="line"><span class="comment">//返回值：成功返回非负整数，失败返回-1.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_create1</span><span class="params">(<span class="type">int</span> flags)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span>;</span><br><span class="line"><span class="comment">//epfd:是epoll_create函数的返回值，也就是文件描述符</span></span><br><span class="line"><span class="comment">//op:EPOLL_CTL_ADD/EPOLL_CTL_MOD/EPOLL_CTL_DEL</span></span><br><span class="line"><span class="comment">//fd:将哪个文件描述符以op的方式加在以epfd建立的树上</span></span><br><span class="line"><span class="comment">//event:告诉内核需要监听的事情,EPOLLIN/EPOLLOUT/EPOLLERR/...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> events;   <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="type">epoll_data_t</span> data; <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">void</span>     *ptr;  <span class="comment">// 拓展性</span></span><br><span class="line">    <span class="type">int</span>       fd;</span><br><span class="line">    <span class="type">uint32_t</span>  u32;</span><br><span class="line">    <span class="type">uint64_t</span>  u64;</span><br><span class="line">&#125; <span class="type">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>  // 例如我们用 <span class="title">void</span>* <span class="title">ptr</span> 指向这个结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">void</span>* (pFunc)(<span class="type">void</span> *);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event *events, <span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span>;</span><br><span class="line"><span class="comment">//epfd:是epoll_create函数的返回值，也就是文件描述符</span></span><br><span class="line"><span class="comment">//events:满足条件的事件都在该结构体，只需遍历该结构体即可</span></span><br><span class="line"><span class="comment">//maxevents：告知内核这个events有多大.</span></span><br><span class="line"><span class="comment">//timeout 毫秒级等待</span></span><br><span class="line"><span class="comment">//-1:阻塞等，#define INFTIM -1 Linux中没有定义此宏</span></span><br><span class="line"><span class="comment">//0:立即返回，不阻塞进程</span></span><br><span class="line"><span class="comment">//&gt;0:等待指定毫秒数，如当前系统时间精度不够毫秒，向上取值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：成功，将满足条件的文件描述符的个数返回；失败就返回-1.</span></span><br></pre></td></tr></table></figure><p>epoll 中涉及到两个数据结构： epoll_create 创建的红黑树的根节点，将满足条件的事件放在就绪链表，可以直接遍历就绪链表即可。</p><p><img src="https://s2.loli.net/2024/05/24/Wozj7Qm2pLcMaNV.png" alt="74-21.png"></p><p>代码（<strong>下面两份代码没有实际运行验证</strong>）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPEN_MAX 5000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> listenfd, connfd, sockfd, epfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>, <span class="title">clie_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> clie_addr_len;</span><br><span class="line">    <span class="type">int</span> ret, i, j, nready, nByte;</span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ], str[BUFSIZ];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evt</span>, <span class="title">ep</span>[<span class="title">OPEN_MAX</span>];</span></span><br><span class="line"></span><br><span class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == listenfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt = <span class="number">1</span>;</span><br><span class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"></span><br><span class="line">    bzero(&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    ret = bind(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = listen(listenfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server is listening...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建红黑树的根节点（使用数据结构：红黑树+就绪链表）</span></span><br><span class="line">    epfd = epoll_create(OPEN_MAX);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == epfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_create error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    evt.events = EPOLLIN;</span><br><span class="line">    evt.data.fd = listenfd;</span><br><span class="line"></span><br><span class="line">    ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;evt);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 epoll_wait 监听。若返回值大于 0，表明有</span></span><br><span class="line">        <span class="comment">// 满足条件的连接被监听到</span></span><br><span class="line">        nready = epoll_wait(epfd, ep, OPEN_MAX, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;select error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nready; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(ep[i].events &amp; EPOLLIN))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果监听到的是 listenfd, 表明有新的请求进来</span></span><br><span class="line">            <span class="keyword">if</span>(ep[i].data.fd == listenfd)<span class="comment">//如果是连接事件</span></span><br><span class="line">            &#123;</span><br><span class="line">                clie_addr_len = <span class="keyword">sizeof</span>(clie_addr);</span><br><span class="line">                connfd = accept(listenfd, (<span class="keyword">struct</span> sockaddr *)&amp;clie_addr, &amp;clie_addr_len);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == connfd)</span><br><span class="line">                &#123;</span><br><span class="line">                    perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">                    close(listenfd);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;receive from %s from port %d\n&quot;</span>,</span><br><span class="line">                        inet_ntop(AF_INET, &amp;clie_addr.sin_addr, str, <span class="keyword">sizeof</span>(str)),</span><br><span class="line">                        ntohs(clie_addr.sin_port));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 connfd 放在红黑树上继续监听</span></span><br><span class="line">                evt.events = EPOLLIN;</span><br><span class="line">                evt.data.fd = connfd;</span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &amp;evt);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//不是连接建立事件，而是读写事件(信息传递事件)</span></span><br><span class="line">            &#123;</span><br><span class="line">                sockfd = ep[i].data.fd;</span><br><span class="line">                nByte = read(sockfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span>(nByte == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ret = epoll_ctl(epfd, EPOLL_CTL_DEL, sockfd, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">                    &#123;</span><br><span class="line">                        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    close(sockfd);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;client[%d] closed connection\n&quot;</span>, sockfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nByte &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;   <span class="comment">/* 连接异常 */</span></span><br><span class="line">                    perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">                    ret = epoll_ctl(epfd, EPOLL_CTL_DEL, sockfd, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">-1</span> == ret)</span><br><span class="line">                    &#123;</span><br><span class="line">                        perror(<span class="string">&quot;epoll_ctl error&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    close(sockfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123; <span class="comment">/*正常操作*/</span></span><br><span class="line">                    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; nByte; ++j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        buf[j] = <span class="built_in">toupper</span>(buf[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    write(sockfd, buf, nByte);</span><br><span class="line">                    write(STDOUT_FILENO, buf, nByte);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(listenfd);</span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_IP <span class="string">&quot;127.0.0.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buf[BUFSIZ];</span><br><span class="line">    <span class="type">int</span> nByte;</span><br><span class="line"></span><br><span class="line">    cfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == cfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(SERV_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* inet_pton(cfd, SERV_IP, &amp;serv_addr.sin_addr.s_addr); */</span></span><br><span class="line"></span><br><span class="line">    connect(cfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);<span class="comment">//hello world ----&gt;  hello world\n\0</span></span><br><span class="line">        write(cfd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">        nByte = read(cfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        write(STDOUT_FILENO, buf, nByte);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(cfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>文件描述符数目没有上限：通过 epoll_ctl() 来注册一个文件描述符，内核中使用红黑树的数据结构来管理所有需要监控的文件描述符。</li><li>基于事件就绪通知方式：一旦被监听的某个文件描述符就绪，内核会采用类似于 callback 的回调机制，迅速激活这个文件描述符，这样随着文件描述符数量的增加，也不会影响判定就绪的性能。</li><li>维护就绪队列：当文件描述符就绪，就会被放到内核中的一个就绪队列中，这样调用 epoll_weit 获取就绪文件描述符的时候，只要取队列中的元素即可，操作的时间复杂度恒为O(1).</li></ol><p>类型区别</p><ul><li><strong>水平触发(level-trggered)</strong>：只要文件描述符关联的<strong>读内核缓冲区</strong>非空，有数据可以读取，就一直发出可读信号进行通知；当文件描述符关联的<strong>内核写缓冲区</strong>不满，有空间可以写入，就一直发出可写信号进行通知 LT 模式支持阻塞和非阻塞两种方式。epoll 默认的模式是 LT.</li><li><strong>边缘触发(edge-triggered)</strong>：当文件描述符关联的<strong>读内核缓冲区由空转化为非空</strong>的时候，则发出可读信号进行通知；当文件描述符关联的<strong>内核写缓冲区由满转化为不满的时候</strong>，则发出可写信号进行通知。</li></ul><p>水平触发和边缘触发的区别在哪里呢？<br>水平触发是只要读缓冲区有数据，就会一直触发可读信号，而边缘触发仅仅在空变为非空的时候通知一次。LT(level triggered) 是缺省的工作方式，并且同时支持 block 和 no-block socket. 在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的 fd 进行 IO 操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的 select/poll 都是这种模型的代表．</p><p><img src="https://s2.loli.net/2024/05/25/DlMZqHLpVi9oynv.png" alt="74-22.png"></p><p>当设置了边缘触发以后，以可读事件为例，对“有数据到来”这事件为触发。</p><p><img src="https://s2.loli.net/2024/05/25/3DFldcan9kiGo1f.png" alt="74-23.png"></p><p>select/poll/epoll 除了应用于 fd 外，像管道、文件也是可以的。</p><p>youtube 视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/QWE8_MzpR4U?si=xaxiuWN0kUhtNuJJ" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>上面三个视频其实蛮多地方胡言乱语，建议看以下的总结视频，比较清晰。不过请注意，该视频的 epoll 讲解略有瑕疵。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1qJ411w7du&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>如果后来者无法在 B 站看到视频，可以<a href="https://www.youtube.com/watch?v=G8E5vqrzd3A">前往 youtube 观看备份视频</a></p><h2 id="五种网络IO模型"><a href="#五种网络IO模型" class="headerlink" title="五种网络IO模型"></a>五种网络IO模型</h2><h3 id="阻塞式-IO"><a href="#阻塞式-IO" class="headerlink" title="阻塞式 IO"></a>阻塞式 IO</h3><p><img src="https://s2.loli.net/2024/05/28/OjoqkR6c3w4APSH.png" alt="74-24.png"></p><h3 id="非阻塞式-IO"><a href="#非阻塞式-IO" class="headerlink" title="非阻塞式 IO"></a>非阻塞式 IO</h3><p><img src="https://s2.loli.net/2024/05/28/1IyBmCwzcOEGHPY.png" alt="74-25.png"></p><h3 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h3><p><img src="https://s2.loli.net/2024/05/28/pbXiwfAcVtL2IM1.png" alt="74-26.png"></p><h3 id="信号驱动式-IO"><a href="#信号驱动式-IO" class="headerlink" title="信号驱动式 IO"></a>信号驱动式 IO</h3><p><img src="https://s2.loli.net/2024/05/28/1VAegdtzGmkS9EJ.png" alt="74-27.png"></p><p>这里的原理，和操作系统那门课的 IO控制方式 相关知识点（轮询、中断）差不多。</p><h3 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h3><p><img src="https://s2.loli.net/2024/05/28/rwmLoRUEpMCfvl5.png" alt="74-28.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要： &lt;a href=&quot;https://loveofpeach.github.io/posts/555ef888.html&quot;&gt;CppNote3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;容器的选择&quot;&gt;&lt;a href=&quot;#容器的选择&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
    <category term="设计模式" scheme="https://loveofpeach.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="多线程" scheme="https://loveofpeach.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="网络编程" scheme="https://loveofpeach.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>游戏引擎 toybox</title>
    <link href="https://loveofpeach.github.io/posts/3bc8141e.html"/>
    <id>https://loveofpeach.github.io/posts/3bc8141e.html</id>
    <published>2024-04-24T14:33:03.000Z</published>
    <updated>2024-05-02T15:38:32.017Z</updated>
    
    <content type="html"><![CDATA[<p>一个简易的游戏引擎，适合刚学了一点语法的小白。</p><p>项目地址：<a href="https://git.nju.edu.cn/jyy/toybox">https://git.nju.edu.cn/jyy/toybox</a></p><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><p>阅读过程有 AI 协助。</p><h3 id="toybox-h"><a href="#toybox-h" class="headerlink" title="toybox.h"></a>toybox.h</h3><p>下方代码展开约 280+ 行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toybox.h</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  _____         _           </span></span><br><span class="line"><span class="comment"> * |_   _|___ _ _| |_ ___ _ _ </span></span><br><span class="line"><span class="comment"> *   | | | . | | | . | . |_&#x27;_|</span></span><br><span class="line"><span class="comment"> *   |_| |___|_  |___|___|_,_|</span></span><br><span class="line"><span class="comment"> *           |___|            </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * C/C++ 初学者的第一个游戏 &amp; 动画引擎</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * MIT License</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Copyright (c) 2024 by Yanyan Jiang and Zesen Liu</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to deal</span></span><br><span class="line"><span class="comment"> * in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment"> * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment"> * copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment"> * furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment"> * copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="comment"> * SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toybox 只提供一个函数 void toybox_run(fps, update, keypress)</span></span><br><span class="line"><span class="comment"> * toybox_run 接收三个参数，然后进入死循环：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 1. 整数 fps:</span></span><br><span class="line"><span class="comment"> *       每秒刷新的次数 (每秒执行 fps 次 update)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 2. 函数 update:</span></span><br><span class="line"><span class="comment"> *       void updpate(int w, int h, draw_function draw);</span></span><br><span class="line"><span class="comment"> *       每当时间到时，update 会被调用，其中可以调用 draw(x, y, ch);</span></span><br><span class="line"><span class="comment"> *       在坐标 (x, y) 绘制一个字符 ch。坐标系统：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *            (0,0) ---- x ----&gt;</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            |          |</span></span><br><span class="line"><span class="comment"> *            y ------ (x,y) = ch   //  draw(x, y, ch)</span></span><br><span class="line"><span class="comment"> *            |</span></span><br><span class="line"><span class="comment"> *            v</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 3. 函数 keypress:</span></span><br><span class="line"><span class="comment"> *       void keypress(int key);</span></span><br><span class="line"><span class="comment"> *       每当收到按键时，keypress 会被调用，key 是按键的 ASCII 码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -= Toybox API =------------------------------------- */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*draw_function)</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span></span>;</span><br><span class="line"><span class="comment">/* ---------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_W_ 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_H_ 64</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> append_(buf, str) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        strcpy(buf, str); \</span></span><br><span class="line"><span class="meta">        buf += strlen(str); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint64_t</span> start_time_;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> w_, h_;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> canvas_[MAX_W_ * MAX_H_];</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> startTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTickCount</span>() - startTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> _getch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi)) &#123;</span><br><span class="line">        *w = csbi.srWindow.Right - csbi.srWindow.Left;</span><br><span class="line">        *h = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *w = <span class="number">80</span>;</span><br><span class="line">        *h = <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copied from https://github.com/confluentinc/librdkafka</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval * tp, <span class="keyword">struct</span> timezone * tzp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: some broken versions only have 8 trailing zero&#x27;s, the correct epoch has 9 trailing zero&#x27;s</span></span><br><span class="line">    <span class="comment">// This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)</span></span><br><span class="line">    <span class="comment">// until 00:00:00 January 1, 1970</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> EPOCH = ((<span class="type">uint64_t</span>) <span class="number">116444736000000000ULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME  system_time;</span><br><span class="line">    FILETIME    file_time;</span><br><span class="line">    <span class="type">uint64_t</span>    time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTime</span>( &amp;system_time );</span><br><span class="line">    <span class="built_in">SystemTimeToFileTime</span>( &amp;system_time, &amp;file_time );</span><br><span class="line">    time =  ((<span class="type">uint64_t</span>)file_time.dwLowDateTime )      ;</span><br><span class="line">    time += ((<span class="type">uint64_t</span>)file_time.dwHighDateTime) &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    tp-&gt;tv_sec  = (<span class="type">long</span>) ((time - EPOCH) / <span class="number">10000000L</span>);</span><br><span class="line">    tp-&gt;tv_usec = (<span class="type">long</span>) (system_time.wMilliseconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    COORD topLeft  = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE console = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO screen;</span><br><span class="line">    DWORD written;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(console, &amp;screen);</span><br><span class="line">    <span class="built_in">FillConsoleOutputCharacterA</span>(</span><br><span class="line">            console, <span class="string">&#x27; &#x27;</span>, screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">FillConsoleOutputAttribute</span>(</span><br><span class="line">            console, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE,</span><br><span class="line">            screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(console, topLeft);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> timeout;</span><br><span class="line">    fd_set readfds;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">    timeout.tv_sec = <span class="number">0</span>;</span><br><span class="line">    timeout.tv_usec = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FD_ZERO</span>(&amp;readfds);</span><br><span class="line">    <span class="built_in">FD_SET</span>(STDIN_FILENO, &amp;readfds);</span><br><span class="line"></span><br><span class="line">    retval = <span class="built_in">select</span>(STDIN_FILENO + <span class="number">1</span>, &amp;readfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">if</span> (retval) &#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="built_in">read</span>(STDIN_FILENO, &amp;ch, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">termios</span> old_;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">termios_init_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">winsize</span> win;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">termios</span> cur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ioctl</span>(STDOUT_FILENO, TIOCGWINSZ, &amp;win) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not a terminal window.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcgetattr</span>(STDIN_FILENO, &amp;old_);</span><br><span class="line"></span><br><span class="line">    cur = old_;</span><br><span class="line">    cur.c_lflag &amp;= ~(ICANON | ECHO);</span><br><span class="line">    cur.c_cc[VMIN] = <span class="number">0</span>;</span><br><span class="line">    cur.c_cc[VTIME] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((destructor))</span><br><span class="line"><span class="built_in">termios_restore_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;old_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">winsize</span> win;</span><br><span class="line">    <span class="built_in">ioctl</span>(STDOUT_FILENO, TIOCGWINSZ, &amp;win);</span><br><span class="line"></span><br><span class="line">    *w = win.ws_col &lt; MAX_W_ ? win.ws_col : MAX_W_;</span><br><span class="line">    *h = win.ws_row &lt; MAX_H_ ? win.ws_row : MAX_H_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[H&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">timer_ms_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> (tv.tv_sec * <span class="number">1000LL</span>) + (tv.tv_usec / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">init_timer_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    start_time_ = <span class="built_in">timer_ms_</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; w_ &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; h_) &#123;</span><br><span class="line">        canvas_[y * w_ + x] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> last_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, last_size = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> buffer[MAX_W_ * MAX_H_ + MAX_H_ * <span class="number">2</span> + <span class="number">4096</span>], *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> key = <span class="built_in">waitkey_</span>();</span><br><span class="line">        <span class="keyword">if</span> (key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keypress) &#123;</span><br><span class="line">                <span class="built_in">keypress</span>(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">uint64_t</span> t = <span class="built_in">timer_ms_</span>() - start_time_;</span><br><span class="line">            <span class="keyword">if</span> (t - last_time &lt;= <span class="number">1000</span> / fps) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            last_time = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">get_window_size_</span>(&amp;w_, &amp;h_);</span><br><span class="line">        <span class="built_in">memset</span>(canvas_, <span class="string">&#x27; &#x27;</span>, <span class="built_in">sizeof</span>(canvas_));</span><br><span class="line">        <span class="built_in">update</span>(w_, h_, draw_);</span><br><span class="line"></span><br><span class="line">        head = buffer;</span><br><span class="line">        <span class="built_in">clear_screen_</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">            last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">            <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h_; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">append_</span>(head, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strncpy</span>(head, &amp;canvas_[i * w_], w_);</span><br><span class="line">            head += w_;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fwrite</span>(buffer, head - buffer, <span class="number">1</span>, stdout);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的游戏和动画引擎，称为 “toybox”。它提供了一个函数 <code>toybox_run</code>，该函数接受三个参数：</p><ol><li>整数 <code>fps</code>：表示每秒刷新的次数，也就是每秒调用 <code>update</code> 函数的次数。</li><li>函数指针 <code>update</code>：一个函数，定义为 <code>void update(int w, int h, draw_function draw)</code>，表示每次刷新时被调用的更新函数。它可以接受当前窗口的宽度和高度，并使用 <code>draw</code> 函数在屏幕上绘制图形。</li><li>函数指针 <code>keypress</code>：一个函数，定义为 <code>void keypress(int key)</code>，表示当按下键盘按键时被调用的函数。</li></ol><p>在主循环中，程序会不断等待键盘输入或者根据设定的帧率调用 <code>update</code> 函数进行屏幕更新，然后根据更新后的画面重新绘制屏幕内容。</p><p>接下来我们从头到尾看一看里面的细节。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> append_(buf, str) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        strcpy(buf, str); \</span></span><br><span class="line"><span class="meta">        buf += strlen(str); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br></pre></td></tr></table></figure><p>这段代码定义了一个宏 <code>append_</code>，用于将字符串追加到指定的缓冲区中。</p><ol><li><code>#define append_(buf, str)</code>：这是宏的定义，<code>append_</code> 是宏的名称，<code>(buf, str)</code> 是宏的参数列表，这里有两个参数，<code>buf</code> 表示目标缓冲区，<code>str</code> 表示要追加的字符串。</li><li><code>do &#123; ... &#125; while (0)：</code> 这是一个 do-while 循环，它的主体是一系列语句，其中包括了复制字符串和移动指针的操作。<code>do &#123; ... &#125;</code> 表示循环体，<code>while (0)</code> 则是一个条件，由于条件为 0，因此循环只会执行一次。</li><li><code>strcpy(buf, str)</code>：这一行使用 <code>strcpy</code> 函数将字符串 <code>str</code> 复制到缓冲区 <code>buf</code> 中。</li><li><code>buf += strlen(str)</code>：这一行将指针 <code>buf</code> 向后移动，移动的距离是字符串 <code>str</code> 的长度，这样可以保证下一次追加的字符串会接在当前字符串的末尾。</li></ol><p>这个宏的作用是将字符串追加到缓冲区中，类似于字符串拼接操作。在每次调用 <code>append_</code> 宏时，它会将指定的字符串添加到目标缓冲区的末尾，并更新指针以指向新的末尾位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> canvas_[MAX_W_ * MAX_H_];</span><br></pre></td></tr></table></figure><p><code>canvas_</code> 数组是用来表示绘图区域的缓冲区。在这个简单的游戏和动画引擎中，屏幕上的图像是通过在这个缓冲区中绘制字符来实现的。每个字符对应着屏幕上的一个像素或一个小图形。</p><p>在每次调用 <code>update</code> 函数时，会根据游戏逻辑更新 <code>canvas_</code> 数组中的内容，然后将更新后的内容绘制到屏幕上。因此，<code>canvas_</code> 数组存储了当前屏幕上的图像信息，通过更新这个数组，可以实现屏幕内容的动态变化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>虽然在这段代码中，函数的声明和定义紧密相邻，看起来似乎有些多余，但这是一个良好的编程实践，可以帮助<strong>提高代码的可维护性和可读性</strong>。让读者快速了解函数的接口，包括返回类型和参数列表，而不必深入到函数的定义中去查找这些信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br></pre></td></tr></table></figure><p>在这段代码中，它的作用是根据当前编译环境是否是 Windows 平台来进行条件编译。</p><p>这个技术常用于实现跨平台的编译，在不同的平台上使用不同的代码逻辑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>该头文件主要用于 Windows 平台下的一些系统调用和操作。</p><p>在这个代码中，<code>&lt;windows.h&gt;</code> 被用来进行以下操作：</p><ol><li><strong>获取系统时间和延时操作</strong>：通过 <code>GetTickCount()</code> 函数可以获取系统启动后经过的毫秒数，用于实现定时器功能。另外，该头文件还定义了与时间相关的数据类型和函数，例如 <code>SYSTEMTIME</code> 结构体和 <code>GetSystemTime()</code> 函数。</li><li><strong>控制台操作</strong>：例如 <code>GetConsoleScreenBufferInfo()</code> 函数用于获取控制台屏幕缓冲区信息，<code>SetConsoleCursorPosition()</code> 函数用于设置控制台光标位置，以及一些用于控制控制台文本属性和颜色的宏定义。</li><li><strong>键盘输入操作</strong>：<code>&lt;conio.h&gt;</code> 头文件通常与 <code>&lt;windows.h&gt;</code> 一起使用，用于实现控制台下的键盘输入操作。在这个代码中，<code>&lt;conio.h&gt;</code> 用于定义 <code>_kbhit()</code> 和 <code>_getch()</code> 函数，用于检测是否有键盘输入和获取键盘输入字符。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">waitkey_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> startTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTickCount</span>() - startTime &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit()) &#123;</span><br><span class="line">            <span class="keyword">return</span> _getch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 10 毫秒内轮询检查是否有键盘输入，若有则返回该输入，否则返回 -1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_window_size_</span><span class="params">(<span class="type">int</span> *w, <span class="type">int</span> *h)</span> </span>&#123;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetConsoleScreenBufferInfo</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), &amp;csbi)) &#123;</span><br><span class="line">        *w = csbi.srWindow.Right - csbi.srWindow.Left;</span><br><span class="line">        *h = csbi.srWindow.Bottom - csbi.srWindow.Top + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *w = <span class="number">80</span>;</span><br><span class="line">        *h = <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数首先声明了一个 <code>CONSOLE_SCREEN_BUFFER_INFO</code> 结构体变量 <code>csbi</code>，用于存储获取到的控制台屏幕缓冲区信息。然后调用 <code>GetConsoleScreenBufferInfo</code> 函数，将获取到的信息存储在 <code>csbi</code> 变量中。</p><p>接着，函数通过计算 <code>csbi</code> 中的 <code>srWindow</code> 结构体中的 <code>Right</code>、<code>Left</code>、<code>Bottom</code> 和 <code>Top</code> 字段来计算控制台窗口的宽度和高度。具体地，控制台窗口的宽度等于 <code>Right - Left</code>，高度等于 <code>Bottom - Top + 1</code>。然后将计算得到的宽度和高度分别存储在传入的指针参数 <code>w</code> 和 <code>h</code> 所指向的位置。</p><p>如果调用 <code>GetConsoleScreenBufferInfo</code> 函数失败（可能是因为当前程序并非在控制台中运行），则函数将宽度和高度分别设为默认值 80 和 25。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copied from https://github.com/confluentinc/librdkafka</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gettimeofday</span><span class="params">(<span class="keyword">struct</span> timeval * tp, <span class="keyword">struct</span> timezone * tzp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: some broken versions only have 8 trailing zero&#x27;s, the correct epoch has 9 trailing zero&#x27;s</span></span><br><span class="line">    <span class="comment">// This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)</span></span><br><span class="line">    <span class="comment">// until 00:00:00 January 1, 1970</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> EPOCH = ((<span class="type">uint64_t</span>) <span class="number">116444736000000000ULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME  system_time;</span><br><span class="line">    FILETIME    file_time;</span><br><span class="line">    <span class="type">uint64_t</span>    time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTime</span>( &amp;system_time );</span><br><span class="line">    <span class="built_in">SystemTimeToFileTime</span>( &amp;system_time, &amp;file_time );</span><br><span class="line">    time =  ((<span class="type">uint64_t</span>)file_time.dwLowDateTime )      ;</span><br><span class="line">    time += ((<span class="type">uint64_t</span>)file_time.dwHighDateTime) &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    tp-&gt;tv_sec  = (<span class="type">long</span>) ((time - EPOCH) / <span class="number">10000000L</span>);</span><br><span class="line">    tp-&gt;tv_usec = (<span class="type">long</span>) (system_time.wMilliseconds * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看个大概就行。</p><p>这个函数名为 <code>gettimeofday</code>，<strong>它的功能是获取当前系统时间，并将其以秒和微秒的形式存储在 <code>struct timeval</code> 结构体指针 <code>tp</code> 中。</strong> 这个函数类似于 Unix/Linux 系统中的 <code>gettimeofday</code> 函数，但是实现方式有所不同。</p><p>具体来说，这个函数的步骤如下：</p><ol><li>定义一个静态常量 <code>EPOCH</code>，用于表示从 1601 年 1 月 1 日 UTC 时间零点开始到 1970 年 1 月 1 日 UTC 时间零点之间的时间间隔，以 100 毫微秒（100纳秒）为单位。</li><li>调用 Windows 平台特有的 <code>GetSystemTime</code> 函数，获取当前系统时间，并将结果存储在 <code>SYSTEMTIME</code> 结构体变量 <code>system_time</code> 中。</li><li>调用 Windows 平台特有的 <code>SystemTimeToFileTime</code> 函数，将 <code>system_time</code> 转换为 <code>FILETIME</code> 结构体变量 <code>file_time</code>，表示自 1601 年 1 月 1 日以来的时间。</li><li>将 <code>file_time</code> 中的时间转换为以 100 毫微秒为单位的整数，存储在 <code>time</code> 变量中。</li><li>根据 <code>time</code> 变量和 <code>EPOCH</code> 值的差值，计算出秒数并存储在 <code>tv_sec</code> 成员中，计算出微秒数并存储在 <code>tv_usec</code> 成员中。</li><li>返回 0，表示函数执行成功。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">clear_screen_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    COORD topLeft  = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    HANDLE console = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO screen;</span><br><span class="line">    DWORD written;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetConsoleScreenBufferInfo</span>(console, &amp;screen);</span><br><span class="line">    <span class="built_in">FillConsoleOutputCharacterA</span>(</span><br><span class="line">            console, <span class="string">&#x27; &#x27;</span>, screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">FillConsoleOutputAttribute</span>(</span><br><span class="line">            console, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE,</span><br><span class="line">            screen.dwSize.X * screen.dwSize.Y, topLeft, &amp;written</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(console, topLeft);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是清空控制台屏幕上的所有内容，并将光标移动到左上角位置。具体来说：</p><ol><li>创建一个 <code>COORD</code> 结构体变量 <code>topLeft</code>，表示控制台屏幕的左上角位置。</li><li>获取标准输出控制台的句柄，并将其存储在 <code>HANDLE</code> 类型的变量 <code>console</code> 中，使用 <code>GetStdHandle(STD_OUTPUT_HANDLE)</code> 函数实现。</li><li>声明一个 <code>CONSOLE_SCREEN_BUFFER_INFO</code> 结构体变量 <code>screen</code>，用于存储控制台屏幕缓冲区的信息。</li><li>调用 <code>GetConsoleScreenBufferInfo</code> 函数，获取控制台屏幕缓冲区的信息，并将结果存储在 <code>screen</code> 变量中。</li><li>调用 <code>FillConsoleOutputCharacterA</code> 函数，将控制台屏幕上所有位置的字符都填充为空格字符，使用空格字符 <code>&#39; &#39;</code>。</li><li>调用 <code>FillConsoleOutputAttribute</code> 函数，将控制台屏幕上所有位置的文本属性都填充为前景色为白色（红、绿、蓝三种颜色混合）。</li><li>最后，使用 <code>SetConsoleCursorPosition</code> 函数将控制台光标移动到左上角位置，以确保下次输出从屏幕的左上角开始。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">timer_ms_</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> (tv.tv_sec * <span class="number">1000LL</span>) + (tv.tv_usec / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是获取当前系统时间，并以毫秒为单位返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((constructor))</span><br><span class="line"><span class="built_in">init_timer_</span>(<span class="type">void</span>) &#123;</span><br><span class="line">    start_time_ = <span class="built_in">timer_ms_</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数使用 <code>__attribute__((constructor))</code> 属性，表示它会在程序运行时自动执行，并在其他代码之前被调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">toybox_run</span><span class="params">(<span class="type">int</span> fps,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*update)(<span class="type">int</span>, <span class="type">int</span>, draw_function draw),</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> (*keypress)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> last_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, last_size = <span class="number">-1</span>; <span class="comment">// 上一次窗口大小</span></span><br><span class="line">    <span class="type">char</span> buffer[MAX_W_ * MAX_H_ + MAX_H_ * <span class="number">2</span> + <span class="number">4096</span>], *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> key = <span class="built_in">waitkey_</span>();</span><br><span class="line">        <span class="keyword">if</span> (key &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keypress) &#123; <span class="comment">// 检查函数指针是否有效</span></span><br><span class="line">                <span class="built_in">keypress</span>(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// “懒绘制”</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">uint64_t</span> t = <span class="built_in">timer_ms_</span>() - start_time_;</span><br><span class="line">            <span class="keyword">if</span> (t - last_time &lt;= <span class="number">1000</span> / fps) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;  <span class="comment">// 继续等待</span></span><br><span class="line">            &#125;</span><br><span class="line">            last_time = t; <span class="comment">// 吉时已到，刷新</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新游戏状态</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">get_window_size_</span>(&amp;w_, &amp;h_); <span class="comment">// 更新窗口大小</span></span><br><span class="line">        <span class="built_in">memset</span>(canvas_, <span class="string">&#x27; &#x27;</span>, <span class="built_in">sizeof</span>(canvas_));</span><br><span class="line">        <span class="built_in">update</span>(w_, h_, draw_); <span class="comment">// 绘制画面到 canvas 数组</span></span><br><span class="line"></span><br><span class="line">        head = buffer;</span><br><span class="line">        <span class="built_in">clear_screen_</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">            last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">            <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h_; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">append_</span>(head, <span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strncpy</span>(head, &amp;canvas_[i * w_], w_);  <span class="comment">// 拷贝一行</span></span><br><span class="line">            head += w_; <span class="comment">// 移动指针到下一行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fwrite</span>(buffer, head - buffer, <span class="number">1</span>, stdout); <span class="comment">// 数据写入标准输出流</span></span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对于代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((w_ &lt;&lt; <span class="number">16</span>) + h_ != last_size) &#123;</span><br><span class="line">    last_size = (w_ &lt;&lt; <span class="number">16</span>) + h_;</span><br><span class="line">    <span class="built_in">append_</span>(head, <span class="string">&quot;\033[2J&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是在每次循环中检查当前窗口大小是否发生了变化，如果发生了变化，则清空屏幕，并将新的窗口大小记录下来，以便下次比较。</p><ol><li><code>(w_ &lt;&lt; 16) + h_</code>：这一部分将当前窗口的宽度 <code>w_</code> 左移 16 位（相当于乘以 65536），然后加上窗口的高度 <code>h_</code>。这个操作可以<strong>将窗口的宽度和高度合并成一个整数，用于唯一标识窗口的大小。</strong></li><li><code>append_(head, &quot;\033[2J&quot;);</code>：将清空屏幕的控制字符序列 <code>&quot;\033[2J&quot;</code> 追加到 <code>head</code> 中。</li></ol><h3 id="hello-cpp"><a href="#hello-cpp" class="headerlink" title="hello.cpp"></a>hello.cpp</h3><p>该代码在整个小黑框内打印字符，按下按键后，小黑框内打印输入的字符。</p><p>效果：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/8YJ9EtlM9T8?si=deaCg1WrF9h5lrOq" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="string">&#x27;?&#x27;</span>, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++)</span><br><span class="line">            <span class="built_in">draw</span>(x, y, k);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;-\\|/&quot;</span>[(t++) / <span class="number">5</span> % <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> ch)</span> </span>&#123;</span><br><span class="line">    k = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">30</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，update() 和 keypress() 都是需要自己实现的。</p><p>值得一瞧的是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">draw</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;-\\|/&quot;</span>[(t++) / <span class="number">5</span> % <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>这玩意实现了一个小动画。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>请参考 toybox.h 头部的注释和 hello.cpp 的例子。</p><p>C/C++ 都可以从以下模板开始，只需实现 “TODO” 中更新屏幕和响应按键逻辑 (可以不提供响应按键的 keypress) 即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toybox_run(fps, update, keypress)</span></span><br><span class="line"><span class="comment">// - 进入游戏/动画主循环</span></span><br><span class="line"><span class="comment">// - 每秒 fps 次调用 update(w, h, draw)</span></span><br><span class="line"><span class="comment">// - 当任何时候有按键时，调用 keypress(key)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前屏幕大小为 w x h (此时屏幕为空)</span></span><br><span class="line">    <span class="comment">// 可以使用 draw(x, y, ch) 可以在第 x 列第 y 行绘制字符 h</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得一个按键，例如 W, A, S, D</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">20</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;toybox.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">1</span>, [](<span class="type">int</span> w, <span class="type">int</span> h, <span class="keyword">auto</span> draw) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(x, y, <span class="string">&#x27;0&#x27;</span> + t % <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// snake.cpp</span></span><br><span class="line"><span class="comment">// Author: GPT-4-turbo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义蛇的方向</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; UP, DOWN, LEFT, RIGHT &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的初始方向</span></span><br><span class="line">Direction dir = RIGHT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇的身体，用一系列的 x,y 坐标表示</span></span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; snake = &#123;&#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">5</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 食物的位置</span></span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; food = &#123;<span class="number">7</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏是否结束</span></span><br><span class="line"><span class="type">bool</span> gameOver = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成食物</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateFood</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    food.first = <span class="built_in">rand</span>() % w;</span><br><span class="line">    food.second = <span class="built_in">rand</span>() % h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染游戏</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, <span class="type">void</span>(*draw)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">char</span>))</span> </span>&#123;</span><br><span class="line">    <span class="built_in">update</span>();</span><br><span class="line">    <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清屏</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            <span class="built_in">draw</span>(x, y, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制蛇</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;part : snake) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(part.first, part.second, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制食物</span></span><br><span class="line">    <span class="built_in">draw</span>(food.first, food.second, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理按键</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: dir = UP; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: dir = DOWN; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: dir = LEFT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: dir = RIGHT; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新游戏状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gameOver) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算蛇头的新位置</span></span><br><span class="line">    std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; head = snake.<span class="built_in">front</span>();</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> UP:    head.second--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOWN:  head.second++; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT:  head.first--; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT: head.first++; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查蛇是否撞墙或撞到自己</span></span><br><span class="line">    <span class="keyword">if</span> (head.first &lt; <span class="number">0</span> || head.second &lt; <span class="number">0</span> || head.first &gt;= <span class="number">80</span> || head.second &gt;= <span class="number">25</span> || std::<span class="built_in">find</span>(snake.<span class="built_in">begin</span>(), snake.<span class="built_in">end</span>(), head) != snake.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        gameOver = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新头部添加到蛇的身体中</span></span><br><span class="line">    snake.<span class="built_in">insert</span>(snake.<span class="built_in">begin</span>(), head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否吃到食物</span></span><br><span class="line">    <span class="keyword">if</span> (head == food) &#123;</span><br><span class="line">        <span class="built_in">generateFood</span>(<span class="number">80</span>, <span class="number">25</span>); <span class="comment">// 假设屏幕大小为 80x25</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 移除蛇</span></span><br><span class="line">        snake.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">10</span>, render, keypress); <span class="comment">// 假设 toybox_run 函数接受一个更新游戏状态的函数作为参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tetris"><a href="#tetris" class="headerlink" title="tetris"></a>tetris</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tetris.cpp</span></span><br><span class="line"><span class="comment">// Author: Claude-3-Opus</span></span><br><span class="line"><span class="comment">// With a few small bug fixes.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BOARD_WIDTH = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BOARD_HEIGHT = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BLOCK_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> board[BOARD_HEIGHT][BOARD_WIDTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> block[BLOCK_SIZE][BLOCK_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> blockX, blockY;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    blockX = BOARD_WIDTH / <span class="number">2</span> - BLOCK_SIZE / <span class="number">2</span>;</span><br><span class="line">    blockY = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Claude-3 made a mistake here: it forgot to clear the block.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++)</span><br><span class="line">            block[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> blockType = <span class="built_in">rand</span>() % <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">switch</span> (blockType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// I</span></span><br><span class="line">            block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">2</span>] = block[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// J</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">2</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// L</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">0</span>] = block[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// O</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// S</span></span><br><span class="line">            block[<span class="number">1</span>][<span class="number">0</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">// T</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">0</span>][<span class="number">2</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// Z</span></span><br><span class="line">            block[<span class="number">0</span>][<span class="number">0</span>] = block[<span class="number">0</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">1</span>] = block[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> block[BLOCK_SIZE][BLOCK_SIZE])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                <span class="type">int</span> newX = x + j;</span><br><span class="line">                <span class="type">int</span> newY = y + i;</span><br><span class="line">                <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= BOARD_WIDTH || newY &lt; <span class="number">0</span> || newY &gt;= BOARD_HEIGHT || board[newY][newX]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp[BLOCK_SIZE][BLOCK_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            temp[i][j] = block[BLOCK_SIZE - <span class="number">1</span> - j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Claude-3 made a mistake here (now fixed):</span></span><br><span class="line">    <span class="comment">// it wrote isValid(int x, int y) that tests the validity for the</span></span><br><span class="line">    <span class="comment">// global block. temp is created but is never tested.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX, blockY, temp)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">                block[i][j] = temp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                board[blockY + i][blockX + j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = BOARD_HEIGHT - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">bool</span> isFull = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!board[i][j]) &#123;</span><br><span class="line">                isFull = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isFull) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">                    board[k][j] = board[k - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBoard</span><span class="params">(draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BOARD_HEIGHT; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BOARD_WIDTH; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j]) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(j, i, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">draw</span>(j, i, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; BLOCK_SIZE; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (block[i][j]) &#123;</span><br><span class="line">                <span class="built_in">draw</span>(blockX + j, blockY + i, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isValid</span>(blockX, blockY + <span class="number">1</span>, block)) &#123;</span><br><span class="line">        <span class="built_in">mergeBlock</span>();</span><br><span class="line">        <span class="built_in">clearLines</span>();</span><br><span class="line">        <span class="built_in">generateBlock</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isValid</span>(blockX, blockY, block)) &#123;</span><br><span class="line">            <span class="comment">// Game Over</span></span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">4</span>, <span class="number">10</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="string">&#x27;M&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">6</span>, <span class="number">10</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">8</span>, <span class="number">10</span>, <span class="string">&#x27;O&#x27;</span>); </span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">9</span>, <span class="number">10</span>, <span class="string">&#x27;V&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">draw</span>(<span class="number">11</span>, <span class="number">10</span>, <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        blockY++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">drawBoard</span>(draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX - <span class="number">1</span>, blockY, block)) &#123;</span><br><span class="line">                blockX--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX + <span class="number">1</span>, blockY, block)) &#123;</span><br><span class="line">                blockX++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="built_in">rotateBlock</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(blockX, blockY + <span class="number">1</span>, block)) &#123;</span><br><span class="line">                blockY++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">generateBlock</span>();</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">3</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rasterize"><a href="#rasterize" class="headerlink" title="rasterize"></a>rasterize</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rasterize.cpp</span></span><br><span class="line"><span class="comment">// Author: GPT-4-turbo</span></span><br><span class="line"><span class="comment">// 有轻微手工修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> <span class="comment">// For std::abs and std::round</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">p0</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span>, <span class="title">p1</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span>, <span class="title">p2</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawLine</span><span class="params">(Point p0, Point p1, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dx = std::<span class="built_in">abs</span>(p1.x - p0.x), sx = p0.x &lt; p1.x ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> dy = -std::<span class="built_in">abs</span>(p1.y - p0.y), sy = p0.y &lt; p1.y ? <span class="number">1</span> : <span class="number">-1</span>; </span><br><span class="line">    <span class="type">int</span> err = dx + dy, e2; <span class="comment">/* error value e_xy */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(p0.x, p0.y, <span class="string">&#x27;*&#x27;</span>); <span class="comment">// 使用 &#x27;*&#x27; 绘制线段</span></span><br><span class="line">        <span class="keyword">if</span> (p0.x == p1.x &amp;&amp; p0.y == p1.y) <span class="keyword">break</span>;</span><br><span class="line">        e2 = <span class="number">2</span> * err;</span><br><span class="line">        <span class="keyword">if</span> (e2 &gt;= dy) &#123; err += dy; p0.x += sx; &#125;</span><br><span class="line">        <span class="keyword">if</span> (e2 &lt;= dx) &#123; err += dx; p0.y += sy; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">drawLine</span>(p0, p1, draw);</span><br><span class="line">    <span class="built_in">drawLine</span>(p1, p2, draw);</span><br><span class="line">    <span class="built_in">drawLine</span>(p0, p2, draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: p0.y -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: p0.y += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: p0.x -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: p0.x += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>: p1.y -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>: p1.y += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: p1.x -= <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: p1.x += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(<span class="number">20</span>, update, keypress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/7Hk3bW0yT2s?si=HwTj1YCSI2RR3Ae5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><h2 id="飞机大战"><a href="#飞机大战" class="headerlink" title="飞机大战"></a>飞机大战</h2><p>自己写了一个，整体思路不是很难。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../toybox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; STILL, UP, DOWN, LEFT, RIGHT &#125;;</span><br><span class="line">Direction dir = STILL;</span><br><span class="line"><span class="type">bool</span> fruit_mode, K_mode, flag = <span class="literal">true</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MYFPS = <span class="number">26</span>;</span><br><span class="line"><span class="type">int</span> score, enemy_num, fpscnt, FPSCNT = <span class="number">2</span>*MYFPS;</span><br><span class="line">std::random_device seed;  <span class="comment">// 硬件生成随机数种子</span></span><br><span class="line"><span class="function">std::ranlux48 <span class="title">engine</span><span class="params">(seed())</span></span>; <span class="comment">// 利用种子生成随机数引擎</span></span><br><span class="line"></span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; Kmode_bullet;</span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; Kmode_bullet2; <span class="comment">// 分裂弹</span></span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; normal_bullet;</span><br><span class="line">std::set&lt;std::pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; targets; <span class="comment">// 敌人坐标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keypress</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: dir = UP; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: dir = DOWN; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: dir = LEFT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: dir = RIGHT; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>: &#123;</span><br><span class="line">            fruit_mode = <span class="literal">false</span>;</span><br><span class="line">            K_mode = !K_mode;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: &#123;</span><br><span class="line">            K_mode = <span class="literal">false</span>;</span><br><span class="line">            fruit_mode = !fruit_mode;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fly_x, fly_y;</span><br><span class="line"><span class="comment">// --x--------</span></span><br><span class="line"><span class="comment">// |     /\</span></span><br><span class="line"><span class="comment">// y    /  \</span></span><br><span class="line"><span class="comment">// |    ----</span></span><br><span class="line"><span class="comment">// |</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawBody</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">        <span class="keyword">case</span> STILL: <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UP:</span><br><span class="line">            <span class="keyword">if</span>(fly_y<span class="number">-3</span> &gt;= <span class="number">0</span>) fly_y--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOWN:</span><br><span class="line">            <span class="keyword">if</span>(fly_y+<span class="number">1</span> &lt; h) fly_y++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT:</span><br><span class="line">            <span class="keyword">if</span>(fly_x<span class="number">-1</span> &gt;= <span class="number">0</span>) fly_x--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT:</span><br><span class="line">            <span class="keyword">if</span>(fly_x+<span class="number">4</span> &lt; w) fly_x++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dir = STILL;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">1</span>, fly_y<span class="number">-2</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">2</span>, fly_y<span class="number">-2</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x, fly_y<span class="number">-1</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(fly_x+<span class="number">3</span>, fly_y<span class="number">-1</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        <span class="built_in">draw</span>(fly_x+i, fly_y, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_rand_num</span><span class="params">(<span class="type">int</span> minr, <span class="type">int</span> maxr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::uniform_int_distribution&lt;&gt; <span class="built_in">distrib</span>(minr, maxr);</span><br><span class="line">    <span class="type">int</span> my_random = <span class="built_in">distrib</span>(engine); <span class="comment">// 随机数</span></span><br><span class="line">    <span class="keyword">return</span> my_random;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updBullet</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != normal_bullet.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it-&gt;first, ny = it-&gt;second<span class="number">-2</span>;</span><br><span class="line">        it = normal_bullet.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">if</span>(ny &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it2 = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it2 != Kmode_bullet.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it2-&gt;first, ny = it2-&gt;second<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ny &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nx+<span class="number">1</span> &lt;= w)</span><br><span class="line">                Kmode_bullet2.<span class="built_in">insert</span>(&#123;nx+<span class="number">1</span>, ny&#125;);</span><br><span class="line">            <span class="keyword">if</span>(nx<span class="number">-1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                Kmode_bullet2.<span class="built_in">insert</span>(&#123;nx<span class="number">-1</span>, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        it2 = Kmode_bullet.<span class="built_in">erase</span>(it2);</span><br><span class="line">        <span class="keyword">if</span>(ny &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!K_mode) &#123;</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">1</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">2</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(fruit_mode) &#123;</span><br><span class="line">            normal_bullet.<span class="built_in">insert</span>(&#123;fly_x, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">            normal_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">3</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">1</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">        Kmode_bullet.<span class="built_in">insert</span>(&#123;fly_x+<span class="number">2</span>, fly_y<span class="number">-3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Kmode_bullet.<span class="built_in">insert</span>(Kmode_bullet2.<span class="built_in">begin</span>(), Kmode_bullet2.<span class="built_in">end</span>());</span><br><span class="line">    Kmode_bullet2.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">collision_detection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// normal_bullet 不会与 Kmode_bullet 碰撞</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = targets.<span class="built_in">begin</span>(); it != targets.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">bool</span> hit = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">auto</span> b = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; b != normal_bullet.<span class="built_in">end</span>(); ++b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it == *b) &#123;</span><br><span class="line">                hit = <span class="literal">true</span>;</span><br><span class="line">                normal_bullet.<span class="built_in">erase</span>(b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> kb = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; kb != Kmode_bullet.<span class="built_in">end</span>(); ++kb) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it == *kb) &#123;</span><br><span class="line">                hit = <span class="literal">true</span>;</span><br><span class="line">                Kmode_bullet.<span class="built_in">erase</span>(kb);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hit) &#123;</span><br><span class="line">            it = targets.<span class="built_in">erase</span>(it);</span><br><span class="line">            ++score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ++it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updEnemy</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = targets.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != targets.<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> nx = it-&gt;first, ny = it-&gt;second+<span class="number">1</span>;</span><br><span class="line">        it = targets.<span class="built_in">erase</span>(it);</span><br><span class="line">        <span class="keyword">if</span>(ny &gt;= h) <span class="keyword">continue</span>;</span><br><span class="line">        targets.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">collision_detection</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fpscnt &gt; FPSCNT) &#123;</span><br><span class="line">        fpscnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> target_num = <span class="built_in">get_rand_num</span>(<span class="number">1</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(w/<span class="number">4.0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=target_num; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> nx = <span class="built_in">get_rand_num</span>(<span class="number">1</span>, w);</span><br><span class="line">            <span class="type">int</span> ny = <span class="built_in">get_rand_num</span>(<span class="number">-8</span>, <span class="number">1</span>); <span class="comment">// 扰动</span></span><br><span class="line">            targets.<span class="built_in">insert</span>(&#123;nx, ny&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        FPSCNT = <span class="built_in">get_rand_num</span>(<span class="number">1</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(MYFPS/<span class="number">1.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawPic</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = normal_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it != normal_bullet.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it-&gt;first, it-&gt;second, <span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> it2 = Kmode_bullet.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it2 != Kmode_bullet.<span class="built_in">end</span>(); it2++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it2-&gt;first, it2-&gt;second, <span class="string">&#x27;~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it3 = targets.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(; it3 != targets.<span class="built_in">end</span>(); it3++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(it3-&gt;first, it3-&gt;second, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawScore</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">1</span>, h<span class="number">-1</span>, <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">2</span>, h<span class="number">-1</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">3</span>, h<span class="number">-1</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">4</span>, h<span class="number">-1</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">5</span>, h<span class="number">-1</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">6</span>, h<span class="number">-1</span>, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="built_in">draw</span>(<span class="number">7</span>, h<span class="number">-1</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    std::string score_as_string = std::<span class="built_in">to_string</span>(score);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;score_as_string.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">draw</span>(<span class="number">8</span>+i, h<span class="number">-1</span>, score_as_string[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, draw_function draw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        fly_x = w/<span class="number">2</span>, fly_y = h<span class="number">-1</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            <span class="built_in">draw</span>(x, y, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ++fpscnt;</span><br><span class="line">    <span class="built_in">drawBody</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">updBullet</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">updEnemy</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">drawPic</span>(w, h, draw);</span><br><span class="line">    <span class="built_in">drawScore</span>(w, h, draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">toybox_run</span>(MYFPS, update, keypress);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个简易的游戏引擎，适合刚学了一点语法的小白。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://git.nju.edu.cn/jyy/toybox&quot;&gt;https://git.nju.edu.cn/jyy/toybox&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码阅读&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://loveofpeach.github.io/posts/2f57a694.html"/>
    <id>https://loveofpeach.github.io/posts/2f57a694.html</id>
    <published>2024-04-15T12:33:27.000Z</published>
    <updated>2024-05-02T15:44:21.180Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式快速参考：<br><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference">https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference</a></p><div class="note info flat"><p>版权声明：本文为博主原创文章，遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC 4.0 BY-SA</a> 版权协议，转载请附上原文出处链接和本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_28087491/article/details/107608569">https://blog.csdn.net/qq_28087491/article/details/107608569</a></p></div><p>本文对原文的改编如下：<br>修订了一些错误。例如 CSDN 将原博主的<code>*</code>识别为 markdown 标记，导致<code>*</code>丢失，部分字体变为斜体。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在编写处理字符串的程序或网页时，经常会有查找某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>很可能你使用过Win/Dos下用于文件查找的<strong>通配符(wildcard)</strong>，也就是<code>?</code>和<code>*</code>。如果你想要查找某个目录下的所有Word文档的话，你会搜索<code>*.doc</code>。在这里，<code>*</code>会被解释成任意的字符串。</p><p>和通配符类似，<strong>正则表达式</strong>也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求。当然，代价是更复杂。比如，可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2~3 个数字，然后是一个连字号<code>-</code>，最后是7或8位数字的字符串（像010-12345678或0376-7654321）。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>假设你在一篇英文小说里查找 hi，你可以使用正则表达式<code>hi</code>。</p><p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是<code>h</code>，后一个是<code>i</code>。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi, HI, Hi, hI这四种中的任意一种。</p><p>不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him, history, high 等等。用<code>hi</code>来查找的话，这里面的 hi 也会被找出来。如果要精确地查找 hi 这个单词的话，我们应该使用<code>\bhi\b</code>。</p><p><code>\b</code>是正则表达式规定的一个特殊代码（被称为<strong>元字符 metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p><p>假如你要找的是 hi 后面不远处跟着的一个 Lucy，你应该用<code>\bhi\b.*\bLucy\b</code>。</p><p>这里，<code>.</code>是另一个元字符，匹配除了换行符以外的任意字符。<code>*</code>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定前边的内容可以连续重复出现任意次以使整个表达式得到匹配。因此，<code>.*</code>连在一起就意味着任意数量的不包含换行的字符。现在<code>\bhi\b.*\bLucy\b</code>的意思就很明显了：先是一个单词hi，然后是任意个字符（但不能换行），最后是Lucy这个单词。</p><p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：<code>0\d\d-\d\d\d\d\d\d\d\d</code>匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字（也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形）。</p><p>这里的<code>\d</code>是个新的元字符，匹配一位数字（0或1或2… …）。<code>-</code>不是元字符，只匹配它本身——连字符或者减号。</p><p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<code>0\d&#123;2&#125;-\d&#123;8&#125;</code>。这里 \d 后面的 {2}({8}) 的意思是前面的 \d 必须连续重复匹配2次（8次）。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>现在已经知道了几个很有用的元字符了，正则表达式里还有更多的元字符，比如<code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。<code>\w</code>匹配字母或数字或下划线或汉字等。</p><p>下面看看更多的例子。</p><p><code>\ba\w*\b</code>匹配以字母a开头的单词——先是某个单词开始处（\b），然后是字母a，然后是任意数量的字母或数字（\w*）,最后是单词结束处（\b）。</p><p><code>\d+</code>匹配 1 个或更多连续的数字。这里的<code>+</code>是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次（可能是0次），而<code>+</code>则匹配重复 1 次或更多次。</p><p><code>\b\w&#123;6&#125;\b</code>匹配刚好 6 个字母/数字的单词。</p><p>元字符 <code>^</code> 和 $ 都匹配一个位置，这和 <code>\b</code> 有点类似。 <code>^</code> 匹配要用来查找的字符串的开头， $ 匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5到12位的数字时，可以使用：<code>^\d&#123;5,12&#125;$</code>。</p><p>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p><p>因为使用了<code>^</code>和<code>$</code>，所以输入的整个字符串都要用来和<code>\d&#123;5,12&#125;</code>来匹配，也就是说整个输出必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p><p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。<strong>如果选中了这个选项，<code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</strong></p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果想查找元字符本身的话，比如查找<code>.</code>，或者<code>*</code>，就会出现问题：没有办法去指定它们，因为它们会被解释成别的意思。这时候就得使用<code>\</code>来取消这些字符的特殊意义。因此，应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，则使用<code>\\</code>。</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>要想查找数字、字母或数字、空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合（比如元音字母a,e,i,o,u）,应该怎么办？</p><p>很简单，你只需要在方括号里列出它们就行了，像<code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!)。</p><p>我们也可以轻松地指定一个字符范围，像<code>[0-9]</code>代表的含意与<code>\d</code>就是完全一致的：一位数字。同理<code>[a-z0-9A-Z_]</code>也完全等同于<code>\w</code>（如果只考虑英文的话）。</p><p>下面是一个更复杂的表达式：<code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>。</p><p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先使用转义字符表示<code>(</code>,它能出现0次或1次(即 ? 的含义)，然后是一个<code>0</code>，后面跟着<code>2个数字</code>（即 \d{2} 的含义），然后是<code>)</code>或<code>-</code>或<code>空格</code>中的一个，它出现1次或不出现，最后是<code>8个数字</code>。</p><h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>不幸的是，刚才那个表达式也能匹配 010)12345678 或 (022-87654321 这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开。</p><p><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号（如 010-12345678 ），一种是4位区号，7位本地号（0376-2233445）。</p><p><code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题： <strong>使用分枝条件时，要注意各个条件的顺序。</strong> 如果你把它改成<code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code>的话，那么就只会匹配5位的邮编（以及9位邮编的前5位）。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>上文中已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了），但如果想要重复多个字符又该怎么办？</p><p>可以使用小括号来指定<strong>子表达式</strong>（也叫作<strong>分组</strong>），然后就可以指定这个子表达式的重复次数了。</p><p><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d&#123;1,3&#125;</code>匹配1到3位的数字，<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号重复三次，最后再加上一个一到三位的数字<code>\d&#123;1,3&#125;</code>。</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p><table>  <tbody>    <tr>      <td><strong>语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>\W</td>      <td>匹配任意不是字母，数字，下划线，汉字的字符</td>    </tr>    <tr>      <td>\S</td>      <td>匹配任意不是空白符的字符</td>    </tr>    <tr>      <td>\D</td>      <td>匹配任意非数字的字符</td>    </tr>    <tr>      <td>\B</td>      <td>匹配不是单词开头或结束的位置</td>    </tr>    <tr>      <td>[^x]</td>      <td>匹配除了x以外的任意字符</td>    </tr>    <tr>      <td>[^aeiou]</td>      <td>匹配除了aeiou这几个字母以外的任意字符</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>例如，用<code>&lt;a[^&gt;]+&gt;</code>匹配用尖括号括起来的以a开头的字符串。</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个<strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。例如，<code>\1</code>代表分组 1 匹配的文本。难以理解？请看示例：</p><p><code>\b(\w+)\b\s+\1\b</code>可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字<code>\b(\w+)\b</code>，这个单词会被捕获到编号为 1 的分组中，然后是 1 个或几个空白符<code>\s+</code>，最后是分组 1 中捕获的内容<code>\1</code>。</p><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：<code>(?&lt;Word&gt;\w+)</code>，或者把尖括号换成<code>&#39;</code>也行：<code>(?&#39;Word&#39;\w+)</code>，这样就把<code>\w+</code>的组名指定为 Word 了。要反向引用这个分组捕获的内容，你可以使用<code>\k&lt;Word&gt;</code>。所以上一个例子也可以写成这样：<code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code>。</p><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>接下来的四个用于查找<strong>在某些内容（但并不包括这些内容）之前或之后的东西</strong>，也就是说它们像<code>\b</code>，<code>^</code>，<code>$</code>那样用于指定一个位置，这个位置应该满足一定的条件（即断言），因此它们也被称为<strong>零宽断言</strong>。</p><p><code>(?=exp)</code>也叫作<strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式 exp。比如<code>\b\w+(?=ing\b)</code>，匹配以 ing 结尾的单词的前面部分（除了 ing 以外的部分），如查找 I’m singing while you’re dancing 时，它会匹配 sing 和 danc 。</p><p><code>(?&lt;=exp)</code>也叫<strong>零宽度正回顾后发断言</strong>，它断言自身出现的位置的前面能匹配表达式 exp。比如<code>(?&lt;=\bre)\w+\b</code>会匹配以 re 开头的单词的后半部分（除了 re 以外的部分），例如在查找 reading a book 时，它匹配 ading .</p><p>假如你想要给一个很长的数字中每三位间加一个逗号（当然是从右边加起了），你可以这样查找需要在前面和里面添加逗号的部分：<code>((?&lt;=\d)\d&#123;3&#125;)*\b</code>，用它对 1234567890 进行查找时结果是 234567890 .</p><p>这个例子同时使用了两种断言：<code>(?&lt;=\s)\d+(?=\s)</code>匹配以空白符间隔的数字（再次强调，不包括这些空白符）。</p><p><strong>在 cpp 的 regex 库中，这部分的规则会稍有差异。</strong></p><h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p>当正则表达式中包含能接受重复的限定符时，通常的行为是<strong>在使整个表达式能得到匹配的前提下尽可能多的字符。</strong> 考虑这个表达式：<code>a.*b</code>，它将匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 aabab 的话，它会匹配整个字符串 aabab，被称为<strong>贪婪匹配</strong>。</p><p>有时，我们更需要<strong>懒惰匹配</strong>，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号<code>?</code>。这样，<code>.*?</code>就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。</p><p><code>a.*?b</code>匹配最短的，以 a 开始，以 b 结束的字符串。如果把它应用于 aabab 的话，它会匹配 aab（第一到第三个字符）和 ab（第四到第五个字符）。</p><table>  <tbody>    <tr>      <td><strong>代码/语法</strong></td>      <td><strong>说明</strong></td>    </tr>    <tr>      <td>*?</td>      <td>重复任意次，但尽可能少重复</td>    </tr>    <tr>      <td>+?</td>      <td>重复1次或更多次，但尽可能少重复</td>    </tr>    <tr>      <td>??</td>      <td>重复0次或1次，但尽可能少重复</td>    </tr>    <tr>      <td>{n,m}?</td>      <td>重复n到m次，但尽可能少重复</td>    </tr>    <tr>      <td>{n,}?</td>      <td>重复n次以上，但尽可能少重复</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式快速参考：&lt;br&gt;&lt;a href=&quot;https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference&quot;&gt;https://</summary>
      
    
    
    
    <category term="转载" scheme="https://loveofpeach.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="正则表达式" scheme="https://loveofpeach.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>烟花三月下扬州</title>
    <link href="https://loveofpeach.github.io/posts/19141e40.html"/>
    <id>https://loveofpeach.github.io/posts/19141e40.html</id>
    <published>2024-04-09T11:50:02.000Z</published>
    <updated>2024-04-12T01:42:21.623Z</updated>
    
    <content type="html"><![CDATA[<p>仍旧是随手拍。</p><p>出了车站直取鉴真路，可惜花期已过，是今年太热了吗？</p><p>瘦西湖离鉴真路不远，遂步行。</p><p><img src="https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg" alt="71-1.jpg"></p><p>路过一个小餐馆，正是饭点，点了一碗卤肉饭，不是很好吃。</p><p>平山堂东路路边有鉴真的雕像，北边便是大明寺。</p><p>往寺庙去的台阶上有个算命的，门口有开光物件的广告。</p><p>墙体金黄，寺内香火旺盛。</p><p>佛像和罗汉像并未给人很特别的印象，若移驾去别的小寺，恐怕也难有大驾光临之感。</p><p>倒是背后的一墙小神仙的雕塑，生动活泼。</p><p>此地设有欧阳文忠纪念馆，亦与梁思成颇有渊源。</p><p>有康熙乾隆的笔墨，还有一些雅致的小建筑。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e36f0f6a.jpg" alt="71-2.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618903e5e746.jpg" alt="71-3.jpg"></p><p>广场前有一处洗手池，总之大约是吉利的意思，我便舀来洗了。但这水并不十分干净，黏黏的，后来在洗手间重又洗了一回。</p><p>来到广场，便是很远处就可看见的塔，钟楼和鼓楼拱卫其下。</p><p>出了大明寺，沿平山堂东路继续走不远，是一处江泽民题字的烈士陵园。</p><p>我路过的时候，正值一群老干部神气的人，穿着正式、谈笑风生地走下来，大约刚结束了什么团建活动。</p><p>大门敞开着，我便直接走进。终于爬了上去，视野比较开阔，然而回头却发现大门紧闭，才知道今天并不对外开放，却放我从正门大摇大摆地进来。我赶紧往回走，和保安吱了一声，大门开了一条小缝放我出去。</p><p>接下来直接去瘦西湖。</p><p><img src="https://bu.dusays.com/2024/04/10/66167e49033bc.jpg" alt="71-4.jpg"></p><p>瘦西湖很大，我也并未逛全，只是随着人流瞎玩。</p><p>盆景很值得一看，有户外展出的，也有室内博物馆。</p><p><img src="https://bu.dusays.com/2024/04/12/6618907a462ff.jpg" alt="71-5.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167e52aa2e2.jpg" alt="71-6.jpg"></p><p>洛春堂：黄昏花影二分月，细雨春林一半烟。</p><p><img src="https://bu.dusays.com/2024/04/12/661890d4d2651.jpg" alt="71-7.jpg"></p><p>二十四桥人挤人。</p><p>出了瘦西湖景区，正好外面有卖酸奶的，随手挑了一个扬大酸奶，不知道和扬州大学有没有关系。</p><p>光速打卡了文昌阁、钟书阁、四望亭，出发去东关街。</p><p>东关街看着像是现代商业炮制出来的街道，甚至还有塔罗咨询，实际上深入巷子里发现还是有土著住在里面的，大约只是面向游客的那一面商业化了。</p><p>东关街边正好挨着个园，它真好看。</p><p><img src="https://bu.dusays.com/2024/04/12/661891039b049.jpg" alt="71-8.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618913267391.jpg" alt="71-9.jpg"></p><p><img src="https://bu.dusays.com/2024/04/12/6618916beed5a.jpg" alt="71-10.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167effb769d.jpg" alt="71-11.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/66167f004e223.jpg" alt="71-12.jpg"></p><p><img src="https://bu.dusays.com/2024/04/10/661693346a73f.jpg" alt="71-13.jpg"></p><p>据说是小姐抛绣球的地方：<del>糟糕，好像有什么前世记忆苏醒了</del></p><p><img src="https://s2.loli.net/2024/04/10/apXZLtenfNWk5yu.jpg" alt="71-13dot5.jpg"></p><p>出了个园之后，买了两个糕点。</p><p><img src="https://s2.loli.net/2024/04/10/dhxz7Ab6CLoIDJO.jpg" alt="71-14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仍旧是随手拍。&lt;/p&gt;
&lt;p&gt;出了车站直取鉴真路，可惜花期已过，是今年太热了吗？&lt;/p&gt;
&lt;p&gt;瘦西湖离鉴真路不远，遂步行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2024/04/12/66188ffbc9a96.jpg&quot; alt=&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://loveofpeach.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="https://loveofpeach.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>人力资源知识存档</title>
    <link href="https://loveofpeach.github.io/posts/22d6c38e.html"/>
    <id>https://loveofpeach.github.io/posts/22d6c38e.html</id>
    <published>2024-04-03T13:05:58.000Z</published>
    <updated>2024-04-07T11:54:40.703Z</updated>
    
    <content type="html"><![CDATA[<p>以前的知识存档。其实我个人倾向于认为这是八股文。</p><h2 id="为什么在开展培训前要先进行培训需求分析？"><a href="#为什么在开展培训前要先进行培训需求分析？" class="headerlink" title="为什么在开展培训前要先进行培训需求分析？"></a>为什么在开展培训前要先进行培训需求分析？</h2><p>培训需求分析是整个培训开发工作的起始点，决定着培训活动的方向，对培训的质量起着决定性作用，如果前期的培训需求分析出现了偏差，那么培训工作的实施可能就会“南辕北辙”，达不到预期的目的。</p><h2 id="对学校的应届毕业生如何进行培训需求分析？"><a href="#对学校的应届毕业生如何进行培训需求分析？" class="headerlink" title="对学校的应届毕业生如何进行培训需求分析？"></a>对学校的应届毕业生如何进行培训需求分析？</h2><p>一般来说，可从组织分析、任务分析、人员分析三个方面入手。组织分析是在组织层面展开的，通过对组织的目标、资源、特质、环境等因素，对未来发展方向分析确定今后的培训重点和方向；另一方面对整体绩效做出评价，找出问题以便确定培训重点。 任务分析确定各职位的工作任务及完成它们所需的知识技能等。 人员分析关注员工个体现有状况与应有状况间的差距，一是根据绩效找出问题以确定培训需求，二是根据其职位变动计划比较现有状况与未来职业要求以确定将来问题的培训需求，通过人员分析，确定组织中哪些人需要接受怎样的培训。</p><p>具体到应届毕业生的培训需求分析，除上述要点外，还要关注其身份的特点。应届毕业生初入社会对职场包括生活的各方面比较生疏，学校教育与职场需求有脱节的可能。因此，应届毕业生的培训包含以下几个方面的培训：</p><ul><li>首先是介绍式培训，让应届毕业生尽快了解企业。</li><li>其次是适应性培训，让应届毕业生适应企业的工作。例如工作的规范和流程，企业的规章制度，安全生产制度等。</li><li>再次是转型培训，帮助应届毕业生完成从学生到员工、从学习到工作的转变。</li></ul><h2 id="实施培训前重点要进行哪些方面的准备工作？"><a href="#实施培训前重点要进行哪些方面的准备工作？" class="headerlink" title="实施培训前重点要进行哪些方面的准备工作？"></a>实施培训前重点要进行哪些方面的准备工作？</h2><p>对个体培训意向的特点和培训项目的要求进行综合分析，同时兼顾具体的情景因素，如项目类型、培训预算、领导支持等。</p><p>在培训前做好培训计划。针对不同的参训人员最好有量身的培训计划，退而求其次，至少也要分层次进行培训。</p><p>必要时跟进配套的工作：</p><ul><li>确保参训人员做好准备。</li><li>选择培训场地。</li><li>严肃培训纪律。</li><li>编制培训准备工作清单。</li></ul><h2 id="结合现实，谈谈为什么现代企业十分重视员工的培训？"><a href="#结合现实，谈谈为什么现代企业十分重视员工的培训？" class="headerlink" title="结合现实，谈谈为什么现代企业十分重视员工的培训？"></a>结合现实，谈谈为什么现代企业十分重视员工的培训？</h2><p>万佳泓不锈钢重视员工的全方位培训，每次有新的员工加入时，都会参加所谓的“6s”培训：安全操作培训、成品仓排序、品质培训、平板车间培训、色板炉培训、营销产品培训等一系列培训。有效的提高了企业凝集力和竞争力。</p><p>现代企业重视员工培训是因为：</p><ul><li>培训对员工有激励作用，是有价值的双赢投资。培训不仅使员工积极性、创造性提高，达到增加企业产出的效率和价值，使企业直接受益的目的，而且还能增强员工本人的素质和能力。</li><li>企业培训使员工了解企业的价值观通过培训，可以增强员工对企业的认同感，增强凝聚力及团队精神。</li><li>企业培训可以提升员工技术、能力水准。</li><li>企业培训是为员工建立学习型组织，使企业时刻有新的血液注入，通过不断学习和创新来提高效率。</li></ul><h2 id="员工培训的方法主要有哪些？各自有什么优缺点？"><a href="#员工培训的方法主要有哪些？各自有什么优缺点？" class="headerlink" title="员工培训的方法主要有哪些？各自有什么优缺点？"></a>员工培训的方法主要有哪些？各自有什么优缺点？</h2><p>方法：演示法与团队建设法、专家传授培训法。</p><p>其中<strong>演示法</strong>包括：</p><ul><li>讲座法</li><li>远程学习法</li><li>视听教学法</li></ul><p>优缺点：受训者作为信息的被动接受者</p><p><strong>团队建设法</strong>包括：</p><ul><li>探险性学习</li><li>团队培训</li><li>行动学习</li></ul><p>优缺点：提高团队成员技能、提高团队的有效性、知行合一</p><p><strong>专家传授法</strong>包括：</p><ul><li>在职培训</li><li>情景模拟</li><li>商业游戏（例如沙盘等）</li><li>个案研究</li><li>交互式培训</li><li>互联网培训</li><li>…（等）…</li></ul><p>优缺点：要求受训者积极参与学习、主要目的是开发特定技能</p><h2 id="员工培训与开发的步骤有哪些？"><a href="#员工培训与开发的步骤有哪些？" class="headerlink" title="员工培训与开发的步骤有哪些？"></a>员工培训与开发的步骤有哪些？</h2><p>员工培训的步骤：</p><ul><li>培训需求分析</li><li>培训项目设计</li><li>培训准备工作</li><li>培训效果评估</li></ul><p>员工开发的基本过程：（例如）根据绩效找出问题以确定开发需求；根据其职位变动计划比较现有状况与未来职业要求以确定将来问题的开发需求；…（等）…</p><h2 id="在实施员工培训过程中，企业应做好哪几个方面的工作？"><a href="#在实施员工培训过程中，企业应做好哪几个方面的工作？" class="headerlink" title="在实施员工培训过程中，企业应做好哪几个方面的工作？"></a>在实施员工培训过程中，企业应做好哪几个方面的工作？</h2><p><strong>营造积极的培训氛围。</strong></p><p>衡量新员工培训效果的一个重要标志是通过培训能否让新员工产生对企业的认同感和归属感，愿意为企业奉献。如果能够在培训中营造良好氛围，引导得当，让他们以企业为豪，产生强烈的为企业工作和奉献的愿望，那么企业将来就可能获得巨大收益。让新员工感受到同事之间的融洽气氛，能为良好氛围的营造打下基础。</p><p><strong>注意进行培训需求分析和培训效果评估。</strong></p><p>培训是一个流程，需要需求分析、制订方案、教学安排、实施培训、效果分析一步步实施。如果不注重培训需求分析，则培训效果会出现一定的偏差。具体来说，培训需求分析既包括企业的需求，也包括培训人员的需求。</p><h2 id="上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？"><a href="#上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？" class="headerlink" title="上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？"></a>上司安排你给新入职的员工开展培训，你打算制定哪些课程内容？为什么？</h2><p>针对进入企业的新员工的岗前培训，其首要目的是使他们成为企业的一名合格员工，此外，还要针对他们的需要，帮助他们完成从新人到熟练员工的转型。因此，我打算制定以下几个方面的培训：</p><ul><li>首先是介绍式培训，让新员工尽快了解企业。要让他们消除紧张和不适，一开始必须让他们对企业有一个初步的了解，尽快熟悉环境。所以培训的开始阶段要进行企业基本情况的介绍，包括企业组织结构、各部门地理分布、人员构成、企业产品知识等内容。</li><li>其次是适应性培训，让他们适应企业的工作，知道工作的规范和流程，要求新员工适应本企业工作的特点。了解企业的规章制度，如员工行为规范、人力资源管理制度、安全生产制度等；熟悉企业产品和技术方面的管理制度，如目标管理制度、成本管理制度、全面质量管理制度等。</li><li>再次是转型培训，帮助他们完成从新手到熟练员工的转变。安排一系列培训课程帮助他们进行转型。具体培训内容包括自我管理、交流和沟通技巧、职业道德和爱岗敬业精神，团队精神培训等。</li><li>最后一点，通过使其认同组织文化来重新塑造员工的培训。宣传企业的文化非常重要。企业文化的培训可以通过多种方式来进行，如介绍企业发展史和成功事例，请老员工谈感受，也可以做一些小游戏让他们加深对企业文化的认识和理解。</li></ul><h2 id="在你的教育经历中，你如何看待考试起到的作用"><a href="#在你的教育经历中，你如何看待考试起到的作用" class="headerlink" title="在你的教育经历中，你如何看待考试起到的作用"></a>在你的教育经历中，你如何看待考试起到的作用</h2><p><strong>积极作用：</strong></p><ul><li>考试是检验所学知识掌握程度的一种方法。考生通过考试的反馈可以制定下一阶段学习的计划，并相应地调整学习态度、改进学习方法。</li><li>考试形成的正向压力是学习的动力之一。</li><li>考试有其选拔性。通过考试，考生可以走向更大的平台。</li></ul><p><strong>消极作用：</strong></p><ul><li>考试可能带来焦虑。</li><li>考试的结果有偶然性。</li></ul><h2 id="如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？"><a href="#如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？" class="headerlink" title="如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？"></a>如果你是受训者，你最喜欢哪种培训方式？如果你是课程设计者，你最喜欢哪种培训方式？为什么？</h2><p>受训者：团队建设法-探险性学习。比较有趣，寓教于乐。在与团队成员的互动中，磨合团队，增进友谊。探险性学习可以提高团队成员技能、提高团队的有效性、知行合一。</p><p>课程设计者：讲座法。虽然受训者作为信息的被动接受者，但在合适的条件下，例如受训者思想集中、学习效率高，那么教学培训将会非常高效。另外，讲座法安全风险低，相对于探索性学习等。</p><h2 id="简述培训效果评估的四个层次"><a href="#简述培训效果评估的四个层次" class="headerlink" title="简述培训效果评估的四个层次"></a>简述培训效果评估的四个层次</h2><p>传统的培训效果评估主要是根据柯克帕特里克的四层次框架体系来进行的，它的内容是：</p><div class="table-container"><table><thead><tr><th style="text-align:center">评估级别</th><th style="text-align:center">主要内容</th><th style="text-align:center">可询问的问题</th><th style="text-align:center">衡量方法</th></tr></thead><tbody><tr><td style="text-align:center">反应层评估</td><td style="text-align:center">观察学员的反应</td><td style="text-align:center">学员喜欢该课程吗</td><td style="text-align:center">问卷、评估访谈</td></tr><tr><td style="text-align:center">学习层评估</td><td style="text-align:center">检查学员的学习效果</td><td style="text-align:center">培训项目中学到了什么</td><td style="text-align:center">笔试、绩效</td></tr><tr><td style="text-align:center">行为层反应</td><td style="text-align:center">衡量培训后的工作表现</td><td style="text-align:center">学员在学习后有无改变行为</td><td style="text-align:center">由上级、同事等考核观察</td></tr><tr><td style="text-align:center">结果层评估</td><td style="text-align:center">衡量组织经营业绩变化</td><td style="text-align:center">行为改变对组织的影响是否积极</td><td style="text-align:center">考察事故率、生产率、士气等</td></tr></tbody></table></div><h2 id="简述培训与开发的区别与联系"><a href="#简述培训与开发的区别与联系" class="headerlink" title="简述培训与开发的区别与联系"></a>简述培训与开发的区别与联系</h2><p>培训是有助于员工学习和工作相关能力的活动；开发是为员工的未来发展开展的正规教育、在职教育、人际互动等活动。</p><p>培训与开发的导向性不同。培训是当前或短期导向；开发是未来和长期导向。</p><p>关注点不同。培训关注工作技能；开发关注管理技能。</p><p>对象不同。培训的对象是员工与技术人员；开发的对象是管理人员。</p><p>培训与开发也有紧密的联系，它们的界限日益模糊。因为全员需要培训，全员需要开发。开发是目的，培训是手段。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前的知识存档。其实我个人倾向于认为这是八股文。&lt;/p&gt;
&lt;h2 id=&quot;为什么在开展培训前要先进行培训需求分析？&quot;&gt;&lt;a href=&quot;#为什么在开展培训前要先进行培训需求分析？&quot; class=&quot;headerlink&quot; title=&quot;为什么在开展培训前要先进行培训需求分析？</summary>
      
    
    
    
    <category term="杂项" scheme="https://loveofpeach.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="人力资源" scheme="https://loveofpeach.github.io/tags/%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>复试八股</title>
    <link href="https://loveofpeach.github.io/posts/1cbfb5dc.html"/>
    <id>https://loveofpeach.github.io/posts/1cbfb5dc.html</id>
    <published>2024-03-24T14:22:41.000Z</published>
    <updated>2024-05-17T17:34:41.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专业课问题"><a href="#专业课问题" class="headerlink" title="专业课问题"></a>专业课问题</h2><h3 id="介绍一下大数据，有什么相关的应用"><a href="#介绍一下大数据，有什么相关的应用" class="headerlink" title="介绍一下大数据，有什么相关的应用"></a>介绍一下大数据，有什么相关的应用</h3><p>大数据是指规模庞大、类型多样且以高速增长的数据集合。这些数据集合通常难以使用传统的数据处理技术进行捕获、管理和处理。大数据的特点包括“3V”：Volume（大量）、Velocity（高速）、Variety（多样性），有时候还会包括Veracity（真实性）和Value（价值）。</p><p>大数据在各个领域都有广泛的应用。</p><p>大数据可以用在<strong>商业智能和数据分析</strong>方面：企业可以利用大数据分析来进行销售预测、市场营销优化、客户行为分析等。</p><p>大数据还可以用于<strong>互联网搜索和推荐系统</strong>：搜索引擎和推荐系统利用大数据技术来处理和分析海量的网络数据，以提供更准确的搜索结果和个性化的推荐服务。</p><p>在高并发的情况的情况下，对数据处理的要求也会提高。例如，引入 NoSQL 技术，这是一种基于内存的数据库，并且提供一定的持久化功能。例如基于键值对 key-value 的 Redis，是当前最热门的 NoSQL 数据库之一。</p><h3 id="人工智能有哪些应用"><a href="#人工智能有哪些应用" class="headerlink" title="人工智能有哪些应用"></a>人工智能有哪些应用</h3><p>人工智能有很多应用，例如医疗、金融、数据分析等方面。</p><p>最近比较火的当属 OpenAI 的一系列 AI 产品，如 chatGPT ，一个大语言模型，还有文字生成视频模型 Sora. 国内的相关产品有百度的文心一言等。前一阵子 AI 绘画也大火了一把。</p><p>大语言模型 large language model, 是一种人工智能模型，旨在理解和生成人类语言。它们在大量的文本数据上进行训练，可以执行广泛的任务，包括文本总结、翻译、情感分析等等。LLM的特点是规模庞大，参数巨多，需要相当多的算力。</p><p>这些 AI 应用在最近不仅带动了互联网公司的新一轮发展和竞争，也带动了上下游相关企业。例如提供算力的英伟达公司，在这一轮 AI 热潮中赚取了大量利润。</p><h3 id="什么是-黑盒白盒、瀑布模型"><a href="#什么是-黑盒白盒、瀑布模型" class="headerlink" title="什么是 黑盒白盒、瀑布模型"></a>什么是 黑盒白盒、瀑布模型</h3><p>黑盒测试和白盒测试是软件测试中的两种常见方法，它们针对测试者所知道的关于软件内部结构和功能的程度不同而有所区别。</p><ol><li><p><strong>黑盒测试（Black Box Testing）</strong>：</p><ul><li>黑盒测试是一种测试方法，测试者不需要知道被测试软件的内部结构、实现细节或编程代码，而是将软件看作一个黑盒子，只关注其输入和输出之间的关系。</li><li>黑盒测试更加关注软件的功能性、用户界面和用户体验等方面，常用于功能测试、集成测试和验收测试等阶段。</li></ul></li><li><p><strong>白盒测试（White Box Testing）</strong>：</p><ul><li>白盒测试是一种测试方法，测试者需要了解被测试软件的内部结构、实现细节和编程代码，以便设计更全面的测试用例和验证逻辑。</li><li>白盒测试更加关注软件的内部逻辑、代码覆盖率和程序结构等方面，常用于单元测试、集成测试和系统测试等阶段。</li></ul></li></ol><p><strong>瀑布模型（Waterfall Model）</strong>是软件开发过程中的一种经典的<strong>线性顺序模型</strong>，它将软件开发过程分为一系列严格顺序的阶段，并要求在<strong>一个阶段完成后才能开始下一个阶段</strong>。瀑布模型的阶段通常包括<strong>需求分析、系统设计、编码、测试和维护</strong>等，每个阶段都有明确的输入和输出。开发团队按照瀑布模型的顺序依次完成各个阶段的工作，每个阶段的输出作为下一个阶段的输入，直到整个软件开发过程完成。瀑布模型适用于对需求变化要求不频繁、项目范围和时间预算比较明确的项目，但也存在刚性和高风险的缺点，难以适应需求变化和反馈延迟等问题。</p><h3 id="计算机组成原理的寻址方式有哪些"><a href="#计算机组成原理的寻址方式有哪些" class="headerlink" title="计算机组成原理的寻址方式有哪些"></a>计算机组成原理的寻址方式有哪些</h3><p>立即寻址、隐含寻址、直接寻址、间接寻址、相对寻址、基址寻址、变址寻址、寄存器寻址、寄存器间接寻址。</p><p>（用自己的话再简要说说）</p><h3 id="DBMS-数据库管理系统-的功能"><a href="#DBMS-数据库管理系统-的功能" class="headerlink" title="DBMS(数据库管理系统)的功能"></a>DBMS(数据库管理系统)的功能</h3><p>数据定义、数据操作、数据库的运行管理、数据组织存储与管理、数据表的保护、数据库的维护。</p><h3 id="C和Java区别"><a href="#C和Java区别" class="headerlink" title="C和Java区别"></a>C和Java区别</h3><p>(三五点就行)</p><p>语法不同；单文件的编译时间java比C语言快；C语言可以直接操作内存，java不能直接操作；C语言可以封装动态库，java不行；C语言的代码不容易跨平台，java的代码容易跨平台；C语言有指针，java没有指针；C语言可以直接操作串口，java需要第三方jar包支持；C语言的线程更加灵活，java的线程都已经封装好了；C语言做单独功能，可以增加效率，java适用做web应用开发；</p><h3 id="数据库建立过程-数据库设计总体流程"><a href="#数据库建立过程-数据库设计总体流程" class="headerlink" title="数据库建立过程(数据库设计总体流程)"></a>数据库建立过程(数据库设计总体流程)</h3><p>需求分析、概要设计、逻辑结构设计、物理设计阶段、数据库实施阶段、数据库运行和维护阶段。</p><h3 id="信息安全用到的工具"><a href="#信息安全用到的工具" class="headerlink" title="信息安全用到的工具"></a>信息安全用到的工具</h3><p>病毒防护技术、入侵检测技术、安全扫描技术、认证签名技术、应用安全技术。</p><h3 id="什么是SRAM"><a href="#什么是SRAM" class="headerlink" title="什么是SRAM"></a>什么是SRAM</h3><p>静态随机存取存储器(Static Random-Access Memory，SRAM)是随机存取存储器的一种。所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器(DRAM)里面所储存的数据就需要周期性地更新。</p><p>SRAM 是采用双稳态触发器实现的，读出数据时，触发器状态稳定，是<strong>非破坏性读出</strong>，无需重写，因此速度比栅极电容快，SRAM 常用作 Cache，而栅极电容制作的 DRAM 常用作内存。</p><p>但是，因为 SRAM 电路更复杂、使用了更多的 MOS 管，所以成本更高。</p><h3 id="智能家居用到了什么物联网技术"><a href="#智能家居用到了什么物联网技术" class="headerlink" title="智能家居用到了什么物联网技术"></a>智能家居用到了什么物联网技术</h3><p>智能家居利用物联网（Internet of Things，IoT）技术实现设备之间的互联互通，从而实现远程控制、自动化操作和数据交互。一些物联网技术有：</p><ol><li><strong>传感器技术</strong>：智能家居常配备各种传感器，如温度、湿度、光线传感器等，用于实时监测环境参数。</li><li>采用<strong>无线通信技术</strong>进行数据传输，如Wi-Fi、蓝牙、Zigbee、Z-Wave等。这些无线技术使设备之间互联。</li><li><strong>云计算和大数据分析</strong>：将采集到的数据上传到云端服务器进行存储和分析。通过云计算和大数据分析技术，用户可以获取更多的智能化服务，如个性化的智能推荐、智能能源管理等。</li><li><strong>人机交互技术</strong>：智能家居设备通常配备人机交互界面，如语音识别、手势识别、触摸屏等。这些技术使得用户可以通过语音命令或手势控制设备，实现更便捷的操作体验。</li><li><strong>安全和隐私保护技术</strong>：如数据加密、访问控制、安全认证等。这些技术可以保护用户的个人信息和设备安全，防止被未经授权的访问和攻击。</li></ol><h3 id="计算机网络中IPV4和IPV6有什么区别"><a href="#计算机网络中IPV4和IPV6有什么区别" class="headerlink" title="计算机网络中IPV4和IPV6有什么区别"></a>计算机网络中IPV4和IPV6有什么区别</h3><ol><li>地址空间不同，IPv4中规IP地址长度为32位，而IPv6中IP地址的长度为128。</li><li>路由表大小不同，IPv6的路由表比IPv4小。IPv6的组播支持以及对流的支持要强于IPv4。</li><li>安全性不同，IPv6的安全性高，在使用IPv6的网络时，用户可对网络层的数据进行加密。</li><li>协议扩充不同，IPv6允许协议进行扩充而IPv4不允许。</li></ol><h3 id="介绍一下区块链、云计算"><a href="#介绍一下区块链、云计算" class="headerlink" title="介绍一下区块链、云计算"></a>介绍一下区块链、云计算</h3><p>// to do…</p><h3 id="Flash-存储器的原理是什么"><a href="#Flash-存储器的原理是什么" class="headerlink" title="Flash 存储器的原理是什么"></a>Flash 存储器的原理是什么</h3><p>flash 存储器又称闪存(快闪存储器)，是一种<strong>电可擦可编程只读存储器</strong>的形式，允许在操作中被多次擦或写，EEPROM与高速RAM成为当前最常用且发展最快的两种存储技术。计算机的BIOS、数字照相机等的存储卡中都使用闪存。flash存储器的主要特点是在不加电的情况下能长期保持存储的信息。就其本质而言，flash存储器属于EEPROM(电擦除可编程只读存储器)类型。它既有ROM的特点，又有很高的存取速度，而且易于擦除和重写，功耗很小。</p><h3 id="网络搜索时是直接从服务器获取的吗"><a href="#网络搜索时是直接从服务器获取的吗" class="headerlink" title="网络搜索时是直接从服务器获取的吗"></a>网络搜索时是直接从服务器获取的吗</h3><p>// to do…</p><h3 id="计算机科学中的语法、语义的区别是"><a href="#计算机科学中的语法、语义的区别是" class="headerlink" title="计算机科学中的语法、语义的区别是"></a>计算机科学中的语法、语义的区别是</h3><p>语法关注的是<strong>代码的结构和组织形式</strong>是否正确，而语义关注的是<strong>代码的含义和行为</strong>是否符合预期。正确的语法是编程语言的基础，而正确的语义是确保代码功能正确和可靠的关键。</p><ol><li><strong>语法（Syntax）</strong>：<ul><li>语法指的是编程语言中的规则和结构，用于定义合法的代码格式和组织方式。它关注的是代码的表面形式。</li><li>编程语言的编译器或解释器会根据语法规则对代码进行词法分析和语法分析，以确定代码的结构是否正确。</li></ul></li><li><strong>语义（Semantics）</strong>：<ul><li>语义指的是编程语言中的含义和逻辑，用于描述代码的功能和行为。它关注的是代码的含义、逻辑和执行结果。</li><li>语义规定了代码中各个元素之间的关系和作用，包括变量的赋值、运算符的操作、函数的调用等。</li></ul></li></ol><p>在数理逻辑中，也有类似的概念，例如<strong>语法推出</strong>、<strong>语义推出</strong>等。更一般地，有：</p><blockquote><p>太阳是黑的. ——语法正确,语义错误.<br>太阳是红的. ——语法正确,语义正确.</p></blockquote><h3 id="传感器在物联网中的应用"><a href="#传感器在物联网中的应用" class="headerlink" title="传感器在物联网中的应用"></a>传感器在物联网中的应用</h3><p>（稍微看看就行）</p><p>物联网类型的传感器有温度传感器、光传感器、运动传感器、图像传感器、陀螺仪传感器、距离传感器和心律传感器等。传感器可以采集大量信息，它是许多装备和信息系统必备的信息摄取手段，若无传感器对最初信息的检测、交替和捕获，所有控制与测试都不能实现，所以说，传感器是物联网的基础。</p><h3 id="操作系统中的调度有哪些"><a href="#操作系统中的调度有哪些" class="headerlink" title="操作系统中的调度有哪些"></a>操作系统中的调度有哪些</h3><p>操作系统中的调度分三个层次：高级调度、中级调度、低级调度。</p><p>其中，高级调度又叫<strong>作业调度</strong>。<br>按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次。作业调入时会建立PCB，调出时才撤销PCB。</p><p>中级调度又叫<strong>内存调度</strong>。<br>内存不够时，可将某些进程的数据调出外存。等内存空闲或者进程需要运行时再重新调入内存。暂时调到外存等待的进程状态为<strong>挂起状态</strong>。被挂起的进程PCB会被组织成<strong>挂起队列</strong>。<br>中级调度会按照某种策略决定将哪个处于挂起状态的进程重新调入内存。一个进程可能会被多次调出、调入内存。</p><p>低级调度又叫<strong>进程调度</strong>。<br>按照某种策略从就绪队列中选取一个进程，将处理机分配给它。进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。</p><h3 id="什么是ARP协议"><a href="#什么是ARP协议" class="headerlink" title="什么是ARP协议"></a>什么是ARP协议</h3><p>//to do…<br>地址解析协议，即ARP(Address Resolution Protocol)，是根据 IP 地址获取 MAC 地址的一个 TCP/IP 协议。</p><h3 id="介绍一下bios是什么"><a href="#介绍一下bios是什么" class="headerlink" title="介绍一下bios是什么"></a>介绍一下bios是什么</h3><p>//to do…<br>BIOS 是英文 Basic Input Output System 的缩略词，直译过来后中文名称就是”基本输入输出系统”</p><h3 id="正逻辑和负逻辑的区别"><a href="#正逻辑和负逻辑的区别" class="headerlink" title="正逻辑和负逻辑的区别"></a>正逻辑和负逻辑的区别</h3><p>以高低电平表示两种不同逻辑状态时，有两种定义方法。如果以<strong>高电平表示逻辑1，低电平表示逻辑0</strong>，则称这种表示方法为<strong>正逻辑</strong>。反之，若以高电平表示逻辑0，而以低电平表示逻辑1，则称这种表示方法为负逻辑。</p><h3 id="操作系统提供的功能"><a href="#操作系统提供的功能" class="headerlink" title="操作系统提供的功能"></a>操作系统提供的功能</h3><p>CPU 管理、存储器管理、文件管理、设备管理</p><h3 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h3><p>简单来说，计算机网络是指<strong>一些互相连接的、自治的计算机的集合</strong>。</p><p>或者我们也可以说：</p><blockquote><p>计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。</p></blockquote><h3 id="擅长哪个编程语言和编程环境"><a href="#擅长哪个编程语言和编程环境" class="headerlink" title="擅长哪个编程语言和编程环境"></a>擅长哪个编程语言和编程环境</h3><p>不敢说擅长，不过我使用最多的是 C++ 和 Python，Windows 和 Linux 均可。编辑器使用 vscode，plus vim 插件。</p><h3 id="解释一下数据库中的索引"><a href="#解释一下数据库中的索引" class="headerlink" title="解释一下数据库中的索引"></a>解释一下数据库中的索引</h3><p>索引（Index）是高效获取数据的数据结构。</p><p>假设我们现在在一张表上有一个索引，这个索引可以加快查询，具体来说是这样做的：这个索引的属性会按照一定规则排序，然后我们在查找某个具体的元组时就可以使用二分查找加速。</p><p>索引可以提高数据检索效率，降低数据库 IO 成本。但同时也需要额外占用空间。有时候索引占用的空间甚至比数据占用的空间还多。此外，降低更新表的速度。因为数据库不仅要更新数据，还要更新对应的索引信息。</p><p>索引分为<strong>主键索引</strong>和<strong>非主键索引</strong>。以主键创建的索引，叫主键索引。以非主键创建的索引叫非主键索引。</p><p>在 MySQL 中，非主键索引包括<strong>普通索引、唯一索引、全文索引、组合索引</strong>。</p><p>值得一提的是组合索引，在 MySQL 中，组合索引有“最左前缀”的概念。如果处理不当，组合索引将失效。举例来说，我们有组合索引 abc，请想象一颗四层的树，（后略…临场发挥…）</p><p>另外，存在一种叫做“回表”的现象，使用辅助索引查询时，若查询的列在辅助索引树上没有，那么就需要通过该条信息对应的主键，在主键索引树上继续查找。即在两个索引树上进行查找，磁盘 IO 增多，查询速度变慢。（尽量避免回表）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> citizen <span class="keyword">where</span> id_card <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>回表</span><br></pre></td></tr></table></figure><h3 id="GPS定位技术怎么实现的"><a href="#GPS定位技术怎么实现的" class="headerlink" title="GPS定位技术怎么实现的?"></a>GPS定位技术怎么实现的?</h3><p>GPS 的工作原理，简单来说，是利用几何与物理上一些基本的原理。首先，我们假定卫星的位置已知，而我们又能准确测定我们所在地点A至卫星间的距离，那么A点一定是位于以卫星为中心、所测得距离为半径的圆球上。然后我们又测得点A至另一卫星的距离，则A点一定处在前后两个圆球相交的圆环上（因为两球相交得到一个圆环）。我们还可测得与第三个卫星的距离，就可以确定A点只能是在三个圆球相交的两个点，根据一些地理知识，很容易排除其中一个不合理的位置。当然也可以如法炮制，再测量A点到另一个卫星的距离，也能精确进行定位。因此，要实现精确定位，要解决两个问题</p><ul><li>卫星的准确位置</li><li>卫星至地球上我们所在地的距离</li></ul><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>（自己组织语言）</p><p>高中生都能理解的公式出发：</p><script type="math/tex; mode=display">\begin{pmatrix}n\\m\end{pmatrix}=\begin{pmatrix}n-1\\m-1\end{pmatrix}+\begin{pmatrix}n-1\\m\end{pmatrix}</script><p>子问题…</p><p>其实按照我个人的经验，编写递归代码就是<strong>把没有发生过的事当作已经发生了</strong>…</p><p>（手撕记忆化搜索）</p><p>针对 AOE，给出一个基于 DAG 上动态规划的算法：</p><script type="math/tex; mode=display">S_i= \begin{cases}\underset{(i,j)\in E}{\overset{}{\mathrm{MAX}}}(S_j+\mathrm{len}(i,j)) & i \ne \mathrm{end} \\0 &i=\mathrm{end}\end{cases}</script><p>汉诺塔…</p><h3 id="总线是什么"><a href="#总线是什么" class="headerlink" title="总线是什么"></a>总线是什么</h3><p>总线(Bus)是计算机<strong>各种功能部件之间传送信息的公共通信干线</strong>，它是由导线组成的传输线束，按照计算机所传输的息种类，计算机的总线可以划分为<strong>数据总线</strong>、<strong>地址总线</strong>和<strong>控制总线</strong>，分别用来传输数据、数据地址和控制信号。总线是一种内部结构，它是cpu、内存、输入、输出设备传递信息的公用通道，主机的各个部件通过总线相连接，<strong>外部设备通过相应的接口电路再与总线相连接</strong>，从而形成了计算机硬件系统。</p><h3 id="文件系统的功能作用"><a href="#文件系统的功能作用" class="headerlink" title="文件系统的功能作用"></a>文件系统的功能作用</h3><p>管理和调度文件的存储空间，提供文件的逻辑结构、物理结构和存储方法；实现文件从标识到实际地址的映射，实现文件的控制操作和存取操作，实现文件信息的共享并提供可靠的文件保密和保护措施，提供文件的安全措施。</p><h3 id="什么是背包算法"><a href="#什么是背包算法" class="headerlink" title="什么是背包算法"></a>什么是背包算法</h3><p>参见背包九讲。</p><h3 id="P问题、NP问题、NP完全问题、NP难问题"><a href="#P问题、NP问题、NP完全问题、NP难问题" class="headerlink" title="P问题、NP问题、NP完全问题、NP难问题"></a>P问题、NP问题、NP完全问题、NP难问题</h3><p>参见： <a href="https://zhuanlan.zhihu.com/p/73953567">https://zhuanlan.zhihu.com/p/73953567</a></p><p>注意，链接文章有一些疏漏，评论区已指出。</p><h3 id="人工智能和机器学习有什么关系"><a href="#人工智能和机器学习有什么关系" class="headerlink" title="人工智能和机器学习有什么关系"></a>人工智能和机器学习有什么关系</h3><p>机器学习是实现人工智能的一种技术手段。人工智能可以利用多种方法和技术来实现，而机器学习是其中一种非常重要的方法。通过机器学习，人工智能系统可以从数据中学习，从而提高自己的性能和智能水平，使其能够更好地执行各种任务。</p><h3 id="对计算机哪个领域方向感兴趣"><a href="#对计算机哪个领域方向感兴趣" class="headerlink" title="对计算机哪个领域方向感兴趣"></a>对计算机哪个领域方向感兴趣</h3><p>其实我个人认为，在有深入的了解前谈兴趣可能会沦为一种“空谈”。</p><p>作为一个跨考生，我接触和做过的大概只有一些基础的算法，做过自己的网页，了解过数据库的知识，并且在备考的过程中学习了网络、计算机组成、操作系统的知识。</p><p>我个人在之前可能会对图像方面比较感兴趣，写过柏林噪声之类的代码。我也从以前的同学那了解到有计算机视觉这个分支领域，据说非常艰深而且竞争激烈。</p><p>我现在的状态的话应该是对各方面都愿意尝试。</p><h3 id="TCP-IP模型有哪些层，每层的协议有什么"><a href="#TCP-IP模型有哪些层，每层的协议有什么" class="headerlink" title="TCP/IP模型有哪些层，每层的协议有什么"></a>TCP/IP模型有哪些层，每层的协议有什么</h3><p>TCP/IP 模型将网络通信分为多个层次，每个层次都有不同的功能和协议。TCP/IP 模型包括四个层次：应用层、运输层、网际层、网络接口层。</p><p>应用层的协议有：HTTP协议、SMTP协议、DNS协议、RTP协议等。<br>运输层的协议有：TCP 和 UDP 协议。<br>网际层的协议有 IP 协议、ARP 协议等。<br>由于 TCP/IP 体系结构为了将不同的网络接口进行互连，因此它的网络接口层并没有规定什么具体的内容，而是旨在提供灵活性，以适应各种网络类型。</p><p><img src="https://bu.dusays.com/2024/03/25/660171080ae17.png" alt="69-1.png"></p><p>IP 协议可以将不同的网络接口互联，并向其上的 TCP 协议和 UDP 协议提供网络互联服务。而 TCP 协议在享受 IP 协议提供的网络互联服务的基础上，可向应用层的相应协议提供可靠传输的服务。UDP 协议在享受 IP 协议提供的网络互联服务的基础上，可向应用层的相应协议提供不可靠传输的服务。IP 协议作为 TCP/IP 体系结构中的核心协议，一方面负责互连不同的网络接口，也就是 IP over Everything；另一方面，为各种网络应用提供服务，也就是 Everything over IP. 在 TCP/IP 协议体系中包含有大量协议，IP 协议和 TCP 协议是其中非常重要的两个协议，因此，用 TCP 和 IP 这两个协议来表示整个协议大家族，常称为 TCP/IP 协议族。</p><p><img src="https://s2.loli.net/2024/03/25/Pujl8QtYdNy2o9f.png" alt="69-2.png"></p><h3 id="简单解释一下编译原理"><a href="#简单解释一下编译原理" class="headerlink" title="简单解释一下编译原理"></a>简单解释一下编译原理</h3><p>编译原理的内容包括编译程序构造的一般原理和基本方法。内容包括语言和文法、词法分析、语法分析、语法制导翻译、中间代码生战、存储管理、代码优化和目标代码生成。</p><h3 id="编译执行和解释执行的区别"><a href="#编译执行和解释执行的区别" class="headerlink" title="编译执行和解释执行的区别"></a>编译执行和解释执行的区别</h3><p>从启动效率来看，解释执行不需要进行编译操作，而编译执行，要经过编译过程。解释执行启动速度更快。</p><p>从运行效率来看，因为编译执行只需要编译一次，以后再运行就无需编译，而解释执行每次都要经过解释过程，所以编译执行效率更高。</p><p>从内存使用方面来看，编译执行需要生成编译后的机器码文件，而解释执行时逐句解释执行，所以解释执行对内存占用更少。</p><p>从跨平台的角度来看，因为解释执行每次可以根据不同的平台进行解释，例如js在linux和windows都可以运行，而C语言在windows下编译后的文件，只能在windows下执行。</p><h3 id="交换机和路由器的区别"><a href="#交换机和路由器的区别" class="headerlink" title="交换机和路由器的区别"></a>交换机和路由器的区别</h3><p>路由器在网络层，路由器根据IP地址寻址，路由器可以处理TCP/IP协议，交换机不可以。交换机根据MAC地址寻址。</p><p>路由器可以把一个IP分配给很多个主机使用，这些主机对外只表现出一个IP。交换机可以把很多主机连起来，这些主机对外各有各的IP.</p><p>集线器、交换机是做端口扩展的，就是扩大局域网(通常都是以太网)的接入点，让局域网可以连进更多的电脑。路由器是用来做网间连接，用来连接不同的网络。</p><h3 id="解释一下云计算"><a href="#解释一下云计算" class="headerlink" title="解释一下云计算"></a>解释一下云计算</h3><p>云计算(cloud computing)是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。</p><h3 id="设计一个存储器需要注意什么"><a href="#设计一个存储器需要注意什么" class="headerlink" title="设计一个存储器需要注意什么"></a>设计一个存储器需要注意什么</h3><p>存储速度、存储容量、CAS延迟时间、内存带宽</p><h3 id="什么是摩尔定律"><a href="#什么是摩尔定律" class="headerlink" title="什么是摩尔定律"></a>什么是摩尔定律</h3><blockquote><p>每隔18至24个月，集成电路中可容纳的晶体管数量将翻一番，而成本却保持不变。</p></blockquote><p>（其他解释，相同的价钱，能买到的…）</p><p>然而，随着技术的不断进步，摩尔定律也面临着一些挑战。由于电子元件尺寸接近原子尺度，制程工艺面临着物理限制，晶体管数量的增长速度已经开始放缓。</p><h3 id="敏捷开发是什么"><a href="#敏捷开发是什么" class="headerlink" title="敏捷开发是什么"></a>敏捷开发是什么</h3><p>敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。<strong>换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。</strong></p><h3 id="解释下计算机网络的三握手"><a href="#解释下计算机网络的三握手" class="headerlink" title="解释下计算机网络的三握手"></a>解释下计算机网络的三握手</h3><p>所谓的“三次握手”:为了对每次发送的数据量进行跟踪与协商，确保数据段的发送和接收同步，根据所接收到的数据量而确认数据发送、接收完毕后何时撤消联系，并建立虚连接。</p><h3 id="程序的三个组成部分"><a href="#程序的三个组成部分" class="headerlink" title="程序的三个组成部分"></a>程序的三个组成部分</h3><p>程序号、程序内容、程序结束</p><h3 id="计组中流水线的作用"><a href="#计组中流水线的作用" class="headerlink" title="计组中流水线的作用"></a>计组中流水线的作用</h3><p>（用自己的话讲两句）</p><p>这种工作方式与工厂中的生产流水线十分相似，因此称为流水线技术。</p><p>从本质上讲，流水线技术是一种时间并行技术。</p><h3 id="列举几个机器学习的算法"><a href="#列举几个机器学习的算法" class="headerlink" title="列举几个机器学习的算法"></a>列举几个机器学习的算法</h3><p>决策树算法 · 朴素贝叶斯算法 · 支持向量机算法 · 随机森林算法 · 人工神经网络算法 · Boosting与Bagging算法 · 关联规则算法 </p><h3 id="面向对象和面向过程的区别。"><a href="#面向对象和面向过程的区别。" class="headerlink" title="面向对象和面向过程的区别。"></a>面向对象和面向过程的区别。</h3><p>面向过程<br>优点: 性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。<br>缺点:没有面向对象易维护、易复用、易扩展。</p><p>面向对象<br>优点: 易维护、易复用、易扩展，由于面向对象有封装、继承、多态的特性，可以设计出低耦合的系统，使系统更加灵活、更易于维护。<br>缺点: 性能比面向过程低。</p><h3 id="排序算法相关"><a href="#排序算法相关" class="headerlink" title="排序算法相关"></a>排序算法相关</h3><p>（我真服了初试考过算法为什么复试还要准备啊）</p><p><img src="https://bu.dusays.com/2024/03/26/6602946494542.png" alt="69-6.png"></p><h3 id="冯诺依曼计算机特点"><a href="#冯诺依曼计算机特点" class="headerlink" title="冯诺依曼计算机特点"></a>冯诺依曼计算机特点</h3><p>冯诺依曼机的组成: 存储器+运算器+控制器+输入设备+输出设备。<br>其主要特征为: 数制采用二进制；存储程序；计算机应该按照程序顺序执行。</p><h3 id="对搜索引擎有什么了解，举例"><a href="#对搜索引擎有什么了解，举例" class="headerlink" title="对搜索引擎有什么了解，举例"></a>对搜索引擎有什么了解，举例</h3><p>所谓搜索引擎，就是<strong>根据用户需求与一定算法</strong>，运用<strong>特定策略从互联网检索出制定信息反馈给用户</strong>的一门<strong>检索技术</strong>。搜索引擎依托于多种技术，如爬虫技术、检索排序技术、网页处理技术、大数据处理技术、自然语言处理技术等，为信息检索用户提供快速、高相关性的信息服务。搜索引擎技术的核心模块一般包括爬虫、索引、检索和排序等，同时可添加其他一系列辅助模块，以为用户创造更好的网络使用环境。百度、谷歌等。</p><h3 id="软件的组成部分有什么"><a href="#软件的组成部分有什么" class="headerlink" title="软件的组成部分有什么"></a>软件的组成部分有什么</h3><p>软件由程序、数据和文档三部分组成</p><h3 id="顺序表和链表的区别"><a href="#顺序表和链表的区别" class="headerlink" title="顺序表和链表的区别"></a>顺序表和链表的区别</h3><p>顺序表(顺序存储)<br>优点:支持随机存取、存储密度高<br>缺点:大片连续空间分配不方便，改变容量不方便</p><p>链表(链式存储)<br>优点:离散的小空间分配方便,改变容量方便<br>缺点:不可随机存取，存储密度低</p><h3 id="操作系统中为什么要引入文件管理"><a href="#操作系统中为什么要引入文件管理" class="headerlink" title="操作系统中为什么要引入文件管理"></a>操作系统中为什么要引入文件管理</h3><p>文件管理是操作系统五大职能之一，主要涉及文件的逻辑组织和物理组织，目录的结构和管理。所谓文件管理，就是操作系统中实现文件统一管理的一组软件、被管理的文件以及为实施文件管理所需要的一些数据结构的总称(是操作系统中负责存取和管理文件信息的机构)从系统角度来看，文件系统是对文件存储器的存储空间进行组织，分配和回收，负责文件的存储检索，共享和保护。从用户角度来看，文件系统主要是实现”按名取存”，文件系统的用户只要知道所需文件的文件名，就可存取文件中的信息，而无需知道这些文件究竟存放在什么地方。</p><p>（上面看着有些碍眼。。。）</p><ol><li>实现按文件名存取文件信息</li><li>为用户提供统一友好的接口</li><li>实施对文件和文件目录的管理</li><li>文件存储器空间的分配与回收</li><li>提供有关文件的共享和保护。</li></ol><h3 id="说下软件工程的生命周期"><a href="#说下软件工程的生命周期" class="headerlink" title="说下软件工程的生命周期"></a>说下软件工程的生命周期</h3><p>是软件的产生直到报废或停止使用的生命周期。软件生命周期内有<strong>问题定义、可行性分析、总体描述、系统设计、编码、调试和测试、验收与运行、维护升级到废弃</strong>等阶段，也有将以上阶段的活动组合在内的迭代阶段，即迭代作为生命周期的阶段。</p><h3 id="什么是多继承"><a href="#什么是多继承" class="headerlink" title="什么是多继承"></a>什么是多继承</h3><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><h3 id="简述指令周期的数据流"><a href="#简述指令周期的数据流" class="headerlink" title="简述指令周期的数据流"></a>简述指令周期的数据流</h3><p>取指周期:<br>（从主存中取出指令代码并交到IR）<br>PC-&gt;MAR<br>MAR -&gt; 地址总线<br>地址总线 -&gt; 主存<br>CU -&gt; 主存<br>主存 -&gt; 数据总线<br>数据总线 -&gt; MDR<br>MDR -&gt; IR</p><p>间址周期：<br>取操作数的有效地址</p><p>执行周期：<br>数据流形态各异，具体问题具体分析</p><p>中断周期：<br>核心任务是处理中断请求</p><h3 id="时钟周期、机器周期、指令周期"><a href="#时钟周期、机器周期、指令周期" class="headerlink" title="时钟周期、机器周期、指令周期"></a>时钟周期、机器周期、指令周期</h3><p><img src="https://s2.loli.net/2024/03/26/TdO9EPvw5gzesRV.png" alt="69-7.png"></p><h3 id="进程之间的高级通信"><a href="#进程之间的高级通信" class="headerlink" title="进程之间的高级通信"></a>进程之间的高级通信</h3><p><strong>共享存储</strong>：<br>在通信的进程之间存在一块可<strong>直接访问的内存空间</strong>，通过对这片共享空间进行读/写操作实现进程之间的信息交换，共享存储分为<strong>基于数据结构的</strong>共享和基于<strong>存储区</strong>的共享。</p><p><strong>消息传递</strong>：<br>进程间的数据交换是以格式化的消息(Message)为单位。进程通过系统提供的<strong>发送消息和接收消息两个原语</strong>进行数据交换。进程可以通过<strong>消息缓冲队列</strong>直接通信，也可以通过中间<strong>实体信箱</strong>进行间接通信。</p><p><strong>管道通信</strong>：<br>管道是指用于连接一个读进程和一个写进程以实现它们之间的通信的一个共享文件，又名pipe文件。管道机制必须提供互斥，同步和确定对方存在的能力。管道只能采用<strong>半双工通信</strong>，要实现父子进程双方互动通信，需要定义两个管道。</p><h3 id="什么是操作系统里的‘锁’"><a href="#什么是操作系统里的‘锁’" class="headerlink" title="什么是操作系统里的‘锁’"></a>什么是操作系统里的‘锁’</h3><p>为了保证数据的一致性，在多线程编程中我们会用到锁，使得在某一时间点，只有一个线程进入临界区代码。信号量机制就是实现进程同步与互斥的机制。通过PV操作。</p><h3 id="说说文件的逻辑结构"><a href="#说说文件的逻辑结构" class="headerlink" title="说说文件的逻辑结构"></a>说说文件的逻辑结构</h3><p>无结构文件(流式文件):将数据按顺序组织记录,以字节为单位。</p><p>有结构文件(记录式文件):</p><ul><li>顺序文件:可以顺序存储或以链表形式存储。</li><li>索引文件:索引表本身是定长记录的顺序文件。</li><li>索引顺序文件:将顺序文件中的记录分为若干组，为文件建立一张索引表，一组记录对应一个索引表项。可根据需要建立多级索引。</li></ul><h3 id="根据网络的覆盖范围将网络分类"><a href="#根据网络的覆盖范围将网络分类" class="headerlink" title="根据网络的覆盖范围将网络分类"></a>根据网络的覆盖范围将网络分类</h3><p>计算机网络按覆盖范围分类可分为广域网、城域网、局域网。</p><ol><li>局域网是将小区域内的各种通信设备互连在一起的通信网络。使用广播技术</li><li>广域网特点(使用交换技术,是点对点式网络)<ul><li>覆盖的地理区域大，通常在几公里至几千、几万公里，网络可跨越市、地区、省、国家、洲洋乃至全球。</li><li>广域网连接常借用公用网络</li><li>传输速率比较低</li><li>网络拓扑结构复杂</li></ul></li><li>城域网特点<br>是在一个城市范围内所建立的计算机通信网，简称MAN。这是80年代末，在LAN的发展基础上提出的，在技术上与LAN有许多相似之处，而与广域网(WAN)区别较大。<ul><li>传输速率高</li><li>用户投入少，接入简单</li><li>技术先进、安全</li><li>大多采用以太网技术</li></ul></li></ol><p>是否采用分组存储转发与路由选择机制是点对点式网络与广播式网络的重要区别。</p><h3 id="拥塞控制在哪层-具体说明。"><a href="#拥塞控制在哪层-具体说明。" class="headerlink" title="拥塞控制在哪层?具体说明。"></a>拥塞控制在哪层?具体说明。</h3><p><strong>拥塞控制在传输层</strong>，而且是在使用TCP协议的情况下。拥塞控制是指<strong>防止过多的数据注入网络</strong>，以使网络中的路由器或链路不致过载。拥塞控制主要是使用<strong>慢开始</strong>和<strong>拥塞避免</strong>组合和<strong>快重传</strong>和<strong>快恢复</strong>组合。</p><p>慢开始是<strong>避免新建立的连接一开始就大量发送数据包，只能根据网络情况逐步增加每次发送的数据量</strong>。当新建连接时，拥塞窗口初始化为1个最大报文段(MSS)大小，发送端开始按照拥塞窗口大小发送数据，每当有一个报文段被确认，cwnd就增加至多1个MSS大小。用这样的方法来逐步增大拥塞窗口。</p><p>拥塞避免是当拥塞窗口增大到一个规定的<strong>慢开始门限</strong>，然后改用拥塞避免算法，拥塞窗口每经过一个往返时延就增加一个MSS大小而不是加倍，使拥塞窗口按线性规律缓慢增长。当出现一次超时，令慢开始门限等于当前拥塞窗口一半，然后把拥塞窗口重新设置为1。</p><p>快重传和快恢复算法是对慢开始和拥塞算法的改进。</p><p>快重传是当<strong>发送方连续收到三个重复的ACK报文时，直接重传对方尚未收到的报文段</strong>，而不必等待那个报文段设置的重传计时器超时。</p><p>快恢复是当<strong>发送方连续收到三个重复的ACK报文时，把慢开始门限设置为出现拥塞时发送方拥塞窗口一半，然后拥塞窗口开始线性增长</strong>。</p><p>这几种算法是同时应用在拥塞控制机制之中的，当发送方检测到超时时，就采用慢开始和拥塞避免，当发送方接收到冗余ACK时，就采用快重传和快恢复。</p><h3 id="OSI模型中流量控制在哪些层实现"><a href="#OSI模型中流量控制在哪些层实现" class="headerlink" title="OSI模型中流量控制在哪些层实现"></a>OSI模型中流量控制在哪些层实现</h3><p>数据链路层，网络层，传输层。</p><h3 id="解释PPP协议-在哪一层的"><a href="#解释PPP协议-在哪一层的" class="headerlink" title="解释PPP协议,在哪一层的"></a>解释PPP协议,在哪一层的</h3><p>PPP协议是使用<strong>串行线路通信的面向字节</strong>的协议，该协议应用在直接连接两个结点的链路上。是从SLIP协议的基础上发展而来的，既可以在异步线路上传输，也可以在同步线路上使用。在数据链路层。</p><h3 id="奈式准则和香农定理说明什么"><a href="#奈式准则和香农定理说明什么" class="headerlink" title="奈式准则和香农定理说明什么"></a>奈式准则和香农定理说明什么</h3><p>在假定的理想条件下，为避免码间串扰，码元传输速率是有极限的。</p><p><img src="https://bu.dusays.com/2024/03/26/6602c823aa134.png" alt="69-8.png"></p><p>香农定理得出信道的极限数据传输速率与带宽，信噪比有关。</p><h3 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h3><p>系统调用把应用程序的请求传给内核，调用相应的的内核函数完成所需的处理，将处理结果返回给应用程序。</p><h2 id="人文、心理、开放性问题"><a href="#人文、心理、开放性问题" class="headerlink" title="人文、心理、开放性问题"></a>人文、心理、开放性问题</h2><p>1、你对团队精神有什么看法。</p><p>2、你读过哪些书,除了专业课的。</p><p>3、研究生阶段的计划是什么。</p><p>4、大学有什么遗憾?</p><p>5、家里最重要的人是谁?</p><p>6、你对未来生活的规划是什么?</p><p>7、怎么看待成绩不如你的人奖学金比你高?</p><p>8、在学术中你觉得什么是最重要的?</p><p>9、考上研究生之后你有什么计划?</p><p>10、大学里最遗憾的事情是什么?</p><p>11、说下大学参加的社会实践和科技实践。</p><p>12、你为什么选择考□大学?</p><p>13、你觉得□□这个城市怎么样?</p><p>14、你参加过什么有关于计算机方面的比赛?</p><p>15、你本科的研究方向是什么?</p><p>16、你的本科毕业设计方向是什么?</p><p>17、如果专业跨度比较大,你该怎么面对?</p><p>18、你在编码过程中遇到 bug 或者困难你是怎么解决的?</p><h2 id="英语问题"><a href="#英语问题" class="headerlink" title="英语问题"></a>英语问题</h2><p>你知道什么传统文化?</p><p>数据库有什么功能?</p><p>什么是AR技术?</p><p>什么是数据结构?</p><p>中国社会面临哪些挑战?</p><p>c与java有什么区别?</p><p>互联网对生活的改变?</p><p>你想去哪里旅行?</p><p>你最喜欢的书是什么?</p><p>你对网上购物有什么看法?</p><p>本科期间学过什么技术?</p><p>大学里最难忘的经历?</p><p>你最崇拜的人?</p><p>你怎么看待网上阅读?</p><p>你对图灵有什么了解?</p><p>什么是面向对象的方法(Object-Oriented Method)?</p><p>你羡慕的品格是什么?</p><p>你怎么面对批评?</p><p>专业自己选的还是父母选的?</p><p>用英语介绍一下你的专业。</p><p>在你的专业方面有什么计划?</p><p>你对人工智能有什么了解?</p><p>请你解释一下深度学习。</p><p>为什么有的人喜欢收集邮票?</p><p>描述一下TCP/IP协议?</p><p>保护环境有什么方法?</p><h2 id="计网杂项知识点"><a href="#计网杂项知识点" class="headerlink" title="计网杂项知识点"></a>计网杂项知识点</h2><p><img src="https://bu.dusays.com/2024/03/25/66018ed740336.png" alt="69-3.png"></p><p><img src="https://bu.dusays.com/2024/03/25/66018ed37cfa7.png" alt="69-4.png"></p><p><img src="https://bu.dusays.com/2024/03/25/66018ed7143ac.png" alt="69-5.png"></p><h2 id="后日谈"><a href="#后日谈" class="headerlink" title="后日谈"></a>后日谈</h2><p>评价：盲人摸象。</p><p>首先（也是最重要的一点），并没有问所谓的“人文、心理问题”，都是问的专业问题。每个面试考生的时间是有限的。</p><p>桌子上一堆题，装在袋子里让你随便选一个。</p><p>我抽的题目是计算机组成原理的，没有计网的。亏我过了两遍计网知识点。</p><p>此外还有一些别的问题，问了我 C++ 和离散数学、云计算相关的东西。云计算的问题我就直接背的八股。</p><p>英语问题问了 what is operating system ? 我整个愣住，总不能说 operating system is a system to operate your computer 吧？后来换了一个问题，总算答上来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专业课问题&quot;&gt;&lt;a href=&quot;#专业课问题&quot; class=&quot;headerlink&quot; title=&quot;专业课问题&quot;&gt;&lt;/a&gt;专业课问题&lt;/h2&gt;&lt;h3 id=&quot;介绍一下大数据，有什么相关的应用&quot;&gt;&lt;a href=&quot;#介绍一下大数据，有什么相关的应用&quot; class=&quot;</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="八股文" scheme="https://loveofpeach.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理（续）</title>
    <link href="https://loveofpeach.github.io/posts/60249dd6.html"/>
    <id>https://loveofpeach.github.io/posts/60249dd6.html</id>
    <published>2024-03-24T13:42:56.000Z</published>
    <updated>2024-03-24T14:32:56.935Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要：因为 <a href="https://loveofpeach.github.io/posts/aae04aa8.html">计算机组成原理笔记</a> 页面内容太多了，会把平板手机卡崩，故需要迁移一部分内容到新的文章。</p><h2 id="主存储器与-CPU-的连接"><a href="#主存储器与-CPU-的连接" class="headerlink" title="主存储器与 CPU 的连接"></a>主存储器与 CPU 的连接</h2><div class="row"><iframe src="https://drive.google.com/file/d/1BWTx3WuHkZi5HVfQCjAEdpgcvdYsOPQG/preview" style="width:100%; height:550px"></iframe></div><h2 id="双端口-RAM-和多模块存储器"><a href="#双端口-RAM-和多模块存储器" class="headerlink" title="双端口 RAM 和多模块存储器"></a>双端口 RAM 和多模块存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1mS5W_kXsHYv4HzKXw1bvLb4fopaJr4SC/preview" style="width:100%; height:550px"></iframe></div><h2 id="磁盘存储器"><a href="#磁盘存储器" class="headerlink" title="磁盘存储器"></a>磁盘存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1qgxBUYVMg0lM0AhSG59-OhbPeb48rKRu/preview" style="width:100%; height:550px"></iframe></div><h2 id="固态硬盘SSD"><a href="#固态硬盘SSD" class="headerlink" title="固态硬盘SSD"></a>固态硬盘SSD</h2><div class="row"><iframe src="https://drive.google.com/file/d/1B5SUZXO2_WQ3MTK4H-Q6mOUrd6cDL_2r/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache的基本概念和原理"><a href="#Cache的基本概念和原理" class="headerlink" title="Cache的基本概念和原理"></a>Cache的基本概念和原理</h2><div class="row"><iframe src="https://drive.google.com/file/d/1rvS6lf3WPzXW_5hmpkYPdjcm8hJ_G4jD/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache和主存的映射方式"><a href="#Cache和主存的映射方式" class="headerlink" title="Cache和主存的映射方式"></a>Cache和主存的映射方式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1SY1xcgw2cOMOQk6kCgm8_WlYJu1heQEP/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache替换算法"><a href="#Cache替换算法" class="headerlink" title="Cache替换算法"></a>Cache替换算法</h2><div class="row"><iframe src="https://drive.google.com/file/d/13Hg5u2orlNqmmng84XNqhVpSWQ5nJ51i/preview" style="width:100%; height:550px"></iframe></div><h2 id="Cache写策略"><a href="#Cache写策略" class="headerlink" title="Cache写策略"></a>Cache写策略</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Wk5Z7auWNqxuXbQB1btoNkEUzGGC9I_c/preview" style="width:100%; height:550px"></iframe></div><h2 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a>页式存储</h2><div class="row"><iframe src="https://drive.google.com/file/d/137WPNTx58o9FGx_EszOrEpDtLyXwzcEG/preview" style="width:100%; height:550px"></iframe></div><h2 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h2><div class="row"><iframe src="https://drive.google.com/file/d/1zBuqftRjNMsWyTuufPXMAjoEa5LHkgYF/preview" style="width:100%; height:550px"></iframe></div><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1JVn83ZOEKRO_SLa6w2wx8UHTPGOlplwX/preview" style="width:100%; height:550px"></iframe></div><h2 id="拓展操作码指令格式"><a href="#拓展操作码指令格式" class="headerlink" title="拓展操作码指令格式"></a>拓展操作码指令格式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1hLkg2BpR69raxxC-neaOnqtzS_B4_tGV/preview" style="width:100%; height:550px"></iframe></div><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/1yiOMO0JGQk65hQcRaZl9c-uPpQr2GI_t/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/174_mKKWe0tHTwdDJrB81YfYNIrNydla7/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址2-偏移寻址"><a href="#数据寻址2-偏移寻址" class="headerlink" title="数据寻址2_偏移寻址"></a>数据寻址2_偏移寻址</h2><div class="row"><iframe src="https://drive.google.com/file/d/1M3eYizAc5-u3ZG6ebwnsy7dAmicFvvrm/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据寻址3-堆栈寻址"><a href="#数据寻址3-堆栈寻址" class="headerlink" title="数据寻址3_堆栈寻址"></a>数据寻址3_堆栈寻址</h2><p><img src="https://bu.dusays.com/2024/03/24/6600343b427af.jpg" alt="4.2_4_数据寻址3_堆栈寻址-1.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343ba41cb.jpg" alt="4.2_4_数据寻址3_堆栈寻址-2.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bc15d8.jpg" alt="4.2_4_数据寻址3_堆栈寻址-3.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bcdb3b.jpg" alt="4.2_4_数据寻址3_堆栈寻址-4.jpg"></p><p><img src="https://bu.dusays.com/2024/03/24/6600343bc899b.jpg" alt="4.2_4_数据寻址3_堆栈寻址-5.jpg"></p><h2 id="高级语言与机器级代码之间的对应"><a href="#高级语言与机器级代码之间的对应" class="headerlink" title="高级语言与机器级代码之间的对应"></a>高级语言与机器级代码之间的对应</h2><div class="row"><iframe src="https://drive.google.com/file/d/10gUeyOGBntKlpobW8bDlkTQCCOmqsFZj/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要：因为 &lt;a href=&quot;https://loveofpeach.github.io/posts/aae04aa8.html&quot;&gt;计算机组成原理笔记&lt;/a&gt; 页面内容太多了，会把平板手机卡崩，故需要迁移一部分内容到新的文章。&lt;/p&gt;
&lt;h2 id=&quot;主存储器与-CPU</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计组" scheme="https://loveofpeach.github.io/tags/%E8%AE%A1%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库应试笔记</title>
    <link href="https://loveofpeach.github.io/posts/3beded87.html"/>
    <id>https://loveofpeach.github.io/posts/3beded87.html</id>
    <published>2024-02-28T15:48:20.000Z</published>
    <updated>2024-04-03T12:46:40.091Z</updated>
    
    <content type="html"><![CDATA[<p>大意了，没有闪。</p><p>之前学习的数据库偏实践，还不足以应付考试。</p><p>另外应该是能进复试的。</p><p><img src="https://bu.dusays.com/2024/02/28/65df581912988.gif" alt="67-1.gif"></p><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><div class="row"><iframe src="https://drive.google.com/file/d/1MgKC66v1yFREuq8J9-ZNsv2sw7nBug5n/preview" style="width:100%; height:550px"></iframe></div><h2 id="关系模型、关系代数"><a href="#关系模型、关系代数" class="headerlink" title="关系模型、关系代数"></a>关系模型、关系代数</h2><div class="row"><iframe src="https://drive.google.com/file/d/1T0zobWPekLkp-Meae_NZfCVm4f9ysnuM/preview" style="width:100%; height:550px"></iframe></div><h2 id="关系代数的形式定义"><a href="#关系代数的形式定义" class="headerlink" title="关系代数的形式定义"></a>关系代数的形式定义</h2><div class="row"><iframe src="https://drive.google.com/file/d/1fQdEWNRhrZ2jRcscnzKz3ynzPH60Hyqy/preview" style="width:100%; height:550px"></iframe></div><p>订正：PDF 的最后，教材上的答案没有疏漏，是我看不仔细。⋈符号下面没有东西，则默认为自然连接。</p><h2 id="函数依赖及范式"><a href="#函数依赖及范式" class="headerlink" title="函数依赖及范式"></a>函数依赖及范式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1lWuvR8Jq0V0peF1rKsqzmcB1RqIb75Yx/preview" style="width:100%; height:550px"></iframe></div><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><iframe  id="ppt"  width="100%"  onload="autoChange()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214404&authkey=!AK_wSBOdDiSxrVg&em=2"  frameborder="0"></iframe><script>  function autoChange() {    let ifm = document.getElementById("ppt");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><h2 id="存储过程和触发器"><a href="#存储过程和触发器" class="headerlink" title="存储过程和触发器"></a>存储过程和触发器</h2><iframe  id="ppt2"  width="100%"  onload="autoChange2()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214405&authkey=!AJBmC8YOG80Huj8&em=2"  frameborder="0"></iframe><script>  function autoChange2() {    let ifm = document.getElementById("ppt2");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>sqlserver有存储过程的概念，mysql有吗</p><p><strong>答：</strong><br>是的，MySQL也有存储过程的概念，类似于SQL Server。存储过程是一组经过预编译并存储在数据库中的SQL语句，它们可以被视为一种数据库对象。存储过程可以接受参数、执行SQL查询、包含条件逻辑和循环，还可以在应用程序和数据库之间提供更高的安全性和性能。</p><p>在MySQL中，你可以使用<code>CREATE PROCEDURE</code>语句来定义存储过程。存储过程的创建和调用与其他关系型数据库系统中的类似。</p><p>一个简单的MySQL存储过程创建示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sample_procedure()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 存储过程的SQL语句</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>要调用存储过程，可以使用<code>CALL</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sample_procedure();</span><br></pre></td></tr></table></figure><p>这是一个简单的例子，实际上，存储过程可以包含更复杂的逻辑和多个SQL语句。</p><p><strong>问：</strong><br>上面的代码中，DELIMITER 是什么</p><p><strong>答：</strong><br>在MySQL中，<code>DELIMITER</code>是一个指令，用于更改语句的结束符。默认情况下，MySQL使用分号<code>;</code>作为语句的结束符。但是，在存储过程和触发器等复合语句中，会包含多个SQL语句，因此需要使用<code>DELIMITER</code>来更改结束符，以便正确解析整个存储过程或触发器的定义。</p><p>在上面的例子中，<code>DELIMITER //</code> 表示将语句结束符更改为双斜杠<code>//</code>。这样，在存储过程的定义中，就可以使用分号作为每个SQL语句的结束符，而不会导致MySQL在存储过程体中认为分号是语句结束。</p><p><code>DELIMITER ;</code>表示将结束符还原为默认的分号。这样，后续的SQL语句在执行时将再次使用分号作为结束符。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>接下来验证上述 AIGC ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">procedure</span> my_procedure()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> my_procedure();</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>介绍一下sqlserver的触发器机制</p><p><strong>答：</strong><br>在 SQL Server 中，触发器是一种特殊类型的存储过程，它会在数据库表上的特定事件（例如插入、更新或删除操作）发生时自动执行。触发器允许开发者在数据库中实现某些自动化的行为，无需手动触发。以下是 SQL Server 触发器的一般特性：</p><ol><li><strong>事件触发：</strong> 触发器与特定的数据库表相关联，并在该表上的特定事件（INSERT、UPDATE、DELETE）发生时被触发。</li><li><strong>逐行操作：</strong> 触发器通常逐行操作，即对每一行的变化都触发一次，以执行相关的逻辑。</li><li><strong>分为两类：</strong> SQL Server 触发器分为两类：AFTER触发器（在触发事件之后执行）和INSTEAD OF触发器（代替触发事件的默认行为执行）。</li><li><strong>多事件支持：</strong> 一个表可以拥有多个触发器，每个触发器关联到表的不同事件，如INSERT、UPDATE、DELETE。</li><li><strong>嵌套触发器：</strong> 触发器可以是嵌套的，即一个触发器的执行可以导致另一个触发器的调用。</li><li><strong>引用关键字：</strong> 触发器可以使用<code>INSERTED</code>和<code>DELETED</code>虚拟表，这些表包含了由触发事件引起的行的新值和旧值。</li></ol><p>一个简单的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> example_trigger</span><br><span class="line"><span class="keyword">ON</span> your_table</span><br><span class="line">AFTER <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 触发器逻辑，可以引用 INSERTED 和 DELETED 表</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_table</code>表上的任何插入、更新或删除后触发，允许你执行相应的逻辑。触发器提供了一种有效的方法，通过在数据库引擎级别执行代码，对表上的事件作出响应。</p><p><strong>问：</strong><br>详细介绍一下sqlserver 的INSTEAD OF触发器</p><p><strong>答：</strong><br>在 SQL Server 中，<code>INSTEAD OF</code>触发器是一种特殊类型的触发器，与<code>AFTER</code>和<code>BEFORE</code>触发器不同，它不是在触发事件之前或之后执行，而是代替触发事件的默认行为执行。主要应用于视图上的INSERT、UPDATE、DELETE等操作，允许自定义逻辑来替代默认的数据操作行为。</p><p>以下是<code>INSTEAD OF</code>触发器的主要特性：</p><ol><li><p><strong>替代默认操作：</strong><code>INSTEAD OF</code>触发器允许在触发事件发生时代替默认的数据操作行为，例如，替代视图上的INSERT、UPDATE、DELETE操作。</p></li><li><p><strong>对视图的支持：</strong> 通常，<code>INSTEAD OF</code>触发器常用于与视图关联的表，以允许在视图上执行的数据修改操作。</p></li><li><p><strong>自定义逻辑：</strong> 可以在<code>INSTEAD OF</code>触发器中包含自定义的逻辑，例如插入、更新、删除数据之前的验证、转换等。</p></li><li><p><strong>使用<code>INSERTED</code>和<code>DELETED</code>：</strong> 与<code>AFTER</code>和<code>BEFORE</code>触发器类似，<code>INSTEAD OF</code>触发器也可以使用<code>INSERTED</code>和<code>DELETED</code>虚拟表来引用新插入和被删除的数据。</p></li></ol><p>一个简单的<code>INSTEAD OF</code>触发器的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> instead_of_trigger</span><br><span class="line"><span class="keyword">ON</span> your_view</span><br><span class="line">INSTEAD <span class="keyword">OF</span> <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 自定义逻辑，替代默认的数据操作</span></span><br><span class="line">    <span class="comment">-- 使用 INSERTED 表引用新插入的数据</span></span><br><span class="line">    <span class="comment">-- 使用 DELETED 表引用被删除的数据</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_view</code>视图上的插入、更新或删除操作时执行，允许你根据需要完全自定义数据修改的行为。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p><br></p><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>介绍一下mysql的触发器机制</p><p><strong>答：</strong><br>MySQL的触发器（Triggers）是与表相关联的一种特殊的存储过程，它会在表上的特定事件（INSERT、UPDATE、DELETE）发生时自动执行。以下是MySQL触发器的一般特性：</p><ol><li><p><strong>事件触发：</strong> 触发器与特定表关联，并在表上的特定事件发生时被触发，例如INSERT、UPDATE、DELETE。</p></li><li><p><strong>逐行操作：</strong> 触发器通常逐行操作，即对每一行的变化都触发一次，执行相关的逻辑。</p></li><li><p><strong>BEFORE和AFTER触发器：</strong> MySQL支持BEFORE和AFTER触发器。BEFORE触发器在触发事件执行之前执行，而AFTER触发器在触发事件执行之后执行。</p></li><li><p><strong>OLD和NEW别名：</strong> 触发器可以使用OLD和NEW别名引用旧值和新值。比如，在UPDATE触发器中，OLD表示原始值，NEW表示更新后的值。</p></li><li><p><strong>多事件支持：</strong> 一个表可以有多个触发器，每个触发器可以关联到表的不同事件。</p></li><li><p><strong>不支持INSTEAD OF触发器：</strong> 不像某些数据库系统（如SQL Server），MySQL不支持INSTEAD OF触发器。MySQL中的BEFORE触发器在事件发生前执行，AFTER触发器在事件发生后执行。</p></li></ol><p>一个简单的MySQL触发器的创建示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> example_trigger</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> your_table</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- 触发器逻辑，可以使用NEW别名引用新插入的行</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此触发器在<code>your_table</code>表上的任何插入后触发，允许你执行相关的逻辑。触发器提供了在数据库引擎级别执行代码以响应表上事件的手段。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>下面放一个很长的例子，演示 mysql 的触发器。</p><p>设计一个触发器，当在member表中插入或更新记录时，自动将math列的值限制在0到100之间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> math   <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> e_date <span class="operator">|</span> datetime    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> triggers;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="comment">-- 创建 BEFORE INSERT 触发器</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_insert_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     IF NEW.math <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> (NEW.math <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">OR</span> NEW.math <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;Math score must be between 0 and 100&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="comment">-- 创建 BEFORE UPDATE 触发器</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_update_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="keyword">member</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     IF NEW.math <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> (NEW.math <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">OR</span> NEW.math <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;Math score must be between 0 and 100&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span>; </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ;</span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, math) <span class="keyword">values</span> (<span class="number">9</span>, <span class="string">&#x27;nozomi&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, math) <span class="keyword">values</span> (<span class="number">10</span>, <span class="string">&#x27;xiangling&#x27;</span>, <span class="number">150</span>);</span><br><span class="line">ERROR <span class="number">1644</span> (<span class="number">45000</span>): Math score must be <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">80</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> math <span class="operator">=</span> <span class="number">70</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">member</span> <span class="keyword">set</span> math <span class="operator">=</span> <span class="number">101</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">ERROR <span class="number">1644</span> (<span class="number">45000</span>): Math score must be <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>FOR EACH ROW</code>：</p><blockquote><p>在MySQL触发器中，FOR EACH ROW 是用来指定触发器的执行频率的一部分。这个短语表示触发器将逐行执行，即对每一行受到影响的行执行一次触发器的逻辑。<br>请注意，FOR EACH ROW 在 MySQL 触发器中是一个必需的元素，因为 MySQL 触发器默认就是逐行执行的，因此在触发器定义中省略这个短语是允许的。</p></blockquote><h2 id="行业黑话"><a href="#行业黑话" class="headerlink" title="行业黑话"></a>行业黑话</h2><center><font color="red">- - - - - AIGC - - - - -</font></center><p><strong>问：</strong><br>什么是数据库的数据模型和概念模型</p><p><strong>答：</strong><br>数据库的数据模型是描述数据组织、存储和操作方式的抽象表示，常见的数据模型包括关系型、面向对象、层次型等。概念模型则是用户对数据库中信息的认知和理解，通常以实体-关系图等方式展现，有助于沟通数据库设计的概念和结构。</p><p><strong>问：</strong><br>数据库系统的三级模式结构是什么</p><p><strong>答：</strong><br>数据库系统的三级模式结构包括：</p><ol><li><strong>外部模式（视图层）</strong>： 这一层描述了用户或应用程序所看到的数据视图，即用户如何看待和访问数据。每个用户可能有自己的外部模式，以满足其特定需求。</li><li><strong>概念模式（逻辑层）</strong>： 这是整个数据库的逻辑结构，描述了数据之间的关系、约束和完整性规则。概念模式是整个数据库的逻辑模型，是数据库管理员和数据库设计者关注的层次。</li><li><strong>内部模式（物理层）</strong>： 内部模式描述了数据在存储介质上的实际存储方式和存储结构，涉及到物理存储的细节，如存储引擎、索引等。通常，数据库管理系统（DBMS）负责处理内部模式的实现和管理。</li></ol><p>这三个层次的模式结构有助于实现数据的抽象和独立性，使用户和应用程序能够更方便地使用数据库系统，而不必关心底层的物理实现。</p><p><strong>问：</strong><br>什么是数据库的两级映像功能</p><p><strong>答：</strong><br>数据库的两级映像功能通常指外部模式与概念模式之间的映像和概念模式与内部模式之间的映像，这体现了数据库系统的数据独立性。</p><ol><li><strong>外部模式与概念模式的映像</strong>： 外部模式是用户或应用程序看到的数据视图，而概念模式是整个数据库的逻辑结构。两者之间的映像确保了用户可以通过其定义的外部模式访问数据库，而不受数据库内部结构的影响。这提供了逻辑数据独立性，允许数据库管理员对数据库的概念模式进行调整，而不影响用户的应用程序。</li><li><strong>概念模式与内部模式的映像</strong>： 概念模式是逻辑层次上的数据库结构，而内部模式涉及数据在物理存储上的具体实现。映像功能确保了对数据库的逻辑设计变更不会对物理存储产生负面影响，从而提供了物理数据独立性。这使得数据库管理员能够优化内部存储结构，而不影响用户和应用程序的逻辑视图。</li></ol><p>这两级映像功能带来了数据独立性，使数据库系统更加灵活、可维护，并减少了对数据库结构变更的影响。</p><p><strong>问：</strong><br>什么是数据库的视图？</p><p><strong>答：</strong><br>数据库的视图是一种虚拟表，它是由一个或多个基本表的列组成的查询结果。视图是数据库中的一种逻辑结构，而不是实际存储数据的表。通过视图，用户可以定义一个虚拟表，该表包含特定条件下的数据，而不需要实际创建物理表。</p><p>主要作用包括：</p><ol><li>简化数据访问： 视图允许用户以更简单、更易理解的方式访问数据，通过隐藏表的复杂性，只暴露出用户感兴趣的部分数据。</li><li>控制数据访问： 视图可以限制用户对数据的访问，只暴露他们需要的信息，从而提高数据库的安全性和隐私性。</li><li>简化查询： 可以通过视图将复杂的查询逻辑封装起来，用户只需直接查询视图而不必关心底层的表结构和连接。</li><li>提高数据独立性： 视图可以作为概念模式与外部模式之间的桥梁，使数据库系统更具弹性，可以更轻松地调整表结构而不影响用户的数据访问。</li></ol><p>总的来说，数据库的视图提供了一种抽象层，使用户能够以更方便、安全的方式访问和操作数据。</p><p><strong>问：</strong><br><code>select * from customer cross join order_table;</code>我可以理解为这句创建了一个视图吗</p><p><strong>答：</strong><br>不完全正确。这SQL查询语句是一个交叉连接（cross join）操作，它返回两个表（customer 和 order_table）的所有可能的组合，而不考虑它们之间的任何匹配条件。这不是创建视图的语句，而是一个返回结果的查询。</p><p>如果你希望将这个查询的结果保存为一个虚拟表，你可以使用以下语句创建一个视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> your_view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> order_table;</span><br></pre></td></tr></table></figure><p>这样，你就创建了一个名为 your_view_name 的视图，该视图包含了 customer 表和 order_table 表的交叉连接的结果。随后，你可以通过查询这个视图来获取这个结果，就好像查询一个普通的表一样。</p><p>请注意，视图本身并不存储数据，只是一个定义好的查询，每次查询视图时都会动态地生成相应的结果。</p><p><strong>问：</strong><br>上面是mysql的语法吗？如果重启mysql这个视图会消失吗</p><p><strong>答：</strong><br>是的，上述语法是MySQL的语法。在MySQL中，你可以使用CREATE VIEW语句来创建视图。</p><p>关于视图的消失问题，视图是数据库中的元数据（metadata），而不是实际存储数据的地方。因此，当你重启MySQL服务时，已创建的视图不会消失，因为它们的定义存储在数据库中。只有在你显式删除视图或删除整个数据库的情况下，相关的视图才会被移除。</p><p>所以，一般情况下，重启MySQL服务不会导致已创建的视图消失。</p><center><font color="red">- - - - - AIGC END - - - - -</font></center><p>以上 AIGC 已经过实操验证。</p><h2 id="查询处理、查询优化"><a href="#查询处理、查询优化" class="headerlink" title="查询处理、查询优化"></a>查询处理、查询优化</h2><p>查询处理可分为4个阶段：查询分析、查询检查、查询优化、查询执行。</p><p><img src="https://s2.loli.net/2024/03/03/gUzxOPHNK3X4qiR.jpg" alt="67-2.jpg"></p><p>查询检查：<br>对合法的查询语句进行语义检查，即根据数据字典中有关的模式定义检查语句中的数据库对象，如关系名、属性名是否存在和有效。如果是对视图的操作，则要用视图消解方法把对视图的操作转换成对基本表的操作。还要根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查。如果该用户没有相应的访问权限或违反了完整性约束，就拒绝执行该查询。当然，<strong>这时的完整性检查是初步的、静态的检查。</strong>检查通过后便把SQL查询语句转换成内部表示，即等价的<strong>关系代数表达式</strong>。这个过程中要把数据库对象的外部名称转换为内部表示。关系数据库管理系统一般都用<strong>查询树（query tree）</strong>，也称为<strong>语法分析树（syntax tree）</strong>来表示扩展的关系代数表达式。</p><p>查询优化：按照优化的层次一般可将查询优化分为<strong>代数优化</strong>和<strong>物理优化</strong>。</p><p>查询优化的优点在于：用户不必考虑如何写出最好的查询，因为系统可以做得更好。这是因为:</p><ul><li><strong>优化器可以从数据字典中获取许多统计信息</strong>，例如每个关系表中的元组数、关系中每个属性值的分布情况、哪些属性上已经建立了索引等。优化器可以根据这些信息做出正确的估算，选择高效的执行计划，而用户程序则难以获得这些信息。</li><li><strong>若数据库的物理统计信息改变，系统可以自动对查询重新优化，以选择相适应的执行计划</strong>。在非关系系统中则必须重写程序，而重写程序在实际应用中往往是不太可能的。</li><li><strong>优化器可以考虑数百种不同的执行计划</strong>。</li><li><strong>优化器中包括了很多复杂的优化技术</strong>。</li></ul><p>目前关系型数据库管理系统通过某种代价模型计算各种查询执行策略的代价，然后选取代价最小的执行方案。</p><p>集中式数据库中，查询执行开销主要包括：I/O代价、CPU代价、内存开销。在分布式数据库中还有通信代价，即：</p><p>总代价 = I/O代价 + CPU代价 + 内存代价 + 通信代价</p><p>磁盘I/O涉及机械动作，时间比内存操作高几个数量级，因此，计算查询代价时一般用该操作读写的块数作为衡量单位。</p><h2 id="代数优化"><a href="#代数优化" class="headerlink" title="代数优化"></a>代数优化</h2><p>关系代数表达式的等价变换规则：</p><p><img src="https://s2.loli.net/2024/03/03/8RhrvbzSpQuEeL7.jpg" alt="67-3.jpg"></p><p><img src="https://bu.dusays.com/2024/03/03/65e46bd7b9b77.jpg" alt="67-4.jpg"></p><p>对查询树进行代数优化：</p><div class="row"><iframe src="https://drive.google.com/file/d/150B0pTWhkJntlpLD5YdM-idpTlMzT5HS/preview" style="width:100%; height:550px"></iframe></div><h2 id="模式分解、Armstrong公理系统"><a href="#模式分解、Armstrong公理系统" class="headerlink" title="模式分解、Armstrong公理系统"></a>模式分解、Armstrong公理系统</h2><p>这部分内容和实践有些脱节。而且就应试的目的来说，模式分解很多时候凭着直觉就行了。很后悔花了大力气去学一个包装精致、难以理解的形式系统。</p><div class="row"><iframe src="https://drive.google.com/file/d/1_n7I3HeXoajgyAq29FiX2XNFiI_Ki7dq/preview" style="width:100%; height:550px"></iframe></div><h2 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据库的安全性：保护数据库，防止非法使用造成的数据泄露、更改、破坏。</p><p>数据库的不安全因素：</p><ul><li><strong>非授权用户对数据库的恶意存取和破坏。</strong>数据库管理系统提供的安全措施主要包括<strong>用户身份鉴别</strong>、<strong>存取控制</strong>和<strong>视图</strong>等技术。</li><li><strong>数据库中重要或敏感的数据被泄露。</strong>数据库管理系统提供的主要技术有<strong>强制存取控制</strong>、<strong>数据加密存储</strong>和<strong>加密传输</strong>等。此外，在安全性要求较高的部门提供审计功能，通过分析审计日志，可以对潜在的威胁提前采取措施加以防范，对非授权用户的入侵行为及信息破坏情况能够进行跟踪，防止对数据库安全责任的否认。</li><li><strong>安全环境的脆弱性。</strong>数据库的安全性与计算机系统的安全性，包括计算机硬件、操作系统、网络系统等的安全性是紧密联系的。</li></ul><p>计算机安全技术方面逐步发展了一套可信（trusted）计算机系统的概念和标准。</p><p>计算机以及信息安全技术方面有一系列的安全标准，最有影响的当推 TCSEC 和 CC 这两个标准。</p><p>CC 基本取代了 TCSEC ，成为评估信息产品安全性的主要标准。</p><p>TCSEC/TDI 安全级别划分：</p><table>  <tbody>    <tr>      <td>安全级别</td>      <td>定义</td>    </tr>    <tr>      <td>A1</td>      <td>验证设计(verified design)</td>    </tr>    <tr>      <td>B3</td>      <td>安全域(security domains)</td>    </tr>    <tr>      <td>B2</td>      <td>结构化保护(structural protection)</td>    </tr>    <tr>      <td>B1</td>      <td>标记安全保护(labeled security protection)</td>    </tr>    <tr>      <td>C2</td>      <td>受控的存取保护(controlled access protection)</td>    </tr>    <tr>      <td>C1</td>      <td>自主安全保护(discretionary security protection)</td>    </tr>    <tr>      <td>D</td>      <td>最小保护(minimal protection)</td>    </tr>  </tbody>  <colgroup>    <col>    <col>  </colgroup></table><p>与数据库有关的安全性，主要包括<strong>用户身份鉴别</strong>、<strong>多层存取控制</strong>、<strong>审计</strong>、<strong>视图</strong>和<strong>数据加密</strong>等安全技术。</p><p><img src="https://bu.dusays.com/2024/03/05/65e70d81534d5.jpg" alt="67-5.jpg"></p><p>上图是数据库安全保护的存取控制流程。<br>首先，数据库管理系统对提出 SQL 访问请求的数据库用户进行身份鉴别，防止不可信用户使用系统；然后，在 SQL 处理层进行自主存取控制和强制存取控制，进一步还可以进行推理控制。为监控恶意访问，可根据具体安全需求配置审计规则，对用户访问行为和系统关键操作进行审计。通过设置简单入侵检测规则，对异常用户行为进行检测和处理。在数据存储层，数据库管理系统不仅存放用户数据，还存储与安全有关的标记和信息(称为安全数据)，提供存储加密功能等。</p><h3 id="用户身份鉴别"><a href="#用户身份鉴别" class="headerlink" title="用户身份鉴别"></a>用户身份鉴别</h3><p>方法：<strong>静态口令鉴别</strong><br>当前常用的鉴别方法。静态口令一般由用户自己设定，这些口令是静态不变的。这种方式虽然<strong>简单</strong>，但<strong>容易被攻击，安全性较低</strong>。数据库管理系统会从口令的复杂度，口令的管理、存储及传输等多方面来保障口令的安全可靠。</p><p>方法：<strong>动态口令鉴别</strong><br>目前较为安全的鉴别方式。这种方式的口令是动态变化的，每次鉴别时均需使用动态产生的新口令登录数据库管理系统，即采用一次一密的方法。常用的方式如<strong>短信密码</strong>和<strong>动态令牌</strong>方式，每次鉴别时要求用户使用通过短信或令牌等途径获取的新口令登录数据库管理系统。与静态口令鉴别相比，这种认证方式增加了口令被窃取或破解的难度，安全性相对高一些。</p><p>方法：<strong>生物特征鉴别</strong><br>它是一种通过生物特征进行认证的技术，其中，生物特征是指生物体唯一具有的，可测量、识别和验证的稳定生物特征，如指纹、虹膜和掌纹等。这种方式通过采用图像处理和模式识别等技术实现了基于生物特征的认证，与传统的口令鉴别相比，无疑产生了质的飞跃，安全性较高。</p><p>方法：<strong>智能卡鉴别</strong><br>智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能。智能卡由用户随身携带，登录数据库管理系统时用户将智能卡插入专用的读卡器进行身份验证。由于每次从智能卡中读取的数据是静态的，通过内存扫描或网络监听等技术还是可能截取到用户的身份验证信息，存在安全隐患。因此，实际应用中一般采用个人身份识别码（PIN）和智能卡相结合的方式。这样，即使PIN或智能卡中有一种被窃取，用户身份仍不会被冒充。</p><h3 id="存取控制"><a href="#存取控制" class="headerlink" title="存取控制"></a>存取控制</h3><p>存取控制机制主要包括<strong>定义用户权限</strong>和<strong>合法权限检查</strong>两部分。</p><ol><li>定义用户权限，并将用户权限登记到数据字典中<ul><li>数据库管理系统必须提供适当的语言来定义用户权限，这些定义经过编译后存储在数据字典中，被称做安全规则或授权规则。</li></ul></li><li>合法权限检查<ul><li>每当用户发出存取数据库的操作请求后（请求一般应包括操作类型、操作对象和操作用户等信息），数据库管理系统查找数据字典，根据安全规则进行合法权限检查，若用户的操作请求超出了定义的权限，系统将拒绝执行此操作。</li><li><strong>定义用户权限</strong>和<strong>合法权限检查机制</strong>一起组成了数据库管理系统的<strong>存取控制子系统</strong>。</li></ul></li></ol><p>C2 级的数据库管理系统支持自主存取控制（Discretionary Access Control, DAC），B1 级的数据库管理系统支持强制存取控制（Mandatory Access Control, MAC）。</p><p>在<strong>自主存取控制</strong>方法中，用户对于不同的数据库对象有不同的存取权限，不同的用户对同一对象也有不同的权限，而且用户还可将其拥有的存取权限转授给其他用户。因此自主存取控制非常灵活。</p><p>在<strong>强制存取控制</strong>方法中，每一个数据库对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。强制存取控制因此相对比较严格。</p><h3 id="自主存取控制"><a href="#自主存取控制" class="headerlink" title="自主存取控制"></a>自主存取控制</h3><p>大型数据库管理系统都支持自主存取控制，SQL标准也对自主存取控制提供支持，这主要通过SQL的 GRANT 语句和 REVOKE 语句来实现。</p><p>用户权限由两个要素组成：<strong>数据库对象</strong>和<strong>操作类型</strong>。在数据库系统中，定义存取权限称为授权（authorization）。</p><p>在非关系系统中，用户只能对数据进行操作，存取控制的数据库对象也仅限于数据本身。</p><p>在关系数据库系统中，存取控制的对象不仅有数据本身（基本表中的数据、属性列上的数据），还有数据库模式（包括数据库、基本表、视图和索引的创建等）。</p><h3 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h3><p>数据库角色是被命名的一组与数据库操作相关的权限，<strong>角色是权限的集合</strong>。因此，可以为一组具有相同权限的用户创建一个角色，使用角色来管理数据库权限可以简化授权的过程。</p><p>在SQL中首先用CREATE ROLE语句创建角色，然后用 GRANT 语句给角色授权，用 REVOKE 语句收回授予角色的权限。</p><h3 id="强制存取控制"><a href="#强制存取控制" class="headerlink" title="强制存取控制"></a>强制存取控制</h3><p>强制存取控制适用于那些对数据有严格而固定密级分类的部门，例如军事部门或政府部门。强制存取控制不为用户直接感知、控制。</p><p>在强制存取控制中，数据库管理系统所管理的全部实体被分为<strong>主体</strong>和<strong>客体</strong>。</p><p>主体是系统中的活动实体，既包括数据库管理系统所管理的实际用户，也包括代表用户的各进程。客体是系统中的被动实体，是受主体操纵的，包括文件、基本表、索引、视图等。对于主体和客体，数据库管理系统为它们每个实例（值）指派一个敏感度标记（label）。</p><p>敏感度标记被分成若干级别，例如绝密（Top Secret，TS）、机密（Secret，S）、可信（Confidential，C）、公开（Public，P）等。密级的次序是 TS&gt;=S&gt;=C&gt;=P 。主体的敏感度标记称为许可证级别（clearance level），客体的敏感度标记称为密级（classification level）。强制存取控制机制就是通过对比主体的敏感度标记和客体的敏感度标记，最终确定主体是否能够存取客体。</p><p>当某一用户（或某一主体）以标记label注册入系统时，系统要求他对任何客体的存取必须遵循如下规则：</p><ol><li>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。</li><li>仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体。</li></ol><p>规则(1)的意义是明显的，而规则(2)需要解释一下。按照规则(2)，用户可以为写入的数据对象赋予高于自己的许可证级别的密级。这样一旦数据被写入，该用户自己也不能再读该数据对象了。<strong>如果违反了规则(2)，就有可能把数据的密级从高流向低，造成数据的泄漏。</strong>例如，某个TS密级的主体把一个密级为TS的数据恶意地降低为P，然后把它写回。这样原来是TS密级的数据大家都可以读到了，造成了TS密级数据的泄漏。</p><p><img src="https://s2.loli.net/2024/03/05/os9mgOTFERUrKWS.jpg" alt="67-6.jpg"></p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><p>封锁协议（locking protocol）：约定的一些规则，如何时申请 X 锁或 S 锁、持锁时间、何时释放等。</p><p><strong>一级封锁协议</strong>：事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK）。解决了<strong>丢失修改（脏写）</strong>的问题。</p><p><strong>二级封锁协议</strong>：在一级封锁协议基础上增加事务T在读取数据R之前必须先对其加S锁，读完后即可释放S锁。解决了<strong>脏读</strong>问题。</p><p><strong>三级封锁协议</strong>：在一级封锁协议的基础上增加事务T在读取数据R之前必须先对其加S锁，直到事务结束才释放。解决了<strong>不可重复读</strong>、<strong>幻读</strong>的问题。</p><p><strong>活锁</strong>：<br>如果事务 T1 封锁了数据 R，事务 T2 又请求封锁 R，于是 T2 等待；T3 也请求封锁 R，当 T1 释放了 R 上的封锁之后系统首先批准了 T3 的请求，T2 仍然等待；然后 T4 又请求封锁 R，当 T3 释放了 R 上的封锁之后系统又批准了 T4 的请求…… T2 有可能永远等待，这就是活锁的情形，如图11.5(a)所示。</p><p><img src="https://bu.dusays.com/2024/03/06/65e86b56c4307.jpg" alt="67-7.jpg"></p><p><strong>避免活锁的简单方法是采用先来先服务的策略</strong>。</p><p><strong>死锁</strong>：<br>如果事务 T1 封锁了数据 R1，T2 封锁了数据 R2，然后 T1 又请求封锁 R2，因 T2 已封锁了 R2，于是 T1 等待 T2 释放 R2 上的锁；接着 T2 又申请封锁 R1，因 T1 已封锁了 R1，T2 也只能等待 T1 释放 R1 上的锁。这样就出现了 T1 在等待 T2，而 T2 又在等待 T1 的局面，T1 和 T2 两个事务永远不能结束，形成死锁。如图11.5(b)所示。</p><p>OS 中广为采用的预防死锁策略不适合数据库，因此数据库在死锁问题上普遍采用<strong>诊断并解除死锁</strong>的方法。</p><p>诊断死锁的方法，有<strong>超时法</strong>、<strong>事务等待图法</strong>。</p><p>超时法：<br>如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。超时法实现简单，但其不足也很明显，一是有可能误判死锁，如事务因为其他原因而使等待时间超过时限，系统会误认为发生了死锁；二是时限若设置得太长，死锁发生后不能及时发现。</p><p><img src="https://s2.loli.net/2024/03/06/MiDNfhdRPV7cAy8.jpg" alt="67-8.jpg"></p><p>事务等待图动态地反映了所有事务的等待情况。并发控制子系统周期性地（比如每隔数秒）生成事务等待图，并进行检测。如果发现图中存在回路，则表示系统中出现了死锁。</p><p>多个事务的并发执行是<strong>正确</strong>的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同，称这种调度策略为<strong>可串行化(serializable)调度</strong>。</p><p>【例】现在有两个事务,分别包含下列操作:<br>事务T1: 读B; A=B+1; 写回A;<br>事务T2: 读A; B=A+1; 写回B。</p><p><img src="https://bu.dusays.com/2024/03/06/65e876fc50f6f.png" alt="67-9.png"></p><p><strong>两段锁协议</strong>指所有事务必须分两个阶段对数据项加锁和解锁：</p><ul><li>在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li></ul><p>“两段”锁的含义是，事务分为两个阶段，<strong>第一阶段是获得封锁，也称为扩展阶段</strong>，在这个阶段，事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁；<strong>第二阶段是释放封锁，也称为收缩阶段</strong>，在这个阶段，事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁。</p><p>可以证明，<strong>若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的。</strong></p><p>事务遵守两段锁协议是<strong>可串行化调度的充分条件</strong>，而不是必要条件。</p><p>两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁。</p><p>在一个系统中同时支持多种封锁粒度供不同的事务选择是比较理想的，这种封锁方法称为<strong>多粒度封锁(multiple granularity locking)</strong>。选择封锁粒度时应该同时考虑封锁开销和并发度两个因素，适当选择封锁粒度以求得最优的效果。<strong>一般说来</strong>，需要处理某个关系的大量元组的事务可以以关系为封锁粒度；需要处理多个关系的大量元组的事务可以以数据库为封锁粒度；而对于一个处理少量元组的用户事务，以元组为封锁粒度就比较合适了。</p><p>下面讨论<strong>多粒度封锁</strong>，首先定义<strong>多粒度树</strong>。多粒度树的根结点是整个数据库，表示最大的数据粒度。叶结点表示最小的数据粒度。</p><p>一个三级粒度树，根结点为数据库，数据库的子结点为关系，关系的子结点为元组。也可以定义4级粒度树，例如数据库、数据分区、数据文件、数据记录。</p><p><strong>多粒度封锁协议</strong>允许多粒度树中的每个结点被独立地加锁。对一个结点加锁意味着这个结点的所有后裔结点也被加以同样类型的锁。因此，在多粒度封锁中一个数据对象可能以两种方式封锁，显式封锁和隐式封锁。</p><p><strong>显式封锁</strong>是应事务的要求直接加到数据对象上的锁；<strong>隐式封锁</strong>是该数据对象没有被独立加锁，是由于其上级结点加锁而使该数据对象加上了锁。</p><p>多粒度封锁方法中，显式封锁和隐式封锁的效果是一样的，因此系统检查封锁冲突时不仅要检查显式封锁还要检查隐式封锁。例如事务T要对关系R1加X锁，系统必须搜索其上级结点数据库、关系R1以及R1的下级结点，即R1中的每一个元组，上下搜索。如果其中某一个数据对象已经加了不相容锁，则T必须等待。</p><p>一般地，对某个数据对象加锁，系统要检查该数据对象上有无显式封锁与之冲突；再检查其所有上级结点，看本事务的显式封锁是否与该数据对象上的隐式封锁（即由于上级结点已加的封锁造成的）冲突；还要检查其所有下级结点，看它们的显式封锁是否与本事务的隐式封锁（将加到下级结点的封锁）冲突。显然，这样的检查方法效率很低。为此人们引进了一种新型锁，称为<strong>意向锁（intention lock）</strong>。</p><p>意向锁的含义是如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁；对任一结点加锁时，必须先对它的上层结点加意向锁。</p><p><strong>意向共享锁（Intent Share Lock，IS锁）</strong>：<br>如果对一个数据对象加IS锁，表示它的后裔结点拟(意向)加S锁。<br>例如，事务T1要对R1中某个元组加S锁，则要首先对关系R1和数据库加IS锁。</p><p><strong>意向排他锁（IntentExclusive Lock， IX 锁）</strong>：<br>如果对一个数据对象加IX锁，表示它的后裔结点拟(意向)加X锁。例如，事务T1要对R1 中某个元组加X锁，则要首先对关系R1 和数据库加IX锁。</p><p><strong>共享意向排他锁（Share Intent Exclusive Lock，SIX锁）</strong>：<br>如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX=S+IX。例如对某个表加SIX锁，则表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）。</p><p><strong>锁的强度</strong>是指它对其他锁的排斥程度。一个事务在申请封锁时以强锁代替弱锁是安全的，反之则不然。</p><p>在具有意向锁的多粒度封锁方法中，任意事务T要对一个数据对象加锁，必须先对它的上层结点加意向锁。申请封锁时应该按自上而下的次序进行，释放封锁时则应该按自下而上的次序进行。</p><p><img src="https://s2.loli.net/2024/03/07/4ynuJ7wVeG2pFsX.jpg" alt="67-10.jpg"></p><p>例如，事务T1要对关系R1加S锁，则要首先对数据库加IS锁。检查数据库和R1是否已加了不相容的锁（X或IX）。不再需要搜索和检查R1中的元组是否加了不相容的锁（X锁）。</p><h2 id="故障与恢复"><a href="#故障与恢复" class="headerlink" title="故障与恢复"></a>故障与恢复</h2><p>故障的种类：</p><ol><li><strong>事务内部的故障</strong><ul><li>有的可以通过事务程序本身发现的。</li><li><strong>事务内部更多的故障是非预期的</strong>，不能由应用程序处理。如运算溢出、并发事务发生死锁而被选中撤销该事务、违反某些完整性限制而被终止等。后续内容中，事务障故仅指这类非预期的故障。</li><li>事务故障意味着事务没有达到预期终点（COMMIT或显式的ROLLBACK），因此，数据库可能处于不正确状态。恢复程序要在不影响其他事务运行的情况下，强行回滚该事务，即撤销该事务已作出的修改，使得该事务好像根本没有启动一样。这类恢复操作称为<strong>事务撤销（UNDO）</strong>。</li></ul></li><li><strong>系统故障</strong><ul><li>系统故障是指造成系统停止运转的任何事件，使得系统要重新启动。例如，特定类型的硬件错误（CPU故障）、操作系统故障、DBMS代码错误、系统断电等。这类故障影响正在运行的所有事务，但不破坏数据库。此时主存内容，尤其是数据库缓冲区（在内存）中的内容都被丢失，所有运行事务都非正常终止。发生系统故障时，一些尚未完成的事务的结果可能已送入物理数据库，从而造成数据库可能处于不正确的状态。为保证数据一致性，需要清除这些事务对数据库的所有修改。</li><li>恢复子系统必须在系统重新启动时让所有非正常终止的事务回滚，强行撤销所有未完成事务。</li><li>另一方面，发生系统故障时，有些已完成的事务可能有一部分甚至全部留在缓冲区，尚未写回到磁盘上的物理数据库中，系统故障使得这些事务对数据库的修改部分或全部丢失，这也会使数据库处于不一致状态，因此应将这些事务已提交的结果重新写入数据库。所以系统重新启动后，恢复子系统除需要撤销所有未完成的事务外，还需要<strong>重做（REDO）</strong>所有已提交的事务，以将数据库真正恢复到一致状态。</li></ul></li><li><strong>介质故障</strong><ul><li>系统故障常称为<strong>软故障（soft crash）</strong>，介质故障称为<strong>硬故障（hard crash）</strong>。硬故障指外存故障，如磁盘损坏、磁头碰撞，瞬时强磁场干扰等。</li></ul></li><li><strong>计算机病毒</strong></li></ol><p>恢复的基本原理：冗余。</p><p>建立冗余数据最常用的技术是<strong>数据转储</strong>和<strong>登记日志文件(logging)</strong>。</p><p>转储十分耗费时间和资源，不能频繁进行。</p><p>转储可分为静态转储和动态转储。</p><p><strong>静态转储</strong>是在系统中无运行事务时进行的转储操作。静态转储简单，但转储必须等待正运行的用户事务结束才能进行。同样，新的事务必须等待转储结束才能执行。</p><p><strong>动态转储</strong>在转储期间允许对数据库存取或修改。必须把转储期间各事务对数据库的修改活动登记下来，建立<strong>日志文件(log file)</strong>。这样，后援副本加上日志文件就能把数据库恢复到某一时刻的正确状态。</p><p>转储还可分为<strong>海量转储</strong>和<strong>增量转储</strong>两种方式。</p><p>综上，数据转储方法可以分为 4 类：<strong>动态海量转储</strong>、<strong>动态增量转储</strong>、<strong>静态海量转储</strong>和<strong>静态增量转储</strong>。</p><p>日志文件主要有两种格式：<strong>以记录为单位的日志文件</strong>和<strong>以数据块为单位的日志文件</strong>。</p><p>对于以记录为单位的日志文件，日志文件中需要登记的内容包括：</p><ul><li>各个事务的开始(BEGIN TRANSACTION)标记</li><li>各个事务的结束(COMMIT或ROLLBACK)标记</li><li>各个事务的所有更新操作。</li></ul><p>这里每个事务的开始标记、每个事务的结束标记和每个更新操作均作为日志文件中的一个<strong>日志记录(log record)</strong>。</p><p>每个日志记录的内容主要包括：</p><ul><li>事务标识(标明是哪个事务)</li><li>操作的类型(插入、删除或修改)</li><li>操作对象(记录内部标识)</li><li>更新前数据的旧值(对插入操作而言,此项为空值)</li><li>更新后数据的新值(对删除操作而言,此项为空值)</li></ul><p>对于以数据块为单位的日志文件，日志记录的内容包括事务标识和被更新的数据块。由于将更新前的整个块和更新后的整个块都放入日志文件中，操作类型和操作对象等信息就不必放入日志记录中了。</p><p>事务故障恢复和系统故障恢复必须用日志文件。</p><p>在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。</p><p>在静态转储方式中也可以建立日志文件，当数据库毁坏后可重新装入后援副本把数据库恢复到转储结束时刻的正确状态，然后利用日志文件把已完成的事务进行重做处理，对故障发生时尚未完成的事务进行撤销处理。</p><p>为保证数据库是可恢复的，登记日志文件时必须遵循两条原则：</p><ul><li>登记的次序严格按并发事务执行的时间次序。</li><li>必须先写日志文件，后写数据库。</li></ul><center><font color="red">- - - - - 事务故障的恢复 - - - - -</font></center><p>事务故障是指事务在运行至正常终止点前被终止，这时恢复子系统应利用日志文件撤销(UNDO)此事务已对数据库进行的修改。事务故障的恢复是由系统自动完成的，对用户是透明的。系统的恢复步骤是:</p><ol><li>反向扫描日志文件(即从最后向前扫描日志文件)，查找该事务的更新操作。</li><li>对该事务的更新操作执行逆操作，即将日志记录中“更新前的值”写入数据库。这样，如果记录中是插入操作，则相当于做删除操作(因此时“更新前的值”为空)；若记录中是删除操作，则做插入操作；若是修改操作，则相当于用修改前值代替修改后值。</li><li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。</li><li>如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。</li></ol><center><font color="red">- - - - - 事务故障的恢复 END - - - - -</font></center><p><br></p><center><font color="red">- - - - - 系统故障的恢复 - - - - -</font></center><p>系统故障造成数据库不一致状态的原因有两个，一是未完成事务对数据库的更新可能已写入数据库，二是已提交事务对数据库的更新可能还留在缓冲区没来得及写入数据库。因此恢复操作就是要撤销故障发生时未完成的事务，重做已完成的事务。</p><p>系统故障的恢复是由系统在重新启动时自动完成的，不需要用户干预。</p><p>系统的恢复步骤是:</p><ol><li>正向扫描日志文件(即从头扫描日志文件)，找出在故障发生前已经提交的事务(这些事务既有BEGIN TRANSACTION记录，也有COMMIT记录)，将其事务标识记入重做队列(REDO-LIST)。同时找出故障发生时尚未完成的事务(这些事务只有 BEGIN TRANSACTION 记录，无相应的 COMMIT 记录)，将其事务标识记入撤销队列(UNDO-LIST).</li><li>对撤销队列中的各个事务进行撤销(UNDO)处理。进行撤销处理的方法是，反向扫描日志文件，对每个撤销事务的更新操作执行逆操作，即将日志记录中“更新前的值”写入数据库。</li><li>对重做队列中的各个事务进行重做处理。进行重做处理的方法是:正向扫描日志文件，对每个重做事务重新执行日志文件登记的操作，即将日志记录中“更新后的值”写入数据库。</li></ol><center><font color="red">- - - - - 系统故障的恢复 END - - - - -</font></center><p><br></p><center><font color="red">- - - - - 介质故障的恢复 - - - - -</font></center><p>发生介质故障后，磁盘上的物理数据和日志文件被破坏，这是最严重的一种故障，恢复方法是重装数据库，然后重做已完成的事务。</p><ol><li>装入最新的数据库后备副本(离故障发生时刻最近的转储副本)，使数据库恢复到最近一次转储时的一致性状态。对于动态转储的数据库副本，还需同时装入转储开始时刻的日志文件副本，利用恢复系统故障的方法(即REDO+UNDO)，才能将数据库恢复到一致性状态。</li><li>装入相应的日志文件副本(转储结束时刻的日志文件副本)，重做已完成的事务。即首先扫描日志文件，找出故障发生时已提交的事务的标识，将其记入重做队列；然后正向扫描日志文件，对重做队列中的所有事务进行重做处理。即将日志记录中“更新后的值”写入数据库。</li></ol><p>介质故障的恢复需要数据库管理员介入，但数据库管理员只需要重装最近转储的数据库副本和有关的各日志文件副本，然后执行系统提供的恢复命令即可，具体的恢复操作仍由数据库管理系统完成。</p><center><font color="red">- - - - - 介质故障的恢复 END - - - - -</font></center><p>利用日志技术进行数据库恢复时，恢复子系统必须搜索日志，确定哪些事务需要重做，哪些事务需要撤销。一般来说，需要检查所有日志记录。这样做有两个问题，一是搜索整个日志将耗费大量的时间，二是很多需要重做处理的事务实际上已经将它们的更新操作结果写到了数据库中，然而恢复子系统又重新执行了这些操作，浪费了大量时间。为了解决这些问题，又发展了具有检查点的恢复技术。这种技术在日志文件中增加一类新的记录——<strong>检查点(checkpoint)</strong>记录，增加一个重新开始文件，并让恢复子系统在登录日志文件期间动态地维护日志。</p><p>检查点记录的内容包括:</p><ul><li>建立检查点时刻所有正在执行的事务清单。</li><li>这些事务最近一个日志记录的地址。</li></ul><p>重新开始文件用来记录各个检查点记录在日志文件中的地址。图10.3说明了建立检查点Ci时对应的日志文件和重新开始文件。</p><p><img src="https://bu.dusays.com/2024/03/09/65eb4e38c648c.png" alt="67-11.png"></p><p>在上图中，检查点处的数据库是合法状态。若不然，则可以通过“这些事务最近一个日志记录的地址”达到合法状态。</p><p>动态维护日志文件的方法是，周期性地执行建立检查点、保存数据库状态的操作。具体步骤是：</p><ol><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上。</li><li>在日志文件中写入一个检查点记录。</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中。</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件。恢复子系统可以定期或不定期地建立检查点，保存数据库状态。检查点可以按照预定的一个时间间隔建立，如每隔一小时建立一个检查点;也可以按照某种规则建立检查点，如日志文件已写满一半建立一个检查点。</li></ol><p><strong>使用检查点方法可以改善恢复效率</strong>。当事务T在一个检查点之前提交，T对数据库所做的修改一定都已写入数据库，写入时间是在这个检查点建立之前或在这个检查点建立之时。这样，在进行恢复处理时，没有必要对事务T执行重做操作。</p><p>系统出现故障时，恢复子系统将根据事务的不同状态采取不同的恢复策略：</p><p><img src="https://s2.loli.net/2024/03/09/onHGLfsqVixYRjv.jpg" alt="67-12.jpg"></p><p>T3和T5在故障发生时还未完成，所以予以撤销；T2和T4在检查点之后才提交，它们对数据库所做的修改在故障发生时可能还在缓冲区中，尚未写入数据库，所以要重做；T1在检查点之前已提交，所以不必执行重做操作。</p><p><strong>系统使用检查点方法进行恢复的步骤是：</strong></p><ol><li>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录。</li><li>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST。这里建立两个事务队列:<ul><li>UNDO-LIST: 需要执行UNDO操作的事务集合</li><li>REDO-LIST: 需要执行REDO操作的事务集合<br>把 ACTIVE-LIST 暂时放入 UNDO-LIST 队列，REDO 队列暂为空。</li></ul></li><li>从检查点开始正向扫描日志文件。<ul><li>如有新开始的事务Ti,把Ti暂时放入UNDO-LIST队列;</li><li>如有提交的事务Tj,把Tj从UNDO-LIST队列移到REDO-LIST队列；直到日志文件结束。</li></ul></li><li>对UNDO-LIST中的每个事务执行UNDO操作，对REDO-LIST中的每个事务执行REDO操作。</li></ol><p>数据库镜像：</p><p><img src="https://bu.dusays.com/2024/03/09/65eb5ee8071d9.jpg" alt="67-13.jpg"></p><h2 id="数据库的实施与维护"><a href="#数据库的实施与维护" class="headerlink" title="数据库的实施与维护"></a>数据库的实施与维护</h2><p>数据库应用程序的设计应该与数据库设计同时进行，因此在组织数据入库的同时还要调试应用程序。</p><p>在原有系统的数据有一小部分已输入数据库后，就可以开始对数据库系统进行联合调试了，这又称为数据库的<strong>试运行</strong>。</p><p>这一阶段要实际运行数据库应用程序，执行对数据库的各种操作，测试应用程序的功能是否满足设计要求。如果不满足，对应用程序部分则要修改、调整，直到达到设计要求为止。</p><p>在数据库试运行时，还要测试系统的性能指标，分析其是否达到设计目标。</p><p>这里特别要强调两点。第一，上面已经讲到组织数据入库是十分费时、费力的事，如果试运行后还要修改数据库的设计，还要重新组织数据入库。因此应分期分批地组织数据入库，<strong>先输入小批量数据做调试用，待试运行基本合格后再大批量输入数据，逐步增加数据量，逐步完成运行评价。</strong>第二，在数据库试运行阶段，由于系统还不稳定，硬、软件故障随时都可能发生；而系统的操作人员对新系统还不熟悉，误操作也不可避免，因此要<strong>做好数据库的转储和恢复工作</strong>。一旦故障发生，能使数据库尽快恢复，尽量减少对数据库的破坏。</p><p>在运行阶段，数据库的维护工作主要包括以下几方面：</p><ol><li><strong>数据库的转储和恢复</strong>：数据库管理员要针对不同的应用要求制定不同的转储计划。</li><li><strong>数据库的安全性、完整性控制</strong></li><li><strong>数据库性能的监督、分析和改造</strong></li><li><strong>数据库的重组织与重构造</strong><br>数据库运行一段时间后，由于记录不断增、删、改，将会使数据库的物理存储情况变坏，降低数据的存取效率，使数据库性能下降，这时数据库管理员就要对数据库进行重组织或部分重组织(只对频繁增、删的表进行重组织)。关系数据库管理系统一般都提供数据重组织用的实用程序。在重组织的过程中，按原设计要求重新安排存储位置、回收垃圾、减少指针链等，提高系统性能。<br><strong>数据库的重组织并不修改原设计的逻辑和物理结构，而数据库的重构造则不同，它是指部分修改数据库的模式和内模式。</strong><br>由于数据库应用环境发生变化，增加了新的应用或新的实体，取消了某些应用，有的实体与实体间的联系也发生了变化等，使原有的数据库设计不能满足新的需求，需要调整数据库的模式和内模式。例如，在表中增加或删除某些数据项，改变数据项的类型，增加或删除某个表，改变数据库的容量，增加或删除某些索引等。当然数据库的重构也是有限的，只能做部分修改。如果应用变化太大，重构也无济于事，说明此数据库应用系统的生命周期已经结束，应该设计新的数据库应用系统了。</li></ol><h2 id="了解内容"><a href="#了解内容" class="headerlink" title="了解内容"></a>了解内容</h2><h3 id="面向对象数据库模型"><a href="#面向对象数据库模型" class="headerlink" title="面向对象数据库模型"></a>面向对象数据库模型</h3><p>一系列面向对象核心概念构成了<strong>面向对象数据模型(Object Oriented Data Model，OO模型)</strong>的基础，主要包括以下一些概念:</p><ol><li>现实世界中的任何事物都被建模为对象。每个对象具有一个唯一的对象标识(OID)。</li><li>对象是其状态和行为的封装，其中状态是对象属性值的集合，行为是变更对象状态的方法集合。</li><li>具有相同属性和方法的对象的全体构成了类，类中的对象称为类的实例。</li><li>类的属性的定义域也可以是类，从而构成了类的复合。类具有继承性，一个类可以继承另一个类的属性与方法，被继承类和继承类也称为超类和子类。类与类之间的复合与继承关系形成了一个有向无环图，称为类层次。</li><li>对象是被封装起来的，它的状态和行为在对象外部不可见，从外部只能通过对象显式定义的消息传递对对象进行操作。</li></ol><h3 id="分布式数据库系统"><a href="#分布式数据库系统" class="headerlink" title="分布式数据库系统"></a>分布式数据库系统</h3><p>分布式数据库系统是在集中式数据库系统和计算机网络的基础上发展起来的，它是分布式数据处理的关键技术之一。分布式数据库由一组数据组成，这组数据分布在计算机网络的不同计算机上，网络中的每个结点具有独立处理的能力(称为<strong>场地自治</strong>)，可以执行局部应用。同时，每个结点也能通过网络通信系统执行全局应用。</p><p>这个定义强调了分布式数据库系统的<strong>场地自治性</strong>以及<strong>自治场地之间的协作性</strong>。这就是说，每个场地是独立的数据库系统，它有自己的数据库、自己的用户、自己的服务器，运行自己的DBMS，执行局部应用，具有高度的自治性。同时各个场地的数据库系统又相互协作组成一个整体。<strong>这种整体性的含义是，对于用户来说，一个分布式数据库系统逻辑上看如同一个集中式数据库系统一样，用户可以在任何一个场地执行全局应用。</strong></p><p>因此，分布式数据库系统不是简单地把集中式数据库连网就能实现的。分布式数据库系统具有自己的性质和特征。集中式数据库的许多概念和技术，如数据独立性、数据共享和数据冗余、并发控制、完整性、安全性和恢复等，在分布式数据库系统中都有了新的更加丰富的内容。</p><p>分布式数据库系统的<strong>本地自治性(local autonomy)</strong>是指局部场地的数据库系统可以自已决定本地数据库的设计、使用以及与其他节点的数据库系统的通信。分布式数据库系统的<strong>分布透明性(distributed transparency)</strong>是指分布式数据库管理系统将数据的分布封装起来，<strong>用户访问分布式数据库就像与集中式数据库打交道一样</strong>，不必知道也不必关心数据的存放和操作位置等细节。</p><p>分布式数据库系统在集中式数据库系统的组成基础上增加了三个部分: DDBMS、全局字典和分布目录、网络访问进程。全局字典和分布目录为DDBMS提供了数据定位的元信息，网络访问进程使用高级协议来执行局部站点和分布式数据库之间的通信。</p><h2 id="应试练习"><a href="#应试练习" class="headerlink" title="应试练习"></a>应试练习</h2><div class="row"><iframe src="https://drive.google.com/file/d/1wtxl_PD1cNFLSYNnSvMXSn2Q0noS9OW1/preview" style="width:100%; height:550px"></iframe></div><p>在上面的练习中，发现一类复杂的 SQL 查询可以转化成类似下面的便于理解的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">member</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span> math <span class="operator">|</span> e_date              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span> March7th   <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Natasha    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> silverwolf <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> xiaomei    <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> lumine     <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>   <span class="number">61</span> <span class="operator">|</span> <span class="number">1999</span><span class="number">-10</span><span class="number">-10</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> huohuo     <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>   <span class="number">71</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> ai         <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Kafka      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>   <span class="number">99</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> nozomi     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+------+------+---------------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(age), age, <span class="built_in">avg</span>(math) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age) <span class="keyword">as</span> c;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(age) <span class="operator">|</span> age  <span class="operator">|</span> <span class="built_in">avg</span>(math) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>        <span class="number">71</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span>      <span class="number">80.5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span>        <span class="number">59</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span>        <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+-----------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> tmpcntage <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(age) <span class="keyword">as</span> tmpcntage, age, <span class="built_in">avg</span>(math) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">group</span> <span class="keyword">by</span> age) <span class="keyword">as</span> c;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> tmpcntage <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>数据库我卷卷卷：</p><div class="row"><iframe src="https://drive.google.com/file/d/1m7x-SzMYKug1a-NEMGOwN8-RTToCXf8w/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大意了，没有闪。&lt;/p&gt;
&lt;p&gt;之前学习的数据库偏实践，还不足以应付考试。&lt;/p&gt;
&lt;p&gt;另外应该是能进复试的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bu.dusays.com/2024/02/28/65df581912988.gif&quot; alt=&quot;67-1.g</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="MySQL" scheme="https://loveofpeach.github.io/tags/MySQL/"/>
    
    <category term="关系代数" scheme="https://loveofpeach.github.io/tags/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/"/>
    
    <category term="SQLServer" scheme="https://loveofpeach.github.io/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>CppNote3</title>
    <link href="https://loveofpeach.github.io/posts/555ef888.html"/>
    <id>https://loveofpeach.github.io/posts/555ef888.html</id>
    <published>2024-02-19T16:13:11.000Z</published>
    <updated>2024-04-30T06:04:40.457Z</updated>
    
    <content type="html"><![CDATA[<p>前情提要： <a href="https://loveofpeach.github.io/posts/2249c81f.html">CppNote2</a></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类对象与其他类型的转换：</p><ul><li>由其他类型向自定义类型转换，一般称为<strong>隐式转换</strong></li><li>由自定义类型向其他类型转换</li></ul><p>由自定义类型向其他类型转换是由<strong>类型转换函数</strong>完成的，这是一个特殊的成员函数。形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> 目标类型()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由自定义类型向其他类型转换的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> dreal = <span class="number">0</span>, <span class="type">double</span> dimag = <span class="number">0</span>)</span><br><span class="line">    :_dreal(dreal), _dimag(dimag) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Complex(double = 0, double = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Complex</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _dreal;</span><br><span class="line">    <span class="type">double</span> _dimag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Complex&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; rhs._dreal &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; rhs._dimag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;point(int = 0, int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">point</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;point(const point&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix + iy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">Complex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(ix, iy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs)&#123;</span><br><span class="line">    os &lt;&lt; rhs.ix &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; rhs.iy &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt4</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt4 = &quot;</span> &lt;&lt; pt4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ix = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ix = &quot;</span> &lt;&lt; ix &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> dx = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;dx = &quot;</span> &lt;&lt; dx &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Complex cx = pt4;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;cx = &quot;</span> &lt;&lt; cx &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">pt4 = 4 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ix = 9</span></span><br><span class="line"><span class="comment">dx = 9</span></span><br><span class="line"><span class="comment">Complex(double = 0, double = 0)</span></span><br><span class="line"><span class="comment">cx = 4 + 5i</span></span><br><span class="line"><span class="comment">~Complex()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>一个类可以写在另一个类中，即<strong>嵌套类</strong>，又称<strong>内部类</strong>。</p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">    :_pt1(x1, y1), _pt2(x2, y2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Line(int, int, int, int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Line</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Line()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        _pt1.<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; ---&gt; &quot;</span>;</span><br><span class="line">        _pt2.<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">point</span>(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>):<span class="built_in">ix</span>(x),<span class="built_in">iy</span>(y) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;point(int = 0, int = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                      &lt;&lt; iy ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">point</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> ix;</span><br><span class="line">        <span class="type">int</span> iy;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    point _pt1;</span><br><span class="line">    point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Line <span class="title">line</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;line = &quot;</span>;</span><br><span class="line">    line.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">point(int = 0, int = 0)</span></span><br><span class="line"><span class="comment">Line(int, int, int, int)</span></span><br><span class="line"><span class="comment">line = 1 2 ---&gt; 3 4</span></span><br><span class="line"><span class="comment">~Line()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="设计模式-Pimpl"><a href="#设计模式-Pimpl" class="headerlink" title="设计模式 Pimpl"></a>设计模式 Pimpl</h3><p>通过一个私有的成员指针，隐藏指针所指向类的内部实现。该设计模式有以下优点：</p><ul><li>提高编译速度</li><li>信息隐藏</li><li>减小编译依赖，以小代价平滑升级库文件</li><li>接口与实现解耦</li><li>移动语义友好</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Line.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line">    ~<span class="built_in">Line</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLine</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LineImpl</span>; <span class="comment">//类的前向声明</span></span><br><span class="line">    LineImple* _pimpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Line.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Line.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>::LineImpl &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LineImpl</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLineImpl</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Point</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>): _x(x), _y(y) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> _x;</span><br><span class="line">        <span class="type">int</span> _y;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Point _pt1;</span><br><span class="line">    Point _pt2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Line::LineImpl::<span class="built_in">LineImpl</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">                        : _pt1(x1, y1) ,_pt2(x2, y2) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> Line::LineImpl::<span class="built_in">printLineImpl</span>() <span class="type">const</span> &#123;</span><br><span class="line">    _pt1.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ---&gt; &quot;</span>;</span><br><span class="line">    _pt2.<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span><br><span class="line">          : _pimpl(<span class="keyword">new</span> <span class="built_in">LineImpl</span>(x1, y1, x2, y2)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Line::~<span class="built_in">Line</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> _pimpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Line::printLine</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    pimpl-&gt;<span class="built_in">printLineImpl</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存泄露的检测"><a href="#内存泄露的检测" class="headerlink" title="内存泄露的检测"></a>内存泄露的检测</h2><p>安装内存泄露检测工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install valgrind</span><br></pre></td></tr></table></figure><p>写一段有泄露的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 terminal 中使用工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ testtmp.cc -o <span class="built_in">test</span> -g</span><br><span class="line">wanko@wanko:~/mycode$ <span class="built_in">ls</span></span><br><span class="line">a.out  exam_log4cpp   example_reids  guoba.py  testtmp</span><br><span class="line">dict   example_mysql  for.sh         <span class="built_in">test</span>      testtmp.cc</span><br><span class="line">wanko@wanko:~/mycode$ valgrind --tool=memcheck --leak-check=full ./test</span><br><span class="line">==84862== Memcheck, a memory error detector</span><br><span class="line">==84862== Copyright (C) 2002-2017, and GNU GPL<span class="string">&#x27;d, by Julian Seward et al.</span></span><br><span class="line"><span class="string">==84862== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span></span><br><span class="line"><span class="string">==84862== Command: ./test</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==84862==     in use at exit: 4 bytes in 1 blocks</span></span><br><span class="line"><span class="string">==84862==   total heap usage: 2 allocs, 1 frees, 72,708 bytes allocated</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1</span></span><br><span class="line"><span class="string">==84862==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class="line"><span class="string">==84862==    by 0x10915E: main (testtmp.cc:2)</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== LEAK SUMMARY:</span></span><br><span class="line"><span class="string">==84862==    definitely lost: 4 bytes in 1 blocks</span></span><br><span class="line"><span class="string">==84862==    indirectly lost: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==      possibly lost: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==    still reachable: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862==         suppressed: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==84862== </span></span><br><span class="line"><span class="string">==84862== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class="line"><span class="string">==84862== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure><p>再写一段没有泄露的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">delete</span> pInt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则工具输出为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode$ g++ tmptest.cc -o <span class="built_in">test</span> -g</span><br><span class="line">wanko@wanko:~/mycode$ <span class="built_in">ls</span></span><br><span class="line">dict          example_mysql  for.sh    <span class="built_in">test</span></span><br><span class="line">exam_log4cpp  example_reids  guoba.py  tmptest.cc</span><br><span class="line">wanko@wanko:~/mycode$ valgrind --tool=memcheck --leak-check=full ./test</span><br><span class="line">==90126== Memcheck, a memory error detector</span><br><span class="line">==90126== Copyright (C) 2002-2017, and GNU GPL<span class="string">&#x27;d, by Julian Seward et al.</span></span><br><span class="line"><span class="string">==90126== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</span></span><br><span class="line"><span class="string">==90126== Command: ./test</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==90126==     in use at exit: 0 bytes in 0 blocks</span></span><br><span class="line"><span class="string">==90126==   total heap usage: 2 allocs, 2 frees, 72,708 bytes allocated</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== All heap blocks were freed -- no leaks are possible</span></span><br><span class="line"><span class="string">==90126== </span></span><br><span class="line"><span class="string">==90126== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class="line"><span class="string">==90126== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure><h2 id="单例模式的自动释放"><a href="#单例模式的自动释放" class="headerlink" title="单例模式的自动释放"></a>单例模式的自动释放</h2><h3 id="使用友元形式进行设计"><a href="#使用友元形式进行设计" class="headerlink" title="使用友元形式进行设计"></a>使用友元形式进行设计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">AutoRelease</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(A::_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> A::_ptmp;</span><br><span class="line">        A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    AutoRelease ar;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x563e22a51eb0</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="内部类加静态数据成员形式"><a href="#内部类加静态数据成员形式" class="headerlink" title="内部类加静态数据成员形式"></a>内部类加静态数据成员形式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">delete</span> _ptmp;</span><br><span class="line">            _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">    <span class="type">static</span> AutoRelease _ar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">A::AutoRelease A::_ar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x5572fd4e72c0</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="atexit方式"><a href="#atexit方式" class="headerlink" title="atexit方式"></a>atexit方式</h3><p>首先了解一下<code>atexit()</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;begin main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">atexit</span>(func);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;end main...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">begin main...</span></span><br><span class="line"><span class="comment">end main...</span></span><br><span class="line"><span class="comment">void func()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>atexit()</code>函数会注册给定函数类型（参数是 void，返回类型是 void），注册的函数在进程正常结束的时候被调用。函数注册几次就会执行几次。</p><p>那么可以考虑使用该函数进行单例模式的自动释放：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">            <span class="built_in">atexit</span>(destroy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x563474c77eb0</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在之前的代码中，若处于多线程环境，可能会创建不止一个实例，违背单例模式的初衷。因此可以采用 atexit + 饿汉模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">            <span class="built_in">atexit</span>(destroy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void destory()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="built_in">myCreateObj</span>(); <span class="comment">// 饿汉模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x560be12b7eb0</span></span><br><span class="line"><span class="comment">void destory()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="pthread-once-形式"><a href="#pthread-once-形式" class="headerlink" title="pthread_once 形式"></a>pthread_once 形式</h3><p><code>pthread_once</code>函数：在多线程编程环境下，由<code>pthread_once()</code>指定的函数执行且仅执行一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> A* <span class="title">myCreateObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">pthread_once</span>(&amp;_once, init);</span><br><span class="line">        <span class="keyword">return</span> _ptmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        _ptmp = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">        <span class="built_in">atexit</span>(destroy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void destory()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_ptmp == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> _ptmp;</span><br><span class="line">        _ptmp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> A* _ptmp;</span><br><span class="line">    <span class="type">static</span> <span class="type">pthread_once_t</span> _once;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_ptmp = <span class="built_in">myCreateObj</span>(); <span class="comment">// 饿汉模式</span></span><br><span class="line"><span class="type">pthread_once_t</span> A::_once = PTHREAD_ONCE_INIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* ps1 = A::<span class="built_in">myCreateObj</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ps1 = &quot;</span> &lt;&lt; ps1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ tmptest.cc -lpthread</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">ps1 = 0x5578fad56eb0</span></span><br><span class="line"><span class="comment">void destory()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码用饿汉模式或是饱汉模式都 OK.</p><p><strong>注意</strong>：上面代码中的<code>&lt;pthread.h&gt;</code>库只能在 linux 下使用。</p><h2 id="string-的底层实现"><a href="#string-的底层实现" class="headerlink" title="string 的底层实现"></a>string 的底层实现</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>三种基本方式：</p><ul><li>Eager Copy（深拷贝）</li><li>COW（写时复制）</li><li>SSO（Short String Optimization 短字符串优化）</li></ul><p><img src="https://s2.loli.net/2024/02/21/a4ZvEIRQKJwtSTf.png" alt="66-1.png"></p><p>COW：只是进行读操作时，浅拷贝；如果需要写操作，再深拷贝。</p><p>写时复制的体现（注意：以下图片是在<strong>较旧的环境</strong>下）：</p><p><img src="https://s2.loli.net/2024/02/21/OcWMwSKpZ9QVeGq.png" alt="66-2.png" title="浅拷贝"></p><p>需要写操作，进行深拷贝：</p><p><img src="https://sway.cloud.microsoft/s/jSZcrgReU4mecpIB/images/hnI4zYyu_dJD2f" alt="66-3"></p><p>注意在较新环境下并不使用写时复制，而是使用 sso .<br>当字符串的长度小于 16 字节时，放在<strong>栈上</strong>。否则放在<strong>堆上</strong>。</p><p>注意以下代码输出结果的地址前几位：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    string s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;helloworldwanko&quot;</span>;</span><br><span class="line">    string s3 = <span class="string">&quot;Welcome to Uptown Berloberg, Hooker.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;pInt = %p\n&quot;</span>, &amp;pInt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pInt = %p\n&quot;</span>, pInt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pInt;</span><br><span class="line">    pInt = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = helloworldwanko</span></span><br><span class="line"><span class="comment">s3 = Welcome to Uptown Berloberg, Hooker.</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x7ffe48ba02b0</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x7ffe48ba02d0</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558f62abaed0</span></span><br><span class="line"><span class="comment">&amp;a = 0x7ffe48ba0294</span></span><br><span class="line"><span class="comment">&amp;pInt = 0x7ffe48ba0298</span></span><br><span class="line"><span class="comment">pInt = 0x558f62abaeb0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通常，一个程序里的字符串大都很短小，而在64位机器上，一个 char* 指针就占用了8个字节，所以 SSO 就出现了。其思想是：发生拷贝时要需复制一个指针，但对小字符串来说，直接复制整个字符串比较划算。实现示意图如下：</p><p><img src="https://s2.loli.net/2024/02/21/c3YB2jeCMdb6nsf.png" alt="66-4.png"></p><p>更多细节参考：</p><div class="row"><iframe src="https://drive.google.com/file/d/1tdKtonD6rRBT-UvWMFHrjSmPrFRpYWf9/preview" style="width:100%; height:550px"></iframe></div><h3 id="实现写时复制"><a href="#实现写时复制" class="headerlink" title="实现写时复制"></a>实现写时复制</h3><p>大致写出写时复制的逻辑。大体思路：</p><p><img src="https://s2.loli.net/2024/02/21/R12D7ptInwiuEBd.png" alt="66-5.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ostream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>():_pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">5</span>]()+<span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* pstr)</span><br><span class="line">    :_pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr)+<span class="number">5</span>]()+<span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">        <span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; rhs):_pstr(rhs._pstr) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">increseRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span> = (<span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String&amp; operator = (const String&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;rhs) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">decreseRefCount</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">getRefCount</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] (_pstr<span class="number">-4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _pstr = rhs._pstr; <span class="comment">// 浅拷贝</span></span><br><span class="line">        <span class="built_in">increseRefCount</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRefCount</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">c_str</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _pstr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CharProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">CharProxy</span>(String&amp; self, <span class="type">size_t</span> idx)</span><br><span class="line">                 : _self(self), _idx(idx) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>&amp; <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>&amp; ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> CharProxy&amp; rhs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        String&amp; _self;</span><br><span class="line">        <span class="type">size_t</span> _idx;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CharProxy <span class="keyword">operator</span> [] (<span class="type">size_t</span> idx) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CharProxy</span>(*<span class="keyword">this</span>, idx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">decreseRefCount</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">getRefCount</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] (_pstr<span class="number">-4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重友元</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String::CharProxy&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>) = <span class="number">1</span>; <span class="comment">// 引用计数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">increseRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++ *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">decreseRefCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        -- *(<span class="type">int</span>*)(_pstr<span class="number">-4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strlen</span>(_pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* _pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr) &#123;</span><br><span class="line">        os &lt;&lt; rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="type">char</span>&amp; String::CharProxy::<span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>&amp; ch) &#123;</span><br><span class="line">    <span class="keyword">if</span>(_idx &gt;= _self.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> charNull = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> charNull;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_self.<span class="built_in">getRefCount</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span>* tmp = <span class="keyword">new</span> <span class="type">char</span>[_self.<span class="built_in">size</span>()+<span class="number">5</span>]()+<span class="number">4</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(tmp, _self._pstr);</span><br><span class="line">        _self.<span class="built_in">decreseRefCount</span>();</span><br><span class="line"></span><br><span class="line">        _self._pstr = tmp;</span><br><span class="line">        _self.<span class="built_in">initRefCount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    _self._pstr[_idx] = ch;  <span class="comment">// 进行写操作</span></span><br><span class="line">    <span class="keyword">return</span> _self._pstr[_idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="type">const</span> String::CharProxy&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; rhs._self._pstr[rhs._idx];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">String <span class="title">s3</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    s3 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;对 s3[0] 执行写操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    s3[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;对 s1[0] 执行读操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1[0] = &quot;</span> &lt;&lt; s1[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.getRefCount = &quot;</span> &lt;&lt; s1.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.getRefCount = &quot;</span> &lt;&lt; s2.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3.getRefCount = &quot;</span> &lt;&lt; s3.<span class="built_in">getRefCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1&#x27; address = %p\n&quot;</span>, s1.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2&#x27; address = %p\n&quot;</span>, s2.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s3&#x27; address = %p\n&quot;</span>, s3.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(const char*)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const String&amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const char*)</span></span><br><span class="line"><span class="comment">s3 = world</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String&amp; operator = (const String&amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 3</span></span><br><span class="line"><span class="comment">s2.getRefCount = 3</span></span><br><span class="line"><span class="comment">s3.getRefCount = 3</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 s3[0] 执行写操作</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = Hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对 s1[0] 执行读操作</span></span><br><span class="line"><span class="comment">s1[0] = h</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment">s3 = Hello</span></span><br><span class="line"><span class="comment">s1.getRefCount = 2</span></span><br><span class="line"><span class="comment">s2.getRefCount = 2</span></span><br><span class="line"><span class="comment">s3.getRefCount = 1</span></span><br><span class="line"><span class="comment">s1&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s2&#x27; address = 0x558bc073aeb4</span></span><br><span class="line"><span class="comment">s3&#x27; address = 0x558bc073b2e4</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>值得一提的是，在使用下标运算符<code>[]</code>时，写时复制要求在 读/写 两种不同的操作下有不同的行为，因此考虑自定义一个新类型，然后重载<code>=</code>和<code>&lt;&lt;</code>。</p><p>这份代码细节拉满，需要细细品味。</p><h2 id="派生类对象的创建与销毁"><a href="#派生类对象的创建与销毁" class="headerlink" title="派生类对象的创建与销毁"></a>派生类对象的创建与销毁</h2><table>  <tbody>    <tr>      <td><strong>继承方式</strong></td>      <td><strong>基类成员访问权限</strong></td>      <td><strong>在派生类中访问权限</strong></td>      <td><strong>派生类对象访问</strong></td>    </tr>    <tr>      <td>公有继承</td>      <td>public<br>protected<br>private</td>      <td>public<br>protected<br>不可直接访问</td>      <td>可直接访问<br>不可直接访问<br>不可直接访问</td>    </tr>    <tr>      <td>保护继承</td>      <td>public<br>protected<br>private</td>      <td>protected<br>protected<br>不可直接访问</td>      <td>不可直接访问</td>    </tr>    <tr>      <td>私有继承</td>      <td>public<br>protected<br>private</td>      <td>private<br>private<br>不可直接访问</td>      <td>不可直接访问</td>    </tr>  </tbody>  <colgroup>    <col>    <col>    <col>    <col>  </colgroup></table><center><font color = red>- - - - - 创建 - - - - -</font></center><p>一、若派生类显式定义构造函数，而基类没有显示定义构造函数，则创建派生类对象时，派生类相应的构造函数会被自动调用，且自动调用基类缺省的无参构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() : _base(<span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">int</span> derived) : _derived(derived) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base()</span></span><br><span class="line"><span class="comment">Derived(int)</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>二、如果派生类没有显式定义构造函数而基类有显示定义构造函数，则基类必须拥有默认构造函数。</p><p>三、如果派生类有构造函数，基类有默认构造函数，则创建派生类的对象时，基类的默认构造函数会自动调用。如果想调用基类的有参构造函数，必须要在派生类构造函数的初始化列表中显示调用基类的有参构造函数。</p><p>四、如果派生类和基类都有构造函数，但基类没有默认的无参构造函数，即基类的构造函数均带有参数，则派生类的每一个构造函数必须在其初始化列表中显示地去调用基类的某个带参的构造函数。</p><center><font color = red>- - - - - 创建END - - - - -</font></center><p><br></p><center><font color = red>- - - - - 销毁 - - - - -</font></center><p>当派生类对象被删除时，派生类的析构函数被执行。析构函数同样不能继承，因此，在执行派生类析构函数时，基类析构函数会被自动调用。执行顺序是先执行派生类的析构函数，再执行基类的析构函数。</p><p>当考虑对象成员时，继承机制下析构函数的调用顺序：</p><ol><li>先调用派生类的析构函数</li><li>再调用派生类中对象成员的析构函数</li><li>最后调用普通基类的析构函数</li></ol><center><font color = red>- - - - - 销毁END - - - - -</font></center><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void A::show() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::display() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">show</span>();</span><br><span class="line">    d.<span class="built_in">display</span>();</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">B()</span></span><br><span class="line"><span class="comment">C()</span></span><br><span class="line"><span class="comment">D()</span></span><br><span class="line"><span class="comment">void A::show() const</span></span><br><span class="line"><span class="comment">void B::display() const</span></span><br><span class="line"><span class="comment">void C::print() const</span></span><br><span class="line"><span class="comment">~D()</span></span><br><span class="line"><span class="comment">~C()</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>多继承下，基类构造函数的执行顺序与其在派生类构造函数初始化列表中的顺序无关，而与基类被继承的顺序有关。</p><h3 id="成员名冲突的二义性"><a href="#成员名冲突的二义性" class="headerlink" title="成员名冲突的二义性"></a>成员名冲突的二义性</h3><p>解决多继承下函数名字冲突的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void A::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::print() const&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">C</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~C()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">D</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~D()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.A::<span class="built_in">print</span>();</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">B()</span></span><br><span class="line"><span class="comment">C()</span></span><br><span class="line"><span class="comment">D()</span></span><br><span class="line"><span class="comment">void A::print() const</span></span><br><span class="line"><span class="comment">void B::print() const</span></span><br><span class="line"><span class="comment">void C::print() const</span></span><br><span class="line"><span class="comment">~D()</span></span><br><span class="line"><span class="comment">~C()</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="菱形继承的二义性"><a href="#菱形继承的二义性" class="headerlink" title="菱形继承的二义性"></a>菱形继承的二义性</h3><p>多基派生中，如果在多条继承路径上有一个共同的基类，如下图所示，不难看出，在D类对象中，会有来自两条不同路径的共同基类（类A）的双重拷贝。</p><p><img src="https://bu.dusays.com/2024/02/23/65d898f824dfd.png" alt="66-6.png"></p><p>菱形继承会导致数据成员的存储二义性，解决方法：使 B 和 C 虚拟继承 A .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面展示问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dummy code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 8</span></span><br><span class="line"><span class="comment">sizeof(C) = 8</span></span><br><span class="line"><span class="comment">sizeof(D) = 16</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面展示解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.B::<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.C::<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 16</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment">sizeof(D) = 24</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面的代码中 sizeof 大小出现变化是由于<strong>虚基指针</strong>。</p><p>或者也可以：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span> lx = <span class="number">0</span>):_lx(lx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;lx = &quot;</span> &lt;&lt; _lx &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">long</span> value)</span> </span>&#123;</span><br><span class="line">        _lx = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _lx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(D) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(D) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    D d;</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    d.<span class="built_in">setVal</span>(<span class="number">23</span>);</span><br><span class="line">    d.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 16</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment">sizeof(D) = 24</span></span><br><span class="line"><span class="comment">A(long = 0)</span></span><br><span class="line"><span class="comment">lx = 0</span></span><br><span class="line"><span class="comment">lx = 23</span></span><br><span class="line"><span class="comment">~A()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>关于虚基指针的图示（转自<a href="https://blog.csdn.net/qq_41431406/article/details/84933450">一颗程序媛0915想上岸</a>）：</p><p><img src="https://bu.dusays.com/2024/04/07/661286c98f852.png" alt="66-6dot1.png"></p><p>若为多继承时，内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612871ee1731.png" alt="66-6dot2.png"></p><p>虚继承的内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612875b08204.png" alt="66-6dot3.png"></p><p>来看另一种情况：</p><p><img src="https://bu.dusays.com/2024/04/07/661288238ec5f.png" alt="66-6dot6.png"></p><p>若为多继承时，内存布局如下：</p><p><img src="https://bu.dusays.com/2024/04/07/6612887a088ec.png" alt="66-6dot7.png"></p><p>虚继承的内存布局如下：<br>第一个vbptr 存放3个数据，因为指针合并，向距离作用域最近的指针内层合并</p><p><img src="https://bu.dusays.com/2024/04/07/661288c356499.png" alt="66-6dot8.png"></p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><p>杂项知识点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, string&gt; aka = &#123;<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; aka.first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; aka.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1   hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="基类与派生类间的转换"><a href="#基类与派生类间的转换" class="headerlink" title="基类与派生类间的转换"></a>基类与派生类间的转换</h2><p>“类型适应”指类型间的关系。“A类适应B类”，意味着 A 类对象能直接用于需要 B 类对象的场合，在这种意义下，<strong>派生类适应基类</strong>，派生类对象适应基类对象，派生类对象的指针和引用也适应基类对象的指针和引用。例如：</p><ul><li>可以把派生类的对象赋值给基类的对象</li><li>可以把基类的引用绑定到派生类的对象</li><li>可以声明基类的指针指向派生类的对象 (向上转型)</li></ul><h2 id="派生类对象间的复制控制"><a href="#派生类对象间的复制控制" class="headerlink" title="派生类对象间的复制控制"></a>派生类对象间的复制控制</h2><p>基类的拷贝构造函数和 operator= 运算符函数不能被继承，因此需要注意:</p><ol><li>如果用户定义了基类的拷贝构造函数，而<strong>没有定义派生类的</strong>拷贝构造函数，那么在用一个派生类对象初始化新的派生类对象时，两对象间的<strong>派生类部分执行缺省</strong>的行为，而两对象间的<strong>基类部分执行用户定义的</strong>基类拷贝构造函数。</li><li>如果用户重载了基类的赋值运算符函数，而<strong>没有重载派生类的</strong>赋值运算符函数，那么在用一个派生类对象给另一个已经存在的派生类对象赋值时，两对象间的<strong>派生类部分执行缺省</strong>的赋值行为，而两对象间的<strong>基类部分执行用户定义的</strong>重载赋值函数。</li><li>如果用户<strong>定义了</strong>派生类的拷贝构造函数或者<strong>重载了</strong>派生类的对象赋值运算符=，则在用已有派生类对象初始化新的派生类对象时，或者在派生类对象间赋值时，将会执行用户定义的派生类的拷贝构造函数或者重载赋值函数，而<strong>不会再自动调用基类的</strong>拷贝构造函数和基类的重载对象赋值运算符，这时，通常需要用户在派生类的拷贝构造函数或者派生类的赋值函数中<strong>显式调用基类的</strong>拷贝构造或赋值运算符函数。</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概念、分类"><a href="#概念、分类" class="headerlink" title="概念、分类"></a>概念、分类</h3><p>多态：对于同一指令，不同对象产生不同行为。</p><p>多态的分类：</p><ul><li>静态多态<ul><li>例如：函数重载、运算符重载、模板</li><li>发生在编译时</li></ul></li><li>动态多态<ul><li>例如：虚函数</li><li>发生在运行时</li></ul></li></ul><p>多态的其他细节例子参考 <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a> .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Base* pb)</span> </span>&#123;</span><br><span class="line">    pb-&gt;<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(&amp;base);</span><br><span class="line">    <span class="built_in">func</span>(&amp;derived);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，sizeof 的大小是虚函数指针的体现。</p><h3 id="虚函数的原理、条件"><a href="#虚函数的原理、条件" class="headerlink" title="虚函数的原理、条件"></a>虚函数的原理、条件</h3><p>虚函数的实现原理：</p><p><img src="https://bu.dusays.com/2024/02/25/65daf6417310d.png" alt="66-7.png"></p><p>虚函数机制的激活条件：</p><ol><li>基类定义虚函数</li><li>派生类重写该虚函数</li><li>创建派生类的对象</li><li>用基类的指针指向（引用绑定）派生类的对象</li><li>使用基类的指针（引用）调用该虚函数</li></ol><p>不能设置为虚函数的函数：</p><ul><li>普通函数（自由函数、全局函数）</li><li>内联成员函数</li><li>静态成员函数</li><li>友元函数（分情况）<ul><li>若该友元函数本身是一个普通函数，则不能被设置为虚函数</li><li>若该友元函数本身是另外一个类的成员函数，则可以被设置为虚函数</li></ul></li><li>构造函数</li></ul><h3 id="虚函数的访问"><a href="#虚函数的访问" class="headerlink" title="虚函数的访问"></a>虚函数的访问</h3><p>一、指针访问</p><p>即上例。</p><p>二、引用访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Base&amp; pb)</span> </span>&#123;</span><br><span class="line">    pb.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(base);</span><br><span class="line">    <span class="built_in">func</span>(derived);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>三、对象访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    base.<span class="built_in">print</span>();</span><br><span class="line">    derived.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意，这里并没有体现出多态。</p><p>和普通函数一样，虚函数一样可以通过对象名来调用，此时编译器采用的是<strong>静态联编</strong>。</p><p>四、成员函数中访问</p><p>例子不难理解，耐心看：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> base = <span class="number">0.0</span>): _base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_base = &quot;</span> &lt;&lt; _base &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Base::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> base = <span class="number">0.0</span>, <span class="type">double</span> derived = <span class="number">0.0</span>)</span><br><span class="line">          : <span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0, double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::_derived = &quot;</span> &lt;&lt; _derived &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Base) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Base) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Derived) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Base <span class="title">base</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="function">Derived <span class="title">derived</span><span class="params">(<span class="number">22.22</span>, <span class="number">33.33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Base* pbase = &amp;base;</span><br><span class="line">    pbase-&gt;<span class="built_in">func1</span>();</span><br><span class="line">    pbase-&gt;<span class="built_in">func2</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    Base* pbase2 = &amp;derived;</span><br><span class="line">    pbase2-&gt;<span class="built_in">func1</span>();</span><br><span class="line">    pbase2-&gt;<span class="built_in">func2</span>();    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(Base) = 16</span></span><br><span class="line"><span class="comment">sizeof(Derived) = 24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Base(double = 0.0)</span></span><br><span class="line"><span class="comment">Derived(double = 0.0, double = 0.0)</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment">Base::_base = 11.11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Derived::_derived = 33.33</span></span><br><span class="line"><span class="comment">Base::_base = 22.22</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>五、构造函数和析构函数中访问</p><p>它们所调用的虚函数是自己类中定义的函数，如果在自己的类中没有实现该函数，则调用的是基类中的虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandpa</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Grandpa</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Grandpa</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Grandpa()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Grandpa::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">    : <span class="keyword">public</span> Grandpa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Father</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">func1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Father</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Father()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">func2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Father::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">    : <span class="keyword">public</span> Father</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Son()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son::func1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son::func2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Grandpa()</span></span><br><span class="line"><span class="comment">Father()</span></span><br><span class="line"><span class="comment">Father::func1()</span></span><br><span class="line"><span class="comment">Son()</span></span><br><span class="line"><span class="comment">~Son()</span></span><br><span class="line"><span class="comment">~Father()</span></span><br><span class="line"><span class="comment">Father::func2()</span></span><br><span class="line"><span class="comment">~Grandpa()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>参见 <a href="https://loveofpeach.github.io/posts/54b4d7a2.html">CppNote</a> .</p><p>构造函数用<code>protected</code>修饰的类，也称为抽象类。</p><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>虽然构造函数不能被定义成虚函数，但<strong>析构函数可以定义为虚函数</strong>，一般来说，如果类中定义了虚函数，析构函数也应被定义为虚析构函数，尤其是类内有申请的动态内存，需要清理和释放的时候。</p><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbase;</span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>~Derived()</code>没有执行，内存泄露。</p><p>可以采用的不优雅的方法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(pbase);</span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另一种方法是，使用虚析构函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">const</span> <span class="type">char</span>* pbase)</span><br><span class="line">        :_pbase(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pbase)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pbase, pbase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Base::_pbase = &quot;</span> &lt;&lt; _pbase &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pbase) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pbase;</span><br><span class="line">            _pbase = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pbase;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">const</span> <span class="type">char</span>* pbase, <span class="type">const</span> <span class="type">char</span>* pderived)</span><br><span class="line">           :<span class="built_in">Base</span>(pbase), _pderived(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pderived)+<span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(const char*, const char*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pderived, pderived);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Derived::_pderived = &quot;</span> &lt;&lt; _pderived &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pderived) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pderived;</span><br><span class="line">            _pderived = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* _pderived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* pbase = <span class="keyword">new</span> <span class="built_in">Derived</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    pbase-&gt;<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pbase;  <span class="comment">// 体现多态</span></span><br><span class="line">    pbase = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(const char*)</span></span><br><span class="line"><span class="comment">Derived(const char*, const char*)</span></span><br><span class="line"><span class="comment">Derived::_pderived = world</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="重载、隐藏、覆盖"><a href="#重载、隐藏、覆盖" class="headerlink" title="重载、隐藏、覆盖"></a>重载、隐藏、覆盖</h2><p>重载：在同一个作用域中，函数的名字相同，但是参数列表不一样（包括参数的个数、参数类型、参数顺序）</p><p>重定义（重写、覆盖）：发生在基类与派生类中，<strong>必须是虚函数</strong>，函数名字相同，参数列表也相同。</p><p>隐藏：发生在基类与派生类中，派生中的函数与基类中的函数<strong>名字相同</strong>。（至于是不是虚函数，至于参数列表是不是一样的没有关系），派生类的数据成员也可以隐藏基类中的同名数据成员。</p><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">double</span> mem = <span class="number">0.0</span>)</span><br><span class="line">    : _member(mem)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base::_member = &quot;</span> &lt;&lt; _member &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> _member;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">double</span> mem = <span class="number">0.0</span>):<span class="built_in">Base</span>(mem)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(double = 0.0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">11.11</span>)</span></span>;</span><br><span class="line">    <span class="comment">// d.print();  // 不ok</span></span><br><span class="line">    d.<span class="built_in">print</span>(<span class="number">1</span>);  <span class="comment">// ok</span></span><br><span class="line">    d.Base::<span class="built_in">print</span>(); <span class="comment">// ok</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚表存在性的验证"><a href="#虚表存在性的验证" class="headerlink" title="虚表存在性的验证"></a>虚表存在性的验证</h2><p>参见 66-7.png</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">long</span> base = <span class="number">0</span>):_base(base) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base(long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Base()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Base::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="type">long</span> base = <span class="number">0</span>, <span class="type">long</span> derived = <span class="number">0</span>)</span><br><span class="line">    :<span class="built_in">Base</span>(base), _derived(derived) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived(long = 0, long = 0)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Derived()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void Derived::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> _derived;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">myDerived</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived 的地址：%p\n&quot;</span>, &amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived 的地址：%p\n&quot;</span>, (<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;虚表的地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pFunc)</span> <span class="params">(<span class="type">void</span>)</span></span>; <span class="comment">// 函数指针</span></span><br><span class="line">    pFunc pf = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    pf = (pFunc)*((<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">pf</span>(); <span class="comment">// 调用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第三个虚函数的入口地址：%p\n&quot;</span>,pf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">Derived <span class="title">myDerived2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived2 的地址：%p\n&quot;</span>, &amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对象 myDerived2 的地址：%p\n&quot;</span>, (<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;虚表的地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个虚函数的入口地址：%p\n&quot;</span>,(<span class="type">long</span>*)*(<span class="type">long</span>*)*(<span class="type">long</span>*)&amp;myDerived2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Base(long = 0)</span></span><br><span class="line"><span class="comment">Derived(long = 0, long = 0)</span></span><br><span class="line"><span class="comment">对象 myDerived 的地址：0x7ffe729314c0</span></span><br><span class="line"><span class="comment">对象 myDerived 的地址：0x7ffe729314c0</span></span><br><span class="line"><span class="comment">虚表的地址：0x55da8aeb5d00</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::f()</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::g()</span></span><br><span class="line"><span class="comment">第二个虚函数的入口地址：0x55da8aeb37b6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void Derived::h()</span></span><br><span class="line"><span class="comment">第三个虚函数的入口地址：0x55da8aeb37f4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Base(long = 0)</span></span><br><span class="line"><span class="comment">Derived(long = 0, long = 0)</span></span><br><span class="line"><span class="comment">对象 myDerived2 的地址：0x7ffe729314e0</span></span><br><span class="line"><span class="comment">对象 myDerived2 的地址：0x7ffe729314e0</span></span><br><span class="line"><span class="comment">虚表的地址：0x55da8aeb5d00</span></span><br><span class="line"><span class="comment">第一个虚函数的入口地址：0x55da8aeb3778</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">~Derived()</span></span><br><span class="line"><span class="comment">~Base()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码可以看出，对于普通单继承，虚表只有一张，位于只读段。</p><h2 id="作业-词频统计"><a href="#作业-词频统计" class="headerlink" title="作业-词频统计"></a>作业-词频统计</h2><p>之前的作业，再用 map 实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::istringstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dictionary</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> string&amp; ifileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">ifs</span><span class="params">(ifileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; ifileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs, line)) &#123;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="function">istringstream <span class="title">iss</span><span class="params">(line)</span></span>;</span><br><span class="line">            <span class="keyword">while</span>(iss &gt;&gt; word) &#123;</span><br><span class="line">                string new_word = <span class="built_in">process_word</span>(word);</span><br><span class="line">                <span class="built_in">updmap</span>(new_word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">store</span><span class="params">(<span class="type">const</span> string&amp; ofileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(ofileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; ofileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = word_cnt.<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; it != word_cnt.<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            ofs &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string,<span class="type">unsigned</span> <span class="type">long</span>&gt; word_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">process_word</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(word[i])) <span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updmap</span><span class="params">(<span class="type">const</span> string&amp; tobeInsert)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tobeInsert == <span class="built_in">string</span>()) <span class="keyword">return</span>;</span><br><span class="line">        word_cnt[tobeInsert] ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dictionary myDic;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;before reading...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">time_t</span> beg = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    myDic.<span class="built_in">readFile</span>(<span class="string">&quot;The_Holy_Bible.txt&quot;</span>);</span><br><span class="line">    <span class="type">time_t</span> end  = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;time : &quot;</span> &lt;&lt; (end - beg) &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;after reading...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    myDic.<span class="built_in">store</span>(<span class="string">&quot;dictMap.dat&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作业-文本查询"><a href="#作业-文本查询" class="headerlink" title="作业-文本查询"></a>作业-文本查询</h2><p>该程序将读取用户指定的任意文本文件【当前目录下的china_daily.txt】，然后允许用户从该文件中查找单词。查询的结果是该单词出现的次数，并列出每次出现所在的行。如果某单词在同一行中多次出现，程序将只显示该行一次。行号按升序显示。</p><p>要求：<br>a、它必须允许用户指明要处理的文件名字。<br>b、程序将存储该文件的内容，以便输出每个单词所在的原始行。<br>c、它必须将每一行分解为各个单词，并记录每个单词所在的所有行。在输出行号时，应保证以升序输出，并且不重复。<br>d、对特定单词的查询将返回出现该单词的所有行的行号。<br>e、输出某单词所在的行文本时，程序必须能根据给定的行号从输入文件中获取相应的行。</p><p>文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">1.Shenzhen-HK stock link &#x27;likely in second quarter&#x27;: UBS</span><br><span class="line"></span><br><span class="line">The Chinese mainland will likely announce the launch of the much-anticipated </span><br><span class="line">stock trading link between the Shenzhen and Hong Kong exchanges in the second </span><br><span class="line">quarter of the year, further opening the mainland&#x27;s stock market to overseas </span><br><span class="line">investors, a senior analyst at UBS Securities said on Wednesday.</span><br><span class="line"></span><br><span class="line">If the link is launched this year, it would mean that about 70 percent of market </span><br><span class="line">capitalization of the A shares will be available to overseas investors who already </span><br><span class="line">gained access to the mainland market through the existing Shanghai-Hong Kong </span><br><span class="line">Stock Connect, said Gao Ting, chief China equities strategist at UBS Securities.</span><br><span class="line"></span><br><span class="line">The link will broaden investors&#x27; stock selection in the mainland as the Shenzhen </span><br><span class="line">market, unlike Shanghai, is home to many high-tech, innovative companies and </span><br><span class="line">private firms with high growth potential, Gao said.</span><br><span class="line"></span><br><span class="line">&quot;The trading link will increase the investment opportunities for overseas investors </span><br><span class="line">in sectors including healthcare, consumption, material and information technology,&quot; </span><br><span class="line">he said at a news conference in Beijing.</span><br><span class="line"></span><br><span class="line">Premier Li Keqiang said in March that the central government will seek to launch the </span><br><span class="line">Shenzhen-Hong Kong Stock Connect this year.</span><br><span class="line"></span><br><span class="line">Bloomberg reported earlier citing people familiar with the matter that the launch </span><br><span class="line">of the trading link may be announced before July. It quoted a spokesman for the </span><br><span class="line">Hong Kong Exchanges &amp; Clearing Ltd as saying that a preparatory period of three to </span><br><span class="line">four months will be needed following the announcement of regulatory approval.</span><br><span class="line"></span><br><span class="line">While overseas investors can already invest in the mainland&#x27;s stock market under the </span><br><span class="line">Qualified Foreign Institutional Investors program, the launch of the Shenzhen-Hong </span><br><span class="line">Kong Stock Connect still holds symbolic significance as it will signal a further</span><br><span class="line"> opening of the capital market, analysts said.</span><br><span class="line"></span><br><span class="line">Zhao Wenli, an analyst at China Merchants Securities (HK) Co Ltd, said in a </span><br><span class="line">research note that good quality and reasonably priced small and mid-cap stocks </span><br><span class="line">under the trading link will attract greater attention from foreign investors.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.Going abroad? Don&#x27;t forget your instant noodles</span><br><span class="line"></span><br><span class="line">Chinese travelers like to take instant noodles with them while travelling abroad, </span><br><span class="line">according to a report by Hong Kong Economic Times.</span><br><span class="line">And the favorite items travelers like to bring with them in their luggage differed </span><br><span class="line">greatly depending on their nationalities, according to a survey conducted by travel </span><br><span class="line">website Lowcost Holidays, which sampled 7,500 travelers from 29 countries and regions.</span><br><span class="line"></span><br><span class="line">Most of the items were edible, partially because travelers want a taste of home </span><br><span class="line">wherever they go, such as kimchi for 55 percent of South Koreans, cheese for 53 </span><br><span class="line">percent of French, coffee for 64 percent of Italians, tea bags for 48 percent of </span><br><span class="line">British, and miso soup (a very popular soup) for 56 percent of Japanese.</span><br><span class="line"></span><br><span class="line">Others choices were somewhat surprising. Sixty-six percent of Belgians brought bath </span><br><span class="line">towels for scrubbing their body, 32 percent of Americans brought toilet paper, </span><br><span class="line">37 percent of Russians packed cards, and 30 percent of Swiss, their Swiss knives.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.Popular eatery&#x27;s duck tastes flight online</span><br><span class="line"></span><br><span class="line">Quanjude, China&#x27;s iconic restaurant chain for original Peking roast duck with a </span><br><span class="line">history since 1864, has embraced the nation&#x27;s &quot;Internet Plus&quot; strategy, with a new </span><br><span class="line">online platform that features duck rolls and about 30 other dishes.</span><br><span class="line">&quot;Internet Plus&quot; has sparked integration of the Internet with traditional industries, </span><br><span class="line">and the food and beverage business has been no exception. In the catering and </span><br><span class="line">dining industry, the past year has witnessed a speedy market increase in online </span><br><span class="line">ordering, delivery and payment.</span><br><span class="line"></span><br><span class="line">&quot;Chinese people say life is all about clothing, eating, housing and traffic. </span><br><span class="line">The Internet has changed all the other three industries before it started to change </span><br><span class="line">dining and catering industry very recently, and Quanjude has been adapting into the new environment to make most out of it,&quot; says Xu Jia, chief accounting officer </span><br><span class="line">with Quanjude and chairman of a new joint-venture company that is pursuing the online takeout and e-commerce market.</span><br><span class="line"></span><br><span class="line">Recently, the State-owned restaurant chain announced in Beijing that it established </span><br><span class="line">the company, Yage Technology Inc, in October 2015 with Chongqing Kuangcao Technology </span><br><span class="line">Inc, an online-service company based in Chongqing.</span><br><span class="line"></span><br><span class="line">&quot;We believe with our time-honored brand image, experienced artisan cooking skills, </span><br><span class="line">detail-oriented service and superb supply chain, we will succeed in this new sector,</span><br><span class="line">&quot; Xu says, &quot;because even in the era of the Internet, what matters most in the </span><br><span class="line">industry is still the food and service.&quot;</span><br><span class="line"></span><br><span class="line">After more than a year&#x27;s research and development, the new company has developed patented </span><br><span class="line">techniques to make high-quality Peking roast duck rolls available for takeout diners, </span><br><span class="line">testing the product in a six-month pilot project in Chongqing.</span><br><span class="line"></span><br><span class="line">Under the brand name Xiaoyage, literally &quot;little duck brother&quot;, the online-ordered </span><br><span class="line">duck rolls are made in Quanjude restaurants, with the same recipe and ingredients </span><br><span class="line">as rolls served in Quanjude restaurants.</span><br><span class="line"></span><br><span class="line">At home or work, diners can reheat the duck rolls to 65 C in six minutes, using </span><br><span class="line">a special bag that generates steam when water is poured on it.</span><br><span class="line"></span><br><span class="line">The takeout duck rolls taste almost the same as those served in a Quanjude restaurant, </span><br><span class="line">according to Yang Aixiang, general manager with Yage Technology.</span><br><span class="line"></span><br><span class="line">The package costs 200 yuan ($31) each, and apart from the duck dish, there are </span><br><span class="line">also more than 30 signature dishes of Quanjude available through online ordering </span><br><span class="line">channels, such as mustard duck feet and spicy sliced duck wings. All can be ordered </span><br><span class="line">through the official WeChat account (xiaoyage222) and the Baidu Takeaway platform.</span><br><span class="line"></span><br><span class="line">Authorities in several municipalities have posed new regulations on speed and route </span><br><span class="line">limits for delivery vehicles, including Beijing, the first and most important market for Quanjude Takeout and e-commerce.</span><br><span class="line"></span><br><span class="line">Yang Xun, a publicist with Baidu Takeout, which handles delivery service of </span><br><span class="line">Quanjude&#x27;s takeout delicacies, says all their deliverymen will obey laws and </span><br><span class="line">regulations to ensure best service for diners, including adjusting routes to </span><br><span class="line">avoid barred roads for delivery vehicles.</span><br></pre></td></tr></table></figure><p>我的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::stringstream;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TextQuery</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> string&amp; filename)</span> </span>&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">ifs</span><span class="params">(filename)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ifs.<span class="built_in">good</span>()) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; filename &lt;&lt; <span class="string">&quot;open filed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string line;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs, line)) &#123;</span><br><span class="line">            idx++;</span><br><span class="line">            _lines.<span class="built_in">push_back</span>(line);</span><br><span class="line">            <span class="function">stringstream <span class="title">ssm</span><span class="params">(line)</span></span>;</span><br><span class="line">            string word;</span><br><span class="line">            <span class="keyword">while</span>(ssm &gt;&gt; word) &#123;</span><br><span class="line">                _word2Numbers[word].<span class="built_in">insert</span>(idx);</span><br><span class="line">                _dict[word]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ifs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;output.dat&quot;</span>)</span></span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;the word &#x27;&quot;</span> &lt;&lt; word &lt;&lt; <span class="string">&quot;&#x27; occurs &quot;</span> &lt;&lt; _dict[word] &lt;&lt; <span class="string">&quot; times.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">auto</span> it = _word2Numbers[word].<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="keyword">for</span>(; it != _word2Numbers[word].<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            ofs &lt;&lt; <span class="string">&quot;(line &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;) &quot;</span> &lt;&lt; _lines[(*it)<span class="number">-1</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; _lines; </span><br><span class="line">    map&lt;string, set&lt;<span class="type">int</span>&gt; &gt; _word2Numbers;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; _dict;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">   TextQuery tq;</span><br><span class="line">   tq.<span class="built_in">readFile</span>(<span class="string">&quot;china_daily.txt&quot;</span>);</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;input the word you want to query: &quot;</span>;</span><br><span class="line">   string queryWord;</span><br><span class="line">   std::cin &gt;&gt; queryWord;</span><br><span class="line">   tq.<span class="built_in">query</span>(queryWord);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">the word &#x27;for&#x27; occurs 14 times.</span><br><span class="line">(line 17) &quot;The trading link will increase the investment opportunities for overseas investors </span><br><span class="line">(line 25) of the trading link may be announced before July. It quoted a spokesman for the </span><br><span class="line">(line 49) wherever they go, such as kimchi for 55 percent of South Koreans, cheese for 53 </span><br><span class="line">(line 50) percent of French, coffee for 64 percent of Italians, tea bags for 48 percent of </span><br><span class="line">(line 51) British, and miso soup (a very popular soup) for 56 percent of Japanese.</span><br><span class="line">(line 54) towels for scrubbing their body, 32 percent of Americans brought toilet paper, </span><br><span class="line">(line 60) Quanjude, China&#x27;s iconic restaurant chain for original Peking roast duck with a </span><br><span class="line">(line 83) techniques to make high-quality Peking roast duck rolls available for takeout diners, </span><br><span class="line">(line 102) limits for delivery vehicles, including Beijing, the first and most important market for Quanjude Takeout and e-commerce.</span><br><span class="line">(line 106) regulations to ensure best service for diners, including adjusting routes to </span><br><span class="line">(line 107) avoid barred roads for delivery vehicles.</span><br></pre></td></tr></table></figure><p>可以用自带的记事本等软件，查找单词，验证结果的正确性。</p><p>注意，这里按照要求，必须是整个单词匹配，而不需要返回仅含有子串的单词。</p><h2 id="多基派生的二义性"><a href="#多基派生的二义性" class="headerlink" title="多基派生的二义性"></a>多基派生的二义性</h2><p>来看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::b()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void A::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void B::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void B::b()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void B::d()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A, <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;virtual void C::a()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::c()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void C::d()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(A) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(B) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(B) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(C) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(C) &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    C c;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    A* pa = &amp;c;</span><br><span class="line">    pa-&gt;<span class="built_in">a</span>();</span><br><span class="line">    pa-&gt;<span class="built_in">b</span>();</span><br><span class="line">    pa-&gt;<span class="built_in">c</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    B* pb = &amp;c;</span><br><span class="line">    pb-&gt;<span class="built_in">a</span>();   <span class="comment">// C::a()</span></span><br><span class="line">    pb-&gt;<span class="built_in">b</span>();   <span class="comment">// B::b()</span></span><br><span class="line">    pb-&gt;<span class="built_in">c</span>();   <span class="comment">// B::c()</span></span><br><span class="line">    pb-&gt;<span class="built_in">d</span>();   <span class="comment">// B::d()</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    C* pc = &amp;c;</span><br><span class="line">    pc-&gt;<span class="built_in">a</span>();</span><br><span class="line">    <span class="comment">// pc-&gt;b();   二义性</span></span><br><span class="line">    pc-&gt;A::<span class="built_in">b</span>();</span><br><span class="line">    pc-&gt;B::<span class="built_in">b</span>();</span><br><span class="line">    pc-&gt;<span class="built_in">c</span>();</span><br><span class="line">    pc-&gt;<span class="built_in">d</span>();  <span class="comment">// 隐藏</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(A) = 8</span></span><br><span class="line"><span class="comment">sizeof(B) = 8</span></span><br><span class="line"><span class="comment">sizeof(C) = 16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void A::b()</span></span><br><span class="line"><span class="comment">void C::c()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void B::b()</span></span><br><span class="line"><span class="comment">void B::c()</span></span><br><span class="line"><span class="comment">void B::d()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual void C::a()</span></span><br><span class="line"><span class="comment">virtual void A::b()</span></span><br><span class="line"><span class="comment">virtual void B::b()</span></span><br><span class="line"><span class="comment">void C::c()</span></span><br><span class="line"><span class="comment">void C::d()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>原理：</p><p><img src="https://s2.loli.net/2024/04/12/ptZ3KCfBejHkiMh.png" alt="66-8.png"></p><h2 id="多态之内存布局"><a href="#多态之内存布局" class="headerlink" title="多态之内存布局"></a>多态之内存布局</h2><iframe  id="ppt"  width="100%"  onload="autoChange()"  src="https://onedrive.live.com/embed?resid=C7419D744EAAFF4C%214407&authkey=!AFPzvDNiv6rVlMY&em=2"  frameborder="0"></iframe><script>  function autoChange() {    let ifm = document.getElementById("ppt");    ifm.height = (ifm.clientWidth / 16) * 9 + 24;  }  window.onresize = autoChange;</script><p>注，参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>()</span><br><span class="line">        : _iBase1(<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base1::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>()</span><br><span class="line">        : _iBase2(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base2::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base3</span>()</span><br><span class="line">        : _iBase3(<span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::g()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base3::h()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iBase3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span></span><br><span class="line">    : <span class="keyword">virtual</span> <span class="keyword">public</span> Base1,</span><br><span class="line">      <span class="keyword">public</span> Base2,</span><br><span class="line">      <span class="keyword">public</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>()</span><br><span class="line">        : _iDerived(<span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::g1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _iDerived;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 23d1</span></span><br></pre></td></tr></table></figure><p>注2，参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(): _ib(<span class="number">10</span>), _cb(<span class="string">&#x27;B&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Bf</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B::Bf()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib;</span><br><span class="line">    <span class="type">char</span> _cb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span></span><br><span class="line">    : <span class="comment">/*virtual*/</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B1</span>(): _ib1(<span class="number">100</span>), _cb1(<span class="string">&#x27;1&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::f1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Bf1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B1::Bf1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib1;</span><br><span class="line">    <span class="type">char</span> _cb1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span></span><br><span class="line">    : <span class="comment">/*virtual*/</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B2</span>(): _ib2(<span class="number">1000</span>), _cb2(<span class="string">&#x27;2&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::f2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">Bf2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B2::Bf2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _ib2;</span><br><span class="line">    <span class="type">char</span> _cb2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span></span><br><span class="line">    : <span class="keyword">public</span> B1,</span><br><span class="line">      <span class="keyword">public</span> B2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="built_in">D</span>(): _id(<span class="number">10000</span>), _cd(<span class="string">&#x27;3&#x27;</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::f2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Df</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::Df()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _id;</span><br><span class="line">    <span class="type">char</span> _cd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在 C++ 中，如果继承链上存在虚继承的基类，则最底层的子类要负责完成该虚基类部分成员的构造。</strong><br>即我们需要显式调用虚基类的构造函数来完成初始化，如果<strong>不显式调用</strong>，则编译器会调用虚基类的<strong>缺省构造函数</strong>，不管初始化列表中次序如何，对虚基类构造函数的调用总是先于普通基类的构造函数。如果虚基类中<strong>没有定义</strong>的缺省构造函数，则会<strong>编译错误</strong>。<strong>因为如果不这样做，虚基类部分会在存在的多个继承链上被多次初始化。</strong>很多时候，对于继承链上的中间类，我们也会在其构造函数中显式调用虚基类的构造函数，因为一旦有人要创建这些中间类的对象，我们要保证它们能够得到正确的初始化。</p><p>对于虚继承的派生类对象的析构，析构函数的调用顺序为：</p><ul><li>先调用派生类的析构函数</li><li>然后调用派生类中成员对象的析构函数</li><li>再调用普通基类的析构函数</li><li><strong>最后调用虚基类的析构函数</strong></li></ul><p>效率分析：</p><p><img src="https://s2.loli.net/2024/04/13/BIVsDT7mptaHUyF.png" alt="66-9.png"></p><h2 id="作业-解析RSS文件"><a href="#作业-解析RSS文件" class="headerlink" title="作业-解析RSS文件"></a>作业-解析RSS文件</h2><p>使用 tinyXml2 解析 RSS 文件，并生成一个网页库<code>pagelib.dat</code>。</p><pre><code>tinyXml2 -- https://github.com/leethomason/tinyxml2rss      -- https://coolshell.cn/feed         -- http://www.runoob.com/rss/rss-tutorial.html</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>使用正则表达式进行过滤。</p><p>rss 文件其实就是一个树形结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rss</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">link</span>&gt;</span>   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">description</span>&gt;</span>   <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">content</span>&gt;</span>   <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">link</span>&gt;</span>   <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">description</span>&gt;</span>   <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">content</span>&gt;</span>   <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考接口:   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RssItem</span></span><br><span class="line">&#123;</span><br><span class="line">    string title;</span><br><span class="line">    string link;</span><br><span class="line">    string description;</span><br><span class="line">    string content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RssReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RssReader</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">parseRss</span><span class="params">()</span></span>;<span class="comment">//解析</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(<span class="type">const</span> string &amp; filename)</span></span>;<span class="comment">//输出</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;RssItem&gt; _rss;</span><br><span class="line"> &#125;;   </span><br></pre></td></tr></table></figure><p>要求：最后生成一个<code>pagelib.txt</code>, 其格式：</p><pre><code>&lt;doc&gt;    &lt;docid&gt;1&lt;/docid&gt;    &lt;title&gt;...&lt;/title&gt;    &lt;link&gt;...&lt;/link&gt;    &lt;description&gt;...&lt;/description&gt;    &lt;content&gt;...&lt;/content&gt;&lt;/doc&gt;&lt;doc&gt;    &lt;docid&gt;2&lt;/docid&gt;    &lt;title&gt;...&lt;/title&gt;    &lt;link&gt;...&lt;/link&gt;    &lt;description&gt;...&lt;/description&gt;    &lt;content&gt;...&lt;/content&gt;&lt;/doc&gt;&lt;doc&gt;  ...&lt;/doc&gt;</code></pre><p>RSS文件解析作业思路：<br>xml —&gt; rss —&gt; tinyxml2(使用该库对rss文件进行解析) —&gt; boost::regex/std::regex (使用正则表达式去除html标签)</p><p>提示：<br>首先去读 coolshell.xml 文件，因为是一个 rss 文件，而我们需要找到 rss 的 channel 节点下面的 item 节点的 title 节点、link 节点中间的文本，至于这些文本可以使用 tinyxml2 这个第三方库进行解析，所以这里需要看看 timyxml2 如何解析第三方库（可以看看 timyxml2 的源码），解析完成一个 item 后，可以将其存到 vector 中（也可以将这些原始信息经过后面正则表达式去除标签后再存起来），然后再去读第二个 item（其实就是一个循环操作），其实第二个 item 是第一个 item 的兄弟节点（可以使用 tinyxml2 里面的函数进行跳转到第二个 item），这样就可以解析 coolshell.xml 文档了。<br>接着，因为 description 信息中包含 html 的标签，所以需要去除这样的 html 标签，如<code>&lt;p&gt;&lt;/p&gt;</code>,这个可以使用正则表达式，也就是 std::regex 进行去除，这个可以在 cppreference 中进行查找使用方法。<br>最后就是遍历 vector，讲读取到的信息存到另外一个文件，格式需要自己定义，使用我们自定义的<code>&lt;doc&gt; &lt;/doc&gt;</code>格式。</p><h3 id="一些方法论"><a href="#一些方法论" class="headerlink" title="一些方法论"></a>一些方法论</h3><p>如何研究一个陌生的第三方代码</p><ol><li>若只要求达到使用标准，善用搜索。</li><li>找源代码。</li><li>查找头文件、实现文件、测试文件。<br><img src="https://bu.dusays.com/2024/04/13/661a89bd63c81.png" alt="66-10.png" title="示例"></li><li>在测试文件中找 main 函数。</li></ol><p>youtube 备份视频：<a href="https://www.youtube.com/watch?v=TJ3WPS3Yflw">初步写码的一些方法论</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>github 地址：<a href="https://github.com/leethomason/tinyxml2">https://github.com/leethomason/tinyxml2</a></p><p>官方文档：<a href="https://leethomason.github.io/tinyxml2/">https://leethomason.github.io/tinyxml2/</a></p><p>首先看下我写的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tinyxml2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::cerr;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tinyxml2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RssItem</span></span><br><span class="line">&#123;</span><br><span class="line">    string title;</span><br><span class="line">    string link;</span><br><span class="line">    string description;</span><br><span class="line">    string content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RssReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RssReader</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Let_Me_See_See</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* _dir)</span> </span>&#123;</span><br><span class="line">        XMLDocument doc;</span><br><span class="line">        doc.<span class="built_in">LoadFile</span>(_dir);</span><br><span class="line">        <span class="keyword">if</span>(doc.<span class="built_in">ErrorID</span>()) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;load file failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XMLElement* myItemElem = doc.<span class="built_in">FirstChildElement</span>(<span class="string">&quot;rss&quot;</span>)</span><br><span class="line">                                  -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;channel&quot;</span>)</span><br><span class="line">                                  -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(myItemElem == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;this xml file is invalid.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">processItem</span>(myItemElem);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(myItemElem-&gt;<span class="built_in">NextSiblingElement</span>(<span class="string">&quot;item&quot;</span>)) &#123;</span><br><span class="line">            myItemElem = myItemElem -&gt; <span class="built_in">NextSiblingElement</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">            <span class="built_in">processItem</span>(myItemElem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dump</span><span class="params">(<span class="type">const</span> string&amp; fileName)</span> </span>&#123;</span><br><span class="line">        <span class="function">ofstream <span class="title">ofs</span><span class="params">(fileName)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(!ofs) &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;file &quot;</span> &lt;&lt; fileName &lt;&lt; <span class="string">&quot;open failed.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _rss.<span class="built_in">cbegin</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; it != _rss.<span class="built_in">cend</span>(); it++) &#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            ofs &lt;&lt; <span class="string">&quot;&lt;doc&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;docid&gt;&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;&lt;/docid&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;title&gt;&quot;</span> &lt;&lt; it-&gt;title &lt;&lt; <span class="string">&quot;&lt;/title&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;link&gt;&quot;</span> &lt;&lt; it-&gt;link &lt;&lt; <span class="string">&quot;&lt;/link&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;description&gt;&quot;</span> &lt;&lt; it-&gt;description &lt;&lt; <span class="string">&quot;&lt;/description&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;    &lt;content&gt;&quot;</span> &lt;&lt; it-&gt;content &lt;&lt; <span class="string">&quot;&lt;/content&gt;&quot;</span> &lt;&lt; endl</span><br><span class="line">                &lt;&lt; <span class="string">&quot;&lt;/doc&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ofs.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">processItem</span><span class="params">(XMLElement* p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// get title</span></span><br><span class="line">        XMLText* myTitleNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mytitle = myTitleNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get link</span></span><br><span class="line">        XMLText* myLinkNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mylink = myLinkNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line"></span><br><span class="line">        XMLText* myDescriptionNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mydescription = myDescriptionNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line">        <span class="function">std::regex <span class="title">reg</span><span class="params">(<span class="string">&quot;&lt;[^&gt;]+&gt;&quot;</span>)</span></span>;</span><br><span class="line">        mydescription = <span class="built_in">regex_replace</span>(mydescription, reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get content</span></span><br><span class="line">        XMLText* myContNode = p -&gt; <span class="built_in">FirstChildElement</span>(<span class="string">&quot;content:encoded&quot;</span>)</span><br><span class="line">                                 -&gt; <span class="built_in">FirstChild</span>() -&gt; <span class="built_in">ToText</span>();</span><br><span class="line">        string mycontent = myContNode -&gt; <span class="built_in">Value</span>();</span><br><span class="line">        mycontent = <span class="built_in">regex_replace</span>(mycontent, reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RssItem tmp = (RssItem)&#123;mytitle, mylink, mydescription, mycontent&#125;;</span><br><span class="line">        _rss.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;RssItem&gt; _rss;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RssReader akashi;</span><br><span class="line">    akashi.<span class="built_in">Let_Me_See_See</span>(<span class="string">&quot;./feed.xml&quot;</span>);</span><br><span class="line">    akashi.<span class="built_in">dump</span>(<span class="string">&quot;pagelib.dat&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出文件截图如下：</p><p><img src="https://bu.dusays.com/2024/04/15/661d03875da09.png" alt="66-11.png"></p><p>从效果上看，这份代码就是把文字部分扒了下来。</p><h2 id="作业-抽象类"><a href="#作业-抽象类" class="headerlink" title="作业-抽象类"></a>作业-抽象类</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1、编写一个抽象类 Figure，该类拥有：<br>① 1个成员变量，存放图形的名字（是否该设计成private/protected?）<br>② 2个纯虚函数    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">( )</span></span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">( )</span></span>=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>            <span class="comment">//打印图形的相关信息</span></span><br></pre></td></tr></table></figure><p>2、编写一个圆类 Circle，让其继承自 Figure 类，该类拥有： </p><p>① 1个成员变量，存放圆的半径；（是否该设计成private/protected?）<br>② 2个构造方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Circle</span>( )              <span class="comment">// 将半径设为0           </span></span><br><span class="line"><span class="built_in">Circle</span>(<span class="type">double</span>  r)      <span class="comment">//创建Circle对象时将半径初始化为r      </span></span><br></pre></td></tr></table></figure><p>③ 3个成员方法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">( )</span>           <span class="comment">//获取圆的半径</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">( )</span>      <span class="comment">//获取圆的周长</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">( )</span>   <span class="comment">//获取圆的面积</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">( )</span>   <span class="comment">//获取圆的名字           </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">show</span><span class="params">( )</span>               <span class="comment">//将圆的半径、周长、面积输出到屏幕 </span></span></span><br></pre></td></tr></table></figure></p><p>3、编写一个圆柱体类 Cylinder，它继承于上面的 Circle 类，还拥有：<br>① 1个成员变量，圆柱体的高；<br>② 构造方法           </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cylinder</span> (<span class="type">double</span> r, <span class="type">double</span>  h) <span class="comment">//创建Circle对象时将半径初始化为r         </span></span><br></pre></td></tr></table></figure><p>③ 成员方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">覆盖Circle的<span class="built_in">getArea</span>( )   <span class="comment">//获取圆柱体的表面积 </span></span><br><span class="line">覆盖Circle的<span class="built_in">getName</span>( )   <span class="comment">//获取图形的名字</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">( )</span>      <span class="comment">//获取圆柱体的高</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">( )</span>      <span class="comment">//获取圆柱体的体积           </span></span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">show</span><span class="params">()</span>               <span class="comment">//将圆柱体的高、表面积、体积输出到屏幕  </span></span></span><br></pre></td></tr></table></figure><p>4、编写测试用例，在实现的过程中，体会动态多态的用法。<br>① 创建类的对象，分别设置圆的半径、圆柱体的高<br>② 计算并分别显示圆半径、圆面积、圆周长，<br>③ 计算并分别显式圆柱体的高、表面积、体积。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个要求有点奇怪，不能完全满足，比如那个圆柱的 getName() 我就没有重写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Figure</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>: <span class="keyword">public</span> Figure &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">Circle</span>(): _radius(<span class="number">0</span>) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">Circle</span>(<span class="type">double</span> r): _radius(r) &#123;</span><br><span class="line">        _name = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*_radius*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*_radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;radius = &quot;</span> &lt;&lt; _radius &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;perimeter = &quot;</span> &lt;&lt; <span class="built_in">getPerimeter</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>: <span class="keyword">public</span> Circle &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Cylinder</span>(<span class="type">double</span> r, <span class="type">double</span> h)</span><br><span class="line">            :<span class="built_in">Circle</span>(r), _height(h) &#123;_name = <span class="string">&quot;Cylinder&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> sum1 = Circle::<span class="built_in">getArea</span>();</span><br><span class="line">        <span class="type">double</span> sum2 = Circle::<span class="built_in">getPerimeter</span>() * _height;</span><br><span class="line">        <span class="keyword">return</span> sum1*<span class="number">2</span> + sum2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getHeight</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Circle::<span class="built_in">getArea</span>() * _height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; _name &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;height = &quot;</span> &lt;&lt; _height &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;area = &quot;</span> &lt;&lt; <span class="built_in">getArea</span>() &lt;&lt; endl</span><br><span class="line">             &lt;&lt; <span class="string">&quot;volume = &quot;</span> &lt;&lt; <span class="built_in">getVolume</span>() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">o1</span><span class="params">(<span class="number">1.0</span>)</span></span>;</span><br><span class="line">    o1.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Circle <span class="title">o2</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">    o2.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function">Cylinder <span class="title">cy1</span><span class="params">(<span class="number">1.0</span>, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">    cy1.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Cylinder <span class="title">cy2</span><span class="params">(<span class="number">2.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">    cy2.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 1</span></span><br><span class="line"><span class="comment">perimeter = 6.28319</span></span><br><span class="line"><span class="comment">area = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Circle</span></span><br><span class="line"><span class="comment">radius = 2</span></span><br><span class="line"><span class="comment">perimeter = 12.5664</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 1</span></span><br><span class="line"><span class="comment">area = 12.5664</span></span><br><span class="line"><span class="comment">volume = 3.14159</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name = Cylinder</span></span><br><span class="line"><span class="comment">height = 2</span></span><br><span class="line"><span class="comment">area = 50.2655</span></span><br><span class="line"><span class="comment">volume = 25.1327</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><p>引入。来看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>()</span><br><span class="line">    : _pstr(<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="comment">/* : _pstr(new char[1]()) */</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *pstr)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char *)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自复制</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、深拷贝</span></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回*this</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *_pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt;  rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//   C++    C   C风格转换为C++风格</span></span><br><span class="line">    <span class="comment">//   过渡</span></span><br><span class="line">    String s3 = <span class="string">&quot;world&quot;</span>;<span class="comment">//String(&quot;world&quot;),临时对象/匿名对象,</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &amp;&quot;world&quot;;//文字常量区,左值 */</span></span><br><span class="line">    <span class="comment">/* String(&quot;world&quot;);//右值 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String(const char *)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const String &amp;)</span></span><br><span class="line"><span class="comment">s1 = hello</span></span><br><span class="line"><span class="comment">s2 = hello</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String(const char *)</span></span><br><span class="line"><span class="comment">s3 = world</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">~String()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意第 85 行，编译器并没有调用复制构造函数<code>String(const String&amp;)</code>来复制这个临时对象到 s3 中。相反，它直接将临时对象的内容移动到 s3 中，这是因为在这种情况下编译器会执行一种叫做”复制省略”（copy elision）的优化。这个优化允许编译器在一定条件下避免创建临时对象，直接将临时对象的内容移到目标对象中，这样可以提高效率。</p><p>【存疑】然而按照教学演示，可以使用编译选项避免这个优化。在这种情况下，第 85 行会调用两个构造函数：<code>String(const char*)</code>和<code>String(const String&amp;)</code>。即在没有编译器优化的情况下，隐式转换之后会调用拷贝构造函数。在我的环境中即使开了编译选项也不会如此，可能是新的 g++ 版本并不支持这样做。</p><p>如何区分一个变量是否是右值？</p><p>在 C++11 之前是不能识别右值的，C++11 之后新增语法可以识别右值。</p><p>右值引用可以识别、绑定到右值，但不能识别、绑定到左值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;rref = <span class="number">10</span>;   <span class="comment">//右值引用</span></span><br><span class="line"><span class="type">int</span> &amp;&amp;rref2 = a;   <span class="comment">//error, a 是左值</span></span><br></pre></td></tr></table></figure><p>由此，写出如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动构造函数优先于拷贝构造函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动构造函数</span></span><br><span class="line"><span class="comment">//String s3 = String(&quot;world&quot;);</span></span><br><span class="line"><span class="built_in">String</span>(String &amp;&amp;rhs)</span><br><span class="line">:_pstr(rhs._pstr)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：我们直接进行了一个浅拷贝。临时变量销毁时，为了防止此时实际意义上已经归 this 所有的空间被销毁，需要将 rhs._pstr 置空。</p><p>考虑如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s4 = <span class="built_in">String</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>类似地，我们可以写出如下函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line"><span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String&amp; operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] _pstr;  <span class="comment">//释放左操作数，防止内存泄露</span></span><br><span class="line">    _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    _pstr = rhs._pstr; <span class="comment">//浅拷贝</span></span><br><span class="line">    rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回*this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到上面代码中没有防止自复制的逻辑，这是否必要呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左右操作数是两个不一样对象</span></span><br><span class="line"><span class="comment">/* String(&quot;wuhan&quot;) = String(&quot;wuhan&quot;); */</span></span><br></pre></td></tr></table></figure><p>目前来看，似乎没有必要。</p><p>但是考虑如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;000000&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//std::move可以将左值转换为右值</span></span><br><span class="line">s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2024/04/17/661f4f326d294.png" alt="66-12.png"></p><p>以上输出结果需要联系移动赋值运算符函数、输出函数来分析。</p><p>可见，移动赋值运算符函数仍然需要改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line"><span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line"><span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line"><span class="comment">//s4 = std::move(s4)</span></span><br><span class="line"><span class="comment">//s4 = std::move(s5)</span></span><br><span class="line">String &amp;<span class="keyword">operator</span>=(String &amp;&amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String &amp;operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自移动</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">        _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        _pstr = rhs._pstr;<span class="comment">//3、浅拷贝</span></span><br><span class="line">        rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//4、返回*this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步研究一下 std::move() 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::move可以将左值转换为右值,实质上没有做任何移动，只是</span></span><br><span class="line"><span class="comment">//在底层做了强制转换static_cast&lt;T &amp;&amp;&gt;(lvalue)</span></span><br><span class="line"><span class="comment">//如果以后不想使用某个左值，可以使用std::move将其转换为</span></span><br><span class="line"><span class="comment">//右值，以后就不再使用了</span></span><br><span class="line">s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">move</span>(s1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2222&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://bu.dusays.com/2024/04/17/661f5338927d5.png" alt="66-13.png"></p><p>此时 s1 里面的内容还没有转走（<code>std::move()</code>没有做移动操作）。</p><p>而如果走到移动赋值运算符函数中，内容才会被转走：</p><p><img src="https://bu.dusays.com/2024/04/17/661f56d06a004.png" alt="66-14.png"></p><p>该例完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>()</span><br><span class="line">    : _pstr(<span class="literal">nullptr</span>)</span><br><span class="line">    <span class="comment">/* : _pstr(new char[1]()) */</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *pstr)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const char *)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    : _pstr(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(const String &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自复制</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、深拷贝</span></span><br><span class="line">            _pstr = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(rhs._pstr) + <span class="number">1</span>]();</span><br><span class="line">            <span class="built_in">strcpy</span>(_pstr, rhs._pstr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回*this</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动构造函数优先于拷贝构造函数执行的(优先级)</span></span><br><span class="line">    <span class="comment">//移动构造函数</span></span><br><span class="line">    <span class="comment">//String s3 = String(&quot;world&quot;);</span></span><br><span class="line">    <span class="built_in">String</span>(String &amp;&amp;rhs)</span><br><span class="line">    :_pstr(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String(string &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动赋值运算符函数优先于赋值运算符函数执行的(优先级)</span></span><br><span class="line">    <span class="comment">//移动赋值运算符函数(移动赋值函数)</span></span><br><span class="line">    <span class="comment">//s4 = String(&quot;wuhan&quot;)</span></span><br><span class="line">    <span class="comment">//s4 = std::move(s4)</span></span><br><span class="line">    <span class="comment">//s4 = std::move(s5)</span></span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(String &amp;&amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;String &amp;operator=(String &amp;&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rhs)<span class="comment">//1、自移动</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;<span class="comment">//2、释放左操作数</span></span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            _pstr = rhs._pstr;<span class="comment">//3、浅拷贝</span></span><br><span class="line">            rhs._pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//4、返回*this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">String</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~String()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_pstr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _pstr;</span><br><span class="line">            _pstr = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *_pstr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="type">const</span> String &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rhs._pstr)</span><br><span class="line">    &#123;</span><br><span class="line">        os &lt;&lt;  rhs._pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    String s2 = s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//   C++    C   C风格转换为C++风格</span></span><br><span class="line">    <span class="comment">//   过渡</span></span><br><span class="line">    String s3 = <span class="string">&quot;world&quot;</span>;<span class="comment">//String(&quot;world&quot;),临时对象/匿名对象,</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &amp;&quot;world&quot;;//文字常量区,左值 */</span></span><br><span class="line">    <span class="comment">/* String(&quot;world&quot;);//右值 */</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">String <span class="title">s4</span><span class="params">(<span class="string">&quot;wangdao&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    s4 = <span class="built_in">String</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右操作数是两个不一样对象</span></span><br><span class="line">    <span class="comment">/* String(&quot;wuhan&quot;) = String(&quot;wuhan&quot;); */</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;000000&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//std::move可以将左值转换为右值,实质上没有做任何移动，只是</span></span><br><span class="line">    <span class="comment">//在底层做了强制转换static_cast&lt;T &amp;&amp;&gt;(lvalue)</span></span><br><span class="line">    <span class="comment">//如果以后不想使用某个左值，可以使用std::move将其转换为</span></span><br><span class="line">    <span class="comment">//右值，以后就不再使用了</span></span><br><span class="line">    s4 = std::<span class="built_in">move</span>(s4);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;11111&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    s2 = std::<span class="built_in">move</span>(s1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2222&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<strong>拷贝构造函数</strong>和<strong>赋值运算符函数</strong>称为具有<strong>复制控制语义的函数</strong>。</p><p>将<strong>移动构造函数</strong>和<strong>移动赋值运算符函数</strong>称为具有<strong>移动语义的函数</strong>。</p><p>最后来看一个细节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp;&amp; rref = <span class="number">10</span>; <span class="comment">// 右值引用</span></span><br><span class="line">    &amp;rref;    <span class="comment">// 右值引用在此处是左值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右值引用作为函数返回类型的时候，是右值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp;&amp; <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &amp;<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">error: taking address of rvalue [-fpermissive]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>左值、右值、左值引用、const左值引用、右值引用。</li><li>区分左值与右值的是能不能取地址。</li><li>左值引用：可以绑定到左值，但是不能绑定到右值。</li><li>const左值引用：既可以绑定到左值也可以绑定到右值。（正因如此，才将拷贝构造函数写成const左值引用）</li><li>右值引用：可以绑定到右值，但是不能绑定到左值。（正因如此，才能有移动语义的函数）</li></ul><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>资源管理是 C 的难点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UseFile</span><span class="params">(<span class="type">char</span> <span class="type">const</span>* fn)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* f = fopen(fn, “r”);  <span class="comment">// 获取资源</span></span><br><span class="line">     …… <span class="comment">// 使用资源</span></span><br><span class="line">    <span class="keyword">if</span> (!g()) &#123; fclose(f); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (!h()) &#123; fclose(f); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    fclose(f);           <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>困难在于：</p><ul><li>用于释放资源的代码需要在不同的位置重复书写多次。</li><li>如果再加入异常处理，fclose(f)情况会变得更加复杂。</li></ul><p><strong>RAII(Resource Acquisition Is Initialization)</strong> 是一种由 C++创造者 Bjarne Stroustrup 提出的， 利用栈对象生命周期管理程序资源（包括内存、文件句柄、锁等）的技术。</p><p>使用 RAII 时，一般在资源获得的同时构造对象， 在对象生存期间，资源一直保持有效；对象析构时，资源被释放。</p><p>关键：<strong>要保证资源的释放顺序与获取顺序严格相反。</strong></p><p>看一个简单例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SafeFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SafeFile</span>(FILE* fp): _fp(fp)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SafeFile(FILE*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">const</span> string&amp; msg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), _fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">SafeFile</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~SafeFile()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(_fp);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fclose(_fp)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    FILE* _fp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// sf 是栈对象</span></span><br><span class="line">    <span class="function">SafeFile <span class="title">sf</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    string msg = <span class="string">&quot;delishashijiediyikeai\n&quot;</span>;</span><br><span class="line">    sf.<span class="built_in">write</span>(msg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ g++ tmptest.cc</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ ./a.out</span></span><br><span class="line"><span class="comment">SafeFile(FILE*)</span></span><br><span class="line"><span class="comment">~SafeFile()</span></span><br><span class="line"><span class="comment">fclose(_fp)</span></span><br><span class="line"><span class="comment">wanko@wanko:~/mycode$ cat test.txt </span></span><br><span class="line"><span class="comment">delishashijiediyikeai</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>RAII 特征：</p><ol><li>在构造函数中获取资源或者托管资源</li><li>在析构函数中释放资源</li><li>提供若干访问资源的方法</li><li>一般不允许复制或赋值（将拷贝构造函数或者赋值运算符函数删除即可）</li></ol><p><strong>RAII 的本质是用栈对象的生命周期来管理资源，因为栈对象在离开作用域时，会自动调用析构函数。</strong></p><p><strong>对象语义</strong>：不能进行复制或赋值。（在流的代码中，都是不能复制或赋值的）<br><strong>值语义</strong>：可以进行复制或赋值。</p><p>实现 RAII 的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RAII</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 在构造函数中初始化资源</span></span><br><span class="line">    <span class="built_in">RAII</span>(T* data): _data(data) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;RAII(T*)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在析构函数中释放资源</span></span><br><span class="line">    ~<span class="built_in">RAII</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~RAII()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(_data) &#123;</span><br><span class="line">            <span class="comment">// 假如指针是 new 出来的</span></span><br><span class="line">            <span class="keyword">delete</span> _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供若干访问资源的方法</span></span><br><span class="line">    T* <span class="keyword">operator</span> -&gt; () &#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span> * () &#123;</span><br><span class="line">        <span class="keyword">return</span> *_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(T* data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_data) &#123;</span><br><span class="line">            <span class="keyword">delete</span> _data;</span><br><span class="line">            _data = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许复制或赋值</span></span><br><span class="line">    <span class="built_in">RAII</span>(<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    RAII&amp; <span class="keyword">operator</span> = (<span class="type">const</span> RAII&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">RAII&lt;point&gt; <span class="title">pt</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>, <span class="number">2</span>))</span></span>;</span><br><span class="line">    pt-&gt;<span class="built_in">print</span>();</span><br><span class="line">    pt.<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">RAII(T*)</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">~RAII()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，pt 本身不是指针，但具备指针的功能，也不用操心空间的回收，由此引出<strong>智能指针</strong>的概念。</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>智能指针(Smart Pointer)</p><ul><li>是存储指向动态分配（堆）对象的指针的类</li><li>在面对异常的时候格外有用，因为他们能够确保正确的销毁动态分配的对象</li></ul><p>C++11 提供了以下几种智能指针,位于头文件<code>&lt;memory&gt;</code>，它们都是<strong>类模板</strong></p><ul><li>std::auto_ptr (复制/赋值)</li><li>std::unique_ptr</li><li>std::shared_ptr</li><li>std::weak_ptr  </li></ul><h3 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h3><p>来看下面关于 auto_ptr 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::auto_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* pInt = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">ap</span><span class="params">(pInt)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*pInt = &quot;</span> &lt;&lt; *pInt &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap = &quot;</span> &lt;&lt; *ap &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete pInt;</span></span><br><span class="line">    <span class="comment">// pInt = nullptr;</span></span><br><span class="line">    <span class="comment">// 不需要，因为被 auto_ptr 托管了</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    auto_ptr&lt;<span class="type">int</span>&gt; ap2 = ap;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap2 = &quot;</span> &lt;&lt; *ap2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*ap = &quot;</span> &lt;&lt; *ap &lt;&lt; endl; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // some warning</span></span><br><span class="line"><span class="comment">*pInt = 10</span></span><br><span class="line"><span class="comment">*ap = 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*ap2 = 10</span></span><br><span class="line"><span class="comment">Segmentation fault (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>出现错误的原因是：在执行拷贝操作的时候，会将 ap 托管的资源交给 ap2 ，然后将 ap 的数据成员置空。</p><p>更进一步地，我们看一下 auto_ptr 源码的逻辑（并非完全一致，为方便理解作了少量修改）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//auto_ptr&lt;int&gt; ap2 = ap;</span></span><br><span class="line">    <span class="comment">//_Tp = int</span></span><br><span class="line">    <span class="comment">//auto_ptr &amp;__a = ap;</span></span><br><span class="line">    <span class="built_in">auto_ptr</span>(auto_ptr&amp; __a)</span><br><span class="line">    : _M_ptr(__a.<span class="built_in">release</span>())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">_Tp* <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _Tp* __tmp = _M_ptr;</span><br><span class="line">        _M_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> __tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _Tp&amp; <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *_M_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Tp* _M_ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>即表面上执行了拷贝操作，但底层已经发生了所有权的转移。<strong><code>auto_ptr</code>在设计上存在缺陷。</strong></p><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p><code>std::unique_ptr</code>是一个<strong>独享所有权</strong>的智能指针，它提供了一种严格语义上的所有权，包括：</p><ul><li>拥有它所指向的对象</li><li><strong>无法进行复制、赋值操作</strong></li><li>保存指向某个对象的指针，当它本身被删除释放的时候，会使用给定的<strong>删除器</strong>释放它指向的对象</li><li>具有移动(std::move)语义，可做为容器元素</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*up = &quot;</span> &lt;&lt; *up &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// unique_ptr&lt;int&gt; up2 = up; // 在语法层面报错</span></span><br><span class="line"></span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">up3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">34</span>))</span></span>;</span><br><span class="line">    <span class="comment">// up3 = up;   // error</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vector&lt;unique_ptr&lt;<span class="type">int</span>&gt;&gt; vec;</span><br><span class="line">    <span class="comment">// unique_ptr 据有移动语义（有移动构造函数和移动赋值函数）</span></span><br><span class="line">    <span class="comment">// 所以可以作为容器的元素</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(up));</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">30</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要构建右值的时候，可以使用如下两种方法：</p><ol><li>直接显示调用构造函数，创建临时对象</li><li>使用std::move函数将左值转换为右值。</li></ol><p>需要构建左值的时候，可以使用如下两种方法：</p><ol><li>可以使用构造函数创建对象，创建有名对象。Point pt(1, 2);</li><li>可以使用右值引用将右值转换为左值，Point &amp;&amp;rref = Point(1, 2)</li></ol><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p><code>std::shared_ptr</code>是一个<strong>引用计数</strong>智能指针，用于共享对象的所有权</p><ol><li>引进了一个计数器shared_count,用来表示当前有多少个智能指针对象共享指针指向的内存块</li><li>析构函数中不是直接释放指针对应的内存块,如果shared_count大于0则不释放内存只是将引用计数减1,只有计数等于0时释放内存</li><li>复制构造与赋值操作符只是提供一般意义上的复制功能,并且将引用计数加1.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt; sp2 = sp;  <span class="comment">// ok</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.get() = &quot;</span> &lt;&lt; sp2.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count() = &quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">sp3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">34</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> &lt;&lt; *sp3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.get() = &quot;</span> &lt;&lt; sp3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.use_count() = &quot;</span> &lt;&lt; sp3.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    sp3 = sp;  <span class="comment">// 赋值，ok</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> &lt;&lt; *sp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> &lt;&lt; *sp3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.get() = &quot;</span> &lt;&lt; sp.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.get() = &quot;</span> &lt;&lt; sp2.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.get() = &quot;</span> &lt;&lt; sp3.<span class="built_in">get</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp2.use_count() = &quot;</span> &lt;&lt; sp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sp3.use_count() = &quot;</span> &lt;&lt; sp3.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">*sp2 = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp2.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 2</span></span><br><span class="line"><span class="comment">sp2.use_count() = 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 34</span></span><br><span class="line"><span class="comment">sp3.get() = 0x5c03fdecb300</span></span><br><span class="line"><span class="comment">sp3.use_count() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp = 10</span></span><br><span class="line"><span class="comment">*sp2 = 10</span></span><br><span class="line"><span class="comment">*sp3 = 10</span></span><br><span class="line"><span class="comment">sp.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp2.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp3.get() = 0x5c03fdecaeb0</span></span><br><span class="line"><span class="comment">sp.use_count() = 3</span></span><br><span class="line"><span class="comment">sp2.use_count() = 3</span></span><br><span class="line"><span class="comment">sp3.use_count() = 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看是否可以作为容器的元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp4</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    vector&lt;shared_ptr&lt;point&gt;&gt; vec;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(sp4));</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="built_in">shared_ptr</span>&lt;point&gt;(<span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">3</span>,<span class="number">4</span>)));</span><br><span class="line"></span><br><span class="line">    vec.<span class="built_in">push_back</span>(sp4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>shared_ptr 存在的问题：循环引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Parent&gt; parent_ptr;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Child&gt; child_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;   std::cout &lt;&lt; <span class="string">&quot;Child...&quot;</span> &lt;&lt; std::endl;   &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;~Child...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    parent_ptr parent_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;Parent...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~Parent...&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    child_ptr child_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">parent_ptr <span class="title">parent</span><span class="params">(<span class="keyword">new</span> Parent)</span></span>;</span><br><span class="line">    <span class="function">child_ptr <span class="title">child</span><span class="params">(<span class="keyword">new</span> Child)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    parent-&gt;child_ = child;</span><br><span class="line">    <span class="comment">//parent.operator-&gt;()-&gt;child_ = child;</span></span><br><span class="line">    child-&gt;parent_ = parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Parent...</span></span><br><span class="line"><span class="comment">Child...</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 1</span></span><br><span class="line"><span class="comment">parent.use_count() = 2</span></span><br><span class="line"><span class="comment">child.use_count() = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以上代码存在内容泄露，原因：</p><p><img src="https://s2.loli.net/2024/04/19/61sZ7mHWhFuAOaQ.png" alt="66-15.png"></p><p><img src="https://bu.dusays.com/2024/04/19/6621c4878cc6a.png" alt="66-16.png"></p><p>解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Parent&gt; parent_ptr;</span><br><span class="line"><span class="keyword">typedef</span> std::shared_ptr&lt;Child&gt; child_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;   std::cout &lt;&lt; <span class="string">&quot;Child...&quot;</span> &lt;&lt; std::endl;   &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;~Child...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    std::weak_ptr&lt;Parent&gt; parent_; <span class="comment">// 不会使引用计数++</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;  std::cout &lt;&lt; <span class="string">&quot;Parent...&quot;</span> &lt;&lt; std::endl;  &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~Parent...&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    child_ptr child_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">parent_ptr <span class="title">parent</span><span class="params">(<span class="keyword">new</span> Parent)</span></span>;</span><br><span class="line">    <span class="function">child_ptr <span class="title">child</span><span class="params">(<span class="keyword">new</span> Child)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    parent-&gt;child_ = child;</span><br><span class="line">    <span class="comment">//parent.operator-&gt;()-&gt;child_ = child;</span></span><br><span class="line">    child-&gt;parent_ = parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;parent.use_count() = &quot;</span> &lt;&lt; parent.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;child.use_count() = &quot;</span> &lt;&lt; child.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Parent...</span></span><br><span class="line"><span class="comment">Child...</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 1</span></span><br><span class="line"><span class="comment">parent.use_count() = 1</span></span><br><span class="line"><span class="comment">child.use_count() = 2</span></span><br><span class="line"><span class="comment">~Parent...</span></span><br><span class="line"><span class="comment">~Child...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p>特点：</p><ul><li>std::shared_ptr 是强引用智能指针</li><li>std::weak_ptr 是弱引用智能指针</li><li>强引用，只要有一个引用存在，对象就不能被释放</li><li><strong>弱引用，并不增加对象的引用计数，但它知道对象是否存在。</strong><ul><li>如果存在，提升为shared_ptr成功；否则，提升失败</li><li>通过weak_ptr访问对象的成员的时候，要提升为shared_ptr</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"><span class="keyword">using</span> std::weak_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// weak_ptr&lt;point&gt; wp(new point(1, 2));  // 不 ok</span></span><br><span class="line">    weak_ptr&lt;point&gt; wp2; <span class="comment">//可以创建空对象</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">        wp2 = sp;  <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;sp.use_count() = &quot;</span> &lt;&lt; sp.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wp2.use_count() = &quot;</span> &lt;&lt; wp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wp2.expired() = &quot;</span> &lt;&lt; wp2.<span class="built_in">expired</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        shared_ptr&lt;point&gt; sp2 = wp2.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(sp2) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;提升成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span>;</span><br><span class="line">            sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;提升失败，托管资源已销毁&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wp2.use_count() = &quot;</span> &lt;&lt; wp2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wp2.expired() = &quot;</span> &lt;&lt; wp2.<span class="built_in">expired</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    shared_ptr&lt;point&gt; sp2 = wp2.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(sp2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;提升成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span>;</span><br><span class="line">        sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;提升失败，托管资源已销毁&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">sp.use_count() = 1</span></span><br><span class="line"><span class="comment">wp2.use_count() = 1</span></span><br><span class="line"><span class="comment">wp2.expired() = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提升成功</span></span><br><span class="line"><span class="comment">*sp2 = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">wp2.use_count() = 0</span></span><br><span class="line"><span class="comment">wp2.expired() = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提升失败，托管资源已销毁</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="删除器"><a href="#删除器" class="headerlink" title="删除器"></a>删除器</h3><p><img src="https://s2.loli.net/2024/04/19/ZLfMJoU6YPSKI2W.png" alt="66-17.png"></p><p>对于一些特殊的情况，不能依赖默认的删除器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FileCloser</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(FILE* fp)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fclose(fp)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string msg = <span class="string">&quot;jiarenmenshuidonga.\n&quot;</span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;FILE, FileCloser&gt; <span class="title">up</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>))</span></span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), up.<span class="built_in">get</span>());</span><br><span class="line">    <span class="comment">// fclose(up.get());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string msg = <span class="string">&quot;yudaoyigeikun.\n&quot;</span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;FILE&gt; <span class="title">sp</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>), FileCloser())</span></span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(msg.<span class="built_in">c_str</span>(), <span class="number">1</span>, msg.<span class="built_in">size</span>(), sp.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能指针的误用"><a href="#智能指针的误用" class="headerlink" title="智能指针的误用"></a>智能指针的误用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用了不同的智能指针托管了同一个裸指针</span></span><br><span class="line">    point* pt = <span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up</span><span class="params">(pt)</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up2</span><span class="params">(pt)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用不同的智能指针托管了同一块空间</span></span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;point&gt; <span class="title">up2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    up.<span class="built_in">reset</span>(up2.<span class="built_in">get</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point* pt = <span class="keyword">new</span> <span class="built_in">point</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(pt)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(pt)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    sp.<span class="built_in">reset</span>(sp2.<span class="built_in">get</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test4</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再有一例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pt1-&gt;addPoint(pt2)</span></span><br><span class="line">    <span class="function">point* <span class="title">addPoint</span><span class="params">(point* pt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ix += pt-&gt;ix;</span><br><span class="line">        <span class="keyword">this</span>-&gt;iy += pt-&gt;iy;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> ;</span><br><span class="line">    sp-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> ;</span><br><span class="line">    sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp3</span><span class="params">(sp-&gt;addPoint(sp2.get()))</span></span>;</span><br><span class="line">    <span class="comment">// 用裸指针进行的初始化！</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> ;</span><br><span class="line">    sp3-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test5</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 4 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">free(): double free detected in tcache 2</span></span><br><span class="line"><span class="comment">Aborted (core dumped)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>上面代码问题的解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>:</span><br><span class="line"><span class="keyword">public</span> std::enable_shared_from_this&lt;point&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pt1-&gt;addPoint(pt2)</span></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">addPoint</span><span class="params">(point* pt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ix += pt-&gt;ix;</span><br><span class="line">        <span class="keyword">this</span>-&gt;iy += pt-&gt;iy;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> point(<span class="number">1</span>,<span class="number">2</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp = &quot;</span> ;</span><br><span class="line">    sp-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp2</span><span class="params">(<span class="keyword">new</span> point(<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp2 = &quot;</span> ;</span><br><span class="line">    sp2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">shared_ptr&lt;point&gt; <span class="title">sp3</span><span class="params">(sp-&gt;addPoint(sp2.get()))</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*sp3 = &quot;</span> ;</span><br><span class="line">    sp3-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test5</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp = 1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">*sp2 = 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*sp3 = 4 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板（Template），是一种通用的描述机制。模板允许使用<strong>通用类型</strong>来定义函数或类等，在使用时，通用类型可被具体的类型，如int、double甚至是用户自定义的类型来代替。模板引入一种全新的编程思维方式，称为“<strong>泛型编程</strong>”或“通用编程”。</p><p>模板的引入使函数定义摆脱了类型的束缚，代码更为高效灵活。C++ 中，通过下述形式定义一个模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, ...&gt;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, ...&gt;</span><br></pre></td></tr></table></figure><p>早期模板定义使用的是 class，关键字 typename 是后加入到标准中的，相比 class，typename 更容易体现“类型”的观点，虽然两个关键字在模板定义时是等价的，但<strong>从代码兼容的角度讲，使用 class 较好一些。</strong></p><p>模板有<strong>函数模板</strong>和<strong>类模板</strong>之分。通过参数实例化构造出具体的函数或类，称为模板函数或模板类。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p>模板的形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数模板</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ia = <span class="number">3</span>, ib = <span class="number">4</span>;</span><br><span class="line">    <span class="type">double</span> dx = <span class="number">3.3</span>, dy = <span class="number">4.4</span>;</span><br><span class="line">    string s1 = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显式实例化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(ia, ib) = &quot;</span> &lt;&lt; <span class="built_in">add</span>&lt;<span class="type">int</span>&gt;(ia, ib) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式实例化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(dx, dy) = &quot;</span> &lt;&lt; <span class="built_in">add</span>(dx, dy) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(s1, s2) = &quot;</span> &lt;&lt; <span class="built_in">add</span>(s1, s2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">add(ia, ib) = 7</span></span><br><span class="line"><span class="comment">add(dx, dy) = 7.7</span></span><br><span class="line"><span class="comment">add(s1, s2) = hello world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>原理：在编译时做了类型推导。</p><p>普通函数与函数模板可以同时存在。<br>普通函数优先于函数模板。<br>普通函数与函数模板可以形成重载。<br>函数模板与函数模板之间也可以形成重载。</p><p>对于模板而言，一般不能分成头文件与实现文件的形式，即不能将声明与实现分开。<br>如果非要分成头文件和实现文件，可以在头文件中包含实现文件，如在<code>add.h</code>中<code>#include &quot;add.cc&quot;</code>。</p><p><img src="https://s2.loli.net/2024/04/20/AfeVDnHz6YFEBXG.png" alt="66-18.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板的参数类型</span></span><br><span class="line"><span class="comment">// 1. 类型参数，比如这里的 T</span></span><br><span class="line"><span class="comment">// 2. 非类型参数，都是整型（bool/char/int/size_t/...)</span></span><br><span class="line"><span class="comment">// 注意：排除了浮点数 float/double</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">short</span> kMin&gt;</span><br><span class="line"><span class="function">T <span class="title">multiply</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y * kMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>&lt;<span class="type">int</span>, <span class="number">100</span>&gt;(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiply(a, b) = 20000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">double</span> , <span class="type">short</span> kMin = <span class="number">300</span>&gt;</span><br><span class="line">T <span class="built_in">multiply</span>(T x, T y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y * kMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>&lt;<span class="type">int</span>, <span class="number">100</span>&gt;(a, b) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multiply(a, b) = &quot;</span> &lt;&lt; <span class="built_in">multiply</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiply(a, b) = 20000</span></span><br><span class="line"><span class="comment">multiply(a, b) = 60000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="成员函数模板"><a href="#成员函数模板" class="headerlink" title="成员函数模板"></a>成员函数模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">int</span>&gt;</span><br><span class="line">    T <span class="built_in">func</span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> (T)ix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">point <span class="title">pt</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>&lt;<span class="type">double</span>&gt;() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>&lt;<span class="type">int</span>&gt;() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt.func() = &quot;</span> &lt;&lt; pt.<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">pt.func() = 1</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="可变模板参数"><a href="#可变模板参数" class="headerlink" title="可变模板参数"></a>可变模板参数</h3><p><strong>可变模板参数(variadic templates)</strong> 是 C++11 新增的特性，它对参数进行了高度泛化，能表示 0 到任意个任意类型的参数。</p><p>模板<strong>参数包(parameter pack)</strong>，如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>… Args&gt;  <span class="keyword">class</span> <span class="title class_">tuple</span>;</span><br></pre></td></tr></table></figure></p><p><code>Args</code>标识符的左侧使用了省略号，在 C++11 中<code>Args</code>被称为<strong>模板参数包</strong>，表示可以接受任意多个参数作为模板参数，编译器将多个模板参数打包成“单个”的模板参数包。</p><p>函数参数包，如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>…T&gt; <span class="type">void</span> <span class="title">f</span><span class="params">(T…args)</span></span>;</span><br></pre></td></tr></table></figure></p><p>args 被称为<strong>函数参数包</strong>，表示函数可以接受多个任意类型的参数。</p><p>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line"><span class="comment">// void display(T1 x, T2 y, T3 z) &#123;</span></span><br><span class="line"><span class="comment">//     // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/* 这里的 Args，args 只是一个名字，可以换成别的 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ... Args&gt;  <span class="comment">// 模板参数包</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Args ... args)</span>   <span class="comment">// 函数参数包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++11 标准中，要求函数参数包必须唯一，且是函数的最后一个参数。</p><p>当<strong>声明</strong>一个变量（或标识符）为可变参数时，省略号位于该变量的左侧。</p><p>当<strong>使用</strong>参数包时，省略号位于参数名称的右侧，表示立即展开该参数，这个过程也被称为解包。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line"><span class="comment">// void display(T1 x, T2 y, T3 z) &#123;</span></span><br><span class="line"><span class="comment">//     // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/* 这里的 Args，args 只是一个名字，可以换成别的 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;  <span class="comment">// 模板参数包</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Args... args)</span>   <span class="comment">// 函数参数包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof...(Args) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>...(Args) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof...(args) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>...(args) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  <span class="comment">// 递归的出口</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(args...); <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template &lt;typename T1, typename T2, typename T3&gt;</span></span><br><span class="line">    <span class="comment">// display(T1 x1, T2 x2, T3 x3)</span></span><br><span class="line">    <span class="comment">// T1 = int, T2 = int, T3 = int</span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template &lt;typename T1, typename T2, typename T3, typename T4&gt;</span></span><br><span class="line">    <span class="comment">// display(T1 x1, T2 x2, T3 x3, T4 x4)</span></span><br><span class="line">    <span class="comment">// T1 = int, T2 = const char*, T3 = double/float, T4 = string</span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.3</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2.2</span>, s1, <span class="string">&quot;asdf&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 0</span></span><br><span class="line"><span class="comment">sizeof...(args) = 0</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 3</span></span><br><span class="line"><span class="comment">sizeof...(args) = 3</span></span><br><span class="line"><span class="comment">sizeof...(Args) = 4</span></span><br><span class="line"><span class="comment">sizeof...(args) = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 2 </span></span><br><span class="line"><span class="comment">1 2.2 hello asdf c </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>来看一个不是很有用但是很神奇的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + <span class="built_in">sum</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum(1, 2, 3, 4, 5, 6) = &quot;</span></span><br><span class="line">         &lt;&lt; <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum(1, 2, 3, 4, 5, 6) = 21</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>理解了函数模板的应用，类模板的提出似乎是水到渠成的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> num&gt;        <span class="comment">//类型参数表</span></span><br><span class="line"><span class="comment">//或template &lt;class T = int, int num = 10&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>                        <span class="comment">//Stack类定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T sz[num];<span class="comment">//存储空间，用数组表示</span></span><br><span class="line">    <span class="type">int</span> point;<span class="comment">//指针，表示存储位置（即元素个数）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>()<span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        point=<span class="number">0</span>;<span class="comment">//初始位置为0，栈底</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;<span class="comment">//判断栈是否已满</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp;)</span></span>;<span class="comment">//将一个元素压入栈</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T&amp;)</span></span>;<span class="comment">//从栈中弹出一个元素</span></span><br><span class="line">    <span class="function"><span class="type">int</span> &amp;<span class="title">GetPos</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;        <span class="comment">//参数列表不要求字字相同，但形式要相同</span></span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">isEmpty</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> point==<span class="number">0</span>;<span class="comment">//point为0，说明当前无元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">isFull</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> point==num;<span class="comment">//point为num，说明数组已满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">push</span>(<span class="type">const</span> T&amp; obt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果栈已满，压入不成功，返回false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sz[point]=obt;<span class="comment">//将传入的元素存储在point指向的当前位置</span></span><br><span class="line">        point++;<span class="comment">//point加1，向栈顶移动</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//压入成功，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> num&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;T,num&gt;::<span class="built_in">pop</span>(T &amp;obt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isEmpty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果栈已空，无法弹出，返回false</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        point--;<span class="comment">//point减1，向栈底移动，指向存储的最上面一个元素</span></span><br><span class="line">        obt = sz[point];<span class="comment">//将point指向的当前位置元素复制给传入参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//弹出成功，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack&lt;<span class="type">int</span>, <span class="number">10</span>&gt; st;<span class="comment">//模版类, 模版参数为&lt;class T, int num&gt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;开始时st是否为空？ &quot;</span> &lt;&lt; st.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    st.<span class="built_in">push</span>(<span class="number">5</span>);<span class="comment">//压入元素5</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;此时st是否为空？ &quot;</span> &lt;&lt; st.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">push</span>(i);<span class="comment">//压入9个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;此时st是否已满？&quot;</span> &lt;&lt; st.<span class="built_in">isFull</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> rec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (st.<span class="built_in">pop</span>(rec))</span><br><span class="line">        cout &lt;&lt; rec &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始时st是否为空？ 1</span></span><br><span class="line"><span class="comment">此时st是否为空？ 0</span></span><br><span class="line"><span class="comment">此时st是否已满？1</span></span><br><span class="line"><span class="comment">9  8  7  6  5  4  3  2  1  5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>模板的嵌套：</p><ul><li>模板的嵌套可以理解成在另一个模板里定义一个模板。以模板（类，或者函数）作为另一个模板（类，或者函数）的成员，也称<strong>成员模板</strong>。</li><li><strong>成员模版不能声明为 virtual.</strong><ul><li>模板在编译时进行类型推导</li><li>虚函数体现多态发生在运行时</li></ul></li></ul><p>来看一个嵌套模版类的模版类的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outside</span>            <span class="comment">//外部Outside类定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">R</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inside</span><span class="comment">//嵌套类模板定义</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        R r;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Inside</span>(R x)<span class="comment">//模板类的成员函数可以在定义时实现</span></span><br><span class="line">        &#123;</span><br><span class="line">            r=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//void disp();</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;Inside: &quot;</span> &lt;&lt; r &lt;&lt; endl;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Outside</span>(T x) : <span class="built_in">t</span>(x)<span class="comment">//Outside类的构造函数</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//void disp();</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Outside:&quot;</span>;</span><br><span class="line">        t.<span class="built_in">disp</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Inside&lt;T&gt; t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">//template&lt;class R&gt;</span></span><br><span class="line"><span class="comment">//void Outside&lt;T&gt;::Inside&lt;R&gt;::disp()    //模板类的成员函数也可以在定义外实现</span></span><br><span class="line"><span class="comment">//&#123;            //但必须是在所有类定义的外边,不能放在Outside内Inside外去实现.</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;Inside: &quot;&lt;&lt;Outside&lt;T&gt;::Inside&lt;R&gt;::r&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">//void Outside&lt;T&gt;::disp()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;&quot;Outside:&quot;;</span></span><br><span class="line"><span class="comment">//    t.disp();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Outside&lt;<span class="type">int</span>&gt;::<span class="function">Inside&lt;<span class="type">double</span>&gt; <span class="title">obin</span><span class="params">(<span class="number">3.5</span>)</span></span>;<span class="comment">//声明Inside类对象obin</span></span><br><span class="line">    obin.<span class="built_in">disp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">Outside&lt;<span class="type">int</span>&gt; <span class="title">obout</span><span class="params">(<span class="number">2</span>)</span></span>;<span class="comment">//创建Outside类对象obout</span></span><br><span class="line">    obout.<span class="built_in">disp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Inside: 3.5</span></span><br><span class="line"><span class="comment">Outside:Inside: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>嵌套越多越麻烦：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutSide</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inside</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Q&gt;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Q x)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Q&gt;</span><br><span class="line"><span class="type">void</span> OutSide&lt;T&gt;::Inside&lt;R&gt;::<span class="built_in">print</span>(Q x) &#123;</span><br><span class="line">    <span class="comment">// some code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector、deque、list"><a href="#vector、deque、list" class="headerlink" title="vector、deque、list"></a>vector、deque、list</h2><p><img src="https://s2.loli.net/2024/04/22/sSUM1IazBkEP5wV.png" alt="66-19.png"></p><p>这部分知识早有接触，因此只是杂乱地记一些东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : con) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::deque&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">push_back</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">    number.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 11 </span></span><br><span class="line"><span class="comment">1 3 5 7 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test3</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector-源码阅读"><a href="#vector-源码阅读" class="headerlink" title="vector 源码阅读"></a>vector 源码阅读</h3><p>vector 的继承图：</p><p><img src="https://bu.dusays.com/2024/04/22/662624196f56c.png" alt="66-20.png"></p><p>vector底层原理图：</p><p><img src="https://bu.dusays.com/2024/04/22/66262463b326a.png" alt="66-21.png"></p><p>类型萃取（提取、过滤）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> __Tp, <span class="keyword">class</span> <span class="title class_">_Alloc</span> = __STL_DEFAULT_ALLOCATOR(_Tp)&gt;</span><br><span class="line"><span class="keyword">class</span> vector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> _Base::allocator_type allocator_type; <span class="comment">//typename为了严格表明一个类型</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _Tp value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type* const_pointer;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type* const_iterator;</span><br><span class="line">    <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">const</span> value_type&amp; const_reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">size_t</span> size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 vector 中，<code>operator[]</code>与<code>at</code>函数都具有随机访问的功能，但是at函数有范围检查，所以更加安全一些：</p><p><img src="https://s2.loli.net/2024/04/22/bQcjCBGsFoRt8rJ.jpg" alt="66-22.jpeg"></p><p>如何获取 vector 的第一个元素的地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number 是一个 vector 对象</span></span><br><span class="line">&amp;number;   <span class="comment">// error</span></span><br><span class="line">&amp;*number;  <span class="comment">// error</span></span><br><span class="line">&amp;*number.<span class="built_in">begin</span>();   <span class="comment">// ok</span></span><br><span class="line">&amp;number[<span class="number">0</span>];         <span class="comment">// ok</span></span><br><span class="line"><span class="type">int</span>* pdata = number.<span class="built_in">data</span>(); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h3 id="deque-源码阅读"><a href="#deque-源码阅读" class="headerlink" title="deque 源码阅读"></a>deque 源码阅读</h3><p>deque 的继承图：</p><p><img src="https://bu.dusays.com/2024/04/22/66264cb38d065.png" alt="66-23.png"></p><p>deque 的原理图：</p><p><img src="https://s2.loli.net/2024/04/22/7oDRV5AvWfYGKHZ.png" alt="66-24.png"></p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>容器的清空：</p><p><img src="https://bu.dusays.com/2024/04/22/66266e03af909.png" alt="66-25.png"></p><p>list 的排序相关：</p><p><img src="https://s2.loli.net/2024/04/22/nToXG5cmRUviHzP.png" alt="66-26.png"></p><p>vector 的 insert 扩容机制：<br>对于 push_back 而言，每次插入的个数是一定的，那么按照两倍的方法进行扩容，是 OK 的。但是对于 insert 而言，每次插入元素的个数是不确定的，所以没有一个统一的标准进行扩容。</p><ul><li>令 capacity() = n, size() = m, 将要插入 t 个元素</li><li>t &lt; n-m, 不扩容</li><li>n-m &lt; t &lt; m, 按照 2*m 进行扩容</li><li>t &gt; n-m, m &lt; t &lt; n, 按照 t+m 进行扩容</li><li>t &gt; n-m, t &gt; n, 按照 t+m 进行扩容</li></ul><h2 id="multi-set-map"><a href="#multi-set-map" class="headerlink" title="(multi)set/map"></a>(multi)set/map</h2><p>同样是很杂的笔记。</p><p>一些魔咒：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; aa = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">87</span>&#125;;</span><br><span class="line"></span><br><span class="line">    set&lt;<span class="type">int</span>&gt;::iterator it = aa.<span class="built_in">find</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span>(it == aa.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not exist.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;exist.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 吟唱魔咒</span></span><br><span class="line">    pair&lt;set&lt;<span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt; ret = aa.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret.second)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入成功 &quot;</span> &lt;&lt; *ret.first &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">display</span>(aa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exist.</span></span><br><span class="line"><span class="comment">插入成功 8</span></span><br><span class="line"><span class="comment">1  2  3  4  5  6  7  8  87 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>针对于自定义类型用法（定义小于号）：</p><ul><li>模板的特化方式</li><li><img src="https://s2.loli.net/2024/04/23/rXRWfSJHNzy4kAu.png" alt="66-27.png"></li><li>重载运算符</li><li><img src="https://bu.dusays.com/2024/04/23/662773e3a3110.png" alt="66-28.png"></li><li>函数对象（仿函数）</li><li><img src="https://bu.dusays.com/2024/04/23/662773fc84e88.png" alt="66-29.png"></li></ul><p>multiset 的一些用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::multiset;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">const</span> multiset&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : a) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">show</span>(number);</span><br><span class="line"></span><br><span class="line">    std::pair&lt;multiset&lt;<span class="type">int</span>&gt;::iterator, multiset&lt;<span class="type">int</span>&gt;::iterator&gt; ret </span><br><span class="line">        = number.<span class="built_in">equal_range</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">while</span>(ret.first != ret.second) &#123;</span><br><span class="line">        cout &lt;&lt; *ret.first &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ++ ret.first;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 1 3 3 5 5 5 5 7 7 9 100 </span></span><br><span class="line"><span class="comment">5 5 5 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="作业-文本查询再探"><a href="#作业-文本查询再探" class="headerlink" title="作业-文本查询再探"></a>作业-文本查询再探</h2><p>在之前的基础上，支持逻辑运算与、或、非，进行文本查询。</p><p>很恶心的作业，让你充分理解为什么说 C++ Primer 编排垃圾。</p><p>书中没有完整的程序，代码也散落各处，有的代码甚至在几百页之前。</p><p>这个作业如果只是要完成功能的话，还是很容易想到转换成集合的运算的，只是我实在无法想象要怎么面向对象地写出七八个类来，因此直接看书中的代码了。</p><p>对于不会设计类的我来说，还是很有启发的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextQuery</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> line_no = std::vector&lt;std::string&gt;::size_type;</span><br><span class="line">    <span class="built_in">TextQuery</span>(std::ifstream&amp;);</span><br><span class="line">    <span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="type">const</span> std::string&amp;)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; file; <span class="comment">// 输入文件</span></span><br><span class="line">    <span class="comment">// 单词到行号集合的指针的映射</span></span><br><span class="line">    std::map&lt;std::string, std::shared_ptr&lt;std::set&lt;line_no&gt;&gt;&gt; wm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(std::ifstream&amp; is): <span class="built_in">file</span>(<span class="keyword">new</span> std::vector&lt;std::string&gt;) &#123;</span><br><span class="line">    std::string text;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(is, text)) &#123;</span><br><span class="line">        file-&gt;<span class="built_in">push_back</span>(text);</span><br><span class="line">        <span class="type">int</span> n = file-&gt;<span class="built_in">size</span>() <span class="number">-1</span>; <span class="comment">// 当前行号</span></span><br><span class="line">        <span class="function">std::istringstream <span class="title">line</span><span class="params">(text)</span></span>;</span><br><span class="line">        std::string word;</span><br><span class="line">        <span class="keyword">while</span>(line &gt;&gt; word) &#123;</span><br><span class="line">            <span class="comment">// 若单词不在 wm 中，以之为下标在 wm 中添加一项</span></span><br><span class="line">            <span class="keyword">auto</span>&amp; lines = wm[word];  <span class="comment">// lines 是一个 shared_ptr</span></span><br><span class="line">            <span class="keyword">if</span>(!lines) <span class="comment">// 第一次遇到这个单词时，此指针为空</span></span><br><span class="line">                lines.<span class="built_in">reset</span>(<span class="keyword">new</span> std::set&lt;line_no&gt;); <span class="comment">// 分配一个新 set</span></span><br><span class="line">            lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryResult</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> line_no = TextQuery::line_no;</span><br><span class="line">    <span class="built_in">QueryResult</span>(std::string s,</span><br><span class="line">                std::shared_ptr&lt;std::set&lt;line_no&gt;&gt; p,</span><br><span class="line">                std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; f):</span><br><span class="line">                <span class="built_in">sought</span>(s), <span class="built_in">lines</span>(p), <span class="built_in">file</span>(f) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    std::set&lt;line_no&gt;::<span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lines-&gt;<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::set&lt;line_no&gt;::<span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lines-&gt;<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; <span class="built_in">get_file</span>() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string sought;                            <span class="comment">// 查询单词</span></span><br><span class="line">    std::shared_ptr&lt;std::set&lt;line_no&gt;&gt; lines;      <span class="comment">// 出现的行号</span></span><br><span class="line">    std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; file; <span class="comment">// 保存每行</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">TextQuery::query</span><span class="params">(<span class="type">const</span> std::string&amp; sought)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若未找到 sought, 返回指向此 set 的指针</span></span><br><span class="line">    <span class="type">static</span> std::shared_ptr&lt;std::set&lt;line_no&gt;&gt; <span class="built_in">noData</span>(<span class="keyword">new</span> std::set&lt;line_no&gt;);</span><br><span class="line">    <span class="comment">// 使用 find() 而不是下标运算符来查找单词，避免将单词添加到 wm 中</span></span><br><span class="line">    <span class="keyword">auto</span> loc = wm.<span class="built_in">find</span>(sought);</span><br><span class="line">    <span class="keyword">if</span>(loc == wm.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, noData, file); <span class="comment">// 未找到</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">QueryResult</span>(sought, loc-&gt;second, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp; os, <span class="type">const</span> QueryResult&amp; qr)</span> </span>&#123;</span><br><span class="line">    os &lt;&lt; qr.sought &lt;&lt; <span class="string">&quot; occurs &quot;</span> </span><br><span class="line">       &lt;&lt; qr.lines-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; time(s) &quot;</span>&lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> num : *qr.lines) </span><br><span class="line">        os &lt;&lt; <span class="string">&quot;(line &quot;</span> &lt;&lt; num+<span class="number">1</span> &lt;&lt; <span class="string">&quot;) &quot;</span></span><br><span class="line">           &lt;&lt; *(qr.file-&gt;<span class="built_in">begin</span>() + num) &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query_base</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">using</span> line_no = TextQuery::line_no; <span class="comment">// 用于 eval 函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Query_base</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">    <span class="comment">// eval 返回与当前 Query 匹配的 QueryResult</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// rep 是表示查询的一个 string</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个管理 Query_base 继承体系的接口类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~ (<span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> | (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp; (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Query&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Query</span>(<span class="type">const</span> std::string&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口函数，调用对应的 Query_base 操作</span></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q-&gt;<span class="built_in">eval</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> q-&gt;<span class="built_in">rep</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Query</span>(std::shared_ptr&lt;Query_base&gt; query): <span class="built_in">q</span>(query) &#123;&#125;</span><br><span class="line">    std::shared_ptr&lt;Query_base&gt; q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> Query&amp; query) &#123;</span><br><span class="line">    <span class="keyword">return</span> os &lt;&lt; query.<span class="built_in">rep</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordQuery</span>: <span class="keyword">public</span> Query_base &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Query</span>; <span class="comment">// Query 使用 WordQuery 的构造函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">WordQuery</span>(<span class="type">const</span> std::string&amp; s): <span class="built_in">query_word</span>(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; t)</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="built_in">query</span>(query_word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query_word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string query_word;  <span class="comment">// 要查找的单词</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Query::Query</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span>: q(new WordQuery(s)) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotQuery</span>: <span class="keyword">public</span> Query_base &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> ~ (<span class="type">const</span> Query&amp;);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">NotQuery</span>(<span class="type">const</span> Query&amp; q): <span class="built_in">query</span>(q) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;~(&quot;</span> + query.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Query query;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span> ~ (<span class="type">const</span> Query&amp; operand) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">NotQuery</span>(operand));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryQuery</span>: <span class="keyword">public</span> Query_base &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">BinaryQuery</span>(<span class="type">const</span> Query&amp; l, <span class="type">const</span> Query&amp; r, std::string s):</span><br><span class="line">               <span class="built_in">lhs</span>(l), <span class="built_in">rhs</span>(r), <span class="built_in">opSym</span>(s) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::string <span class="title">rep</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + lhs.<span class="built_in">rep</span>() + <span class="string">&quot; &quot;</span> + opSym + <span class="string">&quot; &quot;</span> + rhs.<span class="built_in">rep</span>() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Query lhs, rhs;</span><br><span class="line">    std::string opSym;  <span class="comment">// 运算符的名字</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndQuery</span>: <span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> &amp; (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="built_in">AndQuery</span>(<span class="type">const</span> Query&amp; left, <span class="type">const</span> Query&amp; right):</span><br><span class="line">            <span class="built_in">BinaryQuery</span>(left, right, <span class="string">&quot;&amp;&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span> &amp; (<span class="type">const</span> Query&amp; lhs, <span class="type">const</span> Query&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">AndQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrQuery</span>: <span class="keyword">public</span> BinaryQuery &#123;</span><br><span class="line">    <span class="keyword">friend</span> Query <span class="keyword">operator</span> | (<span class="type">const</span> Query&amp;, <span class="type">const</span> Query&amp;);</span><br><span class="line">    <span class="built_in">OrQuery</span>(<span class="type">const</span> Query&amp; left, <span class="type">const</span> Query&amp; right):</span><br><span class="line">            <span class="built_in">BinaryQuery</span>(left, right, <span class="string">&quot;|&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QueryResult <span class="title">eval</span><span class="params">(<span class="type">const</span> TextQuery&amp;)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Query <span class="keyword">operator</span> | (<span class="type">const</span> Query&amp; lhs, <span class="type">const</span> Query&amp; rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Query_base&gt;(<span class="keyword">new</span> <span class="built_in">OrQuery</span>(lhs, rhs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">OrQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> right = rhs.<span class="built_in">eval</span>(text), left = lhs.<span class="built_in">eval</span>(text);</span><br><span class="line">    <span class="keyword">auto</span> ret_lines = </span><br><span class="line">        std::make_shared&lt;std::set&lt;line_no&gt;&gt;(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>());</span><br><span class="line">    ret_lines-&gt;<span class="built_in">insert</span>(right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">AndQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> left = lhs.<span class="built_in">eval</span>(text), right = rhs.<span class="built_in">eval</span>(text);</span><br><span class="line">    <span class="keyword">auto</span> ret_lines = std::make_shared&lt;std::set&lt;line_no&gt;&gt; ();</span><br><span class="line">    <span class="built_in">set_intersection</span>(left.<span class="built_in">begin</span>(), left.<span class="built_in">end</span>(),</span><br><span class="line">                     right.<span class="built_in">begin</span>(), right.<span class="built_in">end</span>(), </span><br><span class="line">                     <span class="built_in">inserter</span>(*ret_lines, ret_lines-&gt;<span class="built_in">begin</span>()));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, left.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QueryResult <span class="title">NotQuery::eval</span><span class="params">(<span class="type">const</span> TextQuery&amp; text)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> result = query.<span class="built_in">eval</span>(text);</span><br><span class="line">    <span class="keyword">auto</span> ret_lines = std::make_shared&lt;std::set&lt;line_no&gt;&gt; ();</span><br><span class="line">    <span class="keyword">auto</span> beg = result.<span class="built_in">begin</span>(), end = result.<span class="built_in">end</span>();</span><br><span class="line">    <span class="keyword">auto</span> sz = result.<span class="built_in">get_file</span>()-&gt;<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> n = <span class="number">0</span>; n != sz; n++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(beg == end || *beg != n) </span><br><span class="line">            ret_lines-&gt;<span class="built_in">insert</span>(n);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(beg != end) </span><br><span class="line">            ++beg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QueryResult</span>(<span class="built_in">rep</span>(), ret_lines, result.<span class="built_in">get_file</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;text.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">TextQuery <span class="title">file</span><span class="params">(infile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query q =  Query(&quot;Daddy&quot;);</span></span><br><span class="line">    <span class="comment">// Query q = ~ Query(&quot;Alice&quot;);</span></span><br><span class="line">    <span class="comment">// Query q = Query(&quot;hair&quot;) | Query(&quot;Alice&quot;);</span></span><br><span class="line">    <span class="comment">// Query q = Query(&quot;hair&quot;) &amp; Query(&quot;Alice&quot;);</span></span><br><span class="line">    Query q = <span class="built_in">Query</span>(<span class="string">&quot;fiery&quot;</span>) &amp; <span class="built_in">Query</span>(<span class="string">&quot;bird&quot;</span>) | <span class="built_in">Query</span>(<span class="string">&quot;wind&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> results = q.<span class="built_in">eval</span>(file);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Executing Query for: &quot;</span> &lt;&lt; q &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">print</span>(std::cout, results) &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    infile.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面代码缺失了处理标点符号的逻辑，应此输出与答案不一致，但缺失部分都对的上。处理标点符号的逻辑我就不写了，<del>应该不难</del>。</p><p>贴个测试用例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Alice Emma has long flowing red hair. </span><br><span class="line">Her Daddy says when the wind blows </span><br><span class="line">through her hair, it looks almost alive, </span><br><span class="line">like a fiery bird in flight. </span><br><span class="line">A beautiful fiery bird, he tells her, </span><br><span class="line">magical but untamed. </span><br><span class="line">&quot;Daddy, shush, there is no such thing,&quot; </span><br><span class="line">she tells him, at the same time wanting </span><br><span class="line">him to tell her more.</span><br><span class="line">Shyly, she asks, &quot;I mean, Daddy, is there?&quot;</span><br></pre></td></tr></table></figure><h2 id="单例模式的模板形式"><a href="#单例模式的模板形式" class="headerlink" title="单例模式的模板形式"></a>单例模式的模板形式</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;~point()&quot;</span> &lt;&lt; std::endl; <span class="comment">// for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> T* <span class="title">getInstance</span><span class="params">(Args... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pInstance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            _pInstance = <span class="keyword">new</span> <span class="built_in">T</span>(args...);</span><br><span class="line">            _ar; <span class="comment">// 为了在模板参数推导时创建 ar 对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _pInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AutoRelease</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">AutoRelease</span>() &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;~AutoRelease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">if</span>(_pInstance) &#123;</span><br><span class="line">                <span class="keyword">delete</span> _pInstance;</span><br><span class="line">                _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">/* _ar; */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Singleton</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Singleton()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> T* _pInstance;</span><br><span class="line">    <span class="type">static</span> AutoRelease _ar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* Singleton&lt;T&gt;::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> Singleton&lt;T&gt;::AutoRelease Singleton&lt;T&gt;::_ar;</span><br><span class="line"><span class="comment">// typename 表明是一个类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point* pt1 = Singleton&lt;point&gt;::<span class="built_in">getInstance</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    point* pt2 = Singleton&lt;point&gt;::<span class="built_in">getInstance</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    pt1-&gt;<span class="built_in">print</span>();</span><br><span class="line">    pt2-&gt;<span class="built_in">print</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pt1 = &quot;</span> &lt;&lt; pt1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;pt2 = &quot;</span> &lt;&lt; pt2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AutoRelease()</span></span><br><span class="line"><span class="comment">构造函数调用</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">pt1 = 0x5ff914de52c0</span></span><br><span class="line"><span class="comment">pt2 = 0x5ff914de52c0</span></span><br><span class="line"><span class="comment">~AutoRelease()</span></span><br><span class="line"><span class="comment">~point()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="再次封装-log4cpp"><a href="#再次封装-log4cpp" class="headerlink" title="再次封装 log4cpp"></a>再次封装 log4cpp</h2><p>实现log4cpp的封装，使其可以像printf一样使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testlogger.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> wd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world %d%s\n&quot;</span>, number,pstr);</span><br><span class="line">    <span class="built_in">LogError</span>(<span class="string">&quot;hello world, %s %d\n&quot;</span>, pstr, number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello world 10hello world</span></span><br><span class="line"><span class="comment">Mylogger()</span></span><br><span class="line"><span class="comment">2049-02-30 22:45:08,333 MyCat [ERROR] [testlogger.cc:test:11]hello world, hello world 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myLogger.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MYLOGGER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MYLOGGER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Category.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mylogger</span>&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Priority</span> &#123;</span><br><span class="line">        ERROR = <span class="number">300</span>, </span><br><span class="line">        WARN, </span><br><span class="line">        INFO, </span><br><span class="line">        DEBUG</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> Mylogger* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">warn</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">error</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">info</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, Args... args)</span></span>&#123;</span><br><span class="line">        _mycat.<span class="built_in">debug</span>(msg, args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPriority</span><span class="params">(Priority p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Mylogger</span>();</span><br><span class="line">    ~<span class="built_in">Mylogger</span>();</span><br><span class="line"></span><br><span class="line">    log4cpp::Category&amp; _mycat;</span><br><span class="line">    <span class="type">static</span> Mylogger* _pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prefix(msg) string(<span class="string">&quot;[&quot;</span>)                   \</span></span><br><span class="line"><span class="meta">    .append(__FILE__).append(<span class="string">&quot;:&quot;</span>)                 \</span></span><br><span class="line"><span class="meta">    .append(__FUNCTION__).append(<span class="string">&quot;:&quot;</span>)             \</span></span><br><span class="line"><span class="meta">    .append(std::to_string(__LINE__)).append(<span class="string">&quot;]&quot;</span>) \</span></span><br><span class="line"><span class="meta">    .append(msg).c_str()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ##__VA_ARGS__ 宏前面加上 ## 的作用在于，当可变参数个数变为零时，</span></span><br><span class="line"><span class="comment">// 这里的 ## 会去掉前面多余的 “,”  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogWarn(msg, ...) Mylogger::getInstance()-&gt;warn(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogError(msg, ...) Mylogger::getInstance()-&gt;<span class="keyword">error</span>(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogInfo(msg, ...) Mylogger::getInstance()-&gt;info(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LogDebug(msg, ...) Mylogger::getInstance()-&gt;debug(prefix(msg), ##__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myLogger.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myLogger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/PatternLayout.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/OstreamAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/FileAppender.hh&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;log4cpp/Priority.hh&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">Mylogger* Mylogger::_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Mylogger* <span class="title">Mylogger::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">nullptr</span> == _pInstance) &#123;</span><br><span class="line">        _pInstance = <span class="keyword">new</span> <span class="built_in">Mylogger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_pInstance) &#123;</span><br><span class="line">        <span class="keyword">delete</span> _pInstance;</span><br><span class="line">        _pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::<span class="built_in">Mylogger</span>()</span><br><span class="line">: _mycat(log4cpp::Category::<span class="built_in">getRoot</span>().<span class="built_in">getInstance</span>(<span class="string">&quot;MyCat&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> log4cpp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Mylogger()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    PatternLayout* ppl1 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl1-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line">    PatternLayout* ppl2 = <span class="keyword">new</span> <span class="built_in">PatternLayout</span>();</span><br><span class="line">    ppl2-&gt;<span class="built_in">setConversionPattern</span>(<span class="string">&quot;%d %c [%p] %m%n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志的目的地</span></span><br><span class="line">    OstreamAppender* poa = <span class="keyword">new</span> <span class="built_in">OstreamAppender</span>(<span class="string">&quot;OSA&quot;</span>, &amp;cout);</span><br><span class="line">    poa-&gt;<span class="built_in">setLayout</span>(ppl1);</span><br><span class="line">    FileAppender* pfa = <span class="keyword">new</span> <span class="built_in">FileAppender</span>(<span class="string">&quot;FA&quot;</span>, <span class="string">&quot;zy.txt&quot;</span>);</span><br><span class="line">    pfa-&gt;<span class="built_in">setLayout</span>(ppl2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的过滤器</span></span><br><span class="line">    _mycat.<span class="built_in">setPriority</span>(Priority::DEBUG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目的地</span></span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(poa);</span><br><span class="line">    _mycat.<span class="built_in">addAppender</span>(pfa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mylogger::~<span class="built_in">Mylogger</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~Mylogger()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Category::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::warn</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">warn</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::error</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::debug</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">debug</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span></span>&#123;</span><br><span class="line">    _mycat.<span class="built_in">info</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mylogger::setPriority</span><span class="params">(Priority p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WARN:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::WARN);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ERROR:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::ERROR);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> INFO:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::INFO);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DEBUG:</span><br><span class="line">        _mycat.<span class="built_in">setPriority</span>(log4cpp::Priority::DEBUG);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// namespace wd</span></span><br></pre></td></tr></table></figure><h2 id="unordered-multi-set-map"><a href="#unordered-multi-set-map" class="headerlink" title="unordered_(multi)set/map"></a>unordered_(multi)set/map</h2><p>Unordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1) average, O(n) worst-case complexity).</p><ul><li><code>unordered_set</code>: collection of unique keys, hashed by keys</li><li><code>unordered_map</code>: collection of key-value pairs, hashed by keys, keys are unique</li><li><code>unordered_multiset</code>: collection of keys, hashed by keys</li><li><code>unordered_multimap</code>: collection of key-value pairs, hashed by keys</li></ul><p><code>std::hash&lt;Key&gt;::operator()</code>例子（来自 cppreference ）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    std::<span class="type">uint64_t</span> ID;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">hash</span>&lt;Employee&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Employee&amp; employee)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">             <span class="comment">// computes the hash of an employee using a variant</span></span><br><span class="line">             <span class="comment">// of the Fowler-Noll-Vo hash function</span></span><br><span class="line">             <span class="keyword">constexpr</span> std::<span class="type">uint64_t</span> prime&#123;<span class="number">0x100000001B3</span>&#125;;</span><br><span class="line">             std::<span class="type">uint64_t</span> result&#123;<span class="number">0xcbf29ce484222325</span>&#125;;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">for</span> (std::<span class="type">uint64_t</span> i&#123;&#125;, ie = employee.name.<span class="built_in">size</span>(); i != ie; ++i)</span><br><span class="line">                 result = (result * prime) ^ employee.name[i];</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">return</span> result ^ (employee.ID &lt;&lt; <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Employee employee;</span><br><span class="line">    employee.name = <span class="string">&quot;Zaphod Beeblebrox&quot;</span>;</span><br><span class="line">    employee.ID = <span class="number">42</span>;</span><br><span class="line"> </span><br><span class="line">    std::hash&lt;Employee&gt; hash_fn;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">hash_fn</span>(employee) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">12615575401975788567</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>unordered_set 的模板形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Key</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hash</span> = std::hash&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> KeyEqual = std::equal_to&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> Allocator = std::allocator&lt;Key&gt;</span><br><span class="line">&gt; <span class="keyword">class</span> unordered_set;</span><br></pre></td></tr></table></figure><p>unordered_set 特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; number = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10  2  5  9  7  3  1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于自定义类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(int, int)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;~point()&quot; &lt;&lt; std::endl; // for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(const point&amp;)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">hash</span>&lt;point&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 设计哈希函数</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// namespace std</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;we&#x27;ve compared == here&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">           &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve compared == here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于上面代码实现的功能而言，也可以使用函数对象（仿函数）的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y)&#123;</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(int, int)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>()&#123; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">// destructor cannot have any parameters</span></span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;~point()&quot; &lt;&lt; std::endl; // for test</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy)&#123;</span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; &quot;point(const point&amp;)&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;we&#x27;ve compared == here&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">           &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point, HashPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve compared == here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>也可以这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">equal_to</span>&lt;point&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kafaka.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">               &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="comment">// namespace std</span></span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point, HashPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">kafaka.</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>还可以这样（闲的）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EqualToPoint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kafaka2.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">               &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;point, HashPoint, EqualToPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">kafaka.</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(8, 10)  (3, 2)  (-1, 2)  (1, -2)  (1, 2)  (4, 5) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于 unordered_multiset 的情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::unordered_multiset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">point</span><span class="params">(<span class="type">int</span> x=<span class="number">0</span>, <span class="type">int</span> y=<span class="number">0</span>)</span>:ix(x),iy(y) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; ix &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">                  &lt;&lt; iy &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">const</span> point&amp; rhs):<span class="built_in">ix</span>(rhs.ix), <span class="built_in">iy</span>(rhs.iy) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ix;</span><br><span class="line">    <span class="type">int</span> iy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashPoint</span> &#123;</span><br><span class="line">    <span class="function">std::<span class="type">uint64_t</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设计哈希函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;we&#x27;ve hashed here&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (rhs.<span class="built_in">getX</span>() &lt;&lt; <span class="number">1</span>) ^ (rhs.<span class="built_in">getY</span>() &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EqualToPoint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> point&amp; lhs, <span class="type">const</span> point&amp; rhs)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kafaka2.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> (lhs.<span class="built_in">getX</span>() == rhs.<span class="built_in">getX</span>())</span><br><span class="line">               &amp;&amp; (lhs.<span class="built_in">getY</span>() == rhs.<span class="built_in">getY</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="type">const</span> point&amp; rhs) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; rhs.ix</span><br><span class="line">       &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; rhs.iy &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Container&amp; con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;elem : con)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_multiset&lt;point, HashPoint, EqualToPoint&gt; number = &#123;</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">-1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">-2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="built_in">point</span>(<span class="number">8</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">display</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">kafaka2.</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">we&#x27;ve hashed here</span></span><br><span class="line"><span class="comment">(-1, 2)  (1, -2)  (1, 2)  (1, 2)  (8, 10)  (3, 2)  (4, 5)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>unordered_map 和 unordered_multimap 大体上和上面思路相同。</p><p>针对 string 而言，已经实现了 hash ，所以就不需要再进行 hash 函数的设计。</p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">T</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Container</span> = std::vector&lt;T&gt;,</span><br><span class="line">    <span class="keyword">class</span> Compare = std::less&lt;<span class="keyword">typename</span> Container::value_type&gt; <span class="comment">// 萃取</span></span><br><span class="line">&gt; <span class="keyword">class</span> priority_queue;</span><br></pre></td></tr></table></figure><p>这部分内容可以参考之前的笔记，或者参考：<br><a href="https://en.cppreference.com/w/cpp/container/priority_queue">https://en.cppreference.com/w/cpp/container/priority_queue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前情提要： &lt;a href=&quot;https://loveofpeach.github.io/posts/2249c81f.html&quot;&gt;CppNote2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="编程" scheme="https://loveofpeach.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://loveofpeach.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Redis Note</title>
    <link href="https://loveofpeach.github.io/posts/ac87c2.html"/>
    <id>https://loveofpeach.github.io/posts/ac87c2.html</id>
    <published>2024-01-30T09:10:47.000Z</published>
    <updated>2024-06-25T17:11:20.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NoSQL-和-Redis-概述"><a href="#NoSQL-和-Redis-概述" class="headerlink" title="NoSQL 和 Redis 概述"></a>NoSQL 和 Redis 概述</h2><p>在日常的开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在<strong>高并发</strong>的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，<strong>磁盘读/写速度比较慢</strong>的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成<strong>成千上万次的读/写操作</strong>，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p><p>为了克服上述的问题，项目通常会引入 NoSQL 技术，这是一种<strong>基于内存</strong>的数据库，并且提供一定的持久化功能。</p><p>NoSQL，指的是<strong>非关系型数据库</strong>。NoSQL（<strong>Not Only SQL</strong>），是对不同于传统的关系型数据库的数据库管理系统的统称。对 NoSQL 最普遍的解释是”非关联型的”，强调 Key-Value Stores 和文档数据库的优点，而不是单纯的反对 RDBMS。</p><p><strong>NoSQL 用于超大规模数据的存储。</strong>（例如谷歌或 Facebook 每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><p>NoSQL 数据库主要有以下四类：</p><ul><li>基于键值对 key-value 类型：Redis，memcached</li><li>列存储数据库 Column-oriented Graph：HBase</li><li>图形数据库 Graphs based：Neo4j</li><li>文档型数据库： MongoDB<ul><li>MongoDB是一个基于分布式文件存储的数据库，主要用来处理大量的文档。    </li></ul></li></ul><p>Redis 是什么？<br><strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>ervice（远程字典服务器）<br>Redis 是一个开源（BSD许可）的，C语言编写的，高性能的数据结构存储系统，它可以用作<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong>。它<strong>基于内存</strong>运行并支持<strong>持久化</strong>的 NoSQL 数据库，是当前最热门的 NoSQL 数据库之一。    </p><p>相关网站：</p><ul><li>redis中文官网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></li><li>redis英文官网：<a href="https://redis.io/">https://redis.io/</a></li></ul><p>Redis 的特性：持久化、丰富的数据类型、数据备份（主从复制）。</p><p>Redis 的优点：</p><ul><li>性能极高</li><li>丰富的数据类型<ul><li>Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作</li></ul></li><li>原子性</li><li>丰富的特性<ul><li>Redis 支持 publish / subscribe 、通知、key 过期等特性</li></ul></li></ul><p>安装按官网走即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>Redis 是一个字典结构的存储服务器，而实际上一个 Redis 实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从 0 开始的递增数字命名，Redis <strong>默认支持 16 个数据库</strong>（可以通过配置文件支持更多，无上限），可以通过配置 databases 来修改这一数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[15]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>进入 redis ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>数据库的切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[10]&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br><span class="line">127.0.0.1:6379[15]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>不言之教：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k12 12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys k?</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br></pre></td></tr></table></figure><p>删除 key ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k12&quot;</span><br><span class="line">3) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; del k12</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del k12</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>清除当前数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><p>清空所有数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure><p>判断某个 key 是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; Exists k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; Exists k12</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>把 key 从当前库移动到目标库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; move k1 15</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>查看 key 的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type k2</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>为给定的key设置过期的时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">127.0.0.1:6379&gt; Expire k2 10</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ttl k2</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><p>在上面的命令中，-2 表示数据已经消失，-1 表示该数据不会过期。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="https://s2.loli.net/2024/01/31/fuDdGLaOZI1xyRs.png" alt="65-1.png"></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 是 redis 最基本的类型，可以理解成一个 key 对应一个 value . 一个 string 类型的值最大能存储512MB .</p><p>string 类型是<strong>二进制安全</strong>的。意思是 redis 的 string <strong>可以包含任何数据</strong>。如 jpg 图片或序列化的对象。</p><p>设定指定key的值、获取指定key的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>设置、获取多个给定的 key 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k11 11 k12 12 k13 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k11 k12 k13</span><br><span class="line">1) &quot;11&quot;</span><br><span class="line">2) &quot;12&quot;</span><br><span class="line">3) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>二进制安全的体现（设置的是什么，获取的就是什么）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k22 hello\0world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k22</span><br><span class="line">&quot;hello\\0world&quot;</span><br></pre></td></tr></table></figure><p>返回字符串的子串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k3 0 1</span><br><span class="line">&quot;he&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k3 0 3</span><br><span class="line">&quot;hell&quot;</span><br><span class="line">127.0.0.1:6379&gt; set k4 askgalfja;fegrga</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">&quot;askgalfja;fegrga&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE k4 0 -1</span><br><span class="line">&quot;askgalfja;fegrga&quot;</span><br></pre></td></tr></table></figure><p>覆盖字符串的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 0 wor</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;worlo&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 waipoqiaoyaoayao</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;setrange&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE k3 0 waipoqiaoyaoayao</span><br><span class="line">(integer) 16</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;waipoqiaoyaoayao&quot;</span><br></pre></td></tr></table></figure><p>设新值，返回旧值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETSET k1 hello</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>set 值，并设置过期时间（以秒为单位）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX k1 10 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;200&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><p>加一 / 加很多（被加的必须是数值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 101</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 102</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 103</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 104</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">(integer) 105</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;105&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCRBY k1 95</span><br><span class="line">(integer) 200</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;200&quot;</span><br></pre></td></tr></table></figure><h3 id="list（双向链表）"><a href="#list（双向链表）" class="headerlink" title="list（双向链表）"></a>list（双向链表）</h3><p>插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3 4 5 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; rpush list1 7 8 9 10</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line"> 1) &quot;6&quot;</span><br><span class="line"> 2) &quot;5&quot;</span><br><span class="line"> 3) &quot;4&quot;</span><br><span class="line"> 4) &quot;3&quot;</span><br><span class="line"> 5) &quot;2&quot;</span><br><span class="line"> 6) &quot;1&quot;</span><br><span class="line"> 7) &quot;7&quot;</span><br><span class="line"> 8) &quot;8&quot;</span><br><span class="line"> 9) &quot;9&quot;</span><br><span class="line">10) &quot;10&quot;</span><br></pre></td></tr></table></figure><p>出队：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop list1</span><br><span class="line">&quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;7&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">8) &quot;9&quot;</span><br></pre></td></tr></table></figure><p>通过下标设置列表元素的值，下标从0开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset list1 5 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;1000&quot;</span><br><span class="line">7) &quot;8&quot;</span><br><span class="line">8) &quot;9&quot;</span><br></pre></td></tr></table></figure><p>通过下标获取列表中的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list1 5</span><br><span class="line">&quot;1000&quot;</span><br></pre></td></tr></table></figure><p>从队头开始移除 count 个值为 value 的列表元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LREM key count value</span><br></pre></td></tr></table></figure><p>对一个列表进行修剪（trim），即，只保留指定区间内的元素，其余元素将被删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LTRIM list1 2 5</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;1000&quot;</span><br></pre></td></tr></table></figure><p>总结： redis 中的区间是左闭右闭的。</p><p>在列表的元素前插入元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert list1 after 1 200</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;200&quot;</span><br><span class="line">5) &quot;1000&quot;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set 是 String 类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据。</p><p>集合通过哈希表实现，增、删、查的复杂度为 O(1) .</p><p>增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset1 1 3 5 7 8 3 5 1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>查看个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard myset1</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>显示（此例有序系巧合）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;3&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line">5) &quot;8&quot;</span><br></pre></td></tr></table></figure><p>其它命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 判断member元素是否是集合key的成员</span><br><span class="line">SISMEMBER key member</span><br><span class="line"></span><br><span class="line"># 将member元素从source集合移动到destination集合</span><br><span class="line">SMOVE source destination member</span><br><span class="line"></span><br><span class="line">SREM key value       # 删除集合中值为value的元素</span><br><span class="line"></span><br><span class="line">SRANDMEMBER key num  # 在集合中随机选出num个</span><br><span class="line"></span><br><span class="line"># 移除并返回集合中一个/num个随机元素</span><br><span class="line">SPOP key [num]</span><br><span class="line"></span><br><span class="line">SDIFF key1 key2      # 求差集，key1-key2</span><br><span class="line">SINTER key1 key2     # 求交集</span><br><span class="line">SUNION key1 key2     # 求并集</span><br></pre></td></tr></table></figure><h3 id="sorted-set（zset）"><a href="#sorted-set（zset）" class="headerlink" title="sorted set（zset）"></a>sorted set（zset）</h3><p>有序集合和集合一样也是 string 类型元素的集合。</p><p>不同的是每个元素都会关联一个<strong>double类型的分数</strong>。redis 通过分数来为集合中的成员从小到大排序。</p><p>有序集合的成员是唯一的，但分数可以重复。</p><p>增：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset1 10 hello 30 world 20 peking</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>获取有序集合的成员数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard zset1</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>计算在有序集合中指定分数区间的成员数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount zset1 10 100</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount zset1 10 15</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>查看按照权重排序后的下标对应的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;peking&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 1 withscores</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;10&quot;</span><br><span class="line">3) &quot;peking&quot;</span><br><span class="line">4) &quot;20&quot;</span><br></pre></td></tr></table></figure><p><del>通过字典区间返回有序集合的成员</del>（分数要一致）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd zset2 10 ohmyzsh 10 ohmygod 10 hello 10 world</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [o</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [ok</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [w</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebylex zset2 [h [www</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;ohmygod&quot;</span><br><span class="line">3) &quot;ohmyzsh&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure><p>容易发现上面的区间是左闭右开的。</p><p>其它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 通过分数返回有序集合指定区间内的成员</span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] </span><br><span class="line"></span><br><span class="line">ZSCORE key member   # 返回有序集中，成员的分数值</span><br><span class="line"></span><br><span class="line"># 返回有序集中指定分数区间内的成员，分数从高到低排序</span><br><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES]</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash 是一个 string 类型的 field（字段）和 value（值）的映射表，hash 特别适合用于存储对象。</p><p>Key-value 模式不变，但 value 是一个键值对。</p><p>Redis 中的 hash 并不是采用哈希实现的，而是类似于以下方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;key, map&lt;key1, value&gt;&gt;</span><br></pre></td></tr></table></figure><p><code>HSET key field value</code>将哈希表 key 中的字段 field 的值设为 value ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset people name Mizuho gender woman age 17</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>获取给定字段的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget people name</span><br><span class="line">&quot;Mizuho&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget people gender</span><br><span class="line">&quot;woman&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget people age</span><br><span class="line">&quot;17&quot;</span><br></pre></td></tr></table></figure><p>获取字段和值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys people</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;gender&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals people</span><br><span class="line">1) &quot;Mizuho&quot;</span><br><span class="line">2) &quot;woman&quot;</span><br><span class="line">3) &quot;17&quot;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="Units"><a href="#Units" class="headerlink" title="Units"></a>Units</h3><p><img src="https://bu.dusays.com/2024/02/02/65bc7bca2f40d.png" alt="65-2.png"></p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1      # 绑定的ip</span><br><span class="line">protected-mode yes  # 保护模式</span><br><span class="line">port  6379          # 端口</span><br></pre></td></tr></table></figure><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes     # 以守护进程方式运行</span><br><span class="line">loglevel  notice  # 日志级别</span><br><span class="line">database  16      # 数据库数量 </span><br></pre></td></tr></table></figure><h3 id="snapshoting"><a href="#snapshoting" class="headerlink" title="snapshoting"></a>snapshoting</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              </span><br><span class="line"># 900秒(15分钟)后，若至少有1个key发生变化，dump内存快照</span><br><span class="line"></span><br><span class="line">save 300 10            </span><br><span class="line"># 300秒(5分钟)后，若至少有10个key发生变化，dump内存快照</span><br><span class="line"></span><br><span class="line">save 60 10000       </span><br><span class="line"># 60秒(1分钟)后，若至少有10000个key发生变化，dump内存快照</span><br></pre></td></tr></table></figure><p>（以下信息可能过期）：</p><ul><li>快照文件名 <code>dbfilename dump.rdb</code></li><li>保存目录名 <code>/var/lib/redis/6379</code></li></ul><h3 id="APPEND-ONLY-MODE"><a href="#APPEND-ONLY-MODE" class="headerlink" title="APPEND ONLY MODE"></a>APPEND ONLY MODE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 是否使用AOF持久化方式。默认不使用</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 持久化的AOF文件名</span><br><span class="line">appendfilename &quot;appendonly6381.aof&quot;</span><br><span class="line"></span><br><span class="line"># 在Redis的配置文件中存在三种AOF同步方式，分别是：</span><br><span class="line">appendfsync always     #每次有数据修改发生时都会写入AOF文件。</span><br><span class="line">appendfsync everysec   #每秒钟同步一次，该策略为AOF的缺省策略。</span><br><span class="line">appendfsync no         #从不同步。高效但是数据不会被持久化。</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="分类、概述"><a href="#分类、概述" class="headerlink" title="分类、概述"></a>分类、概述</h3><p>Redis 持久化分为 RDB 持久化和 AOF 持久化：前者将当前数据保存到硬盘（原理是将 Reids 在内存中的数据库记录定时 dump 到磁盘上的 RDB 持久化），后者则是将每次执行的写命令保存到硬盘（原理是将 Reids 的操作日志以追加的方式写入文件，类似于 MySQL 的 binlog）；由于 AOF 持久化的实时性更好，即当进程意外退出时丢失的数据更少，因此 AOF 是目前主流的持久化方式，不过 RDB 持久化仍然有其用武之地。</p><p>RDB 持久化方式在指定的时间间隔内对数据进行快照存储。</p><p>AOF 持久化方式记录每次写操作，服务器重启时会重新执行这些命令以恢复原始数据，AOF 命令以 redis 协议追加。Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</p><p>可以同时开启两种持久化方式。这种情况下，redis 重启时会优先载入 AOF 文件来恢复原始的数据。</p><h3 id="RDB-方式"><a href="#RDB-方式" class="headerlink" title="RDB 方式"></a>RDB 方式</h3><p>触发 RDB 快照：</p><ol><li><strong>在指定的时间间隔内，执行指定次数的写操作</strong></li><li>执行<code>save</code>（阻塞， 只管保存快照，其他的等待） 或者 bgsave （异步）命令</li><li>执行 flushall 命令，清空数据库所有数据</li><li>执行 shutdown 命令，保证服务器正常关闭且不丢失任何数据</li></ol><p>RDB 方式的优点：</p><ol><li>适合大规模的数据恢复，与 AOF 相比,在恢复大的数据集时，RDB 方式更快。</li><li>若业务对数据完整性和一致性要求不高，RDB 是很好的选择。</li></ol><p>RDB方式的缺点：</p><ol><li>数据的完整性和一致性不高，因为 RDB 可能在最后一次备份时宕机了。</li><li><strong>备份时占用内存</strong>，因为 Redis 在备份时会 fork 一个子进程，将数据写入一个临时文件（此时内存中的数据是原来的两倍），最后再将临时文件替换之前的备份文件。<br><img src="https://bu.dusays.com/2024/02/02/65bc8c7b21612.jpeg" alt="65-3.jpeg"></li></ol><h3 id="AOF-方式"><a href="#AOF-方式" class="headerlink" title="AOF 方式"></a>AOF 方式</h3><p>默认不开启 AOF 持久化方式，需要修改配置打开。</p><p>默认的 AOF 持久化策略是每秒钟 fsync 一次（把缓存中的写指令记录到磁盘中），因为在这种情况下，redis 仍可以保持高性能，而即使故障，也只会丢失最近 1 秒的数据。</p><p>重写（rewrite）：<br>AOF 的运作方式是不断地将命令追加到文件末尾，随着写入命令的增加， AOF 文件也会越来越大。例如，若对一个计数器调用 100 次<code>INCR</code>，那么仅为了保存这个计数器的当前值，AOF 文件就需要使用 100 条记录（entry）。而实际上，只用一条<code>SET</code>命令就足够了。<br>为此，Redis 支持一种特性，可以在不打断服务客户端的情况下，对 AOF 文件进行重建（rebuild）。</p><p>执行<code>BGREWRITEAOF</code>命令， Redis 将生成一个新的 AOF 文件，包含重建当前数据集所需的最少命令。Redis 2.2 需要手动执行<code>BGREWRITEAOF</code>命令；Redis 2.4 则可以自动触发 AOF 重写。</p><p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于64M时触发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>保证数据的完整性和一致性</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件易读性好，对文件进行分析（parse）也很轻松。导出（export）AOF 文件也非常简单：例如，若不小心执行了<code>FLUSHALL</code>命令，但只要<code>AOF</code>文件未被重写，那么只要停止服务器，移除 AOF 文件末尾的<code>FLUSHALL</code>命令，并重启 Redis，就可以将数据集恢复到<code>FLUSHALL</code>执行前的状态。</li></ul><p>缺点：</p><ul><li>大量数据恢复的时候，执行时间长</li><li>对于相同的数据集来说，AOF 文件的体积通常大于 RDB 文件的体积</li></ul><p>若只有 aof 持久化的方式，且 aof 文件损坏，则 redis 服务器无法启动。</p><p>损坏的 aof 文件修复，可尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo redis-check-aof --fix 文件名</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p>Redis 事务可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<strong>按顺序地串行化执行</strong>，而不会被其他命令插入，不许加塞。</p><p>Redis 事务有以下三个重要的保证：</p><ol><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，<strong>事务中任意命令执行失败，其余的命令依然被执行</strong>。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ol><p>一个事务从开始到执行会经历以下三个阶段：</p><ol><li>开始事务</li><li>命令入队</li><li>执行事务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k3 300</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) &quot;300&quot;</span><br><span class="line">3) (integer) 101</span><br></pre></td></tr></table></figure><p>redis 的事务不具有原子性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 400</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;400&quot;</span><br><span class="line">4) (integer) 102</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;102&quot;</span><br></pre></td></tr></table></figure><p>EXECABORT Transaction discarded because of previous errors :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; set k1 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k2 hello </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 400</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>取消事务，放弃执行事务块内的所有命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISCARD</span><br></pre></td></tr></table></figure><p><code>WATCH key [key ...]</code>，监视一个（多个）key ，如果在事务执行之前这个（这些）key 被其他命令改动，那么事务将被打断。</p><p><code>UNWATCH</code>取消<code>WATCH</code>命令对所有 key 的监视。</p><center><p style="color: red";>- - - - - “监视” 演示 - - - - -</p></center><p>开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch k3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 400</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>terminal 2 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k3 500</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;500&quot;</span><br></pre></td></tr></table></figure><p>terminal 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;500&quot;</span><br></pre></td></tr></table></figure><center><p style="color: red";>- - - - - “监视” 演示 END - - - - -</p></center><p>一旦执行<code>EXEC</code>，<code>WATCH</code>监控会被取消。</p><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><p>悲观锁：<br><strong>每次拿数据时都会先上锁</strong>。其他线程想要访问时，都需要阻塞挂起。传统的关系型数据库里用到了很多这种锁机制，如行锁、表锁、读锁、写锁等，都是在操作之前先上锁。</p><p>乐观锁（Optimistic Lock）【冲突检测和数据更新】：<br><strong>每次拿数据时不上锁</strong>。但更新时会使用版本号等机制，判断此期间内该数据是否被更新。乐观锁<strong>适用于多读</strong>的应用类型，可以提高吞吐量。数据库若提供类似于 write_condition 机制的其实都是乐观锁。</p><p>乐观锁策略：提交版本必须大于记录当前版本才能执行更新，一般会使用<strong>版本号机制</strong>或<strong>CAS操作</strong>实现。</p><p>version方式：<br>一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数，当数据被修改时，version 值加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，提交更新时，若刚才读取到的 version 值和当前数据库中的 version 值相等时才真正执行更新，否则重试更新操作，直到更新成功。</p><p>CAS（Compare And Swap）操作方式：<br>CAS 是乐观锁技术，涉及到三个操作数，数据所在的内存值V，预期值A，新值B。当需要更新时，判断当前内存值V与之前取到的值A是否相等，若相等，则用新值更新，若失败则重试。一般情况下是一个自旋操作，即不断的重试。</p><h2 id="主从复制、哨兵模式"><a href="#主从复制、哨兵模式" class="headerlink" title="主从复制、哨兵模式"></a>主从复制、哨兵模式</h2><p>持久化侧重解决的是 Redis 数据的单机备份问题（从内存到硬盘的备份）；而主从复制则侧重解决数据的多机热备。此外，主从复制还可以实现负载均衡和故障恢复。</p><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点（master），后者称为从节点（slave）；数据的复制是<strong>单向</strong>的，只能由主节点到从节点。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="https://www.youtube-nocookie.com/embed/M8RwlLZhtOI?si=clISeZjsqLiaNs6I" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p><br></p><p>本节课的 PDF 笔记：</p><div class="row"><iframe src="https://drive.google.com/file/d/1AerFNG6KZ3hRKiEOYGkbOJrv_1Zbk5Y5/preview" style="width:100%; height:550px"></iframe></div><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>一般而言，热点数据会去做缓存，缓存由定时任务刷新，但定时刷新会产生一个问题：当缓存服务器重启或者大量缓存集中在某一个时间段失效时，此时相当于没有缓存，所有对数据的请求直接走到数据库，带来很大压力。</p><p><img src="https://bu.dusays.com/2024/02/05/65c0ec28a43c9.png" alt="65-4.png"></p><p>解决方法：</p><ul><li><strong>将缓存失效时间分散开</strong>。比如可以在原有的失效时间基础上加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，很难引发集体失效的事件。</li><li><strong>不设置缓存的过期时间</strong>。有更新操作时就把热点的缓存全部更新，比如首页上的商品，当首页更新时，就把对应的数据替换掉。</li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿指一个 key 可能会在某些时间点被超高并发地访问，属于“热点”数据，不停地扛着大量并发的访问，当这个热点数据在缓存中过期失效的时候，大量的并发访问就会穿破缓存，转移到数据库上面。</p><p>解决方法：</p><ul><li>延长热点 key 的过期时间或者设置永不过期，如排行榜、首页等。</li><li>利用互斥锁保证同一时刻只有一个客户端可以查询底层数据库的这个数据，一旦查到数据就缓存至 Redis 内，避免其他大量请求同时穿过 Redis 访问底层数据库。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>要查询的数据不存在，缓存无法命中所以需要查询完数据库，但是数据是不存在的，此时数据库肯定会返回空，也就不会记录到缓存中，这样每次对该数据的查询都会穿过缓存去查询一次数据库。</p><p>解决方法：</p><ul><li>查询时做一些校验和过滤（权限校验，参数校验等等），判断这是一次正常的查询，还是异常的查询或是攻击，如果是不合法的参数或者查询，直接返回。</li><li>缓存空对象，如果数据库中不存在这个数据，也在缓存中保存这个 key，只是把 val 值记录为“不存在”、“空”这样的数据，下次再访问这个 key 时，就不会到数据库中做无用的查找了。</li><li>可以预先将数据库里面所有的 key 全部存到一个大的 map 里面，然后在过滤器中过滤掉那些不存在的 key. 但是需要考虑数据库的 key 是会更新的，此时需要考虑数据库 —&gt; map 的更新频率问题。类似于位图。</li></ul><h2 id="hiredis"><a href="#hiredis" class="headerlink" title="hiredis"></a>hiredis</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/redis/hiredis.git</span><br></pre></td></tr></table></figure><p>进行解压与安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf hiredis.tar.gz</span><br><span class="line"><span class="built_in">cd</span> hiredis</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>更新动态库配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>按照上面步骤安装之后，hiredis 的头文件会存在 /usr/local/include 下面，hiredis 的库文件存在 /usr/local/lib 下面。</p><p>编译方式：<br><code>g++ xxx.cc -o xxx -I /usr/local/include/hiredis -lhiredis</code>或者直接<code>g++ xxx.cc -lhiredis</code> 需要链接hiredis的库文件。</p><p>后续在代码中引用 hiredis 的头文件，可以直接使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br></pre></td></tr></table></figure><div class="row"><iframe src="https://drive.google.com/file/d/1asACieQELf93yK5e0SpIvgqAdUt-cLHC/preview" style="width:100%; height:550px"></iframe></div><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myRedis.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYREDIS_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYREDIS_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hiredis/hiredis.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRedis</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyRedis</span>();</span><br><span class="line">    ~<span class="built_in">MyRedis</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connect</span><span class="params">(<span class="type">const</span> string&amp; host, <span class="type">int</span> port)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(string key, string value)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">get</span><span class="params">(string key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    redisContext* _pConnect;</span><br><span class="line">    redisReply* _pReply;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyRedis.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyRedis::<span class="built_in">MyRedis</span>():_pConnect(<span class="literal">nullptr</span>), _pReply(<span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;MyRedis()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyRedis::~<span class="built_in">MyRedis</span>()&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~MyRedis()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pConnect)&#123;</span><br><span class="line">        <span class="built_in">redisFree</span>(_pConnect);</span><br><span class="line">        _pConnect = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">        _pReply = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyRedis::connect</span><span class="params">(<span class="type">const</span> string&amp; host, <span class="type">int</span> port)</span></span>&#123;</span><br><span class="line">    _pConnect = <span class="built_in">redisConnect</span>(host.<span class="built_in">c_str</span>(), port);</span><br><span class="line">    <span class="keyword">if</span>(_pConnect == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pConnect != <span class="literal">nullptr</span> &amp;&amp; _pConnect-&gt;err)&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;connect error : &quot;</span> &lt;&lt; _pConnect-&gt;errstr &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 连接成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyRedis::set</span><span class="params">(string key, string value)</span></span>&#123;</span><br><span class="line">    _pReply = (redisReply*) <span class="built_in">redisCommand</span>(_pConnect, <span class="string">&quot;SET %s %s&quot;</span>, key.<span class="built_in">c_str</span>(), value.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">        _pReply = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">MyRedis::get</span><span class="params">(string key)</span></span>&#123;</span><br><span class="line">    _pReply = (redisReply*) <span class="built_in">redisCommand</span>(_pConnect, <span class="string">&quot;GET %s&quot;</span>, key.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_pReply)&#123;</span><br><span class="line">        <span class="keyword">if</span>(_pReply-&gt;type == REDIS_REPLY_STRING)&#123;</span><br><span class="line">            string str = _pReply-&gt;str;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">freeReplyObject</span>(_pReply);</span><br><span class="line">            _pReply = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// testredis.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myRedis.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unique_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;MyRedis&gt; <span class="title">pRedis</span><span class="params">(<span class="keyword">new</span> MyRedis())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!pRedis-&gt;<span class="built_in">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>))&#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;connect error ! &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pRedis-&gt;<span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Get the name is &quot;</span> &lt;&lt; pRedis-&gt;<span class="built_in">get</span>(<span class="string">&quot;name&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~/mycode/example_reids$ <span class="built_in">ls</span></span><br><span class="line">MyRedis.cc  myRedis.h  testredis.cc</span><br><span class="line">wanko@wanko:~/mycode/example_reids$ g++ *.cc -lhiredis</span><br><span class="line">wanko@wanko:~/mycode/example_reids$ ./a.out</span><br><span class="line">MyRedis()</span><br><span class="line">Get the name is lili</span><br><span class="line">~MyRedis()</span><br></pre></td></tr></table></figure><p>此时回到数据库中查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wanko@wanko:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; type name</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;lili&quot;</span><br></pre></td></tr></table></figure><p>更进一步的拓展：<br><a href="https://github.com/sewenew/redis-plus-plus">https://github.com/sewenew/redis-plus-plus</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NoSQL-和-Redis-概述&quot;&gt;&lt;a href=&quot;#NoSQL-和-Redis-概述&quot; class=&quot;headerlink&quot; title=&quot;NoSQL 和 Redis 概述&quot;&gt;&lt;/a&gt;NoSQL 和 Redis 概述&lt;/h2&gt;&lt;p&gt;在日常的开发中，无不都是使用</summary>
      
    
    
    
    <category term="计算机" scheme="https://loveofpeach.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="redis" scheme="https://loveofpeach.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>线性代数笔记</title>
    <link href="https://loveofpeach.github.io/posts/35508c6a.html"/>
    <id>https://loveofpeach.github.io/posts/35508c6a.html</id>
    <published>2024-01-28T18:38:46.000Z</published>
    <updated>2024-01-28T18:57:17.037Z</updated>
    
    <content type="html"><![CDATA[<p>存档一下以前的知识，也许以后会进一步学习。</p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><div class="row"><iframe src="https://drive.google.com/file/d/1LVjZF-HDF6qXgoqa1j1OMri7_IiksgRp/preview" style="width:100%; height:550px"></iframe></div><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><div class="row"><iframe src="https://drive.google.com/file/d/1i-Bww3jJlxzrXSRKQtuEwv00SX0zfOsu/preview" style="width:100%; height:550px"></iframe></div><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><div class="row"><iframe src="https://drive.google.com/file/d/1Qz6qLOdS_FqzW1R3EfVwRAdysfF4IfuZ/preview" style="width:100%; height:550px"></iframe></div><h2 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h2><div class="row"><iframe src="https://drive.google.com/file/d/1jRrgEsx2XkIo9wEXdM-WaHe3APzSKEDj/preview" style="width:100%; height:550px"></iframe></div><h2 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h2><div class="row"><iframe src="https://drive.google.com/file/d/1cw6wr2XMo3HUDybu4SbzTd7dJxNq8Fd6/preview" style="width:100%; height:550px"></iframe></div><h2 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h2><div class="row"><iframe src="https://drive.google.com/file/d/1RLOwPGNd9T1KuMkKKqLFT9iek3-8jiDb/preview" style="width:100%; height:550px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;存档一下以前的知识，也许以后会进一步学习。&lt;/p&gt;
&lt;h2 id=&quot;行列式&quot;&gt;&lt;a href=&quot;#行列式&quot; class=&quot;headerlink&quot; title=&quot;行列式&quot;&gt;&lt;/a&gt;行列式&lt;/h2&gt;

	&lt;div class=&quot;row&quot;&gt;
		&lt;iframe src=&quot;http</summary>
      
    
    
    
    <category term="数学" scheme="https://loveofpeach.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="线性代数" scheme="https://loveofpeach.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
</feed>
